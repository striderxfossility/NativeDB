
enum moveMovementType {
  Walk = 0,
  Run = 1,
  Sprint = 2,
}

enum gameEActionStatus {
  STATUS_INVALID = 0,
  STATUS_BOUND = 1,
  STATUS_READY = 2,
  STATUS_PROGRESS = 3,
  STATUS_COMPLETE = 4,
  STATUS_FAILURE = 5,
}

enum AIEExecutionOutcome {
  OUTCOME_FAILURE = 0,
  OUTCOME_SUCCESS = 1,
  OUTCOME_IN_PROGRESS = 2,
}

enum AIEInterruptionOutcome {
  INTERRUPTION_SUCCESS = 0,
  INTERRUPTION_DELAYED = 1,
  INTERRUPTION_FAILED = 2,
}

enum EAIActionPhase {
  Inactive = 0,
  Startup = 1,
  Loop = 2,
  Recovery = 3,
}

enum ETweakAINodeType {
  Action = 0,
  Selector = 1,
  Sequence = 2,
}

enum AICommandState {
  NotExecuting = 0,
  Enqueued = 1,
  Executing = 2,
  Cancelled = 3,
  Interrupted = 4,
  Success = 5,
  Failure = 6,
}

enum ECompanionDistancePreset {
  Medium = 0,
  Close = 1,
  Far = 2,
  VeryFar = 3,
}

enum ECompanionPositionPreset {
  Behind = 0,
  InFront = 1,
}

enum gameSceneAnimationMotionActionParamsPlacementMode {
  Blend = 0,
  TeleportToStart = 1,
  PlayAtActorPosition = 2,
}

enum AIbehaviorConditionOutcomes {
  True = 0,
  False = 1,
  Failure = 2,
}

enum AIbehaviorUpdateOutcome {
  IN_PROGRESS = 0,
  SUCCESS = 1,
  FAILURE = 2,
}

enum AIbehaviorCompletionStatus {
  FAILURE = 0,
  SUCCESS = 1,
}

enum AIArgumentType {
  Bool = 0,
  Int = 1,
  Uint64 = 2,
  Enum = 3,
  Float = 4,
  CName = 5,
  Vector = 6,
  Object = 7,
  TreeRef = 8,
  NodeRef = 9,
  GlobalNodeId = 10,
  PuppetRef = 11,
  Serializable = 12,
}

enum AIParameterizationType {
  BehaviorArgument = 0,
  CustomValue = 1,
  CharacterRecord = 2,
  TweakDB = 3,
  ActionRecord = 4,
  Blackboard = 5,
}

enum EAIAttitude {
  AIA_Friendly = 0,
  AIA_Neutral = 1,
  AIA_Hostile = 2,
}

enum AICombatSpaceSize {
  Undefined = 0,
  Narrow = 1,
  Medium = 2,
  Huge = 3,
}

enum ECallbackExpressionActions {
  SetTrue = 0,
  SetFalse = 1,
  Toggle = 2,
}

enum gameLoSMode {
  Invalid = 0,
  Keep = 1,
  Avoid = 2,
}

enum entragdollActivationRequestType {
  Default = 0,
  Animated = 1,
  Forced = 2,
}

enum animAimState {
  Unaimed = 0,
  Aimed = 1,
}

enum animStanceState {
  Stand = 0,
  Crouch = 1,
  Kneel = 2,
  Cover = 3,
  Swim = 4,
  Crawl = 5,
}

enum animHitReactionType {
  Undefined = 0,
  Twitch = 1,
  Impact = 2,
  Stagger = 3,
  Pain = 4,
  Knockdown = 5,
  Ragdoll = 6,
  Death = 7,
  Block = 8,
  GuardBreak = 9,
  Parry = 10,
  Bump = 11,
}

enum animCoverState {
  LowCover = 0,
  HighCover = 1,
}

enum animCoverAction {
  NoAction = 0,
  LeanLeft = 1,
  LeanRight = 2,
  StepOutLeft = 3,
  StepOutRight = 4,
  LeanOver = 5,
  StepUp = 6,
  EnterCover = 7,
  SlideTo = 8,
  Vault = 9,
  LeaveCover = 10,
  BlindfireLeft = 11,
  BlindfireRight = 12,
  BlindfireOver = 13,
  OverheadStepOutLeft = 14,
  OverheadStepOutRight = 15,
  OverheadStepUp = 16,
}

enum animNPCVehicleDeathType {
  Default = 0,
  Relaxed = 1,
  Combat = 2,
  Ragdoll = 3,
}

enum animWeaponOwnerType {
  Player = 0,
  NPC = 1,
  Undefined = 2,
}

enum gameScriptedBlackboardStorage {
  Default = 0,
}

enum gameFearStage {
  Relaxed = 0,
  Stressed = 1,
  Alarmed = 2,
  Panic = 3,
}

enum gameDismBodyPart {
  LEFT_ARM = 0,
  RIGHT_ARM = 1,
  LEFT_LEG = 2,
  RIGHT_LEG = 3,
  HEAD = 4,
  BODY = 5,
}

enum gameDismWoundType {
  CLEAN = 0,
  COARSE = 1,
  HOLE = 2,
}

enum entAudioDismembermentPart {
  Head = 0,
  Leg = 1,
  Arm = 2,
}

enum EAIHitIntensity {
  Undefined = -1,
  Light = 0,
  Medium = 1,
  Heavy = 2,
  Explosion = 3,
}

enum EAIHitSource {
  Undefined = -1,
  Ranged = 0,
  MeleeSharp = 1,
  MeleeBlunt = 2,
  QuickMelee = 3,
}

enum EAILastHitReactionPlayed {
  Undefined = -1,
  Twitch = 0,
  Impact = 1,
  Stagger = 2,
  Knockdown = 3,
}

enum EAIHitDirection {
  Undefined = -1,
  Left = 0,
  Back = 1,
  Right = 2,
  Front = 3,
}

enum EAIHitBodyPart {
  Undefined = -1,
  Head = 1,
  LeftTorso = 2,
  RightTorso = 3,
  Belly = 4,
  LeftLeg = 5,
  RightLeg = 6,
}

enum EAIDismembermentBodyPart {
  NONE = -1,
  LEFT_ARM = 0,
  RIGHT_ARM = 1,
  LEFT_LEG = 2,
  RIGHT_LEG = 3,
  HEAD = 4,
  BODY = 5,
}

enum ReactionZones_Humanoid_Side {
  Head = 0,
  ChestLeft = 1,
  ArmLeft = 2,
  HandLeft = 3,
  ChestRight = 4,
  ArmRight = 5,
  HandRight = 6,
  Abdomen = 7,
  LegLeft = 8,
  LegRight = 9,
}

enum HitShape_Type {
  Normal = 0,
  InternalWeakSpot = 1,
  ExternalWeakSpot = 2,
  ProtectionLayer = 3,
}

enum EHitReactionZone {
  Head = 0,
  ChestLeft = 1,
  ArmLeft = 2,
  HandLeft = 3,
  ChestRight = 4,
  ArmRight = 5,
  HandRight = 6,
  Abdomen = 7,
  LegLeft = 8,
  LegRight = 9,
  Special = 10,
}

enum EHitShapeType {
  Undefined = -1,
  Flesh = 0,
  Metal = 1,
  Cyberware = 2,
  Armor = 3,
}

enum gameinfluenceCollisionTestOutcome {
  NoCell = 0,
  Empty = 1,
  Full = 2,
}

enum gameinfluenceTestLineResult {
  Fail = 0,
  Success = 1,
  Unknown = 2,
}

enum gameSharedInventoryTag {
  Undefined = 0,
  PlayerStash = 1,
}

enum gameinteractionsELootChoiceType {
  Available = 0,
  Unavailable = 1,
  Invisible = 2,
}

enum gameinteractionsELootVisualiserControlOperation {
  Locked = 0,
}

enum moveCirclingDirection {
  Undefined = 0,
  Left = 1,
  Right = 2,
}

enum moveLineOfSight {
  Undefined = 0,
  Keep = 1,
  Avoid = 2,
}

enum worldOffMeshConnectionType {
  Door = 0,
  Ladder = 1,
  Floor = 2,
  Jump = 3,
  Elevator = 4,
}

enum moveExplorationType {
  Undefined = 0,
  Ladder = 1,
  Jump = 2,
  Climb = 3,
  Vault = 4,
  ChargedJump = 5,
  ThrusterJump = 6,
}

enum gameprojectileOnCollisionAction {
  Undefined = 0,
  Stop = 1,
  Bounce = 2,
  StopAndStick = 3,
  StopAndStickPerpendicular = 4,
  Pierce = 5,
}

enum EFocusClueInvestigationState {
  NONE = 0,
  INSPECTED = 1,
  NOT_INSPECTED = 2,
}

enum EConclusionQuestState {
  Undefined = 0,
  Active = 1,
  Inactive = 2,
  Shown = 3,
}

enum AIinfluenceEBumpPolicy {
  Static = 0,
  Lean = 1,
  Move = 2,
}

enum MechanicalScanType {
  Undefined = 0,
  Short = 1,
  Long = 2,
  Danger = 3,
}

enum DronePose {
  Relaxed = 0,
  Combat = 1,
}

enum EProgressBarType {
  UPLOAD = 0,
  DURATION = 1,
}

enum EProgressBarContext {
  QuickHack = 0,
  PhoneCall = 1,
}

enum EMappinDisplayMode {
  PLAYSTYLE = 0,
  ROLE = 1,
  MINIMALISTIC = 2,
}

enum EUploadProgramState {
  STARTED = 0,
  COMPLETED = 1,
}

enum EAxisType {
  X = 0,
  Y = 1,
  Z = 2,
}

enum EMappinVisualState {
  Default = 0,
  Available = 1,
  Unavailable = 2,
  Inactive = 3,
}

enum EGameplayRole {
  UnAssigned = 0,
  Undefined = 1,
  Alarm = 2,
  ControlNetwork = 3,
  ControlOtherDevice = 4,
  ControlSelf = 5,
  CutPower = 6,
  Distract = 7,
  DropPoint = 8,
  ExplodeLethal = 9,
  ExplodeNoneLethal = 10,
  Fall = 11,
  FastTravel = 12,
  GrantInformation = 13,
  HazardWarning = 14,
  HideBody = 15,
  Loot = 16,
  OpenPath = 17,
  ClearPath = 18,
  Push = 19,
  ServicePoint = 20,
  Shoot = 21,
  SpreadGas = 22,
  StoreItems = 23,
  GenericRole = 24,
  ClearPathAd = 25,
  DistractVendingMachine = 26,
  NPC = 27,
  Clue = 28,
}

enum questObjectInspectEventType {
  Undefined = 0,
  Started = 1,
  Finished = 2,
}

enum EMovementDirection {
  left = 0,
  right = 1,
  up = 2,
  down = 3,
  front = 4,
  back = 5,
}

enum EVehicleDoor {
  seat_front_left = 0,
  seat_front_right = 1,
  seat_back_left = 2,
  seat_back_right = 3,
  trunk = 4,
  hood = 5,
  count = 6,
  invalid = 7,
}

enum VehicleDoorState {
  Closed = 0,
  Open = 1,
  Detached = 2,
}

enum EVehicleWindowState {
  Closed = 0,
  Open = 1,
}

enum VehicleDoorInteractionState {
  Available = 0,
  Locked = 1,
  Disabled = 2,
  QuestLocked = 3,
  Reserved = 4,
}

enum EQuestVehicleDoorState {
  ForceOpen = 0,
  ForceClose = 1,
  OpenAll = 2,
  CloseAll = 3,
  ForceLock = 4,
  ForceUnlock = 5,
  LockAll = 6,
  EnableInteraction = 7,
  DisableInteraction = 8,
  DisableAllInteractions = 9,
  ResetInteractions = 10,
  ResetVehicle = 11,
  OpenAllRegular = 12,
  QuestLock = 13,
  QuestLockAll = 14,
  Count = 15,
  Invalid = 16,
}

enum EQuestVehicleWindowState {
  ForceOpen = 0,
  ForceClose = 1,
  OpenAll = 2,
  CloseAll = 3,
}

enum vehicleQuestUIEnable {
  Gameplay = 0,
  ForceEnable = 1,
  ForceDisable = 2,
}

enum vehicleRaceUI {
  PreRaceSetup = 0,
  CountdownStart = 1,
  RaceStart = 2,
  RaceEnd = 3,
  Disable = 4,
}

enum vehicleQuestWindowDestruction {
  window_f = 0,
  window_fl = 1,
  window_fr = 2,
  window_bl = 3,
  window_br = 4,
  window_b = 5,
}

enum panzerBootupUI {
  UnbootedIdle = 0,
  BootingAttempt = 1,
  BootingSuccess = 2,
  Loop = 3,
}

enum TweakWeaponPose {
  Nothing = 0,
  Position = 1,
  Rotation = 2,
}

enum AdditionalTraceType {
  Knee = 0,
  Hip = 1,
  Chest = 2,
}

enum senseEShapeType {
  INVALID = 0,
  BOX = 1,
  SPHERE = 2,
  CONE = 3,
  ANGLE_RANGE = 4,
}

enum AICombatSectorType {
  ToBackLeft = 0,
  ToBackMid = 1,
  ToBackRight = 2,
  ToLeft = 3,
  ToMid = 4,
  ToRight = 5,
  FromLeft = 6,
  FromMid = 7,
  FromRight = 8,
  FromBackLeft = 9,
  FromBackMid = 10,
  FromBackRight = 11,
  BeyondToLeft = 12,
  BeyondToRight = 13,
  BeyondFromLeft = 14,
  BeyondFromRight = 15,
  Unknown = 16,
}

enum AISquadType {
  Community = 0,
  Combat = 1,
  Unknown = 2,
}

enum AITrackedStatusType {
  Unknown = 0,
  Friendly = 1,
  Neutral = 2,
  Hostile = 3,
}

enum AIThreatPersistenceStatus {
  ThreatNotFound = 0,
  Persistent = 1,
  NotPersistent = 2,
}

enum PersistenceSource {
  AddThreat = 0,
  SetNewCombatTarget = 1,
  CommandAimWithWeapon = 2,
  CommandForceShoot = 3,
  CommandInjectCombatTarget = 4,
  CommandMeleeAttack = 5,
  CommandShoot = 6,
  CommandThrowGrenade = 7,
  CommandInjectThreat = 8,
  TrackedBySecuritySystemAgent = 9,
}

enum EJuryrigTrapState {
  UNARMED = 0,
  ARMED = 1,
  TRIGGERED = 2,
}

enum vehicleEState {
  Default = 0,
  On = 1,
  Disabled = 2,
  Destroyed = 3,
}

enum vehicleELightMode {
  Off = 0,
  On = 1,
  HighBeams = 2,
}

enum vehicleELightType {
  Head = 0,
  Brake = 1,
  LeftBlinker = 2,
  RightBlinker = 3,
  Reverse = 4,
  Interior = 5,
  Utility = 6,
  Default = 7,
  Blinkers = 8,
}

enum EToggleOperationType {
  ADD = 0,
  REMOVE = 1,
}

enum EPriority {
  VeryLow = 0,
  Low = 1,
  Medium = 2,
  High = 3,
  VeryHigh = 4,
  Absolute = 5,
}

enum EFocusForcedHighlightType {
  INTERACTION = 0,
  IMPORTANT_INTERACTION = 1,
  QUEST = 2,
  DISTRACTION = 3,
  CLUE = 4,
  NPC = 5,
  WEAKSPOT = 6,
  AOE = 7,
  ITEM = 8,
  HOSTILE = 9,
  FRIENDLY = 10,
  NEUTRAL = 11,
  HACKABLE = 12,
  ENEMY_NETRUNNER = 13,
  BACKDOOR = 14,
  INVALID = 15,
}

enum EFocusOutlineType {
  HOSTILE = 0,
  FRIENDLY = 1,
  NEUTRAL = 2,
  ITEM = 3,
  INTERACTION = 4,
  IMPORTANT_INTERACTION = 5,
  QUEST = 6,
  CLUE = 7,
  DISTRACTION = 8,
  AOE = 9,
  HACKABLE = 10,
  WEAKSPOT = 11,
  ENEMY_NETRUNNER = 12,
  BACKDOOR = 13,
  INVALID = 14,
}

enum ERevealState {
  STARTED = 0,
  CONTINUE = 1,
  STOPPED = 2,
}

enum ERevealDurationType {
  TEMPORARY = 0,
  PERMANENT = 1,
}

enum entVisibilityParamSource {
  PhantomEntitySystem = 0,
}

enum gameEPrerequisiteType {
  Undefined = 0,
  NestedPrereq = 1,
  StatValue = 2,
  HealthAbsolute = 3,
  HealthPercent = 4,
  ItemInInventory = 5,
  ItemEquipped = 6,
  ItemCount = 7,
  QuestAchieved = 8,
  WasScanned = 9,
  Count = 10,
}

enum ERenderingPlane {
  RPl_Scene = 0,
  RPl_Background = 1,
  RPl_Weapon = 2,
}

enum EquipmentManipulationRequestType {
  Undefined = 0,
  Equip = 1,
  Unequip = 2,
}

enum EquipmentManipulationRequestSlot {
  Undefined = 0,
  Right = 1,
  Left = 2,
  Both = 3,
}

enum gameEStatFlags {
  Bool = 0,
  EquipOnPlayer = 1,
  EquipOnNPC = 2,
  ExcludeRootCombination = 3,
}

enum gameStatModifierType {
  Additive = 0,
  AdditiveMultiplier = 1,
  Multiplier = 2,
  Count = 3,
  Invalid = 4,
}

enum gameStatObjectsRelation {
  Self = 0,
  Owner = 1,
  Root = 2,
  Parent = 3,
  Target = 4,
  Player = 5,
  Instigator = 6,
  Count = 7,
  Invalid = 8,
}

enum gameGodModeType {
  Invulnerable = 0,
  Immortal = 1,
}

enum gameCombinedStatOperation {
  Addition = 0,
  Subtraction = 1,
  Multiplication = 2,
  Division = 3,
  Modulo = 4,
  Count = 5,
  Invalid = 6,
}

enum ESpaceFillMode {
  JustifyLeft = 0,
  JustifyRight = 1,
  JustifyCenter = 2,
}

enum gamedataAttackType {
  ChargedWhipAttack = 0,
  Direct = 1,
  Effect = 2,
  Explosion = 3,
  GuardBreak = 4,
  Hack = 5,
  Melee = 6,
  PressureWave = 7,
  QuickMelee = 8,
  Ranged = 9,
  Reflect = 10,
  StrongMelee = 11,
  Thrown = 12,
  WhipAttack = 13,
  Count = 14,
  Invalid = 15,
}

enum gamedataDamageType {
  Chemical = 0,
  Electric = 1,
  Physical = 2,
  Thermal = 3,
  Count = 4,
  Invalid = 5,
}

enum gamedataItemCategory {
  Clothing = 0,
  Consumable = 1,
  Cyberware = 2,
  Gadget = 3,
  General = 4,
  Part = 5,
  Weapon = 6,
  Count = 7,
  Invalid = 8,
}

enum gamedataItemType {
  Clo_Face = 0,
  Clo_Feet = 1,
  Clo_Head = 2,
  Clo_InnerChest = 3,
  Clo_Legs = 4,
  Clo_OuterChest = 5,
  Clo_Outfit = 6,
  Con_Ammo = 7,
  Con_Edible = 8,
  Con_Inhaler = 9,
  Con_Injector = 10,
  Con_LongLasting = 11,
  Con_Skillbook = 12,
  Cyb_Ability = 13,
  Cyb_Launcher = 14,
  Cyb_MantisBlades = 15,
  Cyb_NanoWires = 16,
  Cyb_StrongArms = 17,
  Fla_Launcher = 18,
  Fla_Rifle = 19,
  Fla_Shock = 20,
  Fla_Support = 21,
  Gad_Grenade = 22,
  Gen_CraftingMaterial = 23,
  Gen_DataBank = 24,
  Gen_Junk = 25,
  Gen_Keycard = 26,
  Gen_Misc = 27,
  Gen_Readable = 28,
  GrenadeDelivery = 29,
  Grenade_Core = 30,
  Prt_Capacitor = 31,
  Prt_FabricEnhancer = 32,
  Prt_Fragment = 33,
  Prt_Magazine = 34,
  Prt_Mod = 35,
  Prt_Muzzle = 36,
  Prt_Program = 37,
  Prt_Receiver = 38,
  Prt_Scope = 39,
  Prt_ScopeRail = 40,
  Prt_Stock = 41,
  Prt_TargetingSystem = 42,
  Wea_AssaultRifle = 43,
  Wea_Fists = 44,
  Wea_Hammer = 45,
  Wea_Handgun = 46,
  Wea_HeavyMachineGun = 47,
  Wea_Katana = 48,
  Wea_Knife = 49,
  Wea_LightMachineGun = 50,
  Wea_LongBlade = 51,
  Wea_Melee = 52,
  Wea_OneHandedClub = 53,
  Wea_PrecisionRifle = 54,
  Wea_Revolver = 55,
  Wea_Rifle = 56,
  Wea_ShortBlade = 57,
  Wea_Shotgun = 58,
  Wea_ShotgunDual = 59,
  Wea_SniperRifle = 60,
  Wea_SubmachineGun = 61,
  Wea_TwoHandedClub = 62,
  Count = 63,
  Invalid = 64,
}

enum gamedataMappinVariant {
  ActionDealDamageVariant = 0,
  ActionFastSoloVariant = 1,
  ActionGenericInteractionVariant = 2,
  ActionNetrunnerAccessPointVariant = 3,
  ActionNetrunnerVariant = 4,
  ActionScanVariant = 5,
  ActionSoloVariant = 6,
  ActionTechieVariant = 7,
  AimVariant = 8,
  AllowVariant = 9,
  ApartmentVariant = 10,
  ArrowVariant = 11,
  BackOutVariant = 12,
  BountyHuntVariant = 13,
  CallVariant = 14,
  ChangeToFriendlyVariant = 15,
  ClientInDistressVariant = 16,
  ConversationVariant = 17,
  ConvoyVariant = 18,
  CoolVariant = 19,
  CourierVariant = 20,
  CustomPositionVariant = 21,
  CyberspaceNPC = 22,
  CyberspaceObject = 23,
  DefaultInteractionVariant = 24,
  DefaultQuestVariant = 25,
  DefaultVariant = 26,
  DistractVariant = 27,
  DropboxVariant = 28,
  DynamicEventVariant = 29,
  EffectAlarmVariant = 30,
  EffectControlNetworkVariant = 31,
  EffectControlOtherDeviceVariant = 32,
  EffectControlSelfVariant = 33,
  EffectCutPowerVariant = 34,
  EffectDistractVariant = 35,
  EffectDropPointVariant = 36,
  EffectExplodeLethalVariant = 37,
  EffectExplodeNonLethalVariant = 38,
  EffectFallVariant = 39,
  EffectGrantInformationVariant = 40,
  EffectHideBodyVariant = 41,
  EffectLootVariant = 42,
  EffectOpenPathVariant = 43,
  EffectPushVariant = 44,
  EffectServicePointVariant = 45,
  EffectShootVariant = 46,
  EffectSpreadGasVariant = 47,
  EffectStoreItemsVariant = 48,
  ExclamationMarkVariant = 49,
  FailedCrossingVariant = 50,
  FastTravelVariant = 51,
  FixerVariant = 52,
  FocusClueVariant = 53,
  GPSForcedPathVariant = 54,
  GPSPortalVariant = 55,
  GangWatchVariant = 56,
  GenericRoleVariant = 57,
  GetInVariant = 58,
  GetUpVariant = 59,
  GrenadeVariant = 60,
  GunSuicideVariant = 61,
  HandVariant = 62,
  HazardWarningVariant = 63,
  HiddenStashVariant = 64,
  HitVariant = 65,
  HuntForPsychoVariant = 66,
  ImportantInteractionVariant = 67,
  InvalidVariant = 68,
  JackInVariant = 69,
  JamWeaponVariant = 70,
  LifepathCorpoVariant = 71,
  LifepathNomadVariant = 72,
  LifepathStreetKidVariant = 73,
  LootVariant = 74,
  MinorActivityVariant = 75,
  NPCVariant = 76,
  NetrunnerAccessPointVariant = 77,
  NetrunnerSoloTechieVariant = 78,
  NetrunnerSoloVariant = 79,
  NetrunnerTechieVariant = 80,
  NetrunnerVariant = 81,
  NonLethalTakedownVariant = 82,
  OffVariant = 83,
  OpenVendorVariant = 84,
  OutpostVariant = 85,
  PhoneCallVariant = 86,
  QuestGiverVariant = 87,
  QuestionMarkVariant = 88,
  QuickHackVariant = 89,
  ReflexesVariant = 90,
  ResourceVariant = 91,
  RetrievingVariant = 92,
  SOSsignalVariant = 93,
  SabotageVariant = 94,
  ServicePointBarVariant = 95,
  ServicePointClothesVariant = 96,
  ServicePointCyberwareVariant = 97,
  ServicePointDropPointVariant = 98,
  ServicePointFoodVariant = 99,
  ServicePointGunsVariant = 100,
  ServicePointJunkVariant = 101,
  ServicePointMedsVariant = 102,
  ServicePointMeleeTrainerVariant = 103,
  ServicePointNetTrainerVariant = 104,
  ServicePointProstituteVariant = 105,
  ServicePointRipperdocVariant = 106,
  ServicePointTechVariant = 107,
  SitVariant = 108,
  SmugglersDenVariant = 109,
  SoloTechieVariant = 110,
  SoloVariant = 111,
  SpeechVariant = 112,
  TakeControlVariant = 113,
  TakeDownVariant = 114,
  TarotVariant = 115,
  TechieVariant = 116,
  ThieveryVariant = 117,
  UseVariant = 118,
  VehicleVariant = 119,
  WanderingMerchantVariant = 120,
  Zzz01_CarForPurchaseVariant = 121,
  Zzz02_MotorcycleForPurchaseVariant = 122,
  Zzz03_MotorcycleVariant = 123,
  CPO_PingDoorVariant = 124,
  CPO_PingGoHereVariant = 125,
  CPO_PingLootVariant = 126,
  CPO_RemotePlayerVariant = 127,
  Count = 128,
  Invalid = 129,
}

enum gamedataMappinPhase {
  CompletedPhase = 0,
  DefaultPhase = 1,
  DiscoveredPhase = 2,
  UndiscoveredPhase = 3,
  Count = 4,
  Invalid = 5,
}

enum gamedataMovementType {
  Run = 0,
  Sprint = 1,
  Strafe = 2,
  Walk = 3,
  Count = 4,
  Invalid = 5,
}

enum gamedataParentAttachmentType {
  Animated = 0,
  Skinned = 1,
  Slot = 2,
  Count = 3,
  Invalid = 4,
}

enum gamedataQuality {
  Common = 0,
  Epic = 1,
  Iconic = 2,
  Legendary = 3,
  Random = 4,
  Rare = 5,
  Uncommon = 6,
  Count = 7,
  Invalid = 8,
}

enum gamedataStatType {
  Acceleration = 0,
  Accuracy = 1,
  Adrenaline = 2,
  AimFOV = 3,
  AimInTime = 4,
  AimOffset = 5,
  AimOutTime = 6,
  AllowMovementInput = 7,
  AllowRotation = 8,
  Armor = 9,
  Assault = 10,
  AssaultMastery = 11,
  AssaultTrait01Stat = 12,
  Athletics = 13,
  AthleticsMastery = 14,
  AthleticsTrait01Stat = 15,
  AttackPenetration = 16,
  AttackSpeed = 17,
  AttackSpeedPercent = 18,
  AttacksNumber = 19,
  AttacksPerSecond = 20,
  AttacksPerSecondBase = 21,
  AudioLocomotionStimRangeMultiplier = 22,
  AudioStimRangeMultiplier = 23,
  AutoReveal = 24,
  AutocraftDuration = 25,
  AutomaticReplenishment = 26,
  AutomaticUploadPerk = 27,
  BaseChargeTime = 28,
  BaseDamage = 29,
  BaseDamageMax = 30,
  BaseDamageMin = 31,
  BerserkArmorBonus = 32,
  BerserkCooldownBase = 33,
  BerserkCooldownReduction = 34,
  BerserkDurationBase = 35,
  BerserkHealthRegenBonus = 36,
  BerserkMeleeDamageBonus = 37,
  BerserkRecoilReduction = 38,
  BerserkResistancesBonus = 39,
  BerserkShockwaveDamage = 40,
  BerserkShockwaveRangeBonus = 41,
  BerserkSwayReduction = 42,
  BleedingApplicationRate = 43,
  BleedingImmunity = 44,
  BlindImmunity = 45,
  BlindResistance = 46,
  BlockFactor = 47,
  BlockLocomotionWhenLeaningOutOfCover = 48,
  BlockReduction = 49,
  BonusChargeDamage = 50,
  BonusDPS = 51,
  BonusDamageAgainstElites = 52,
  BonusDamageAgainstMechanicals = 53,
  BonusDamageAgainstRares = 54,
  BonusQuickHackDamage = 55,
  BonusRicochetDamage = 56,
  Brake = 57,
  BrakeDot = 58,
  Brawling = 59,
  BrawlingMastery = 60,
  BrawlingTrait01Stat = 61,
  BufferSize = 62,
  BulletMagnetismDefaultAngle = 63,
  BulletMagnetismHighVelocityAngle = 64,
  BulletPseudoPierceHitVFxChance = 65,
  BulletSurroundingHitVFxChance = 66,
  BurningApplicationRate = 67,
  BurningImmunity = 68,
  BurningRegenStamina = 69,
  CPUPower = 70,
  CallReinforcement = 71,
  CameraShutdownExtension = 72,
  CanAerialTakedown = 73,
  CanAimWhileDodging = 74,
  CanAskToFollowOrder = 75,
  CanAskToHolsterWeapon = 76,
  CanAutomaticallyDisassembleJunk = 77,
  CanAutomaticallyRestoreKnives = 78,
  CanBleedingCriticallyHit = 79,
  CanBleedingSlowTarget = 80,
  CanBlindQuickHack = 81,
  CanBlock = 82,
  CanBreatheUnderwater = 83,
  CanBuffCamoQuickHack = 84,
  CanBuffMechanicalsOnTakeControl = 85,
  CanBuffSturdinessQuickHack = 86,
  CanBurningCriticallyHit = 87,
  CanCallDrones = 88,
  CanCallReinforcements = 89,
  CanCatchUp = 90,
  CanCatchUpDistance = 91,
  CanCharge = 92,
  CanChargedShoot = 93,
  CanCloseCombat = 94,
  CanCommsCallInQuickHack = 95,
  CanCommsCallOutQuickHack = 96,
  CanCommsNoiseQuickHack = 97,
  CanControlFullyChargedWeapon = 98,
  CanCraftEpicItems = 99,
  CanCraftFromInventory = 100,
  CanCraftLegendaryItems = 101,
  CanCraftRareItems = 102,
  CanCraftTechAmmunition = 103,
  CanCrouch = 104,
  CanCyberwareMalfunctionQuickHack = 105,
  CanDash = 106,
  CanDataMineQuickHack = 107,
  CanDealFullDamageToArmored = 108,
  CanDeathQuickHack = 109,
  CanDisassemble = 110,
  CanDisassembleConsumables = 111,
  CanDisassembleGadgets = 112,
  CanDropWeapon = 113,
  CanElectrocuteNullifyStats = 114,
  CanElectrocuteRoot = 115,
  CanExitWSOnSoundStimuli = 116,
  CanExplodeQuickHack = 117,
  CanFastTravelWhileEncumbered = 118,
  CanFullyChargeWeapon = 119,
  CanGrab = 120,
  CanGrappleAndroids = 121,
  CanGrappleSilently = 122,
  CanGrenadeLaunch = 123,
  CanGrenadeQuickHack = 124,
  CanGrenadesCriticallyHit = 125,
  CanGrenadesDealExternalDamage = 126,
  CanGuardBreak = 127,
  CanHeartattackQuickHack = 128,
  CanIgnoreArmorDamageReduction = 129,
  CanIgnoreStamina = 130,
  CanInstallTechMods = 131,
  CanJamWeaponQuickHack = 132,
  CanJump = 133,
  CanLandSilently = 134,
  CanLegendaryCraftedWeaponsBeBoosted = 135,
  CanLocomotionMalfunctionQuickHack = 136,
  CanMadnessQuickHack = 137,
  CanMalfunctionQuickHack = 138,
  CanMeleeBerserk = 139,
  CanMeleeDash = 140,
  CanMeleeInfinitelyCombo = 141,
  CanMeleeLeap = 142,
  CanMeleeLeapTakedown = 143,
  CanOverchargeWeapon = 144,
  CanOverheatQuickHack = 145,
  CanOverloadQuickHack = 146,
  CanOverrideAttitudeQuickHack = 147,
  CanOverrideAuthorizationQuickHack = 148,
  CanParry = 149,
  CanPickUpBodyAfterTakedown = 150,
  CanPickUpWeapon = 151,
  CanPingQuickHack = 152,
  CanPlayerBoostConsumables = 153,
  CanPlayerBoostGrenades = 154,
  CanPoisonLowerArmor = 155,
  CanPoisonSlow = 156,
  CanPreciseShoot = 157,
  CanPushBack = 158,
  CanPushFromGrapple = 159,
  CanQuickHackCriticallyHit = 160,
  CanQuickMeleeStagger = 161,
  CanQuickhack = 162,
  CanQuickhackHealPuppet = 163,
  CanQuickhackTransferBetweenEnemies = 164,
  CanRegenInCombat = 165,
  CanRemoveModsFromClothing = 166,
  CanRemoveModsFromWeapons = 167,
  CanResurrectAllies = 168,
  CanRetrieveModsFromDisassemble = 169,
  CanRunSilently = 170,
  CanSandevistanSprintHarass = 171,
  CanScrapPartsFromMechanicals = 172,
  CanSeeGrenadeRadius = 173,
  CanSeeRicochetVisuals = 174,
  CanSeeThroughWalls = 175,
  CanShareThreatsWithPlayer = 176,
  CanShootWhileCarryingBody = 177,
  CanShootWhileDodging = 178,
  CanShootWhileGrappling = 179,
  CanShootWhileMoving = 180,
  CanShootWhileVaulting = 181,
  CanSilentKill = 182,
  CanSmartShoot = 183,
  CanSprint = 184,
  CanSprintHarass = 185,
  CanSprintWhileCarryingBody = 186,
  CanSuicideQuickHack = 187,
  CanSwitchWeapon = 188,
  CanTakeControlQuickHack = 189,
  CanTakedownLethally = 190,
  CanTakedownSilently = 191,
  CanTaunt = 192,
  CanThrowWeapon = 193,
  CanUpgradeFromInventory = 194,
  CanUpgradeToLegendaryQuality = 195,
  CanUseAntiStun = 196,
  CanUseBiohazardGrenades = 197,
  CanUseCloseRing = 198,
  CanUseCombatStims = 199,
  CanUseConsumables = 200,
  CanUseCoolingSystem = 201,
  CanUseCovers = 202,
  CanUseCuttingGrenades = 203,
  CanUseEMPGrenades = 204,
  CanUseExtremeRing = 205,
  CanUseFarRing = 206,
  CanUseFlashbangGrenades = 207,
  CanUseFragGrenades = 208,
  CanUseGrenades = 209,
  CanUseHolographicCamo = 210,
  CanUseIncendiaryGrenades = 211,
  CanUseLeftHand = 212,
  CanUseLegs = 213,
  CanUseMantisBlades = 214,
  CanUseMediumRing = 215,
  CanUseMeleeRing = 216,
  CanUseOpticalCamo = 217,
  CanUsePainInhibitors = 218,
  CanUsePersonalSoundSilencer = 219,
  CanUseProjectileLauncher = 220,
  CanUseReconGrenades = 221,
  CanUseRetractableShield = 222,
  CanUseRightHand = 223,
  CanUseShootingSpots = 224,
  CanUseStaticCamo = 225,
  CanUseStrongArms = 226,
  CanUseTakedowns = 227,
  CanUseTerrainCamo = 228,
  CanUseZoom = 229,
  CanWalkSilently = 230,
  CanWallStick = 231,
  CanWeaponBlock = 232,
  CanWeaponBlockAttack = 233,
  CanWeaponComboAttack = 234,
  CanWeaponCriticallyHit = 235,
  CanWeaponCrouchAttack = 236,
  CanWeaponDash = 237,
  CanWeaponDeflect = 238,
  CanWeaponIgnoreArmor = 239,
  CanWeaponInfinitlyCombo = 240,
  CanWeaponJumpAttack = 241,
  CanWeaponLeap = 242,
  CanWeaponMalfunctionQuickHack = 243,
  CanWeaponReload = 244,
  CanWeaponReloadWhileInactive = 245,
  CanWeaponReloadWhileSliding = 246,
  CanWeaponReloadWhileSprinting = 247,
  CanWeaponReloadWhileVaulting = 248,
  CanWeaponSafeAttack = 249,
  CanWeaponShoot = 250,
  CanWeaponShootWhileSliding = 251,
  CanWeaponShootWhileSprinting = 252,
  CanWeaponShootWhileVaulting = 253,
  CanWeaponSnapToLimbs = 254,
  CanWeaponSprintAttack = 255,
  CanWeaponStrongAttack = 256,
  CanWeaponTriggerHeadshot = 257,
  CannotBeDetectedWhileSubmerged = 258,
  CannotBeHealed = 259,
  CannotSprintHarass = 260,
  CarryCapacity = 261,
  CausingPanicReducesUltimateHacksCost = 262,
  Charge = 263,
  ChargeDischargeTime = 264,
  ChargeFullMultiplier = 265,
  ChargeMaxTimeInChargedState = 266,
  ChargeMultiplier = 267,
  ChargeReadyPercentage = 268,
  ChargeShouldFireWhenReady = 269,
  ChargeTime = 270,
  ChemicalDamage = 271,
  ChemicalDamageMax = 272,
  ChemicalDamageMin = 273,
  ChemicalDamagePercent = 274,
  ChemicalResistance = 275,
  ClimbSpeedModifier = 276,
  ClipTimesCycle = 277,
  ClipTimesCycleBase = 278,
  ClipTimesCyclePlusReload = 279,
  ClipTimesCyclePlusReloadBase = 280,
  CloudComputingTraps = 281,
  ColdBlood = 282,
  ColdBloodBuffBonus = 283,
  ColdBloodMastery = 284,
  ColdBloodMaxDuration = 285,
  ColdBloodMaxStacks = 286,
  ColdBloodTrait01 = 287,
  CombatHacking = 288,
  CombatHackingMastery = 289,
  CommsNoiseJamOnQuickhack = 290,
  Cool = 291,
  Crafting = 292,
  CraftingBonusArmorValue = 293,
  CraftingBonusConsumableDuration = 294,
  CraftingBonusGrenadeDamage = 295,
  CraftingBonusWeaponDamage = 296,
  CraftingCostReduction = 297,
  CraftingItemLevelBoost = 298,
  CraftingMastery = 299,
  CraftingMaterialDropChance = 300,
  CraftingMaterialRandomGrantChance = 301,
  CraftingMaterialRetrieveChance = 302,
  CraftingTrait01 = 303,
  CritChance = 304,
  CritChanceTimeCritDamage = 305,
  CritDPSBonus = 306,
  CritDamage = 307,
  CyberwareCooldownReduction = 308,
  CycleTime = 309,
  CycleTimeAimBlockDuration = 310,
  CycleTimeAimBlockStart = 311,
  CycleTimeBase = 312,
  CycleTimeBonus = 313,
  CycleTimeShootingMult = 314,
  CycleTimeShootingMultPeriod = 315,
  CycleTime_Burst = 316,
  CycleTime_BurstMaxCharge = 317,
  CycleTime_BurstSecondary = 318,
  CycleTriggerModeTime = 319,
  DPS = 320,
  DamageFalloffDisabled = 321,
  DamageHackSpread = 322,
  DamagePerHit = 323,
  DamageReductionDamageOverTime = 324,
  DamageReductionExplosion = 325,
  DashAttackStaminaCostReduction = 326,
  DataLeakTraps = 327,
  DealsChemicalDamage = 328,
  DealsElectricDamage = 329,
  DealsPhysicalDamage = 330,
  DealsThermalDamage = 331,
  Deceleration = 332,
  DefeatedHeadDamageThreshold = 333,
  DefeatedLArmDamageThreshold = 334,
  DefeatedLLegDamageThreshold = 335,
  DefeatedRArmDamageThreshold = 336,
  DefeatedRLegDamageThreshold = 337,
  DefeatingEnemiesReduceHacksCost = 338,
  Demolition = 339,
  DemolitionMastery = 340,
  DemolitionTrait01Stat = 341,
  Detection = 342,
  DeviceMemoryCostReduction = 343,
  DisableCyberwareOnBurning = 344,
  DisassemblingIngredientsDoubleBonus = 345,
  DisassemblingMaterialQualityObtainChance = 346,
  DismHeadDamageThreshold = 347,
  DismLArmDamageThreshold = 348,
  DismLLegDamageThreshold = 349,
  DismRArmDamageThreshold = 350,
  DismRLegDamageThreshold = 351,
  DoNotCheckFriendlyFireMadnessPassive = 352,
  DummyResistanceStat = 353,
  Durability = 354,
  DurationBonusBleeding = 355,
  DurationBonusBurning = 356,
  DurationBonusElectrified = 357,
  DurationBonusPoisoned = 358,
  DurationBonusQuickhack = 359,
  DurationBonusStun = 360,
  EMPImmunity = 361,
  EffectiveDPS = 362,
  EffectiveDamagePerHit = 363,
  EffectiveDamagePerHitMax = 364,
  EffectiveDamagePerHitMin = 365,
  EffectiveDamagePerHitTimesAttacksPerSecond = 366,
  EffectiveRange = 367,
  ElectricDamage = 368,
  ElectricDamageMax = 369,
  ElectricDamageMin = 370,
  ElectricDamagePercent = 371,
  ElectricResistance = 372,
  ElectrocuteImmunity = 373,
  ElectrocutedApplicationRate = 374,
  ElementalDamagePerHit = 375,
  ElementalResistanceMultiplier = 376,
  EmptyReloadTime = 377,
  Engineering = 378,
  EngineeringMastery = 379,
  EngineeringTrait01 = 380,
  EquipActionDuration_Corpo = 381,
  EquipActionDuration_Gang = 382,
  EquipAnimationDuration_Corpo = 383,
  EquipAnimationDuration_Gang = 384,
  EquipDuration = 385,
  EquipDuration_First = 386,
  EquipItemTime_Corpo = 387,
  EquipItemTime_Gang = 388,
  Evasion = 389,
  ExplosionKillsRecudeUltimateHacksCost = 390,
  FFInputLock = 391,
  FallDamageReduction = 392,
  FearOnQuickHackKill = 393,
  FullAutoOnFullCharge = 394,
  Gunslinger = 395,
  GunslingerMastery = 396,
  GunslingerTrait01Stat = 397,
  HackedEnemiesGetDamagedByFriendlyFire = 398,
  HackedEnemyArmorReduction = 399,
  Hacking = 400,
  HackingMastery = 401,
  HackingPenetration = 402,
  HackingResistance = 403,
  HackingResistanceUltimate = 404,
  HasAdditionalSplinterSlot = 405,
  HasAheadTargeting = 406,
  HasAirHover = 407,
  HasAirThrusters = 408,
  HasAutoReloader = 409,
  HasAutomaticReplenishment = 410,
  HasAutomaticTagging = 411,
  HasBerserk = 412,
  HasBleedImmunity = 413,
  HasBlindImmunity = 414,
  HasBoostedCortex = 415,
  HasBurningBuffs = 416,
  HasCameraLinking = 417,
  HasChargeJump = 418,
  HasCritImmunity = 419,
  HasCyberdeck = 420,
  HasCybereye = 421,
  HasDodge = 422,
  HasDodgeAir = 423,
  HasDoubleJump = 424,
  HasElectricCoating = 425,
  HasElectroPlating = 426,
  HasExtendedHitReactionImmunity = 427,
  HasFireproofSkin = 428,
  HasGPS = 429,
  HasGlowingTattoos = 430,
  HasGraphiteTissue = 431,
  HasHackingInteractions = 432,
  HasHealingReapplication = 433,
  HasHealthMonitorBomb = 434,
  HasHostileHackImmunity = 435,
  HasICELevelBooster = 436,
  HasInfravision = 437,
  HasJuiceInjector = 438,
  HasKerenzikov = 439,
  HasKerenzikovSlide = 440,
  HasKers = 441,
  HasLinkToBountySystem = 442,
  HasLoweringPerception = 443,
  HasMadnessLvl4Passive = 444,
  HasMajorQuickhackResistance = 445,
  HasMechanicalControl = 446,
  HasMeleeImmunity = 447,
  HasMeleeTargeting = 448,
  HasMetabolicEnhancer = 449,
  HasPoisonHeal = 450,
  HasPoisonImmunity = 451,
  HasPowerGrip = 452,
  HasQuickhackResistance = 453,
  HasRemoteBotAccessPointBreach = 454,
  HasSandevistan = 455,
  HasSandevistanTier1 = 456,
  HasSandevistanTier2 = 457,
  HasSandevistanTier3 = 458,
  HasSecondHeart = 459,
  HasSelfHealingSkin = 460,
  HasSmartLink = 461,
  HasSpiderBotControl = 462,
  HasStunImmunity = 463,
  HasSubdermalArmor = 464,
  HasSuperheroFall = 465,
  HasThermovision = 466,
  HasTimedImmunity = 467,
  HasToxicCleanser = 468,
  HasWallRunSkill = 469,
  HeadshotDamageMultiplier = 470,
  HeadshotImmunity = 471,
  Health = 472,
  HealthInCombatRegenDelayOnChange = 473,
  HealthInCombatRegenEnabled = 474,
  HealthInCombatRegenEndThreshold = 475,
  HealthInCombatRegenRate = 476,
  HealthInCombatRegenRateAdd = 477,
  HealthInCombatRegenRateBase = 478,
  HealthInCombatRegenRateMult = 479,
  HealthInCombatRegenStartThreshold = 480,
  HealthInCombatStartDelay = 481,
  HealthMonitorCooldownDuration = 482,
  HealthOutOfCombatRegenDelayOnChange = 483,
  HealthOutOfCombatRegenEnabled = 484,
  HealthOutOfCombatRegenEndThreshold = 485,
  HealthOutOfCombatRegenRate = 486,
  HealthOutOfCombatRegenRateAdd = 487,
  HealthOutOfCombatRegenRateBase = 488,
  HealthOutOfCombatRegenRateMult = 489,
  HealthOutOfCombatRegenStartThreshold = 490,
  Hearing = 491,
  HeavyAttacksNumber = 492,
  HighlightAccessPoint = 493,
  HitDismembermentFactor = 494,
  HitReactionDamageHealthFactor = 495,
  HitReactionFactor = 496,
  HitTimerAfterDefeated = 497,
  HitTimerAfterImpact = 498,
  HitTimerAfterImpactMelee = 499,
  HitTimerAfterKnockdown = 500,
  HitTimerAfterPain = 501,
  HitTimerAfterStagger = 502,
  HitTimerAfterStaggerMelee = 503,
  HitWoundsFactor = 504,
  HoldDuration = 505,
  HoldEnterDuration = 506,
  HoldTimeoutDuration = 507,
  HolographicSkinCooldownDuration = 508,
  HolographicSkinDuration = 509,
  IconicItemUpgraded = 510,
  ImpactDamageThreshold = 511,
  ImpactDamageThresholdImpulse = 512,
  ImpactDamageThresholdInCover = 513,
  Intelligence = 514,
  IsAggressive = 515,
  IsBalanced = 516,
  IsBlocking = 517,
  IsCautious = 518,
  IsDefensive = 519,
  IsDeflecting = 520,
  IsDodgeStaminaFree = 521,
  IsDodging = 522,
  IsFastMeleeArchetype = 523,
  IsFastRangedArchetype = 524,
  IsGenericMeleeArchetype = 525,
  IsGenericRangedArchetype = 526,
  IsHeavyRangedArchetype = 527,
  IsInvulnerable = 528,
  IsItemBroken = 529,
  IsItemCracked = 530,
  IsItemCrafted = 531,
  IsItemIconic = 532,
  IsItemUpgraded = 533,
  IsManBig = 534,
  IsManMassive = 535,
  IsMechanical = 536,
  IsNetrunnerArchetype = 537,
  IsNotSlowedDuringADS = 538,
  IsNotSlowedDuringBlock = 539,
  IsNotSlowedDuringReload = 540,
  IsReckless = 541,
  IsShotgunnerArchetype = 542,
  IsSniperArchetype = 543,
  IsSprintStaminaFree = 544,
  IsStrongMeleeArchetype = 545,
  IsTechieArchetype = 546,
  IsTier1Archetype = 547,
  IsTier2Archetype = 548,
  IsTier3Archetype = 549,
  IsTier4Archetype = 550,
  IsWeakspot = 551,
  IsWeaponLethal = 552,
  ItemArmor = 553,
  ItemLevel = 554,
  ItemRequiresElectroPlating = 555,
  ItemRequiresPowerGrip = 556,
  ItemRequiresSmartLink = 557,
  JumpHeight = 558,
  Kenjutsu = 559,
  KenjutsuMastery = 560,
  KenjutsuTrait01Stat = 561,
  KnockdownDamageThreshold = 562,
  KnockdownDamageThresholdImpulse = 563,
  KnockdownDamageThresholdInCover = 564,
  KnockdownImmunity = 565,
  KnockdownImpulse = 566,
  Level = 567,
  LimbHealth = 568,
  LinearDirectionUpdateMax = 569,
  LinearDirectionUpdateMaxADS = 570,
  LinearDirectionUpdateMin = 571,
  LinearDirectionUpdateMinADS = 572,
  LowerActiveCooldownOnDefeat = 573,
  LowerHackingResistanceOnHack = 574,
  MagazineCapacity = 575,
  MagazineCapacityBase = 576,
  MagazineCapacityBonus = 577,
  MaxDuration = 578,
  MaxPercentDamageTakenPerHit = 579,
  MaxSpeed = 580,
  MaxStacks = 581,
  MaxStacksBonusBleeding = 582,
  MaxStacksBonusBurning = 583,
  MaximumRange = 584,
  MechanicalsBuffDPSBonus = 585,
  MeleeAttackDuration = 586,
  Memory = 587,
  MemoryCostModifier = 588,
  MemoryCostReduction = 589,
  MemoryInCombatRegenDelayOnChange = 590,
  MemoryInCombatRegenEnabled = 591,
  MemoryInCombatRegenEndThreshold = 592,
  MemoryInCombatRegenRate = 593,
  MemoryInCombatRegenRateAdd = 594,
  MemoryInCombatRegenRateBase = 595,
  MemoryInCombatRegenRateMult = 596,
  MemoryInCombatRegenStartThreshold = 597,
  MemoryInCombatStartDelay = 598,
  MemoryOutOfCombatRegenDelayOnChange = 599,
  MemoryOutOfCombatRegenEnabled = 600,
  MemoryOutOfCombatRegenEndThreshold = 601,
  MemoryOutOfCombatRegenRate = 602,
  MemoryOutOfCombatRegenRateAdd = 603,
  MemoryOutOfCombatRegenRateBase = 604,
  MemoryOutOfCombatRegenRateMult = 605,
  MemoryOutOfCombatRegenStartThreshold = 606,
  MemoryOutOfCombatStartDelay = 607,
  MemoryTrackerCooldownDuration = 608,
  MemoryWipeImmunity = 609,
  MinSpeed = 610,
  MinigameBufferExtension = 611,
  MinigameMaterialsEarned = 612,
  MinigameMemoryRegenPerk = 613,
  MinigameMoneyMultiplier = 614,
  MinigameNextInstanceBufferExtensionPerk = 615,
  MinigameShardChanceMultiplier = 616,
  MinigameTimeLimitExtension = 617,
  MinigameTrapsPossibilityChance = 618,
  NPCAnimationTime = 619,
  NPCCorpoEquipItemDuration = 620,
  NPCCorpoUnequipItemDuration = 621,
  NPCDamage = 622,
  NPCEquipItemDuration = 623,
  NPCGangEquipItemDuration = 624,
  NPCGangUnequipItemDuration = 625,
  NPCLoopDuration = 626,
  NPCRecoverDuration = 627,
  NPCStartupDuration = 628,
  NPCUnequipItemDuration = 629,
  NPCUploadTime = 630,
  NoJam = 631,
  NumShotsInBurst = 632,
  NumShotsInBurstMaxCharge = 633,
  NumShotsInBurstSecondary = 634,
  NumShotsToFire = 635,
  NumberIgnoredTraps = 636,
  Overheat = 637,
  Oxygen = 638,
  PartArmor = 639,
  PenetrationHealth = 640,
  PersonalityAggressive = 641,
  PersonalityCuriosity = 642,
  PersonalityDisgust = 643,
  PersonalityFear = 644,
  PersonalityFunny = 645,
  PersonalityJoy = 646,
  PersonalitySad = 647,
  PersonalityShock = 648,
  PersonalitySurprise = 649,
  PhoneCallDuration = 650,
  PhysicalDamage = 651,
  PhysicalDamageMax = 652,
  PhysicalDamageMin = 653,
  PhysicalDamagePercent = 654,
  PhysicalImpulse = 655,
  PhysicalResistance = 656,
  PoisonImmunity = 657,
  PoisonRegenHealth = 658,
  PoisonedApplicationRate = 659,
  PowerLevel = 660,
  PreFireTime = 661,
  PrefersCovers = 662,
  PrefersShootingSpots = 663,
  Price = 664,
  ProjectilesPerShot = 665,
  ProjectilesPerShotBase = 666,
  ProjectilesPerShotBonus = 667,
  Quality = 668,
  Quantity = 669,
  QuickHackDuration = 670,
  QuickHackDurationExtension = 671,
  QuickHackImmunity = 672,
  QuickHackResistancesMod = 673,
  QuickHackSpreadDistance = 674,
  QuickHackSpreadNumber = 675,
  QuickHackSuddenDeathChance = 676,
  QuickHackUpload = 677,
  QuickhackExtraDamageMultiplier = 678,
  QuickhackShield = 679,
  QuickhacksCooldownReduction = 680,
  RandomCurveInput = 681,
  Range = 682,
  Recoil = 683,
  RecoilAllowSway = 684,
  RecoilAlternateDir = 685,
  RecoilAlternateDirADS = 686,
  RecoilAngle = 687,
  RecoilAngleADS = 688,
  RecoilAnimation = 689,
  RecoilChargeMult = 690,
  RecoilChargeMultADS = 691,
  RecoilCycleSize = 692,
  RecoilCycleSizeADS = 693,
  RecoilCycleTime = 694,
  RecoilCycleTimeADS = 695,
  RecoilDelay = 696,
  RecoilDir = 697,
  RecoilDirADS = 698,
  RecoilDirPlanCycleRandDir = 699,
  RecoilDirPlanCycleRandDirADS = 700,
  RecoilDirPlanCycleRandRangeDir = 701,
  RecoilDirPlanCycleRandRangeDirADS = 702,
  RecoilDirPlanSequence = 703,
  RecoilDirPlanSequenceADS = 704,
  RecoilDriftRandomRangeMax = 705,
  RecoilDriftRandomRangeMin = 706,
  RecoilEnableCycleX = 707,
  RecoilEnableCycleXADS = 708,
  RecoilEnableCycleY = 709,
  RecoilEnableCycleYADS = 710,
  RecoilEnableLinearX = 711,
  RecoilEnableLinearXADS = 712,
  RecoilEnableLinearY = 713,
  RecoilEnableLinearYADS = 714,
  RecoilEnableScaleX = 715,
  RecoilEnableScaleXADS = 716,
  RecoilEnableScaleY = 717,
  RecoilEnableScaleYADS = 718,
  RecoilFullChargeMult = 719,
  RecoilFullChargeMultADS = 720,
  RecoilHoldDuration = 721,
  RecoilHoldDurationADS = 722,
  RecoilKickMax = 723,
  RecoilKickMaxADS = 724,
  RecoilKickMin = 725,
  RecoilKickMinADS = 726,
  RecoilMagForFullDrift = 727,
  RecoilMaxLength = 728,
  RecoilMaxLengthADS = 729,
  RecoilRecoveryMinSpeed = 730,
  RecoilRecoveryMinSpeedADS = 731,
  RecoilRecoverySpeed = 732,
  RecoilRecoverySpeedADS = 733,
  RecoilRecoveryTime = 734,
  RecoilRecoveryTimeADS = 735,
  RecoilScaleMax = 736,
  RecoilScaleMaxADS = 737,
  RecoilScaleTime = 738,
  RecoilScaleTimeADS = 739,
  RecoilSpeed = 740,
  RecoilSpeedADS = 741,
  RecoilTime = 742,
  RecoilTimeADS = 743,
  RecoilUseDifferentStatsInADS = 744,
  Reflexes = 745,
  RefreshesPingOnQuickhack = 746,
  RegenerateHPMinigamePerk = 747,
  ReloadAmount = 748,
  ReloadEndTime = 749,
  ReloadTime = 750,
  ReloadTimeBase = 751,
  ReloadTimeBonus = 752,
  RemoveAllStacksWhenDurationEnds = 753,
  RemoveColdBloodStacksOneByOne = 754,
  RemoveSprintOnQuickhack = 755,
  ReprimandEscalation = 756,
  RestoreMemoryOnDefeat = 757,
  RevealNetrunnerWhenHacked = 758,
  RicochetChance = 759,
  RicochetCount = 760,
  RicochetMaxAngle = 761,
  RicochetMinAngle = 762,
  RicochetTargetSearchAngle = 763,
  SandevistanDashShoot = 764,
  ScanDepth = 765,
  ScanTimeReduction = 766,
  ScopeFOV = 767,
  ScopeOffset = 768,
  ScrapItemChance = 769,
  SharedCacheTraps = 770,
  ShootingOffsetAI = 771,
  ShortCircuitOnCriticalHit = 772,
  ShorterChains = 773,
  ShotDelay = 774,
  SlideWhenLeaningOutOfCover = 775,
  SmartGunAddSpiralTrajectory = 776,
  SmartGunAdsLockingAnglePitch = 777,
  SmartGunAdsLockingAngleYaw = 778,
  SmartGunAdsMaxLockedTargets = 779,
  SmartGunAdsTagLockAnglePitch = 780,
  SmartGunAdsTagLockAngleYaw = 781,
  SmartGunAdsTargetableAnglePitch = 782,
  SmartGunAdsTargetableAngleYaw = 783,
  SmartGunAdsTimeToLock = 784,
  SmartGunAdsTimeToUnlock = 785,
  SmartGunEvenDistributionPeriod = 786,
  SmartGunHipLockingAnglePitch = 787,
  SmartGunHipLockingAngleYaw = 788,
  SmartGunHipMaxLockedTargets = 789,
  SmartGunHipTagLockAnglePitch = 790,
  SmartGunHipTagLockAngleYaw = 791,
  SmartGunHipTargetableAnglePitch = 792,
  SmartGunHipTargetableAngleYaw = 793,
  SmartGunHipTimeToLock = 794,
  SmartGunHipTimeToUnlock = 795,
  SmartGunHitProbability = 796,
  SmartGunHitProbabilityMultiplier = 797,
  SmartGunMissDelay = 798,
  SmartGunMissRadius = 799,
  SmartGunNPCApplySpreadAtHitplane = 800,
  SmartGunNPCLockOnTime = 801,
  SmartGunNPCLockTimeout = 802,
  SmartGunNPCLockingAnglePitch = 803,
  SmartGunNPCLockingAngleYaw = 804,
  SmartGunNPCProjectileStartingOrientationAngleOffset = 805,
  SmartGunNPCProjectileVelocity = 806,
  SmartGunNPCShootProjectilesOnlyStraight = 807,
  SmartGunNPCSpreadMultiplier = 808,
  SmartGunNPCTrajectoryCurvatureMultiplier = 809,
  SmartGunPlayerProjectileVelocity = 810,
  SmartGunProjectileVelocityVariance = 811,
  SmartGunSpiralCycleTimeMax = 812,
  SmartGunSpiralCycleTimeMin = 813,
  SmartGunSpiralRadius = 814,
  SmartGunSpiralRampDistanceEnd = 815,
  SmartGunSpiralRampDistanceStart = 816,
  SmartGunSpiralRandomizeDirection = 817,
  SmartGunSpreadMultiplier = 818,
  SmartGunStartingAccuracy = 819,
  SmartGunTargetAcquisitionRange = 820,
  SmartGunTimeToMaxAccuracy = 821,
  SmartGunTimeToRemoveOccludedTarget = 822,
  SmartGunTrackAllBodyparts = 823,
  SmartGunTrackHeadComponents = 824,
  SmartGunTrackLegComponents = 825,
  SmartGunTrackMechanicalComponents = 826,
  SmartGunTrackMultipleEntitiesInADS = 827,
  SmartGunUseEvenDistributionTargeting = 828,
  SmartGunUseTagLockTargeting = 829,
  SmartGunUseTimeBasedAccuracy = 830,
  SmartTargetingDisruptionProbability = 831,
  SpecialDamage = 832,
  SpeedBoost = 833,
  SpeedBoostMaxSpeed = 834,
  Spread = 835,
  SpreadAdsChangePerShot = 836,
  SpreadAdsChargeMult = 837,
  SpreadAdsDefaultX = 838,
  SpreadAdsDefaultY = 839,
  SpreadAdsFastSpeedMax = 840,
  SpreadAdsFastSpeedMaxAdd = 841,
  SpreadAdsFastSpeedMin = 842,
  SpreadAdsFastSpeedMinAdd = 843,
  SpreadAdsFullChargeMult = 844,
  SpreadAdsMaxX = 845,
  SpreadAdsMaxY = 846,
  SpreadAdsMinX = 847,
  SpreadAdsMinY = 848,
  SpreadAnimation = 849,
  SpreadChangePerShot = 850,
  SpreadChargeMult = 851,
  SpreadCrouchDefaultMult = 852,
  SpreadCrouchMaxMult = 853,
  SpreadDefaultX = 854,
  SpreadDefaultY = 855,
  SpreadEvenDistributionJitterSize = 856,
  SpreadEvenDistributionRowCount = 857,
  SpreadFastSpeedMax = 858,
  SpreadFastSpeedMaxAdd = 859,
  SpreadFastSpeedMin = 860,
  SpreadFastSpeedMinAdd = 861,
  SpreadFullChargeMult = 862,
  SpreadMaxAI = 863,
  SpreadMaxX = 864,
  SpreadMaxY = 865,
  SpreadMinX = 866,
  SpreadMinY = 867,
  SpreadRandomizeOriginPoint = 868,
  SpreadResetSpeed = 869,
  SpreadResetTimeThreshold = 870,
  SpreadUseCircularSpread = 871,
  SpreadUseEvenDistribution = 872,
  SpreadUseInAds = 873,
  SpreadZeroOnFirstShot = 874,
  StaggerDamageThreshold = 875,
  StaggerDamageThresholdImpulse = 876,
  StaggerDamageThresholdInCover = 877,
  Stamina = 878,
  StaminaCostReduction = 879,
  StaminaCostToBlock = 880,
  StaminaDamage = 881,
  StaminaRegenDelayOnChange = 882,
  StaminaRegenEnabled = 883,
  StaminaRegenEndThrehold = 884,
  StaminaRegenRate = 885,
  StaminaRegenRateAdd = 886,
  StaminaRegenRateBase = 887,
  StaminaRegenRateMult = 888,
  StaminaRegenStartDelay = 889,
  StaminaRegenStartThreshold = 890,
  StaminaSprintDecayRate = 891,
  StatModifierGroupLimit = 892,
  Stealth = 893,
  StealthHacksCostReduction = 894,
  StealthHitDamageMultiplier = 895,
  StealthMastery = 896,
  StealthTrait01Stat = 897,
  StealthWeakspotDamageMultiplier = 898,
  StreetCred = 899,
  Strength = 900,
  StunImmunity = 901,
  Sway = 902,
  SwayCenterMaximumAngleOffset = 903,
  SwayCurvatureMaximumFactor = 904,
  SwayCurvatureMinimumFactor = 905,
  SwayInitialOffsetRandomFactor = 906,
  SwayResetOnAimStart = 907,
  SwaySideBottomAngleLimit = 908,
  SwaySideMaximumAngleDistance = 909,
  SwaySideMinimumAngleDistance = 910,
  SwaySideStepChangeMaximumFactor = 911,
  SwaySideStepChangeMinimumFactor = 912,
  SwaySideTopAngleLimit = 913,
  SwayStartBlendTime = 914,
  SwayStartDelay = 915,
  SwayTraversalTime = 916,
  SystemCollapseImmunity = 917,
  TBHsBaseCoefficient = 918,
  TBHsBaseSourceMultiplierCoefficient = 919,
  TBHsCoverTraceLoSIncreaseSpeed = 920,
  TBHsMinimumLineOfSightTime = 921,
  TBHsSensesTraceLoSIncreaseSpeed = 922,
  TBHsVisibilityCooldown = 923,
  TechBaseChargeThreshold = 924,
  TechMaxChargeThreshold = 925,
  TechOverChargeThreshold = 926,
  TechPierceChargeLevel = 927,
  TechPierceEnabled = 928,
  TechnicalAbility = 929,
  ThermalDamage = 930,
  ThermalDamageMax = 931,
  ThermalDamageMin = 932,
  ThermalDamagePercent = 933,
  ThermalResistance = 934,
  ThreeOrMoreProgramsCooldownRedPerk = 935,
  ThreeOrMoreProgramsMemoryRegPerk = 936,
  TimeDilationGenericDuration = 937,
  TimeDilationGenericTimeScale = 938,
  TimeDilationKerenzikovDuration = 939,
  TimeDilationKerenzikovPlayerTimeScale = 940,
  TimeDilationKerenzikovTimeScale = 941,
  TimeDilationOnDodgesCooldownDuration = 942,
  TimeDilationOnDodgesDuration = 943,
  TimeDilationOnDodgesTimeScale = 944,
  TimeDilationOnHealthDropCooldownDuration = 945,
  TimeDilationOnHealthDropDuration = 946,
  TimeDilationOnHealthDropTimeScale = 947,
  TimeDilationSandevistanCooldownBase = 948,
  TimeDilationSandevistanCooldownReduction = 949,
  TimeDilationSandevistanDuration = 950,
  TimeDilationSandevistanTimeScale = 951,
  TimeDilationWhenEnteringCombatCooldownDuration = 952,
  TimeDilationWhenEnteringCombatDuration = 953,
  TimeDilationWhenEnteringCombatTimeScale = 954,
  TranquilizerImmunity = 955,
  TriggerDismembermentChance = 956,
  TriggerWoundedChance = 957,
  TurretFriendlyExtension = 958,
  TurretShutdownExtension = 959,
  UltimateHackSpread = 960,
  UltimateHacksCostReduction = 961,
  UltimateMemoryCostReduction = 962,
  UnconsciousImmunity = 963,
  UnequipAnimationDuration_Corpo = 964,
  UnequipAnimationDuration_Gang = 965,
  UnequipDuration = 966,
  UnequipDuration_Corpo = 967,
  UnequipDuration_Gang = 968,
  UnequipItemTime_Corpo = 969,
  UnequipItemTime_Gang = 970,
  UnlockProgress = 971,
  UpgradingCostReduction = 972,
  UpgradingMaterialDropChance = 973,
  UpgradingMaterialRandomGrantChance = 974,
  UpgradingMaterialRetrieveChance = 975,
  UploadQuickHackMod = 976,
  Visibility = 977,
  VisualStimRangeMultiplier = 978,
  VulnerabilityExtension = 979,
  WallRunHorSpeedToEnterMin = 980,
  WallRunStrafeAngleMax = 981,
  WallRunTimeMax = 982,
  WallRunVertSpeedToEnterMax = 983,
  WasItemUpgraded = 984,
  WasQuickHacked = 985,
  WeakspotDamageMultiplier = 986,
  WeaponHasAutoloader = 987,
  WeaponNoise = 988,
  WeaponPosAdsX = 989,
  WeaponPosAdsY = 990,
  WeaponPosAdsZ = 991,
  WeaponPosX = 992,
  WeaponPosY = 993,
  WeaponPosZ = 994,
  WeaponRotAdsX = 995,
  WeaponRotAdsY = 996,
  WeaponRotAdsZ = 997,
  WeaponRotX = 998,
  WeaponRotY = 999,
  WeaponRotZ = 1000,
  Weight = 1001,
  WoundHeadDamageThreshold = 1002,
  WoundLArmDamageThreshold = 1003,
  WoundLLegDamageThreshold = 1004,
  WoundRArmDamageThreshold = 1005,
  WoundRLegDamageThreshold = 1006,
  ZoomLevel = 1007,
  CPO_Armor = 1008,
  CPO_NPC_Importance = 1009,
  Count = 1010,
  Invalid = 1011,
}

enum gamedataStatPoolType {
  Adrenaline = 0,
  Aggressiveness = 1,
  BleedingTrigger = 2,
  BurningTrigger = 3,
  CPUPower = 4,
  CallReinforcementProgress = 5,
  Durability = 6,
  E3_BossWeakSpotHealth = 7,
  ElectrocutedTrigger = 8,
  Fear = 9,
  Health = 10,
  LeftArmHealth = 11,
  LeftLegHealth = 12,
  Memory = 13,
  Oxygen = 14,
  PhoneCallDuration = 15,
  PoisonTrigger = 16,
  QuickHackDuration = 17,
  QuickHackUpload = 18,
  ReprimandEscalation = 19,
  RightLegHealth = 20,
  Stamina = 21,
  StunTrigger = 22,
  UnlockProgress = 23,
  WeakspotHealth = 24,
  WeaponCharge = 25,
  WeaponOverheat = 26,
  CPOShockedTrigger = 27,
  CPO_Armor = 28,
  CPO_NPC_Importance = 29,
  Count = 30,
  Invalid = 31,
}

enum gamedataTriggerMode {
  Burst = 0,
  Charge = 1,
  FullAuto = 2,
  Lock = 3,
  SemiAuto = 4,
  Windup = 5,
  Count = 6,
  Invalid = 7,
}

enum gamedataWeaponEvolution {
  Blade = 0,
  Blunt = 1,
  Undefined = 2,
  Power = 3,
  Smart = 4,
  Tech = 5,
  Count = 6,
  Invalid = 7,
}

enum gamedataWeaponManufacturer {
  Corporation = 0,
  Street = 1,
  Count = 2,
  Invalid = 3,
}

enum gamedataGender {
  Default = 0,
  Female = 1,
  Male = 2,
  Count = 3,
  Invalid = 4,
}

enum gamedataPerkType {
  Assault_Area_01_Perk_1 = 0,
  Assault_Area_01_Perk_2 = 1,
  Assault_Area_02_Perk_1 = 2,
  Assault_Area_02_Perk_2 = 3,
  Assault_Area_03_Perk_1 = 4,
  Assault_Area_03_Perk_2 = 5,
  Assault_Area_04_Perk_1 = 6,
  Assault_Area_04_Perk_2 = 7,
  Assault_Area_05_Perk_1 = 8,
  Assault_Area_05_Perk_2 = 9,
  Assault_Area_06_Perk_1 = 10,
  Assault_Area_06_Perk_2 = 11,
  Assault_Area_07_Perk_1 = 12,
  Assault_Area_07_Perk_2 = 13,
  Assault_Area_08_Perk_1 = 14,
  Assault_Area_08_Perk_2 = 15,
  Assault_Area_09_Perk_1 = 16,
  Assault_Area_09_Perk_2 = 17,
  Assault_Area_10_Perk_1 = 18,
  Athletics_Area_01_Perk_1 = 19,
  Athletics_Area_01_Perk_2 = 20,
  Athletics_Area_02_Perk_1 = 21,
  Athletics_Area_02_Perk_2 = 22,
  Athletics_Area_03_Perk_1 = 23,
  Athletics_Area_03_Perk_2 = 24,
  Athletics_Area_04_Perk_1 = 25,
  Athletics_Area_04_Perk_2 = 26,
  Athletics_Area_05_Perk_1 = 27,
  Athletics_Area_05_Perk_2 = 28,
  Athletics_Area_05_Perk_3 = 29,
  Athletics_Area_06_Perk_1 = 30,
  Athletics_Area_06_Perk_2 = 31,
  Athletics_Area_06_Perk_3 = 32,
  Athletics_Area_07_Perk_1 = 33,
  Athletics_Area_07_Perk_2 = 34,
  Athletics_Area_08_Perk_1 = 35,
  Athletics_Area_08_Perk_2 = 36,
  Athletics_Area_09_Perk_1 = 37,
  Athletics_Area_10_Perk_1 = 38,
  Athletics_Area_10_Perk_2 = 39,
  Brawling_Area_01_Perk_1 = 40,
  Brawling_Area_01_Perk_2 = 41,
  Brawling_Area_02_Perk_1 = 42,
  Brawling_Area_02_Perk_2 = 43,
  Brawling_Area_03_Perk_1 = 44,
  Brawling_Area_03_Perk_2 = 45,
  Brawling_Area_04_Perk_1 = 46,
  Brawling_Area_04_Perk_2 = 47,
  Brawling_Area_05_Perk_1 = 48,
  Brawling_Area_05_Perk_2 = 49,
  Brawling_Area_06_Perk_1 = 50,
  Brawling_Area_06_Perk_2 = 51,
  Brawling_Area_07_Perk_1 = 52,
  Brawling_Area_07_Perk_2 = 53,
  Brawling_Area_08_Perk_1 = 54,
  Brawling_Area_08_Perk_2 = 55,
  ColdBlood_Area_01_Perk_1 = 56,
  ColdBlood_Area_02_Perk_1 = 57,
  ColdBlood_Area_02_Perk_2 = 58,
  ColdBlood_Area_03_Perk_1 = 59,
  ColdBlood_Area_03_Perk_2 = 60,
  ColdBlood_Area_04_Perk_1 = 61,
  ColdBlood_Area_04_Perk_2 = 62,
  ColdBlood_Area_05_Perk_1 = 63,
  ColdBlood_Area_05_Perk_2 = 64,
  ColdBlood_Area_06_Perk_1 = 65,
  ColdBlood_Area_06_Perk_2 = 66,
  ColdBlood_Area_06_Perk_3 = 67,
  ColdBlood_Area_07_Perk_1 = 68,
  ColdBlood_Area_07_Perk_2 = 69,
  ColdBlood_Area_08_Perk_1 = 70,
  ColdBlood_Area_08_Perk_2 = 71,
  ColdBlood_Area_09_Perk_1 = 72,
  ColdBlood_Area_10_Perk_1 = 73,
  CombatHacking_Area_01_Perk_1 = 74,
  CombatHacking_Area_01_Perk_2 = 75,
  CombatHacking_Area_02_Perk_1 = 76,
  CombatHacking_Area_02_Perk_2 = 77,
  CombatHacking_Area_02_Perk_3 = 78,
  CombatHacking_Area_03_Perk_1 = 79,
  CombatHacking_Area_03_Perk_2 = 80,
  CombatHacking_Area_04_Perk_1 = 81,
  CombatHacking_Area_05_Perk_1 = 82,
  CombatHacking_Area_06_Perk_1 = 83,
  CombatHacking_Area_06_Perk_2 = 84,
  CombatHacking_Area_06_Perk_3 = 85,
  CombatHacking_Area_07_Perk_1 = 86,
  CombatHacking_Area_08_Perk_1 = 87,
  CombatHacking_Area_08_Perk_2 = 88,
  CombatHacking_Area_09_Perk_1 = 89,
  CombatHacking_Area_10_Perk_1 = 90,
  CombatHacking_Area_10_Perk_2 = 91,
  Crafting_Area_01_Perk_1 = 92,
  Crafting_Area_01_Perk_2 = 93,
  Crafting_Area_02_Perk_1 = 94,
  Crafting_Area_02_Perk_2 = 95,
  Crafting_Area_03_Perk_1 = 96,
  Crafting_Area_04_Perk_1 = 97,
  Crafting_Area_04_Perk_2 = 98,
  Crafting_Area_05_Perk_1 = 99,
  Crafting_Area_05_Perk_2 = 100,
  Crafting_Area_06_Perk_1 = 101,
  Crafting_Area_06_Perk_2 = 102,
  Crafting_Area_06_Perk_3 = 103,
  Crafting_Area_07_Perk_1 = 104,
  Crafting_Area_07_Perk_2 = 105,
  Crafting_Area_08_Perk_1 = 106,
  Crafting_Area_08_Perk_2 = 107,
  Crafting_Area_09_Perk_1 = 108,
  Crafting_Area_10_Perk_1 = 109,
  Demolition_Area_01_Perk_1 = 110,
  Demolition_Area_02_Perk_1 = 111,
  Demolition_Area_02_Perk_2 = 112,
  Demolition_Area_03_Perk_1 = 113,
  Demolition_Area_03_Perk_2 = 114,
  Demolition_Area_04_Perk_1 = 115,
  Demolition_Area_04_Perk_2 = 116,
  Demolition_Area_05_Perk_1 = 117,
  Demolition_Area_05_Perk_2 = 118,
  Demolition_Area_06_Perk_1 = 119,
  Demolition_Area_06_Perk_2 = 120,
  Demolition_Area_07_Perk_1 = 121,
  Demolition_Area_07_Perk_2 = 122,
  Demolition_Area_08_Perk_1 = 123,
  Demolition_Area_08_Perk_2 = 124,
  Demolition_Area_09_Perk_1 = 125,
  Demolition_Area_09_Perk_2 = 126,
  Demolition_Area_10_Perk_1 = 127,
  Demolition_Area_10_Perk_2 = 128,
  Engineering_Area_01_Perk_1 = 129,
  Engineering_Area_01_Perk_2 = 130,
  Engineering_Area_02_Perk_1 = 131,
  Engineering_Area_02_Perk_2 = 132,
  Engineering_Area_03_Perk_1 = 133,
  Engineering_Area_04_Perk_1 = 134,
  Engineering_Area_04_Perk_2 = 135,
  Engineering_Area_04_Perk_3 = 136,
  Engineering_Area_05_Perk_1 = 137,
  Engineering_Area_05_Perk_2 = 138,
  Engineering_Area_06_Perk_1 = 139,
  Engineering_Area_06_Perk_2 = 140,
  Engineering_Area_07_Perk_1 = 141,
  Engineering_Area_07_Perk_2 = 142,
  Engineering_Area_07_Perk_3 = 143,
  Engineering_Area_08_Perk_1 = 144,
  Engineering_Area_08_Perk_2 = 145,
  Engineering_Area_09_Perk_1 = 146,
  Engineering_Area_10_Perk_1 = 147,
  Engineering_Area_10_Perk_2 = 148,
  Gunslinger_Area_01_Perk_1 = 149,
  Gunslinger_Area_01_Perk_2 = 150,
  Gunslinger_Area_02_Perk_1 = 151,
  Gunslinger_Area_02_Perk_2 = 152,
  Gunslinger_Area_03_Perk_1 = 153,
  Gunslinger_Area_03_Perk_2 = 154,
  Gunslinger_Area_04_Perk_1 = 155,
  Gunslinger_Area_04_Perk_2 = 156,
  Gunslinger_Area_04_Perk_3 = 157,
  Gunslinger_Area_05_Perk_1 = 158,
  Gunslinger_Area_05_Perk_2 = 159,
  Gunslinger_Area_06_Perk_1 = 160,
  Gunslinger_Area_06_Perk_2 = 161,
  Gunslinger_Area_07_Perk_1 = 162,
  Gunslinger_Area_07_Perk_2 = 163,
  Gunslinger_Area_08_Perk_1 = 164,
  Gunslinger_Area_08_Perk_2 = 165,
  Gunslinger_Area_09_Perk_1 = 166,
  Gunslinger_Area_10_Perk_1 = 167,
  Hacking_Area_01_Perk_1 = 168,
  Hacking_Area_01_Perk_2 = 169,
  Hacking_Area_02_Perk_1 = 170,
  Hacking_Area_02_Perk_2 = 171,
  Hacking_Area_03_Perk_1 = 172,
  Hacking_Area_03_Perk_2 = 173,
  Hacking_Area_04_Perk_1 = 174,
  Hacking_Area_04_Perk_2 = 175,
  Hacking_Area_05_Perk_1 = 176,
  Hacking_Area_06_Perk_1 = 177,
  Hacking_Area_06_Perk_2 = 178,
  Hacking_Area_07_Perk_1 = 179,
  Hacking_Area_07_Perk_2 = 180,
  Hacking_Area_08_Perk_1 = 181,
  Hacking_Area_08_Perk_2 = 182,
  Hacking_Area_09_Perk_1 = 183,
  Hacking_Area_09_Perk_2 = 184,
  Hacking_Area_10_Perk_1 = 185,
  Hacking_Area_10_Perk_2 = 186,
  Kenjutsu_Area_01_Perk_1 = 187,
  Kenjutsu_Area_01_Perk_2 = 188,
  Kenjutsu_Area_02_Perk_1 = 189,
  Kenjutsu_Area_02_Perk_2 = 190,
  Kenjutsu_Area_03_Perk_1 = 191,
  Kenjutsu_Area_03_Perk_2 = 192,
  Kenjutsu_Area_04_Perk_1 = 193,
  Kenjutsu_Area_04_Perk_2 = 194,
  Kenjutsu_Area_05_Perk_1 = 195,
  Kenjutsu_Area_05_Perk_2 = 196,
  Kenjutsu_Area_06_Perk_1 = 197,
  Kenjutsu_Area_06_Perk_2 = 198,
  Kenjutsu_Area_07_Perk_1 = 199,
  Kenjutsu_Area_07_Perk_2 = 200,
  Kenjutsu_Area_08_Perk_1 = 201,
  Kenjutsu_Area_08_Perk_2 = 202,
  Stealth_Area_01_Perk_1 = 203,
  Stealth_Area_01_Perk_2 = 204,
  Stealth_Area_02_Perk_1 = 205,
  Stealth_Area_02_Perk_2 = 206,
  Stealth_Area_02_Perk_3 = 207,
  Stealth_Area_03_Perk_1 = 208,
  Stealth_Area_03_Perk_2 = 209,
  Stealth_Area_03_Perk_3 = 210,
  Stealth_Area_04_Perk_1 = 211,
  Stealth_Area_04_Perk_2 = 212,
  Stealth_Area_05_Perk_1 = 213,
  Stealth_Area_05_Perk_2 = 214,
  Stealth_Area_05_Perk_3 = 215,
  Stealth_Area_06_Perk_1 = 216,
  Stealth_Area_06_Perk_2 = 217,
  Stealth_Area_07_Perk_1 = 218,
  Stealth_Area_07_Perk_2 = 219,
  Stealth_Area_07_Perk_3 = 220,
  Stealth_Area_08_Perk_1 = 221,
  Stealth_Area_08_Perk_2 = 222,
  Stealth_Area_08_Perk_3 = 223,
  Stealth_Area_09_Perk_1 = 224,
  Stealth_Area_09_Perk_2 = 225,
  Stealth_Area_09_Perk_3 = 226,
  Stealth_Area_10_Perk_1 = 227,
  Count = 228,
  Invalid = 229,
}

enum gamedataProficiencyType {
  Assault = 0,
  Athletics = 1,
  Brawling = 2,
  ColdBlood = 3,
  CombatHacking = 4,
  Crafting = 5,
  Demolition = 6,
  Engineering = 7,
  Gunslinger = 8,
  Hacking = 9,
  Kenjutsu = 10,
  Level = 11,
  Stealth = 12,
  StreetCred = 13,
  Count = 14,
  Invalid = 15,
}

enum gamedataDevelopmentPointType {
  Attribute = 0,
  Primary = 1,
  Secondary = 2,
  Count = 3,
  Invalid = 4,
}

enum gamedataEthnicity {
  African = 0,
  AfricanAmerican = 1,
  AmericanEnglish = 2,
  Arabic = 3,
  Brasilian = 4,
  BritishEnglish = 5,
  Caribbean = 6,
  Chinese = 7,
  Default = 8,
  Indian = 9,
  Japanese = 10,
  Mexican = 11,
  NativeAmerican = 12,
  Russian = 13,
  Count = 14,
  Invalid = 15,
}

enum gamedataStatusEffectType {
  AndroidTurnOff = 0,
  AndroidTurnOn = 1,
  Berserk = 2,
  Berserker = 3,
  Bleeding = 4,
  Blind = 5,
  BlockCoverVisibilityReduction = 6,
  BrainMelt = 7,
  Burning = 8,
  Cloaked = 9,
  CommsCall = 10,
  CommsNoise = 11,
  Crippled = 12,
  DamageBurst = 13,
  Deafened = 14,
  Defeated = 15,
  DefeatedWithRecover = 16,
  EMP = 17,
  Electrocuted = 18,
  Exhausted = 19,
  ForceShoot = 20,
  Grapple = 21,
  Jam = 22,
  JamCommuniations = 23,
  Kill = 24,
  Knockdown = 25,
  Madness = 26,
  MeleeInvulnerability = 27,
  Misc = 28,
  MuteAudioStims = 29,
  NetwatcherHackStage1 = 30,
  NetwatcherHackStage2 = 31,
  NetwatcherHackStage3 = 32,
  Overheat = 33,
  Overload = 34,
  Pain = 35,
  PassiveBuff = 36,
  PassiveDebuff = 37,
  PlayerCooldown = 38,
  Poisoned = 39,
  QuickHackFreezeLocomotion = 40,
  QuickHackStaggerCyberware = 41,
  QuickHackStaggerLocomotion = 42,
  QuickHackStaggerWeapon = 43,
  Quickhack = 44,
  Regeneration = 45,
  Sandevistan = 46,
  SetFriendly = 47,
  Sleep = 48,
  Stagger = 49,
  StrongArmsActive = 50,
  Stunned = 51,
  SuicideHack = 52,
  SystemCollapse = 53,
  Unconscious = 54,
  UncontrolledMovement = 55,
  VehicleKnockdown = 56,
  WeakspotOverload = 57,
  Wounded = 58,
  CPOShocked = 59,
  Count = 60,
  Invalid = 61,
}

enum gamedataAffiliation {
  AfterlifeMercs = 0,
  Aldecaldos = 1,
  Animals = 2,
  Arasaka = 3,
  Biotechnica = 4,
  CityCouncil = 5,
  Civilian = 6,
  KangTao = 7,
  Maelstrom = 8,
  MaelstromAndroid = 9,
  Militech = 10,
  NCPD = 11,
  NetWatch = 12,
  News54 = 13,
  RecordingAgency = 14,
  SSI = 15,
  Scavengers = 16,
  ScavengersAndroid = 17,
  SixthStreet = 18,
  SixthStreetAndroid = 19,
  SouthCalifornia = 20,
  TheMox = 21,
  TraumaTeam = 22,
  TygerClaws = 23,
  Unaffiliated = 24,
  UnaffiliatedCorpo = 25,
  Unknown = 26,
  Valentinos = 27,
  VoodooBoys = 28,
  Wraiths = 29,
  WraithsAndroid = 30,
  Count = 31,
  Invalid = 32,
}

enum gamedataReactionPresetType {
  Child = 0,
  Civilian_Guard = 1,
  Civilian_Neutral = 2,
  Civilian_Passive = 3,
  Corpo_Aggressive = 4,
  Corpo_Passive = 5,
  Follower = 6,
  Ganger_Aggressive = 7,
  Ganger_Passive = 8,
  InVehicle_Aggressive = 9,
  InVehicle_Civilian = 10,
  InVehicle_Passive = 11,
  Lore_Aggressive = 12,
  Lore_Civilian = 13,
  Lore_Passive = 14,
  Mechanical_Aggressive = 15,
  Mechanical_NonCombat = 16,
  Mechanical_Passive = 17,
  NoReaction = 18,
  Police_Aggressive = 19,
  Police_Passive = 20,
  Sleep_Aggressive = 21,
  Sleep_Civilian = 22,
  Sleep_Passive = 23,
  Count = 24,
  Invalid = 25,
}

enum gamedataStimType {
  AimingAt = 0,
  Alarm = 1,
  AreaEffect = 2,
  AskToFollowOrder = 3,
  Attention = 4,
  AudioEnemyPing = 5,
  Bullet = 6,
  Bump = 7,
  Call = 8,
  CarAlarm = 9,
  CarryBody = 10,
  Combat = 11,
  CombatCall = 12,
  CombatHit = 13,
  CombatWhistle = 14,
  CrimeWitness = 15,
  CrowdIllegalAction = 16,
  DeadBody = 17,
  DeviceExplosion = 18,
  Distract = 19,
  DodgeVehicle = 20,
  Driving = 21,
  Dying = 22,
  EnvironmentalHazard = 23,
  Explosion = 24,
  FootStepRegular = 25,
  FootStepSprint = 26,
  GrenadeLanded = 27,
  Gunshot = 28,
  Hacked = 29,
  HijackVehicle = 30,
  IllegalAction = 31,
  IllegalInteraction = 32,
  LandingHard = 33,
  LandingRegular = 34,
  LandingVeryHard = 35,
  MeleeAttack = 36,
  MeleeHit = 37,
  OpeningDoor = 38,
  ProjectileDistraction = 39,
  Provoke = 40,
  Reload = 41,
  Reprimand = 42,
  ReprimandFinalWarning = 43,
  Scream = 44,
  SecurityBreach = 45,
  SilencedGunshot = 46,
  SilentAlarm = 47,
  SoundDistraction = 48,
  SpreadFear = 49,
  StopedAiming = 50,
  Terror = 51,
  TooCloseDistance = 52,
  VehicleHit = 53,
  VehicleHorn = 54,
  VisualDistract = 55,
  WarningDistance = 56,
  WeaponDisplayed = 57,
  WeaponHolstered = 58,
  WeaponSafe = 59,
  Whistle = 60,
  Count = 61,
  Invalid = 62,
}

enum gamedataStimPropagation {
  Audio = 0,
  Visual = 1,
  Count = 2,
  Invalid = 3,
}

enum gamedataStimPriority {
  High = 0,
  Low = 1,
  Count = 2,
  Invalid = 3,
}

enum gamedataBuildType {
  CombatNetrunner0 = 0,
  CombatNetrunner10 = 1,
  CombatNetrunner15 = 2,
  CombatNetrunner18 = 3,
  CombatNetrunner20 = 4,
  CombatNetrunner25 = 5,
  CombatNetrunner30 = 6,
  CombatNetrunner35 = 7,
  CombatNetrunner40 = 8,
  CombatNetrunner5 = 9,
  CombatNetrunner50 = 10,
  CorporateStarting = 11,
  E32019NetrunnerPhase1 = 12,
  E32019StrongSoloPhase1 = 13,
  FunctionalTestsProgressionBuildTest = 14,
  FunctionalTestsStartingBuild = 15,
  GYMcclBuild = 16,
  GymSmoketestMaxedBuild = 17,
  HandsOnStarting = 18,
  ItemPass_BaseBuild = 19,
  ItemPass_FactionMeleeMods = 20,
  ItemPass_FactionRangedMods = 21,
  ItemPass_IconicMods = 22,
  ItemPass_LegendaryMods = 23,
  ItemPass_PowerMods = 24,
  ItemPass_SmartMods = 25,
  ItemPass_StandardMods = 26,
  ItemPass_TechMods = 27,
  JohnnyQ101 = 28,
  JohnnyQ108 = 29,
  JohnnyQ204 = 30,
  MaxSkillsAllWeapons = 31,
  MeleeCombat0 = 32,
  MeleeCombat10 = 33,
  MeleeCombat15 = 34,
  MeleeCombat20 = 35,
  MeleeCombat25 = 36,
  MeleeCombat30 = 37,
  MeleeCombat35 = 38,
  MeleeCombat40 = 39,
  MeleeCombat45 = 40,
  MeleeCombat5 = 41,
  MeleeCombat50 = 42,
  NomadStarting = 43,
  RangedCombat0 = 44,
  RangedCombat10 = 45,
  RangedCombat15 = 46,
  RangedCombat20 = 47,
  RangedCombat25 = 48,
  RangedCombat30 = 49,
  RangedCombat35 = 50,
  RangedCombat40 = 51,
  RangedCombat45 = 52,
  RangedCombat5 = 53,
  RangedCombat50 = 54,
  StartingBuild = 55,
  StreetKidStarting = 56,
  UIStressTest = 57,
  mech_netrunner = 58,
  q003_royce_netrunner = 59,
  q003_royce_noBuild = 60,
  q003_royce_solo = 61,
  q110_sasquatch_netrunner = 62,
  q110_sasquatch_noBuild = 63,
  q110_sasquatch_solo = 64,
  q112_oda_netrunner = 65,
  q112_oda_noBuild = 66,
  q112_oda_solo = 67,
  q113_smasher_melee = 68,
  q113_smasher_netrunner = 69,
  q113_smasher_noBuild = 70,
  q113_smasher_solo = 71,
  CpoAssassinBuild = 72,
  CpoDefaultBuild = 73,
  CpoNetrunnerBuild = 74,
  CpoSoloBuild = 75,
  CpoTechieBuild = 76,
  Count = 77,
  Invalid = 78,
}

enum gamedataEquipmentArea {
  AbilityCW = 0,
  ArmsCW = 1,
  BaseFists = 2,
  BotCPU = 3,
  BotChassisModule = 4,
  BotMainModule = 5,
  BotSoftware = 6,
  CardiovascularSystemCW = 7,
  Consumable = 8,
  CyberwareWheel = 9,
  EyesCW = 10,
  Face = 11,
  Feet = 12,
  FrontalCortexCW = 13,
  Gadget = 14,
  HandsCW = 15,
  Head = 16,
  ImmuneSystemCW = 17,
  InnerChest = 18,
  IntegumentarySystemCW = 19,
  LeftArm = 20,
  Legs = 21,
  LegsCW = 22,
  MusculoskeletalSystemCW = 23,
  NervousSystemCW = 24,
  OuterChest = 25,
  Outfit = 26,
  PersonalLink = 27,
  PlayerTattoo = 28,
  Quest = 29,
  QuickSlot = 30,
  QuickWheel = 31,
  RightArm = 32,
  SilverhandArm = 33,
  Splinter = 34,
  SystemReplacementCW = 35,
  UnderwearBottom = 36,
  UnderwearTop = 37,
  VDefaultHandgun = 38,
  Weapon = 39,
  WeaponHeavy = 40,
  WeaponLeft = 41,
  WeaponWheel = 42,
  Count = 43,
  Invalid = 44,
}

enum gamedataWorkspotActionType {
  DeviceInvestigation = 0,
  FearHide = 1,
  LookAround = 2,
  Count = 3,
  Invalid = 4,
}

enum gamedataWorkspotReactionType {
  Anger = 0,
  BumpLeftBack = 1,
  BumpLeftFront = 2,
  BumpRightBack = 3,
  BumpRightFront = 4,
  Curious = 5,
  Fear = 6,
  Count = 7,
  Invalid = 8,
}

enum gamedataDistrict {
  ArasakaWaterfront = 0,
  ArasakaWaterfront_AbandonedWarehouse = 1,
  ArasakaWaterfront_KonpekiPlaza = 2,
  Arroyo = 3,
  Arroyo_Arasaka_Warehouse = 4,
  Arroyo_ClairesGarage = 5,
  Arroyo_CytechFactory = 6,
  Arroyo_Kendachi = 7,
  Arroyo_KenmoreCafe = 8,
  Arroyo_LasPalapas = 9,
  Arroyo_Red_Dirt = 10,
  Arroyo_TireEmpire = 11,
  Badlands = 12,
  Badlands_BiotechnicaFlats = 13,
  Badlands_DryCreek = 14,
  Badlands_JacksonPlains = 15,
  Badlands_LagunaBend = 16,
  Badlands_LasPalapas = 17,
  Badlands_NorthSunriseOilField = 18,
  Badlands_RattlesnakeCreek = 19,
  Badlands_RedPeaks = 20,
  Badlands_RockyRidge = 21,
  Badlands_SantaClara = 22,
  Badlands_SierraSonora = 23,
  Badlands_SoCalBorderCrossing = 24,
  Badlands_VasquezPass = 25,
  Badlands_Yucca = 26,
  Badlands_YuccaGarage = 27,
  Badlands_YuccaRadioTower = 28,
  CharterHill = 29,
  CharterHill_PowerPlant = 30,
  CityCenter = 31,
  Coastview = 32,
  Coastview_BattysHotel = 33,
  Coastview_ButcherShop = 34,
  Coastview_GrandImperialMall = 35,
  Coastview_RundownApartment = 36,
  Coastview_VDBChapel = 37,
  Coastview_VDBMaglev = 38,
  Coastview_q110Cyberspace = 39,
  CorpoPlaza = 40,
  CorpoPlaza_ArasakaTowerAtrium = 41,
  CorpoPlaza_ArasakaTowerCEOFloor = 42,
  CorpoPlaza_ArasakaTowerJenkins = 43,
  CorpoPlaza_ArasakaTowerJungle = 44,
  CorpoPlaza_ArasakaTowerLobby = 45,
  CorpoPlaza_ArasakaTowerNest = 46,
  CorpoPlaza_ArasakaTowerSaburoOffice = 47,
  CorpoPlaza_ArasakaTowerUnlistedFloors = 48,
  CorpoPlaza_ArasakaTowerUpperAtrium = 49,
  CorpoPlaza_q201Cyberspace = 50,
  Downtown = 51,
  Downtown_Jinguji = 52,
  Downtown_TheHammer = 53,
  Glen = 54,
  Glen_Embers = 55,
  Glen_MusicStore = 56,
  Glen_NCPDLab = 57,
  Glen_WichedTires = 58,
  Heywood = 59,
  JapanTown = 60,
  JapanTown_Clouds = 61,
  JapanTown_DarkMatter = 62,
  JapanTown_Fingers = 63,
  JapanTown_FourthWallBdStudio = 64,
  JapanTown_HiromisApartment = 65,
  JapanTown_MegabuildingH8 = 66,
  JapanTown_VR_Tutorial = 67,
  JapanTown_Wakakos_Pachinko_Parlor = 68,
  Kabuki = 69,
  Kabuki_JudysApartment = 70,
  Kabuki_LizziesBar = 71,
  Kabuki_NoTellMotel = 72,
  LagunaBend_LakeHut = 73,
  LittleChina = 74,
  LittleChina_Afterlife = 75,
  LittleChina_MistysShop = 76,
  LittleChina_Q101Cyberspace = 77,
  LittleChina_RiotClub = 78,
  LittleChina_TomsDiner = 79,
  LittleChina_VApartment = 80,
  LittleChina_VictorsClinic = 81,
  NorthBadlands = 82,
  NorthOaks = 83,
  NorthOaks_Arasaka_Estate = 84,
  NorthOaks_Columbarium = 85,
  NorthOaks_Denny_Estate = 86,
  NorthOaks_Kerry_Estate = 87,
  Northside = 88,
  Northside_All_Foods = 89,
  Northside_CleanCut = 90,
  Northside_Totentaz = 91,
  Northside_WNS = 92,
  Pacifica = 93,
  RanchoCoronado = 94,
  RanchoCoronado_Caliente = 95,
  RanchoCoronado_GunORama = 96,
  RanchoCoronado_Piez = 97,
  RanchoCoronado_Softsys = 98,
  RanchoCoronado_Stylishly = 99,
  SantoDomingo = 100,
  SouthBadlands = 101,
  SouthBadlands_EdgewoodFarm = 102,
  SouthBadlands_PoppyFarm = 103,
  SouthBadlands_TrailerPark = 104,
  SouthBadlands_q201SpaceStation = 105,
  VistaDelRey = 106,
  Vista_del_Rey_Delamain = 107,
  Vista_del_Rey_LaCatrina = 108,
  Vista_del_rey_Abandoned_Apartment_Building = 109,
  Vista_del_rey_ElCoyoteCojo = 110,
  Watson = 111,
  Wellsprings = 112,
  WestWindEstate = 113,
  Westbrook = 114,
  Count = 115,
  Invalid = 116,
}

enum gamedataNPCUpperBodyState {
  Aim = 0,
  Any = 1,
  Attack = 2,
  ChargedAttack = 3,
  Defend = 4,
  Equip = 5,
  Normal = 6,
  Parry = 7,
  Reload = 8,
  Shoot = 9,
  Taunt = 10,
  Count = 11,
  Invalid = 12,
}

enum gamedataNPCHighLevelState {
  Alerted = 0,
  Any = 1,
  Combat = 2,
  Dead = 3,
  Fear = 4,
  Relaxed = 5,
  Stealth = 6,
  Unconscious = 7,
  Wounded = 8,
  Count = 9,
  Invalid = 10,
}

enum gamedataNPCStanceState {
  Any = 0,
  Cover = 1,
  Crouch = 2,
  Stand = 3,
  Swim = 4,
  Vehicle = 5,
  VehicleWindow = 6,
  Count = 7,
  Invalid = 8,
}

enum gamedataNPCBehaviorState {
  State1 = 0,
  State2 = 1,
  State3 = 2,
  State4 = 3,
  State5 = 4,
  Count = 5,
  Invalid = 6,
}

enum gamedataDefenseMode {
  DefendAll = 0,
  DefendMelee = 1,
  DefendRanged = 2,
  NoDefend = 3,
  Count = 4,
  Invalid = 5,
}

enum gamedataLocomotionMode {
  Moving = 0,
  Static = 1,
  Count = 2,
  Invalid = 3,
}

enum gamedataNPCType {
  Android = 0,
  Any = 1,
  Drone = 2,
  Human = 3,
  Mech = 4,
  Spiderbot = 5,
  Count = 6,
  Invalid = 7,
}

enum gamedataUINameplateDisplayType {
  AfterScan = 0,
  Always = 1,
  Default = 2,
  Never = 3,
  Count = 4,
  Invalid = 5,
}

enum gamedataNPCRarity {
  Boss = 0,
  Elite = 1,
  Normal = 2,
  Officer = 3,
  Rare = 4,
  Trash = 5,
  Weak = 6,
  Count = 7,
  Invalid = 8,
}

enum gamedataAIActionTarget {
  AssignedVehicle = 0,
  CombatTarget = 1,
  CommandCover = 2,
  CommandMovementDestination = 3,
  ConsideredCover = 4,
  CurrentCover = 5,
  CurrentNetrunnerProxy = 6,
  CustomWorldPosition = 7,
  DesiredCover = 8,
  FriendlyTarget = 9,
  FurthestNavigableSquadmate = 10,
  FurthestSquadmate = 11,
  FurthestThreat = 12,
  HostileOfficer = 13,
  MountedVehicle = 14,
  MovementDestination = 15,
  NearestDefeatedSquadmate = 16,
  NearestNavigableSquadmate = 17,
  NearestSquadmate = 18,
  NearestThreat = 19,
  NetrunnerProxy = 20,
  ObjectOfInterest = 21,
  Owner = 22,
  Player = 23,
  PointOfInterest = 24,
  RingBackDestination = 25,
  RingBackLeftDestination = 26,
  RingBackRightDestination = 27,
  RingFrontDestination = 28,
  RingFrontLeftDestination = 29,
  RingFrontRightDestination = 30,
  RingLeftDestination = 31,
  RingRightDestination = 32,
  SelectedCover = 33,
  SpawnPosition = 34,
  SquadOfficer = 35,
  StimSource = 36,
  StimTarget = 37,
  TargetDevice = 38,
  TargetItem = 39,
  TopFriendly = 40,
  TopThreat = 41,
  VisibleFurthestThreat = 42,
  VisibleNearestThreat = 43,
  VisibleTopThreat = 44,
  Count = 45,
  Invalid = 46,
}

enum gamedataAIActionType {
  BackUp = 0,
  BattleCry = 1,
  Block = 2,
  CallOff = 3,
  Charge = 4,
  Crouch = 5,
  Dash = 6,
  GrenadeThrow = 7,
  GroupReaction = 8,
  Investigate = 9,
  Melee = 10,
  Peek = 11,
  Quickhack = 12,
  Reprimand = 13,
  Search = 14,
  Shoot = 15,
  Sync = 16,
  TakeCover = 17,
  Takedown = 18,
  Taunt = 19,
  Count = 20,
  Invalid = 21,
}

enum gamedataAITacticType {
  Assault = 0,
  Defend = 1,
  Flank = 2,
  Medivac = 3,
  Panic = 4,
  Regroup = 5,
  Retreat = 6,
  Snipe = 7,
  Suppress = 8,
  Count = 9,
  Invalid = 10,
}

enum gamedataAIRingType {
  Approach = 0,
  Close = 1,
  Default = 2,
  Defend = 3,
  Extreme = 4,
  Far = 5,
  LatestActive = 6,
  Medium = 7,
  Melee = 8,
  Support = 9,
  Undefined = 10,
  Count = 11,
  Invalid = 12,
}

enum gamedataAITicketType {
  BackUp = 0,
  BattleCry = 1,
  Block = 2,
  CallOff = 3,
  CatchUp = 4,
  Charge = 5,
  CloseRing = 6,
  CloseRing1stFilter = 7,
  CloseRing2ndFilter = 8,
  Crouch = 9,
  DefaultRing = 10,
  Equip = 11,
  EquipMelee = 12,
  ExtremeRing = 13,
  ExtremeRing1stFilter = 14,
  ExtremeRing2ndFilter = 15,
  FarRing = 16,
  FarRing1stFilter = 17,
  FarRing2ndFilter = 18,
  GoToCover = 19,
  GrenadeThrow = 20,
  GroupReaction = 21,
  Investigate = 22,
  MediumRing = 23,
  MediumRing1stFilter = 24,
  MediumRing2ndFilter = 25,
  Melee = 26,
  MeleeApproach = 27,
  MeleeRing = 28,
  MeleeRing1stFilter = 29,
  MeleeRing2ndFilter = 30,
  MeleeSupport = 31,
  Peek = 32,
  QuickMelee = 33,
  Quickhack = 34,
  Reload = 35,
  Reprimand = 36,
  Search = 37,
  Shoot = 38,
  SimpleCombat = 39,
  SimpleCombatMovement = 40,
  Strafe = 41,
  StrafeEvade = 42,
  Sync = 43,
  TakeCover = 44,
  Takedown = 45,
  Taunt = 46,
  TauntBackground = 47,
  Count = 48,
  Invalid = 49,
}

enum gamedataAISquadType {
  Attitude = 0,
  Community = 1,
  Global = 2,
  Security = 3,
  Unknown = 4,
  Count = 5,
  Invalid = 6,
}

enum gamedataAIActionSecurityNotificationType {
  COMBAT = 0,
  DEESCALATE = 1,
  DEFAULT = 2,
  ILLEGAL_ACTION = 3,
  REPRIMAND_ESCALATE = 4,
  REPRIMAND_SUCCESSFUL = 5,
  SECURITY_GATE = 6,
  Count = 7,
  Invalid = 8,
}

enum gamedataAIActionSecurityAreaType {
  DANGEROUS = 0,
  DISABLED = 1,
  RESTRICTED = 2,
  SAFE = 3,
  Count = 4,
  Invalid = 5,
}

enum gamedataAISmartCompositeType {
  Selector = 0,
  SelectorWithMemory = 1,
  SelectorWithSmartMemory = 2,
  Sequence = 3,
  SequenceWithMemory = 4,
  SequenceWithSmartMemory = 5,
  Count = 6,
  Invalid = 7,
}

enum gamedataAIExposureMethodType {
  BlindFire = 0,
  Lean = 1,
  StepOut = 2,
  Count = 3,
  Invalid = 4,
}

enum gamedataAIAdditionalTraceType {
  Chest = 0,
  Hip = 1,
  Knee = 2,
  Undefined = 3,
  Count = 4,
  Invalid = 5,
}

enum gamedataAIThreatPersistenceSource {
  AddThreat = 0,
  CatchUp = 1,
  CommandAimWithWeapon = 2,
  CommandForceShoot = 3,
  CommandInjectCombatTarget = 4,
  CommandInjectThreat = 5,
  CommandMeleeAttack = 6,
  CommandShoot = 7,
  CommandThrowGrenade = 8,
  Default = 9,
  SetNewCombatTarget = 10,
  TrackedBySecuritySystemAgent = 11,
  Count = 12,
  Invalid = 13,
}

enum gamedataVehicleType {
  Bike = 0,
  Car = 1,
  Panzer = 2,
  Count = 3,
  Invalid = 4,
}

enum gamedataVehicleModel {
  Aerondight = 0,
  Alvarado = 1,
  Basilisk = 2,
  Bratsk = 3,
  Colby = 4,
  Columbus = 5,
  Cortes = 6,
  Emperor = 7,
  Galena = 8,
  GalenaNomad = 9,
  Kusanagi = 10,
  Mackinaw = 11,
  Maimai = 12,
  Octant = 13,
  Shion = 14,
  Supron = 15,
  Thrax = 16,
  Turbo = 17,
  Type66 = 18,
  Zeya = 19,
  Count = 20,
  Invalid = 21,
}

enum gamedataVehicleManufacturer {
  Arch = 0,
  Archer = 1,
  Aurochs = 2,
  Brennan = 3,
  Chevillon = 4,
  Delamain = 5,
  Herrera = 6,
  Kaukaz = 7,
  Makigai = 8,
  Militech = 9,
  Mizutani = 10,
  Porsche = 11,
  Quadra = 12,
  Rayfield = 13,
  Seamurai = 14,
  Thorton = 15,
  Villefort = 16,
  Yaiba = 17,
  Zetatech = 18,
  Count = 19,
  Invalid = 20,
}

enum gamedataAIRole {
  Follower = 0,
  Patrol = 1,
  Count = 2,
  Invalid = 3,
}

enum gamedataChoiceCaptionPartType {
  Blueline = 0,
  Icon = 1,
  QuickhackCost = 2,
  Tag = 3,
  Text = 4,
  Count = 5,
  Invalid = 6,
}

enum gamedataSubCharacter {
  Flathead = 0,
  Count = 1,
  Invalid = 2,
}

enum gamedataFxAction {
  EnterCharge = 0,
  EnterDischarge = 1,
  EnterLowAmmo = 2,
  EnterNoAmmo = 3,
  EnterOverheat = 4,
  EnterReload = 5,
  ExitCharge = 6,
  ExitDischarge = 7,
  ExitLowAmmo = 8,
  ExitNoAmmo = 9,
  ExitOverheat = 10,
  ExitReload = 11,
  MeleeBlock = 12,
  MeleeHit = 13,
  Shoot = 14,
  SilencedShoot = 15,
  Count = 16,
  Invalid = 17,
}

enum gamedataFxActionType {
  BreakLoop = 0,
  Kill = 1,
  Start = 2,
  Count = 3,
  Invalid = 4,
}

enum gamedataLifePath {
  Corporate = 0,
  Nomad = 1,
  StreetKid = 2,
  Count = 3,
  Invalid = 4,
}

enum gamedataPlayerBuild {
  Cool = 0,
  Netrunner = 1,
  Reflexes = 2,
  Solo = 3,
  Techie = 4,
  Count = 5,
  Invalid = 6,
}

enum gamedataStatusEffectAIBehaviorType {
  Basic = 0,
  Undefined = 1,
  Stoppable = 2,
  Unstoppable = 3,
  Count = 4,
  Invalid = 5,
}

enum gamedataStatusEffectAIBehaviorFlag {
  AcceptsAdditives = 0,
  InterruptsForcedBehavior = 1,
  InterruptsSamePriorityTask = 2,
  Undefined = 3,
  OverridesSelf = 4,
  Count = 5,
  Invalid = 6,
}

enum gamedataObjectActionType {
  DeviceQuickHack = 0,
  Direct = 1,
  Item = 2,
  MinigameUpload = 3,
  Payment = 4,
  PuppetQuickHack = 5,
  Remote = 6,
  Count = 7,
  Invalid = 8,
}

enum gamedataObjectActionReference {
  Instigator = 0,
  Source = 1,
  Target = 2,
  Count = 3,
  Invalid = 4,
}

enum gamedataPingType {
  Device = 0,
  Door = 1,
  Elevator = 2,
  Junction = 3,
  Location = 4,
  Loot = 5,
  Trap = 6,
  Count = 7,
  Invalid = 8,
}

enum gamedataPerkArea {
  Assault_Area_01 = 0,
  Assault_Area_02 = 1,
  Assault_Area_03 = 2,
  Assault_Area_04 = 3,
  Assault_Area_05 = 4,
  Assault_Area_06 = 5,
  Assault_Area_07 = 6,
  Assault_Area_08 = 7,
  Assault_Area_09 = 8,
  Assault_Area_10 = 9,
  Athletics_Area_01 = 10,
  Athletics_Area_02 = 11,
  Athletics_Area_03 = 12,
  Athletics_Area_04 = 13,
  Athletics_Area_05 = 14,
  Athletics_Area_06 = 15,
  Athletics_Area_07 = 16,
  Athletics_Area_08 = 17,
  Athletics_Area_09 = 18,
  Athletics_Area_10 = 19,
  Brawling_Area_01 = 20,
  Brawling_Area_02 = 21,
  Brawling_Area_03 = 22,
  Brawling_Area_04 = 23,
  Brawling_Area_05 = 24,
  Brawling_Area_06 = 25,
  Brawling_Area_07 = 26,
  Brawling_Area_08 = 27,
  ColdBlood_Area_01 = 28,
  ColdBlood_Area_02 = 29,
  ColdBlood_Area_03 = 30,
  ColdBlood_Area_04 = 31,
  ColdBlood_Area_05 = 32,
  ColdBlood_Area_06 = 33,
  ColdBlood_Area_07 = 34,
  ColdBlood_Area_08 = 35,
  ColdBlood_Area_09 = 36,
  ColdBlood_Area_10 = 37,
  CombatHacking_Area_01 = 38,
  CombatHacking_Area_02 = 39,
  CombatHacking_Area_03 = 40,
  CombatHacking_Area_04 = 41,
  CombatHacking_Area_05 = 42,
  CombatHacking_Area_06 = 43,
  CombatHacking_Area_07 = 44,
  CombatHacking_Area_08 = 45,
  CombatHacking_Area_09 = 46,
  CombatHacking_Area_10 = 47,
  Crafting_Area_01 = 48,
  Crafting_Area_02 = 49,
  Crafting_Area_03 = 50,
  Crafting_Area_04 = 51,
  Crafting_Area_05 = 52,
  Crafting_Area_06 = 53,
  Crafting_Area_07 = 54,
  Crafting_Area_08 = 55,
  Crafting_Area_09 = 56,
  Crafting_Area_10 = 57,
  Demolition_Area_01 = 58,
  Demolition_Area_02 = 59,
  Demolition_Area_03 = 60,
  Demolition_Area_04 = 61,
  Demolition_Area_05 = 62,
  Demolition_Area_06 = 63,
  Demolition_Area_07 = 64,
  Demolition_Area_08 = 65,
  Demolition_Area_09 = 66,
  Demolition_Area_10 = 67,
  Engineering_Area_01 = 68,
  Engineering_Area_02 = 69,
  Engineering_Area_03 = 70,
  Engineering_Area_04 = 71,
  Engineering_Area_05 = 72,
  Engineering_Area_06 = 73,
  Engineering_Area_07 = 74,
  Engineering_Area_08 = 75,
  Engineering_Area_09 = 76,
  Engineering_Area_10 = 77,
  Gunslinger_Area_01 = 78,
  Gunslinger_Area_02 = 79,
  Gunslinger_Area_03 = 80,
  Gunslinger_Area_04 = 81,
  Gunslinger_Area_05 = 82,
  Gunslinger_Area_06 = 83,
  Gunslinger_Area_07 = 84,
  Gunslinger_Area_08 = 85,
  Gunslinger_Area_09 = 86,
  Gunslinger_Area_10 = 87,
  Hacking_Area_01 = 88,
  Hacking_Area_02 = 89,
  Hacking_Area_03 = 90,
  Hacking_Area_04 = 91,
  Hacking_Area_05 = 92,
  Hacking_Area_06 = 93,
  Hacking_Area_07 = 94,
  Hacking_Area_08 = 95,
  Hacking_Area_09 = 96,
  Hacking_Area_10 = 97,
  Kenjutsu_Area_01 = 98,
  Kenjutsu_Area_02 = 99,
  Kenjutsu_Area_03 = 100,
  Kenjutsu_Area_04 = 101,
  Kenjutsu_Area_05 = 102,
  Kenjutsu_Area_06 = 103,
  Kenjutsu_Area_07 = 104,
  Kenjutsu_Area_08 = 105,
  Stealth_Area_01 = 106,
  Stealth_Area_02 = 107,
  Stealth_Area_03 = 108,
  Stealth_Area_04 = 109,
  Stealth_Area_05 = 110,
  Stealth_Area_06 = 111,
  Stealth_Area_07 = 112,
  Stealth_Area_08 = 113,
  Stealth_Area_09 = 114,
  Stealth_Area_10 = 115,
  Count = 116,
  Invalid = 117,
}

enum gamedataAIDirectorEntryStartType {
  Default = 0,
  DespawnAllEnemies = 1,
  DespawnExcessedEnemies = 2,
  WaitUntilNoEnemies = 3,
  WaitUntilSameOrLessAmountOfEnemies = 4,
  Count = 5,
  Invalid = 6,
}

enum gamedataVendorType {
  Armorsmith = 0,
  Clothes = 1,
  Clothing = 2,
  Cyberware = 3,
  Drinks = 4,
  DropPoint = 5,
  Food = 6,
  GrilledFood = 7,
  Gunsmith = 8,
  Junk = 9,
  Kiosk = 10,
  Market = 11,
  Medical = 12,
  PackedFood = 13,
  RipperDoc = 14,
  SkillTrainer = 15,
  Tech = 16,
  TechJunk = 17,
  VendingMachine = 18,
  Count = 19,
  Invalid = 20,
}

enum gamedataMeleeAttackDirection {
  Center = 0,
  DownToUp = 1,
  LeftDownToRightUp = 2,
  LeftToRight = 3,
  LeftUpToRightDown = 4,
  RightDownToLeftUp = 5,
  RightToLeft = 6,
  RightUpToLeftDown = 7,
  UpToDown = 8,
  Count = 9,
  Invalid = 10,
}

enum gamedataGrenadeDeliveryMethodType {
  Homing = 0,
  Regular = 1,
  Sticky = 2,
  Count = 3,
  Invalid = 4,
}

enum gamedataUICondition {
  InEyesSubMenu = 0,
  InHandsSubMenu = 1,
  InSubMenu = 2,
  Visible = 3,
  Count = 4,
  Invalid = 5,
}

enum gamedataWorldMapFilter {
  All = 0,
  DropPoint = 1,
  FastTravel = 2,
  NoFilter = 3,
  Quest = 4,
  ServicePoint = 5,
  Story = 6,
  VehiclesForPurchaseFilter = 7,
  Count = 8,
  Invalid = 9,
}

enum gamedataSpawnableObjectPriority {
  Crowd = 0,
  Quest = 1,
  Regular = 2,
  Count = 3,
  Invalid = 4,
}

enum gamedataStatusEffectVariation {
  Bike = 0,
  Default = 1,
  Vehicle = 2,
  Count = 3,
  Invalid = 4,
}

enum gamedataCompanionDistancePreset {
  Close = 0,
  Far = 1,
  Medium = 2,
  VeryFar = 3,
  Count = 4,
  Invalid = 5,
}

enum gamedataProjectileOnCollisionAction {
  Bounce = 0,
  Pierce = 1,
  Stop = 2,
  StopAndStick = 3,
  StopAndStickPerpendicular = 4,
  Count = 5,
  Invalid = 6,
}

enum gamedataProjectileLaunchMode {
  Regular = 0,
  Tracking = 1,
  Count = 2,
  Invalid = 3,
}

enum gamedataNPCQuestAffiliation {
  General = 0,
  MainQuest = 1,
  MinorActivity = 2,
  MinorQuest = 3,
  SideQuest = 4,
  StreetStory = 5,
  Count = 6,
  Invalid = 7,
}

enum gamedataAchievement {
  Bladerunner = 0,
  BornToBeWild = 1,
  Breathtaking = 2,
  BushidoAndChill = 3,
  Cyberjunkie = 4,
  Denied = 5,
  FollowingTheRiver = 6,
  Fortuneteller = 7,
  Gearhead = 8,
  GetMeThereScottie = 9,
  GunKata = 10,
  Gunslinger = 11,
  HandyMan = 12,
  IAmMaxTac = 13,
  LikeFatherLikeSon = 14,
  LittleTokyo = 15,
  MasterRunner = 16,
  MaxPain = 17,
  MustBeTheRats = 18,
  NeverFadeAway = 19,
  NoMansLand = 20,
  NotTheMobile = 21,
  QueenOfTheHighway = 22,
  Roleplayer = 23,
  Specialist = 24,
  Temperance = 25,
  ThatIsSoHardForTheKnees = 26,
  TheDevil = 27,
  TheFool = 28,
  TheHermit = 29,
  TheHightPriestess = 30,
  TheLovers = 31,
  TheStar = 32,
  TheSun = 33,
  TheWheelOfFortune = 34,
  TheWorld = 35,
  ThisIsPacifica = 36,
  TradeUnion = 37,
  TrueSoldier = 38,
  TrueWarrior = 39,
  TwoHeadsOneBullet = 40,
  UnderPressure = 41,
  VForVendetta = 42,
  YipMan = 43,
  YouKnowWhoIAm = 44,
  Count = 45,
  Invalid = 46,
}

enum gamedataOutput {
  AskToFollowOrder = 0,
  AskToHolster = 1,
  BackOff = 2,
  BodyInvestigate = 3,
  Bump = 4,
  CallGuard = 5,
  CallPolice = 6,
  DeviceInvestigate = 7,
  Dodge = 8,
  DodgeToSide = 9,
  FearInPlace = 10,
  Flee = 11,
  Ignore = 12,
  Intruder = 13,
  Investigate = 14,
  LookAt = 15,
  Panic = 16,
  PlayerCall = 17,
  Reprimand = 18,
  SquadCall = 19,
  Surrender = 20,
  TurnAt = 21,
  WalkAway = 22,
  Count = 23,
  Invalid = 24,
}

enum gamedataWorkspotCategory {
  Any = 0,
  Eating = 1,
  Nervous = 2,
  Sitting = 3,
  Sleeping = 4,
  Smoking = 5,
  Count = 6,
  Invalid = 7,
}

enum gamedataSenseObjectType {
  Camera = 0,
  Deadbody = 1,
  Follower = 2,
  Npc = 3,
  Player = 4,
  Turret = 5,
  Undefined = 6,
  Count = 7,
  Invalid = 8,
}

enum gamedataImprovementRelation {
  Direct = 0,
  Inverse = 1,
  Undefined = 2,
  Count = 3,
  Invalid = 4,
}

enum gamedataConsumableType {
  Drug = 0,
  Medical = 1,
  Count = 2,
  Invalid = 3,
}

enum gamedataPlayerPossesion {
  Default = 0,
  Johnny = 1,
  Count = 2,
  Invalid = 3,
}

enum gamedataTraitType {
  AssaultTrait01 = 0,
  AthleticsTrait01 = 1,
  BrawlingTrait01 = 2,
  ColdBloodTrait01 = 3,
  CombatHackingTrait01 = 4,
  CraftingTrait01 = 5,
  DemolitionTrait01 = 6,
  EngineeringTrait01 = 7,
  GunslingerTrait01 = 8,
  HackingTrait01 = 9,
  KenjutsuTrait01 = 10,
  StealthTrait01 = 11,
  Count = 12,
  Invalid = 13,
}

enum gamedataAttackSubtype {
  BlockAttack = 0,
  ComboAttack = 1,
  CrouchAttack = 2,
  DeflectAttack = 3,
  EquipAttack = 4,
  FinalAttack = 5,
  JumpAttack = 6,
  SafeAttack = 7,
  SprintAttack = 8,
  ThrowAttack = 9,
  Count = 10,
  Invalid = 11,
}

enum gamedataPerkUtility {
  ActiveUtility = 0,
  PassiveUtility = 1,
  TriggeredUtility = 2,
  Count = 3,
  Invalid = 4,
}

enum gamedataArchetypeType {
  AndroidMeleeT1 = 0,
  AndroidMeleeT2 = 1,
  AndroidRangedT2 = 2,
  FastMeleeT2 = 3,
  FastMeleeT3 = 4,
  FastRangedT2 = 5,
  FastRangedT3 = 6,
  FastShotgunnerT2 = 7,
  FastShotgunnerT3 = 8,
  FastSniperT3 = 9,
  FriendlyGenericRangedT3 = 10,
  GenericMeleeT1 = 11,
  GenericMeleeT2 = 12,
  GenericRangedT1 = 13,
  GenericRangedT2 = 14,
  GenericRangedT3 = 15,
  HeavyMeleeT2 = 16,
  HeavyMeleeT3 = 17,
  HeavyRangedT2 = 18,
  HeavyRangedT3 = 19,
  NetrunnerT1 = 20,
  NetrunnerT2 = 21,
  NetrunnerT3 = 22,
  ShotgunnerT2 = 23,
  ShotgunnerT3 = 24,
  SniperT2 = 25,
  TechieT2 = 26,
  TechieT3 = 27,
  Count = 28,
  Invalid = 29,
}

enum gamedataItemStructure {
  BlueprintStackable = 0,
  Stackable = 1,
  Unique = 2,
  Count = 3,
  Invalid = 4,
}

enum gamedataHitPrereqConditionType {
  AgentMoving = 0,
  AmmoState = 1,
  AttackSubType = 2,
  AttackType = 3,
  BodyPart = 4,
  DamageOverTimeType = 5,
  DamageType = 6,
  DistanceCovered = 7,
  HitFlag = 8,
  InstigatorType = 9,
  SameTarget = 10,
  SourceType = 11,
  StatPool = 12,
  StatPoolComparison = 13,
  StatusEffectPresent = 14,
  TargetKilled = 15,
  TargetNPCRarity = 16,
  TargetNPCType = 17,
  TargetType = 18,
  WeaponType = 19,
  WoundedTriggered = 20,
  Count = 21,
  Invalid = 22,
}

enum gamedataTrackingMode {
  BeliefPosition = 0,
  LastKnownPosition = 1,
  RealPosition = 2,
  SharedBeliefPosition = 3,
  SharedLastKnownPosition = 4,
  Count = 5,
  Invalid = 6,
}

enum gamedataConsumableBaseName {
  Alcohol = 0,
  BonesMcCoy70 = 1,
  CarryCapacityBooster = 2,
  Drinkable = 3,
  Edible = 4,
  FirstAidWhiff = 5,
  HealthBooster = 6,
  MemoryBooster = 7,
  OxyBooster = 8,
  StaminaBooster = 9,
  Count = 10,
  Invalid = 11,
}

enum gamedataMetaQuest {
  MetaQuest1 = 0,
  MetaQuest2 = 1,
  MetaQuest3 = 2,
  Count = 3,
  Invalid = 4,
}

enum gamedataAimAssistType {
  HeadTarget = 0,
  LegTarget = 1,
  MechanicalTarget = 2,
  Melee = 3,
  Undefined = 4,
  QuickHack = 5,
  Scanning = 6,
  Shooting = 7,
  ShootingLimbCyber = 8,
  Count = 9,
  Invalid = 10,
}

enum gamedataUIIconCensorFlag {
  Drugs = 0,
  Gore = 1,
  Homosexuality = 2,
  Undefined = 3,
  Nudity = 4,
  OverSexualised = 5,
  Religion = 6,
  Suggestive = 7,
  Count = 8,
  Invalid = 9,
}

enum gameVisionModeType {
  Default = 0,
  Focus = 1,
}

enum VisionModePatternType {
  Default = 0,
  Netrunner = 1,
}

enum EOutlineType {
  NONE = 0,
  GREEN = 1,
  RED = 2,
}

enum gameinteractionsEInteractionEventType {
  EIET_activate = 0,
  EIET_deactivate = 1,
}

enum animLookAtStyle {
  VerySlow = 0,
  Slow = 1,
  Normal = 2,
  Fast = 3,
  VeryFast = 4,
}

enum animLookAtLimitDegreesType {
  Narrow = 0,
  Normal = 1,
  Wide = 2,
  Undefined = 3,
}

enum animLookAtLimitDistanceType {
  Short = 0,
  Normal = 1,
  Long = 2,
  Undefined = 3,
}

enum animLookAtChestMode {
  Default = 0,
  NoHips = 1,
  Horizontal = 2,
  HorizontalNoHips = 3,
}

enum animLookAtHeadMode {
  Default = 0,
  Horizontal = 1,
}

enum animLookAtEyesMode {
  Default = 0,
  Horizontal = 1,
}

enum animLookAtLeftHandedMode {
  Default = 0,
  Horizontal = 1,
}

enum animLookAtRightHandedMode {
  Default = 0,
  Horizontal = 1,
}

enum animLookAtTwoHandedMode {
  Default = 0,
  Horizontal = 1,
}

enum animLookAtStatus {
  Active = 0,
  LimitReached = 1,
  TransitionInProgress = 2,
}

enum gameprojectileELaunchMode {
  Default = 0,
  FromLogic = 1,
  FromVisuals = 2,
}

enum gameeventsDeathDirection {
  Undefined = 0,
  Left = 1,
  Backward = 2,
  Right = 3,
  Forward = 4,
}

enum gameinteractionsReactionState {
  Idle = 0,
  Starting = 1,
  InInteraction = 2,
  Finishing = 3,
  Canceling = 4,
}

enum gameinteractionsBumpSide {
  Invalid = 0,
  Left = 1,
  Right = 2,
}

enum gameinteractionsBumpIntensity {
  Invalid = 0,
  Light = 1,
  Medium = 2,
  Heavy = 3,
  Strafe = 4,
}

enum gameinteractionsBumpLocation {
  Invalid = 0,
  Front = 1,
  Back = 2,
}

enum gameScanningState {
  Default = 0,
  Started = 1,
  Stopped = 2,
  Complete = 3,
  ShallowComplete = 4,
}

enum gameScanningMode {
  Inactive = 0,
  Light = 1,
  Heavy = 2,
}

enum gamestateMachineParameterAspect {
  Temporary = 0,
  Permanent = 1,
  Conditional = 2,
}

enum gameinteractionsChoiceType {
  QuestImportant = 0,
  AlreadyRead = 1,
  Inactive = 2,
  CheckSuccess = 3,
  CheckFailed = 4,
  InnerDialog = 5,
  PossessedDialog = 6,
  TimedDialog = 7,
  Blueline = 8,
  Pay = 9,
  Selected = 10,
  Illegal = 11,
}

enum EDeviceChallengeSkill {
  Invalid = 0,
  Hacking = 1,
  Engineering = 2,
  Athletics = 3,
}

enum EDeviceChallengeAttribute {
  Invalid = 0,
  Strength = 1,
  Reflexes = 2,
  Intelligence = 3,
  TechnicalAbility = 4,
  Cool = 5,
}

enum ELogicOperator {
  OR = 0,
  AND = 1,
}

enum gameTickableEventState {
  Idle = 0,
  FirstTick = 1,
  NormalTick = 2,
  LastTick = 3,
  Canceled = 4,
}

enum gameScriptTaskExecutionStage {
  Any = 0,
  PostPhysics = 1,
}

enum gamedeviceActionPropertyFlags {
  Undefined = 0,
  IsUsedByQuest = 1,
}

enum gamePlatformMovementState {
  Stopped = 0,
  Paused = 1,
  MovingUp = 2,
  MovingDown = 3,
}

enum gameMovingPlatformMovementInitializationType {
  Time = 0,
  Speed = 1,
}

enum gameMovingPlatformLoopType {
  NoLooping = 0,
  Bounce = 1,
  Repeat = 2,
}

enum EItemSlotCheckType {
  NONE = -1,
  TAG = 0,
  TYPE = 1,
  CATEGORY = 2,
  EVOLUTION = 3,
  FULLY_MODDED = 4,
}

enum physicsStateValue {
  Position = 0,
  Rotation = 1,
  LinearVelocity = 2,
  AngularVelocity = 3,
  LinearSpeed = 4,
  TouchesWalls = 5,
  ImpulseAccumulator = 6,
  Mass = 7,
  Volume = 8,
  IsSimulated = 9,
  IsKinematic = 10,
  SimulationFilter = 11,
  Radius = 12,
}

enum EDodgeMovementInput {
  Invalid = 0,
  Forward = 1,
  Right = 2,
  Left = 3,
  Back = 4,
}

enum gameStoryTier {
  Gameplay = 0,
  Cinematic = 1,
}

enum gamePlayerStateMachine {
  Locomotion = 0,
  UpperBody = 1,
  Weapon = 2,
  HighLevel = 3,
  Projectile = 4,
  Vision = 5,
  TimeDilation = 6,
  CoverAction = 7,
  IconicItem = 8,
  Combat = 9,
  Takedown = 10,
}

enum gamePSMLocomotionStates {
  Default = 0,
  Crouch = 1,
  Sprint = 2,
  Kereznikov = 3,
  Jump = 4,
  Vault = 5,
  Dodge = 6,
  DodgeAir = 7,
  Workspot = 8,
  Slide = 9,
  SlideFall = 10,
}

enum gamePSMUpperBodyStates {
  Default = 0,
  SwitchItems = 1,
  SwitchCyberware = 2,
  Reload = 3,
  TemporaryUnequip = 4,
  ForceEmptyHands = 5,
  Aim = 6,
}

enum gamePSMWeaponStates {
  Default = 0,
  NoAmmo = 1,
  Ready = 2,
  Safe = 3,
}

enum gamePSMTimeDilation {
  Default = 0,
  Sandevistan = 1,
}

enum gamePSMHighLevel {
  Default = 0,
  SceneTier1 = 1,
  SceneTier2 = 2,
  SceneTier3 = 3,
  SceneTier4 = 4,
  SceneTier5 = 5,
  Swimming = 6,
}

enum gamePSMZones {
  Default = 0,
  Public = 1,
  Safe = 2,
  Restricted = 3,
  Dangerous = 4,
}

enum gamePSMBodyCarryingStyle {
  Any = 0,
  Default = 1,
  Friendly = 2,
  Strong = 3,
}

enum gamePSMBodyCarrying {
  Default = 0,
  PickUp = 1,
  Carry = 2,
  Dispose = 3,
  Drop = 4,
}

enum gamePSMMelee {
  Default = 0,
  Attack = 1,
  Block = 2,
}

enum gamePSMUIState {
  Undefined = 0,
  WeaponSelect = 1,
}

enum gamePSMCrosshairStates {
  Default = 0,
  Safe = 1,
  Scanning = 2,
  GrenadeCharging = 3,
  Aim = 4,
  Reload = 5,
  Sprint = 6,
  HipFire = 7,
  LeftHandCyberware = 8,
  QuickHack = 9,
}

enum gamePSMReaction {
  Default = 0,
  Stagger = 1,
}

enum gamePSMVisionDebug {
  Default = 0,
  VisionToggle = 1,
}

enum gamePSMVision {
  Default = 0,
  Focus = 1,
}

enum gamePSMCombatGadget {
  Default = 0,
  EquipRequest = 1,
  Equipped = 2,
  Charging = 3,
  Throwing = 4,
  WaitForUnequip = 5,
  QuickThrow = 6,
}

enum gamePSMVehicle {
  Default = 0,
  Driving = 1,
  Combat = 2,
  Passenger = 3,
  Transition = 4,
  Turret = 5,
  DriverCombat = 6,
  Scene = 7,
}

enum gamePSMWhip {
  Default = 0,
  Charging = 1,
  Pulling = 2,
}

enum coverLeanDirection {
  Top = 0,
  Left = 1,
  Right = 2,
}

enum gamePSMLeftHandCyberware {
  Default = 0,
  Safe = 1,
  EquipRequest = 2,
  Idle = 3,
  Equipped = 4,
  Charge = 5,
  Loop = 6,
  Catch = 7,
  QuickAction = 8,
  ChargeAction = 9,
  CatchAction = 10,
  StartUnequip = 11,
  Unequip = 12,
}

enum gamePSMMeleeWeapon {
  NotReady = 0,
  Idle = 1,
  Safe = 2,
  PublicSafe = 3,
  Parried = 4,
  Hold = 5,
  ChargedHold = 6,
  Block = 7,
  Targeting = 8,
  Deflect = 9,
  ComboAttack = 10,
  FinalAttack = 11,
  StrongAttack = 12,
  SafeAttack = 13,
  BlockAttack = 14,
  SprintAttack = 15,
  CrouchAttack = 16,
  JumpAttack = 17,
  ThrowAttack = 18,
  DeflectAttack = 19,
  EquipAttack = 20,
  Default = 21,
}

enum gamePSMDetailedLocomotionStates {
  NotInBaseLocomotion = 0,
  Stand = 1,
  AimWalk = 2,
  Crouch = 3,
  Sprint = 4,
  Slide = 5,
  SlideFall = 6,
  Dodge = 7,
  Climb = 8,
  Vault = 9,
  Ladder = 10,
  LadderSprint = 11,
  LadderSlide = 12,
  LadderJump = 13,
  Fall = 14,
  AirThrusters = 15,
  AirHover = 16,
  SuperheroFall = 17,
  Jump = 18,
  DoubleJump = 19,
  ChargeJump = 20,
  HoverJump = 21,
  DodgeAir = 22,
  RegularLand = 23,
  HardLand = 24,
  VeryHardLand = 25,
  DeathLand = 26,
  SuperheroLand = 27,
  SuperheroLandRecovery = 28,
  Knockdown = 29,
}

enum gamePSMCombat {
  Default = 0,
  InCombat = 1,
  OutOfCombat = 2,
  Stealth = 3,
}

enum gamePSMStamina {
  Rested = 0,
  Exhausted = 1,
}

enum gamePSMVitals {
  Alive = 0,
  Dead = 1,
  Resurrecting = 2,
}

enum gamePSMTakedown {
  Default = 0,
  EnteringGrapple = 1,
  Grapple = 2,
  Leap = 3,
  Takedown = 4,
}

enum gamePSMRangedWeaponStates {
  Default = 0,
  Charging = 1,
  Reload = 2,
  QuickMelee = 3,
  NoAmmo = 4,
  Ready = 5,
  Safe = 6,
  Overheat = 7,
  Shoot = 8,
}

enum gamePSMFallStates {
  Default = 0,
  RegularFall = 1,
  SafeFall = 2,
  FastFall = 3,
  VeryFastFall = 4,
  DeathFall = 5,
}

enum gamePSMLandingState {
  Default = 0,
  RegularLand = 1,
  HardLand = 2,
  VeryHardLand = 3,
  DeathLand = 4,
  SuperheroLand = 5,
  SuperheroLandRecovery = 6,
}

enum braindanceVisionMode {
  Default = 0,
  Audio = 1,
  Thermal = 2,
}

enum gamePSMWorkspotState {
  Default = 0,
  Workspot = 1,
}

enum gamePSMSwimming {
  Default = 0,
  Surface = 1,
  Diving = 2,
}

enum gamePSMBodyCarryingLocomotion {
  Default = 0,
  Jump = 1,
  Crouch = 2,
  Sprint = 3,
  Fall = 4,
  Land = 5,
  DropBody = 6,
}

enum gamePSMDetailedBodyDisposal {
  Default = 0,
  Dispose = 1,
  Lethal = 2,
  NonLethal = 3,
}

enum gamePSMNanoWireLaunchMode {
  Default = 0,
  Primary = 1,
  Secondary = 2,
}

enum moveSecureFootingFailureReason {
  Invalid = 0,
  Filter = 1,
  SimulationType = 2,
  Ground = 3,
}

enum moveSecureFootingFailureType {
  Invalid = 0,
  Edge = 1,
  Slope = 2,
}

enum PuppetVehicleState {
  IdleMounted = 0,
  IdleStand = 1,
  CombatWindowed = 2,
  CombatSeated = 3,
  Turret = 4,
  GunnerSlot = 5,
}

enum navNaviPositionType {
  Undefined = 0,
  Normal = 1,
  Projected = 2,
}

enum TargetComponentFilterType {
  Melee = 0,
  Shooting = 1,
  Scanning = 2,
  QuickHack = 3,
  ShootingLimbCyber = 4,
  HeadTarget = 5,
  LegTarget = 6,
  MechanicalTarget = 7,
}

enum TSFMV {
  Obj_Player = 0,
  Obj_Puppet = 1,
  Obj_Sensor = 2,
  Obj_Device = 3,
  Obj_Other = 4,
  Att_Friendly = 5,
  Att_Hostile = 6,
  Att_Neutral = 7,
  Sp_AimAssistEnabled = 8,
  Sp_Aggressive = 9,
  St_Alive = 10,
  St_Dead = 11,
  St_NotDefeated = 12,
  St_Defeated = 13,
  St_Conscious = 14,
  St_Unconscious = 15,
  St_TurnedOn = 16,
  St_TurnedOff = 17,
  St_QuickHackable = 18,
  St_AliveAndActive = 19,
}

enum TargetingSet {
  Visible = 0,
  Frustum = 1,
  Complete = 2,
  Undefined = 3,
}

enum GameplayTier {
  Undefined = 0,
  Tier1_FullGameplay = 1,
  Tier2_StagedGameplay = 2,
  Tier3_LimitedGameplay = 3,
  Tier4_FPPCinematic = 4,
  Tier5_Cinematic = 5,
}

enum Tier2WalkType {
  Undefined = 0,
  Slow = 1,
  Normal = 2,
  Fast = 3,
}

enum vehicleCameraType {
  FPP = 0,
  TPP = 1,
}

enum vehicleCameraPerspective {
  FPP = 0,
  TPPClose = 1,
  TPPFar = 2,
}

enum vehicleExitDirection {
  NoDirection = 0,
  Left = 1,
  Right = 2,
  Front = 3,
  Back = 4,
  Top = 5,
}

enum EInputCustomKey {
  ICK_Pad_DigitLeftRight = 0,
  ICK_Pad_DigitUpDown = 1,
  ICK_Count = 2,
}

enum gameinputActionType {
  BUTTON_PRESSED = 0,
  BUTTON_RELEASED = 1,
  BUTTON_HOLD_COMPLETE = 2,
  BUTTON_MULTITAP_BEGIN_LAST = 3,
  BUTTON_MULTITAP_END_LAST = 4,
  AXIS_CHANGE = 5,
  RELATIVE_CHANGE = 6,
  TOGGLE_PRESSED = 7,
  TOGGLE_RELEASED = 8,
  REPEAT = 9,
}

enum EInputKey {
  IK_None = 0,
  IK_LeftMouse = 1,
  IK_RightMouse = 2,
  IK_MiddleMouse = 3,
  IK_Unknown04 = 4,
  IK_Unknown05 = 5,
  IK_Unknown06 = 6,
  IK_Unknown07 = 7,
  IK_Backspace = 8,
  IK_Tab = 9,
  IK_Unknown0A = 10,
  IK_Unknown0B = 11,
  IK_Unknown0C = 12,
  IK_Enter = 13,
  IK_Unknown0E = 14,
  IK_Unknown0F = 15,
  IK_Shift = 16,
  IK_Ctrl = 17,
  IK_Alt = 18,
  IK_Pause = 19,
  IK_CapsLock = 20,
  IK_Unknown15 = 21,
  IK_Unknown16 = 22,
  IK_Unknown17 = 23,
  IK_Unknown18 = 24,
  IK_Unknown19 = 25,
  IK_Unknown1A = 26,
  IK_Escape = 27,
  IK_Unknown1C = 28,
  IK_Unknown1D = 29,
  IK_Unknown1E = 30,
  IK_Unknown1F = 31,
  IK_Space = 32,
  IK_PageUp = 33,
  IK_PageDown = 34,
  IK_End = 35,
  IK_Home = 36,
  IK_Left = 37,
  IK_Up = 38,
  IK_Right = 39,
  IK_Down = 40,
  IK_Select = 41,
  IK_Print = 42,
  IK_Execute = 43,
  IK_PrintScrn = 44,
  IK_Insert = 45,
  IK_Delete = 46,
  IK_Help = 47,
  IK_0 = 48,
  IK_1 = 49,
  IK_2 = 50,
  IK_3 = 51,
  IK_4 = 52,
  IK_5 = 53,
  IK_6 = 54,
  IK_7 = 55,
  IK_8 = 56,
  IK_9 = 57,
  IK_Unknown3A = 58,
  IK_Unknown3B = 59,
  IK_Unknown3C = 60,
  IK_Unknown3D = 61,
  IK_Unknown3E = 62,
  IK_Unknown3F = 63,
  IK_Unknown40 = 64,
  IK_A = 65,
  IK_B = 66,
  IK_C = 67,
  IK_D = 68,
  IK_E = 69,
  IK_F = 70,
  IK_G = 71,
  IK_H = 72,
  IK_I = 73,
  IK_J = 74,
  IK_K = 75,
  IK_L = 76,
  IK_M = 77,
  IK_N = 78,
  IK_O = 79,
  IK_P = 80,
  IK_Q = 81,
  IK_R = 82,
  IK_S = 83,
  IK_T = 84,
  IK_U = 85,
  IK_V = 86,
  IK_W = 87,
  IK_X = 88,
  IK_Y = 89,
  IK_Z = 90,
  IK_Unknown5B = 91,
  IK_Unknown5C = 92,
  IK_Unknown5D = 93,
  IK_Unknown5E = 94,
  IK_Unknown5F = 95,
  IK_NumPad0 = 96,
  IK_NumPad1 = 97,
  IK_NumPad2 = 98,
  IK_NumPad3 = 99,
  IK_NumPad4 = 100,
  IK_NumPad5 = 101,
  IK_NumPad6 = 102,
  IK_NumPad7 = 103,
  IK_NumPad8 = 104,
  IK_NumPad9 = 105,
  IK_NumStar = 106,
  IK_NumPlus = 107,
  IK_Separator = 108,
  IK_NumMinus = 109,
  IK_NumPeriod = 110,
  IK_NumSlash = 111,
  IK_F1 = 112,
  IK_F2 = 113,
  IK_F3 = 114,
  IK_F4 = 115,
  IK_F5 = 116,
  IK_F6 = 117,
  IK_F7 = 118,
  IK_F8 = 119,
  IK_F9 = 120,
  IK_F10 = 121,
  IK_F11 = 122,
  IK_F12 = 123,
  IK_F13 = 124,
  IK_F14 = 125,
  IK_F15 = 126,
  IK_F16 = 127,
  IK_F17 = 128,
  IK_F18 = 129,
  IK_F19 = 130,
  IK_F20 = 131,
  IK_F21 = 132,
  IK_F22 = 133,
  IK_F23 = 134,
  IK_F24 = 135,
  IK_Pad_A_CROSS = 136,
  IK_Pad_B_CIRCLE = 137,
  IK_Pad_X_SQUARE = 138,
  IK_Pad_Y_TRIANGLE = 139,
  IK_Pad_Start = 140,
  IK_Pad_Back_Select = 141,
  IK_Pad_DigitUp = 142,
  IK_Pad_DigitDown = 143,
  IK_Pad_DigitLeft = 144,
  IK_Pad_DigitRight = 145,
  IK_Pad_LeftThumb = 146,
  IK_Pad_RightThumb = 147,
  IK_Pad_LeftShoulder = 148,
  IK_Pad_RightShoulder = 149,
  IK_Pad_LeftTrigger = 150,
  IK_Pad_RightTrigger = 151,
  IK_Pad_LeftAxisX = 152,
  IK_Pad_LeftAxisY = 153,
  IK_Pad_RightAxisX = 154,
  IK_Pad_RightAxisY = 155,
  IK_NumLock = 156,
  IK_ScrollLock = 157,
  IK_Unknown9E = 158,
  IK_Unknown9F = 159,
  IK_LShift = 160,
  IK_RShift = 161,
  IK_LControl = 162,
  IK_RControl = 163,
  IK_UnknownA4 = 164,
  IK_UnknownA5 = 165,
  IK_UnknownA6 = 166,
  IK_UnknownA7 = 167,
  IK_UnknownA8 = 168,
  IK_UnknownA9 = 169,
  IK_UnknownAA = 170,
  IK_UnknownAB = 171,
  IK_UnknownAC = 172,
  IK_UnknownAD = 173,
  IK_UnknownAE = 174,
  IK_UnknownAF = 175,
  IK_UnknownB0 = 176,
  IK_UnknownB1 = 177,
  IK_UnknownB2 = 178,
  IK_UnknownB3 = 179,
  IK_UnknownB4 = 180,
  IK_UnknownB5 = 181,
  IK_UnknownB6 = 182,
  IK_UnknownB7 = 183,
  IK_UnknownB8 = 184,
  IK_Unicode = 185,
  IK_Semicolon = 186,
  IK_Equals = 187,
  IK_Comma = 188,
  IK_Minus = 189,
  IK_Period = 190,
  IK_Slash = 191,
  IK_Tilde = 192,
  IK_Mouse4 = 193,
  IK_Mouse5 = 194,
  IK_Mouse6 = 195,
  IK_Mouse7 = 196,
  IK_Mouse8 = 197,
  IK_UnknownC6 = 198,
  IK_UnknownC7 = 199,
  IK_Joy1 = 200,
  IK_Joy2 = 201,
  IK_Joy3 = 202,
  IK_Joy4 = 203,
  IK_Joy5 = 204,
  IK_Joy6 = 205,
  IK_Joy7 = 206,
  IK_Joy8 = 207,
  IK_Joy9 = 208,
  IK_Joy10 = 209,
  IK_Joy11 = 210,
  IK_Joy12 = 211,
  IK_Joy13 = 212,
  IK_Joy14 = 213,
  IK_Joy15 = 214,
  IK_Joy16 = 215,
  IK_UnknownD8 = 216,
  IK_UnknownD9 = 217,
  IK_UnknownDA = 218,
  IK_LeftBracket = 219,
  IK_Backslash = 220,
  IK_RightBracket = 221,
  IK_SingleQuote = 222,
  IK_UnknownDF = 223,
  IK_UnknownE0 = 224,
  IK_UnknownE1 = 225,
  IK_UnknownE2 = 226,
  IK_MouseHover = 227,
  IK_MouseX = 228,
  IK_MouseY = 229,
  IK_MouseZ = 230,
  IK_MouseW = 231,
  IK_JoyU = 232,
  IK_JoyV = 233,
  IK_JoySlider1 = 234,
  IK_JoySlider2 = 235,
  IK_MouseWheelUp = 236,
  IK_MouseWheelDown = 237,
  IK_UnknownEE = 238,
  IK_UnknownEF = 239,
  IK_JoyX = 240,
  IK_JoyY = 241,
  IK_JoyZ = 242,
  IK_JoyR = 243,
  IK_UnknownF4 = 244,
  IK_UnknownF5 = 245,
  IK_Attn = 246,
  IK_ClearSel = 247,
  IK_ExSel = 248,
  IK_ErEof = 249,
  IK_Play = 250,
  IK_Zoom = 251,
  IK_NoName = 252,
  IK_UnknownFD = 253,
  IK_UnknownFE = 254,
  IK_PS4_OPTIONS = 255,
  IK_PS4_TOUCH_PRESS = 256,
  IK_Last = 257,
  IK_Count = 258,
  IK_Pad_First = 259,
  IK_Pad_Last = 260,
}

enum ELogType {
  DEFAULT = 0,
  WARNING = 1,
  ERROR = 2,
}

enum EComparisonType {
  Greater = 0,
  GreaterOrEqual = 1,
  Equal = 2,
  NotEqual = 3,
  Less = 4,
  LessOrEqual = 5,
}

enum audioEventActionType {
  Play = 0,
  SetParameter = 1,
  StopSound = 2,
  SetSwitch = 3,
  StopTagged = 4,
  Tag = 5,
  Untag = 6,
}

enum audioAudioEventFlags {
  NoEventFlags = 0,
  SloMoOnly = 1,
  Music = 2,
  Metadata = 3,
  Unique = 4,
}

enum gameaudioeventsSurfaceDirection {
  Normal = 0,
  WallLeft = 1,
  WallRight = 2,
}

enum vehicleAudioEventAction {
  OnPlayerDriving = 0,
  OnPlayerPassenger = 1,
  OnPlayerEnterCombat = 2,
  OnPlayerExitCombat = 3,
  OnPlayerExitVehicle = 4,
}

enum ECLSForcedState {
  DEFAULT = 0,
  ForcedON = 1,
  ForcedOFF = 2,
}

enum gameEntitySpawnerEventType {
  Spawn = 0,
  Despawn = 1,
  Death = 2,
}

enum AICoverExposureMethod {
  Standing_Step_Left = 0,
  Standing_Step_Right = 1,
  Standing_Lean_Left = 2,
  Standing_Lean_Right = 3,
  Crouching_Step_Left = 4,
  Crouching_Step_Right = 5,
  Crouching_Lean_Left = 6,
  Crouching_Lean_Right = 7,
  Lean_Over = 8,
  Stand_Up = 9,
  Standing_Blind_Left = 10,
  Standing_Blind_Right = 11,
  Crouching_Blind_Left = 12,
  Crouching_Blind_Right = 13,
  Crouching_Blind_Top = 14,
  Count = 15,
}

enum gameCoverHeight {
  Invalid = 0,
  Low = 1,
  High = 2,
}

enum AIUninterruptibleActionType {
  Undefined = 0,
  Default = 1,
  EnteringCover = 2,
  LeavingCover = 3,
  Count = 4,
}

enum CraftingCommands {
  CraftingFinished = 0,
  DisassemblingFinished = 1,
  UpgradingFinished = 2,
  Failed = 3,
}

enum gamecheatsystemFlag {
  God_Immortal = 0,
  God_Invulnerable = 1,
  Resurrect = 2,
  IgnoreTimeDilation = 3,
  BypassMagazine = 4,
  InfiniteAmmo = 5,
}

enum gameDebugViewETextAlignment {
  Left = 0,
  Right = 1,
  Center = 2,
}

enum DropPointPackageStatus {
  NOT_ACTIVE = 0,
  ACTIVE = 1,
  COLLECTED = 2,
}

enum EFastTravelSystemInstruction {
  Forward = 0,
  Previous = 1,
}

enum entAttachmentTarget {
  Transform = 0,
  TargetPosition = 1,
}

enum gameGrenadeThrowStartType {
  Invalid = 0,
  LeftSide = 1,
  RightSide = 2,
  Top = 3,
  Count = 4,
}

enum grsHeistStatus {
  Waiting = 0,
  Starting = 1,
  Lobby = 2,
  InGame = 3,
  Ending = 4,
  Victory = 5,
  Failure = 6,
}

enum EGameSessionDataType {
  NONE = 0,
  CameraDeadBody = 1,
  CameraTagLimit = 2,
}

enum gameSaveLockReason {
  Nothing = 0,
  Combat = 1,
  Scene = 2,
  Quest = 3,
  Script = 4,
  Boundary = 5,
  MainMenu = 6,
  LoadingScreen = 7,
  PlayerStateMachine = 8,
  PlayerState = 9,
  Tier = 10,
  NotEnoughSlots = 11,
  NotEnoughSpace = 12,
  PlayerOnMovingPlatform = 13,
}

enum GOGRewardsSystemStatus {
  Uninitialized = 0,
  GeneratingCPID = 1,
  CheckingRegistrationStatus = 2,
  RegistrationPending = 3,
  Registered = 4,
  Error = 5,
}

enum GOGRewardsSystemErrors {
  Undefined = 0,
  RequestFailed = 1,
  TemporaryFailure = 2,
  NoInternetConnection = 3,
}

enum ActiveMode {
  UNINITIALIZED = 0,
  CLEAR = 1,
  SEMI = 2,
  COMBAT = 3,
  FOCUS = 4,
}

enum InstanceState {
  DISABLED = 0,
  HIDDEN = 1,
  RUNNING = 2,
  MALFUNCTIONING = 3,
  ON = 4,
}

enum ModuleState {
  DISABLED = 0,
  HIDDEN = 1,
  ASLEEP = 2,
  MALFUNCTIONING = 3,
  ON = 4,
}

enum VisualState {
  OFF = 0,
  RUNNING = 1,
  MALFUNCTIONING = 2,
  ON = 3,
}

enum SignalType {
  DEFAULT = 0,
  REGISTRATION = 1,
  UNREGISTRATION = 2,
}

enum HUDState {
  UNINITIALIZED = 0,
  DEACTIVATED = 1,
  ACTIVATED = 2,
}

enum HUDContext {
  DEFAULT = 0,
  FOCUS = 1,
  LOOKEDAT = 2,
}

enum HUDActorType {
  UNINITIALIZED = 0,
  GAME_OBJECT = 1,
  VEHICLE = 2,
  DEVICE = 3,
  BODY_DISPOSAL_DEVICE = 4,
  PUPPET = 5,
  ITEM = 6,
}

enum HUDActorStatus {
  UNINITIALIZED = 0,
  REGISTERED = 1,
  ACTIVE = 2,
}

enum ActorVisibilityStatus {
  OUTSIDE_CAMERA = 0,
  IN_CAMERA = 1,
  VISIBLE = 2,
  LOOKEDAT = 3,
}

enum HighlightContext {
  DEFAULT = 0,
  OUTLINE = 1,
  FILL = 2,
  FULL = 3,
}

enum gameEEquipmentManagerState {
  InfiniteAmmo = 0,
}

enum gameMessageSender {
  NPC = 0,
  Player = 1,
}

enum gameContactType {
  Caller = 0,
  Texter = 1,
}

enum gameJournalQuestType {
  MainQuest = 0,
  SideQuest = 1,
  MinorQuest = 2,
  StreetStory = 3,
  Contract = 4,
  VehicleQuest = 5,
}

enum questJournalSizeEventType {
  Maximize = 0,
  Minimize = 1,
}

enum questJournalAlignmentEventType {
  Left = 0,
  Center = 1,
  Right = 2,
}

enum gameJournalBriefingContentType {
  MapLocation = 0,
  VideoContent = 1,
  Paperdoll = 2,
}

enum gamemappinsMappinTargetType {
  World = 0,
  Minimap = 1,
  Map = 2,
}

enum gameMountingSlotRole {
  Invalid = 0,
  Driver = 1,
  Passenger = 2,
}

enum gameMountingObjectType {
  Invalid = 0,
  Object = 1,
  Vehicle = 2,
  Puppet = 3,
  Platform = 4,
}

enum gameMountingRelationshipType {
  Invalid = 0,
  Parent = 1,
  Child = 2,
}

enum worldNavigationRequestStatus {
  OK = 0,
  InvalidStartingPosition = 1,
  InvalidEndPosition = 2,
  OtherError = 3,
}

enum NavGenAgentSize {
  Human = 0,
}

enum ELinkType {
  NETWORK = 0,
  GRID = 1,
  FREE = 2,
  INVALID = 3,
}

enum ENetworkRelation {
  MASTER = 0,
  SLAVE = 1,
  NONE = 2,
}

enum EPingType {
  DIRECT = 0,
  SPACE = 1,
}

enum EPreventionHeatStage {
  Heat_0 = 0,
  Heat_1 = 1,
  Heat_2 = 2,
  Heat_3 = 3,
  Heat_4 = 4,
  Size = 5,
}

enum EPreventionPsychoLogicType {
  Start = 0,
  PoliceKilled = 1,
  PoliceSpawn = 2,
  PoliceDespawn = 3,
  DeescalationZeroExecutionLocked = 4,
  DeescalationZeroExecute = 5,
}

enum EPreventionDebugProcessReason {
  Redirected_IsPsycho = 0,
  Process_NewDamage = 1,
  Process_EntityCalls = 2,
  Abort_EntitySame = 3,
  Abort_DamageZero = 4,
  Abort_SystemLockedBySceneTier = 5,
}

enum EPreventionSystemInstruction {
  Safe = 0,
  Active = 1,
  Off = 2,
  On = 3,
}

enum AIReactionCountOutcome {
  Failed = 0,
  Succeded = 1,
  NotFound = 2,
}

enum scnFastForwardMode {
  Default = 0,
  GameplayReview = 1,
}

enum scnPlayDirection {
  Forward = 0,
  Backward = 1,
}

enum scnPlaySpeed {
  Pause = 0,
  Slow = 1,
  Normal = 2,
  Fast = 3,
  VeryFast = 4,
}

enum gameStatPoolModificationTypes {
  Regeneration = 0,
  Decay = 1,
}

enum gameDifficulty {
  Easy = 0,
  Hard = 1,
  VeryHard = 2,
  Story = 3,
}

enum EKnockdownStates {
  Invalid = 0,
  Start = 1,
  FallLoop = 2,
  Land = 3,
  Recovery = 4,
  AirRecovery = 5,
}

enum gametargetingSystemETargetFilterStatus {
  Stop = 0,
  Continue = 1,
}

enum gameTelemetryDamageSituation {
  Irrelevant = 0,
  EnemyToPlayer = 1,
  EnemyToCompanion = 2,
  PlayerToEnemy = 3,
  CompanionToEnemy = 4,
}

enum telemetryInitalChoiceStage {
  Undefined = 0,
  Difficulty = 1,
  LifePath = 2,
  Gender = 3,
  Customizations = 4,
  Attributes = 5,
  Finished = 6,
}

enum UIGameContext {
  Default = 0,
  QuickHack = 1,
  Scanning = 2,
  DeviceZoom = 3,
  BraindanceEditor = 4,
  BraindancePlayback = 5,
  VehicleMounted = 6,
  ModalPopup = 7,
  RadialWheel = 8,
  VehicleRace = 9,
}

enum EntityNotificationType {
  DoNotNotifyEntity = 0,
  SendThisEventToEntity = 1,
  SendPSChangedEventToEntity = 2,
}

enum vehicleGarageState {
  NoVehiclesAvailable = 0,
  SummonAvailable = 1,
  SummonDisabled = 2,
}

enum vehicleSummonState {
  Idle = 0,
  EnRoute = 1,
  AlreadySummoned = 2,
  PathfindingFailed = 3,
  Arrived = 4,
}

enum worldRainIntensity {
  NoRain = 0,
  LightRain = 1,
  HeavyRain = 2,
}

enum WorkspotSlidingBehaviour {
  PlayAtResourcePosition = 0,
  DontPlayAtResourcePosition = 1,
  SlideActorAndRotateDevice = 2,
}

enum workWorkspotDebugMode {
  VisualLogToogle = 0,
  VisualLogOn = 1,
  VisualLogOff = 2,
  VisualStateToogle = 3,
  VisualStateOn = 4,
  VisualStateOff = 5,
  RecorderOn = 6,
  RecorderOff = 7,
  PlaybackOn = 8,
  PlaybackOff = 9,
  Invalid = 10,
  FunctionalTests = 11,
}

enum WorkspotWeaponConditionEnum {
  Undefined = 0,
  Any = 1,
  Ranged = 2,
  OneHandedRanged = 3,
  Melee = 4,
  MeleeCyberware = 5,
  LMG = 6,
}

enum WorkspotConditionOperators {
  OR = 0,
  AND = 1,
}

enum EInkAnimationPlaybackOption {
  PLAY = 0,
  STOP = 1,
  PAUSE = 2,
  RESUME = 3,
  CONTINUE = 4,
  GO_TO_START = 5,
  GO_TO_END = 6,
}

enum inkanimPropertyType {
  Size = 0,
  Color = 1,
  Margin = 2,
  Padding = 3,
  Transparency = 4,
  Rotation = 5,
}

enum inkanimInterpolationMode {
  EasyIn = 0,
  EasyOut = 1,
  EasyInOut = 2,
}

enum inkanimInterpolationType {
  Linear = 0,
  Quadratic = 1,
  Qubic = 2,
  Quartic = 3,
  Quintic = 4,
  Sinusoidal = 5,
  Exponential = 6,
  Elastic = 7,
  Circular = 8,
  Back = 9,
}

enum inkanimEventType {
  OnLoaded = 0,
  OnStart = 1,
  OnFinish = 2,
  OnPause = 3,
  OnResume = 4,
  OnStartLoop = 5,
  OnEndLoop = 6,
}

enum inkanimLoopType {
  Undefined = 0,
  Cycle = 1,
  PingPong = 2,
}

enum inkanimInterpolationDirection {
  To = 0,
  From = 1,
  FromTo = 2,
}

enum inkEButtonState {
  Normal = 0,
  Press = 1,
  Hover = 2,
  Disabled = 3,
}

enum inkDiscreteNavigationDirection {
  Up = 0,
  Right = 1,
  Down = 2,
  Left = 3,
}

enum GenericNotificationType {
  Generic = 0,
  JournalNotification = 1,
  LevelUpNotification = 2,
  VendorNotification = 3,
  ZoneNotification = 4,
  ProgressionNotification = 5,
  CraftingNotification = 6,
  InventoryNotification = 7,
}

enum inkEScrollDirection {
  Vertical = 0,
  Horizontal = 1,
}

enum inkSelectorChangeDirection {
  Undefined = 0,
  Prior = 1,
  Next = 2,
}

enum inkESliderDirection {
  Horizontal = 0,
  Vertical = 1,
}

enum inkEToggleState {
  Normal = 0,
  Press = 1,
  Hover = 2,
  Disabled = 3,
  Toggled = 4,
  ToggledPress = 5,
  ToggledHover = 6,
}

enum inkTextureType {
  StaticTexture = 0,
  DynamicTexture = 1,
  InvalidTexture = 2,
}

enum inkInputHintHoldIndicationType {
  Press = 0,
  Hold = 1,
  FromInputConfig = 2,
}

enum textLetterCase {
  OriginalCase = 0,
  UpperCase = 1,
  LowerCase = 2,
}

enum textVerticalAlignment {
  Top = 0,
  Center = 1,
  Bottom = 2,
}

enum textHorizontalAlignment {
  Left = 0,
  Center = 1,
  Right = 2,
}

enum inkEOrientation {
  Horizontal = 0,
  Vertical = 1,
}

enum inkEChildOrder {
  Forward = 0,
  Backward = 1,
}

enum inkEHorizontalAlign {
  Fill = 0,
  Left = 1,
  Center = 2,
  Right = 3,
}

enum inkEVerticalAlign {
  Fill = 0,
  Top = 1,
  Center = 2,
  Bottom = 3,
}

enum inkEAnchor {
  TopLeft = 0,
  TopCenter = 1,
  TopRight = 2,
  CenterLeft = 3,
  Centered = 4,
  CenterRight = 5,
  BottomLeft = 6,
  BottomCenter = 7,
  BottomRight = 8,
  TopFillHorizontaly = 9,
  CenterFillHorizontaly = 10,
  BottomFillHorizontaly = 11,
  LeftFillVerticaly = 12,
  CenterFillVerticaly = 13,
  RightFillVerticaly = 14,
  Fill = 15,
}

enum inkESizeRule {
  Fixed = 0,
  Stretch = 1,
}

enum gameuiEBraindanceLayer {
  Visual = 0,
  Audio = 1,
  Thermal = 2,
}

enum gameuiEClueDescriptorMode {
  Invalid = 0,
  Add = 1,
  Finish = 2,
}

enum inkIconResult {
  Success = 0,
  UnknownIconTweak = 1,
  AtlasResourceNotFound = 2,
  PartNotFoundInAtlas = 3,
}

enum inkMenuMode {
  Unknown = 0,
  PauseMenu = 1,
  HubMenu = 2,
  CustomMenu = 3,
}

enum inkMenuState {
  Enabled = 0,
  Disabled = 1,
}

enum EMeasurementSystem {
  Metric = 0,
  Imperial = 1,
}

enum EMeasurementUnit {
  Millimeter = 0,
  Centimeter = 1,
  Meter = 2,
  Kilometer = 3,
  Inch = 4,
  Feet = 5,
  Yard = 6,
  Mile = 7,
  NauticalMile = 8,
  SquareMillimeter = 9,
  SquareCentimeter = 10,
  SquareMeter = 11,
  Hectare = 12,
  SquareKilometer = 13,
  SquareInch = 14,
  SquareFeet = 15,
  SquareYard = 16,
  Acre = 17,
  SquareMile = 18,
  CubicCentimer = 19,
  CubicDecimeter = 20,
  CubicMeter = 21,
  Liter = 22,
  Hectoliter = 23,
  CubicInch = 24,
  CubicFeet = 25,
  FluidOunce = 26,
  Pint = 27,
  Gallon = 28,
  Gram = 29,
  Kilogram = 30,
  Tonne = 31,
  Ounce = 32,
  Pound = 33,
  Stone = 34,
  Celcius = 35,
  Fahrenheit = 36,
  MAX = 37,
}

enum inkEffectType {
  ScanlineWipe = 0,
  LinearWipe = 1,
  RadialWipe = 2,
  LightSweep = 3,
  BoxBlur = 4,
  Mask = 5,
  Glitch = 6,
  PointCloud = 7,
  ColorFill = 8,
  InnerGlow = 9,
  ColorCorrection = 10,
  Multisampling = 11,
}

enum PopupPosition {
  Undefined = 0,
  UpperRight = 1,
  UpperLeft = 2,
  LowerLeft = 3,
  LowerRight = 4,
  Center = 5,
}

enum VideoType {
  Tutorial_720x405 = 0,
  Tutorial_1024x576 = 1,
  Tutorial_1280x720 = 2,
  Tutorial_1360x768 = 3,
  Unknown = 4,
}

enum inkBrushDrawType {
  NoDraw = 0,
  Solid = 1,
  Wire = 2,
}

enum inkBrushTileType {
  NoTile = 0,
  Horizontal = 1,
  Vertical = 2,
  Both = 3,
}

enum inkBrushMirrorType {
  NoMirror = 0,
  Horizontal = 1,
  Vertical = 2,
  Both = 3,
}

enum ConfigVarType {
  Bool = 0,
  Int = 1,
  Float = 2,
  Name = 3,
  IntList = 4,
  FloatList = 5,
  StringList = 6,
  NameList = 7,
}

enum ConfigVarUpdatePolicy {
  Disabled = 0,
  Immediately = 1,
  ConfirmationRequired = 2,
  RestartRequired = 3,
  LoadLastCheckpointRequired = 4,
}

enum UserSettingsLoadStatus {
  NotLoaded = 0,
  InternalError = 1,
  FileIsMissing = 2,
  FileIsCorrupted = 3,
  Loaded = 4,
  ImportedFromOldVersion = 5,
}

enum ConfigChangeReason {
  Invalid = 0,
  Accepted = 1,
  Rejected = 2,
  NeedsConfirmation = 3,
  NeedsRestart = 4,
}

enum ConfigNotificationType {
  RestartRequiredConfirmed = 0,
  RestartRequiredRejected = 1,
  ChangesApplied = 2,
  ChangesRejected = 3,
  ChangesLoadLastCheckpointApplied = 4,
  ChangesLoadLastCheckpointRejected = 5,
  Saved = 6,
  ErrorSaving = 7,
  Loaded = 8,
  LoadCanceled = 9,
  LoadInternalError = 10,
  Refresh = 11,
}

enum inkSelectionRule {
  Single = 0,
  Parent = 1,
  Children = 2,
  TypeBased = 3,
  NameBased = 4,
}

enum worldgeometryDescriptionQueryFlags {
  DistanceVector = 0,
  CollisionNormal = 1,
  ObstacleDepth = 2,
  UpExtent = 3,
  DownExtent = 4,
  TopExtent = 5,
  TopPoint = 6,
  BehindPoint = 7,
}

enum worldgeometryDescriptionQueryStatus {
  OK = 0,
  NoGeometry = 1,
  UpVectorSameAsDirection = 2,
}

enum worldgeometryProbingStatus {
  Undefined = 0,
  StillInObstacle = 1,
  GeometryDiverged = 2,
  Failure = 3,
}

enum ECentaurShieldState {
  Inactive = 0,
  Activating = 1,
  Active = 2,
  Destroyed = 3,
  Hacked = 4,
}

enum AISignalFlags {
  Undefined = 0,
  OverridesSelf = 1,
  InterruptsSamePriorityTask = 2,
  InterruptsForcedBehavior = 3,
  AcceptsAdditives = 4,
}

enum scnDialogLineType {
  Undefined = 0,
  Regular = 1,
  Holocall = 2,
  SceneComment = 3,
  OverHead = 4,
  Radio = 5,
  GlobalTV = 6,
  Invisible = 7,
  OverHeadAlwaysVisible = 8,
  OwnerlessRegular = 9,
  AlwaysCinematicNoSpeaker = 10,
  GlobalTVAlwaysVisible = 11,
}

enum scnDialogLineLanguage {
  Origin = 0,
  Creole = 1,
  Japanese = 2,
  Arabic = 3,
  Russian = 4,
  Chinese = 5,
  Brasilian = 6,
}

enum ItemSortMode {
  Default = 0,
  NewItems = 1,
  NameAsc = 2,
  NameDesc = 3,
  QualityAsc = 4,
  QualityDesc = 5,
  WeightAsc = 6,
  WeightDesc = 7,
  PriceAsc = 8,
  PriceDesc = 9,
  ItemType = 10,
  DpsAsc = 11,
  DpsDesc = 12,
}

enum GenericMessageNotificationType {
  OK = 0,
  Confirm = 1,
  Cancel = 2,
  ConfirmCancel = 3,
  YesNo = 4,
}

enum GenericMessageNotificationResult {
  Cancel = 0,
  Confirm = 1,
  OK = 2,
  Yes = 3,
  No = 4,
}

enum WeaponPartType {
  Scope = 0,
  Magazine = 1,
  Silencer = 2,
}

enum gameuiHitType {
  Miss = 0,
  Glance = 1,
  Hit = 2,
  CriticalHit = 3,
  CriticalHit_x2 = 4,
}

enum gameuiDamageDigitsMode {
  Off = 0,
  Individual = 1,
  Accumulated = 2,
  Both = 3,
}

enum gameuiDamageDigitsStickingMode {
  Undefined = 0,
  Individual = 1,
  Accumulated = 2,
  Both = 3,
}

enum gameuiDamageIndicatorMode {
  Off = 0,
  DamageOnly = 1,
  On = 2,
}

enum gameKillType {
  Normal = 0,
  Defeat = 1,
}

enum ECartOperationResult {
  Success = 0,
  NoItems = 1,
  AllItems = 2,
  WontSell = 3,
  WontBuy = 4,
  QuestItem = 5,
  NotInCart = 6,
}

enum EVendorMode {
  BuyItems = 0,
  SellItems = 1,
  Train = 2,
  Ripperdoc = 3,
  RipperdocSummary = 4,
}

enum ItemFilterType {
  All = 0,
  Weapons = 1,
  Clothes = 2,
  Consumables = 3,
  Cyberware = 4,
  Attachments = 5,
  Quest = 6,
  Buyback = 7,
  LightWeapons = 8,
  HeavyWeapons = 9,
  MeleeWeapons = 10,
  Hacks = 11,
}

enum ItemFilterCategory {
  RangedWeapons = 0,
  MeleeWeapons = 1,
  Clothes = 2,
  Consumables = 3,
  Grenades = 4,
  SoftwareMods = 5,
  Attachments = 6,
  Programs = 7,
  Cyberware = 8,
  Junk = 9,
  BaseCount = 10,
  Quest = 11,
  Buyback = 12,
  AllItems = 13,
  AllCount = 14,
  Invalid = -1,
}

enum DerivedFilterResult {
  False = 0,
  True = 1,
  Pass = 2,
}

enum CrafringMaterialItemHighlight {
  Undefined = 0,
  Hover = 1,
  Add = 2,
  Remove = 3,
}

enum CodexDataSource {
  Undefined = 0,
  Codex = 1,
  Onscreen = 2,
}

enum CodexCategoryType {
  All = 0,
  Database = 1,
  Characters = 2,
  Locations = 3,
  Tutorials = 4,
  Count = 5,
  Invalid = -1,
}

enum CodexImageType {
  Default = 0,
  Character = 1,
}

enum DropdownItemDirection {
  Undefined = 0,
  Down = 1,
  Up = 2,
}

enum DropdownDisplayContext {
  NotSet = 0,
  Default = 1,
  ItemChooserWeapon = 2,
}

enum ECooldownGameControllerMode {
  COOLDOWNS = 0,
  BUFFS_AND_DEBUFFS = 1,
}

enum ECooldownIndicatorState {
  Pooled = 0,
  Intro = 1,
  Filling = 2,
  Outro = 3,
}

enum ECraftingIconPositioning {
  generic = 0,
  weaponBig = 1,
  weaponSmall = 2,
}

enum CraftingMode {
  craft = 0,
  upgrade = 1,
}

enum HubMenuItems {
  Undefined = -1,
  Crafting = 0,
  Character = 1,
  Inventory = 2,
  Map = 3,
  Journal = 4,
  Phone = 5,
  Database = 6,
  Stats = 7,
  Backpack = 8,
  HubMenuItems = 9,
  Codex = 10,
  Shards = 11,
  Tarot = 12,
  Gear = 13,
  Cyberware = 14,
  Count = 15,
}

enum HubMenuCraftingItems {
  Crafting = 0,
  Upgrade = 1,
}

enum HubMenuInventoryItems {
  Gear = 0,
  Cyberware = 1,
  Backpack = 2,
}

enum HubMenuCharacterItems {
  Skills = 0,
  Stats = 1,
}

enum HubMenuDatabaseItems {
  Codex = 0,
  Tarot = 1,
  Shards = 2,
}

enum HubVendorMenuItems {
  Trade = 0,
  Cyberware = 1,
}

enum PauseMenuAction {
  OpenSubMenu = 0,
  QuickSave = 1,
  Save = 2,
  ExitGame = 3,
  ExitToMainMenu = 4,
  QuickLoad = 5,
}

enum operationsMode {
  PLAYER = 0,
  FLATHEAD = 1,
  TOOLBOX = 2,
}

enum inkLoadingScreenType {
  Unknown = 0,
  SplashScreen = 1,
  Initial = 2,
  FastTravel = 3,
}

enum gameuiEWorldMapCameraMode {
  TopDown = 0,
  Free = 1,
  ZoomLevels = 2,
  COUNT = 3,
}

enum EWorldMapView {
  Map = 0,
  FloorPlan = 1,
  TimeSkip = 2,
}

enum gameuiEWorldMapDistrictView {
  Undefined = 0,
  Districts = 1,
  SubDistricts = 2,
}

enum gameuiMappinGroupState {
  Ungrouped = 0,
  Grouped = 1,
  GroupedCollection = 2,
  GroupedHidden = 3,
}

enum WorldMapTooltipType {
  Default = 0,
  Police = 1,
  District = 2,
}

enum gameuiAuthorisationNotificationType {
  Unknown = 0,
  GotKeycard = 1,
  AccessGranted = 2,
}

enum CraftingNotificationType {
  NoPerks = 0,
  NotEnoughMaterial = 1,
}

enum EGenericNotificationPriority {
  Default = 0,
  Low = 1,
  Medium = 2,
  Height = 3,
}

enum UIInGameNotificationType {
  ActionRestriction = 0,
  CombatRestriction = 1,
  CantSaveActionRestriction = 2,
  CantSaveCombatRestriction = 3,
  CantSaveQuestRestriction = 4,
  CantSaveDeathRestriction = 5,
  NotEnoughSlotsSaveResctriction = 6,
  NotEnoughSpaceSaveResctriction = 7,
  PhotoModeDisabledRestriction = 8,
}

enum UIMenuNotificationType {
  VendorNotEnoughMoney = 0,
  VNotEnoughMoney = 1,
  VendorRequirementsNotMet = 2,
  InventoryActionBlocked = 3,
  CraftingNoPerks = 4,
  CraftingNotEnoughMaterial = 5,
  UpgradingLevelToLow = 6,
  NoPerksPoints = 7,
  PerksLocked = 8,
  MaxLevelPerks = 9,
  NoAttributePoints = 10,
  InCombat = 11,
  CraftingQuickhack = 12,
}

enum CharacterScreenType {
  Attributes = 0,
  Perks = 1,
}

enum PerkMenuAttribute {
  Body = 0,
  Reflex = 1,
  Technical_Ability = 2,
  Johnny = 3,
  Cool = 4,
  Intelligence = 5,
}

enum MessengerContactType {
  Contact = 0,
  Group = 1,
  Thread = 2,
}

enum MessageViewType {
  Sent = 0,
  Received = 1,
}

enum gameuiCharacterCustomizationPart {
  Head = 0,
  Body = 1,
  Arms = 2,
}

enum AttributeButtonState {
  Default = 0,
  Hover = 1,
}

enum inkLifePath {
  Corporate = 0,
  StreetKid = 1,
  Nomad = 2,
  Invalid = 3,
}

enum inkSaveType {
  ManualSave = 0,
  QuickSave = 1,
  AutoSave = 2,
  PointOfNoReturn = 3,
  EndGameSave = 4,
}

enum RipperdocModes {
  Default = 0,
  Item = 1,
}

enum CyberwareScreenType {
  Ripperdoc = 0,
  Inventory = 1,
}

enum CyberwareInfoType {
  Default = 0,
  Cyberdeck = 1,
}

enum SettingsType {
  Slider = 0,
  Toggle = 1,
  DropdownList = 2,
}

enum QuantityPickerActionType {
  Buy = 0,
  Sell = 1,
  TransferToStorage = 2,
  TransferToPlayer = 3,
  Drop = 4,
  Disassembly = 5,
  Craft = 6,
}

enum VendorConfirmationPopupType {
  Default = 0,
  ExpensiveItem = 1,
  EquippedItem = 2,
  BuyAndEquipCyberware = 3,
  BuyNotEquipableCyberware = 4,
  DisassembeIconic = 5,
}

enum EHudPhoneVisibility {
  Invisible = 0,
  Showing = 1,
  Visible = 2,
  Hiding = 3,
}

enum EHudPhoneFunction {
  Inactive = 0,
  DisplayingMessage = 1,
  IncomingCall = 2,
  Holocall = 3,
  Audiocall = 4,
}

enum EHudAvatarMode {
  Connecting = 0,
  Disconnecting = 1,
  Holocall = 2,
  Audiocall = 3,
}

enum ScannerNetworkState {
  NOT_CONNECTED = 0,
  NOT_BREACHED = 1,
  TIER1 = 2,
  TIER2 = 3,
  TIER3 = 4,
  BREACHED = 5,
}

enum ScannerObjectType {
  INVALID = 0,
  PUPPET = 1,
  VEHICLE = 2,
  DEVICE = 3,
  GENERIC = 4,
}

enum ScannerDataType {
  Undefined = 0,
  Name = 1,
  Level = 2,
  Health = 3,
  Rarity = 4,
  WeaponBasic = 5,
  WeaponDetailed = 6,
  BountySystem = 7,
  Vulnerabilities = 8,
  Faction = 9,
  Attitude = 10,
  SquadInfo = 11,
  Resistances = 12,
  Abilities = 13,
  Requirements = 14,
  Description = 15,
  DeviceStatus = 16,
  NetworkStatus = 17,
  NetworkLevel = 18,
  DeviceConnections = 19,
  QuestEntry = 20,
  VehicleName = 21,
  VehicleManufacturer = 22,
  VehicleProductionYears = 23,
  VehicleDriveLayout = 24,
  VehicleHorsepower = 25,
  VehicleMass = 26,
  VehicleState = 27,
  VehicleInfo = 28,
  QuickHackDescription = 29,
}

enum EVisualizerActivityState {
  Visible = 0,
  Available = 1,
  Active = 2,
}

enum EVisualizerType {
  Device = 0,
  Dialog = 1,
  Loot = 2,
  Invalid = 3,
}

enum EVisualizerDefinitionFlags {
  Undefined = 0,
  Fading = 1,
  HeadlineSelection = 2,
  CPO_Mode = 3,
}

enum EInventoryComboBoxMode {
  FromInventory = 0,
  FromEquipment = 1,
  CustomizeFromEquipment = 2,
  CustomizeFromInventory = 3,
  CustomizeCyberware = 4,
}

enum EStatProviderDataSource {
  gameItemData = 0,
  InventoryItemData = 1,
  InnerItemData = 2,
  Invalid = 3,
}

enum DamageEffectDisplayType {
  Flat = 0,
  TargetHealth = 1,
  Invalid = -1,
}

enum ItemComparisonState {
  Default = 0,
  NoChange = 1,
  Better = 2,
  Worse = 3,
}

enum InventoryModes {
  Default = 0,
  Item = 1,
}

enum ItemViewModes {
  Item = 0,
  Mod = 1,
}

enum PaperdollPositionAnimation {
  Center = 0,
  Left = 1,
  Right = 2,
  LeftFullBody = 3,
}

enum InventoryPaperdollZoomArea {
  Default = 0,
  Weapon = 1,
  Legs = 2,
  Feet = 3,
  Cyberware = 4,
  QuickSlot = 5,
  Consumable = 6,
  Outfit = 7,
  Head = 8,
  Face = 9,
  InnerChest = 10,
  OuterChest = 11,
}

enum InventoryItemAttachmentType {
  Generic = 0,
  Dedicated = 1,
}

enum EInventoryItemShape {
  SingleSlot = 0,
  DoubleSlot = 1,
}

enum ItemIconGender {
  Female = 0,
  Male = 1,
}

enum LootItemType {
  Default = 0,
  Quest = 1,
  Shard = 2,
}

enum ItemDisplayType {
  Item = 0,
  Weapon = 1,
}

enum ItemDisplayContext {
  Undefined = 0,
  Vendor = 1,
  Tooltip = 2,
  VendorPlayer = 3,
  GearPanel = 4,
  Backpack = 5,
  DPAD_RADIAL = 6,
  Attachment = 7,
  Ripperdoc = 8,
  Crafting = 9,
}

enum ItemLabelType {
  New = 0,
  Quest = 1,
  Money = 2,
  Equipped = 3,
  Owned = 4,
  Buyback = 5,
}

enum ItemAdditionalInfoType {
  NONE = 0,
  PRICE = 1,
  TYPE = 2,
}

enum RipperdocFilter {
  All = 0,
  Vendor = 1,
  Player = 2,
}

enum gamemappinsVerticalPositioning {
  Above = 0,
  Same = 1,
  Below = 2,
}

enum gameEnemyStealthAwarenessState {
  Relaxed = 0,
  Aware = 1,
  Alerted = 2,
  Combat = 3,
}

enum gameReprimandMappinAnimationState {
  Undefined = 0,
  Normal = 1,
  Fast = 2,
}

enum CustomButtonType {
  UnlockAllVehicles = 0,
  ShowAllPoiMappins = 1,
  DiscoverAllPoiMappins = 2,
}

enum HackingMinigameState {
  Unknown = 0,
  InProgress = 1,
  Succeeded = 2,
  Failed = 3,
}

enum MinigameActionType {
  Device = 0,
  NPC = 1,
  Both = 2,
  AccessPoint = 3,
}

enum gameTutorialBracketType {
  WidgetArea = 0,
  CustomArea = 1,
}

enum gameJournalEntryState {
  Undefined = 0,
  Inactive = 1,
  Active = 2,
  Succeeded = 3,
  Failed = 4,
}

enum gameJournalListenerType {
  State = 0,
  Visited = 1,
  Tracked = 2,
  Untracked = 3,
  Counter = 4,
}

enum JournalChangeType {
  Undefined = 0,
  Direct = 1,
  Indirect = 2,
  IndirectDependent = 3,
}

enum JournalNotifyOption {
  Undefined = 0,
  DoNotNotify = 1,
  Notify = 2,
}

enum UIObjectiveEntryType {
  Invalid = 0,
  Quest = 1,
  Objective = 2,
  SubObjective = 3,
}

enum SlotType {
  DEFAULT = 0,
  HOLSTER = 1,
  WEAPON = 2,
  COMBAT_CYBERWARE = 3,
  TOOLTIP = 4,
  MISC = 5,
}

enum ERadialMode {
  ApplyOnlyActiveSlot = 0,
  ApplyActiveSlotAndConsumables = 1,
}

enum EInventoryDataStatDisplayType {
  CompareBar = 0,
  DisplayBar = 1,
  Value = 2,
}

enum InventoryTooltipDisplayContext {
  Default = 0,
  Attachment = 1,
  Crafting = 2,
  Upgrading = 3,
  HUD = 4,
  Vendor = 5,
}

enum GrenadeDamageType {
  Normal = 0,
  DoT = 1,
  Undefined = 2,
}

enum ETooltipsStyle {
  Menus = 0,
  HUD = 1,
}

enum gameuiETooltipPlacement {
  LeftCenter = 0,
  RightCenter = 1,
  LeftTop = 2,
  RightTop = 3,
}

enum gamesmartGunTargetState {
  Visible = 0,
  Targetable = 1,
  Locking = 2,
  Locked = 3,
  Unlocking = 4,
}

enum gamedataChargeStep {
  Idle = 0,
  Charging = 1,
  Charged = 2,
  Overcharging = 3,
  Discharging = 4,
}

enum ClueState {
  active = 0,
  complete = 1,
}

enum CustomWeaponWheelSlot {
  FreeHands = 0,
  Fists = 1,
}

enum EUIStealthIconType {
  Invalid = 0,
  HostileHuman = 1,
  Camera = 2,
  Turret = 3,
  Drone = 4,
}

enum EUIActionState {
  Invalid = 0,
  DEFAULT = 1,
  STARTED = 2,
  COMPLETED = 3,
  ABORTED = 4,
}

enum ProximityProgressBarOrientation {
  Undefined = 0,
  InRange = 1,
  OutOfRange = 2,
}

enum ProximityProgressBarState {
  Undefined = 0,
  Active = 1,
  Inactive = 2,
  Complete = 3,
}

enum EActionInactivityReson {
  Ready = 0,
  Locked = 1,
  Recompilation = 2,
  OutOfMemory = 3,
  Invalid = 4,
}

enum EAIBackgroundCombatStep {
  ChangeCover = 0,
  ChangeTarget = 1,
}

enum ECoverSpecialAction {
  Undefined = 0,
  Left = 1,
  Right = 2,
}

enum EAIRole {
  Undefined = 0,
  Patrol = 1,
  Follower = 2,
}

enum gameDamageCallbackType {
  HitTriggered = 0,
  HitReceived = 1,
  PipelineProcessed = 2,
  COUNT = 3,
  INVALID = 4,
}

enum gameDamagePipelineStage {
  PreProcess = 0,
  Process = 1,
  PostProcess = 2,
  COUNT = 3,
  INVALID = 4,
}

enum DMGPipelineType {
  Undefined = 0,
  Damage = 1,
  ProjectedDamage = 2,
  All = 3,
}

enum hitFlag {
  Undefined = 0,
  IgnoreImmortalityModes = 1,
  FriendlyFire = 2,
  DisableSounds = 3,
  DisableVFX = 4,
  CannotReturnDamage = 5,
  CanParry = 6,
  CanCounter = 7,
  CanDodge = 8,
  WasBlocked = 9,
  WasDeflected = 10,
  WasDodged = 11,
  Kill = 12,
  DontShowDamageFloater = 13,
  DealNoDamage = 14,
  CannotModifyDamage = 15,
  Headshot = 16,
  CriticalHit = 17,
  FinisherTriggered = 18,
  DamageNullified = 19,
  Nonlethal = 20,
  WasKillingBlow = 21,
  ProcessDefeated = 22,
  Defeated = 23,
  SilentKillModifier = 24,
  DeterministicDamage = 25,
  WeakspotHit = 26,
  StealthHit = 27,
  DoNotTriggerFinisher = 28,
  DealtDamage = 29,
  ImmortalTarget = 30,
  CanDamageSelf = 31,
  SuccessfulAttack = 32,
  WeaponFullyCharged = 33,
  DisableNPCHitReaction = 34,
  VehicleDamage = 35,
  VehicleImpact = 36,
  RagdollImpact = 37,
  IgnoreDifficulty = 38,
  QuickHack = 39,
  IgnoreVehicles = 40,
  DamageOverTime = 41,
  PROJECT_SPECIFIC_FLAGS = 100000,
  UsedKerenzikov = 100001,
  FragmentationSplinter = 100002,
  DetonateGrenades = 100003,
  WeakExplosion = 100004,
  GrenadeQuickhackExplosion = 100005,
  FriendlyFireIgnored = 100006,
  ForceNoCrit = 100007,
  ReduceDamage = 100008,
}

enum damageSystemLogFlags {
  GENERAL = 1,
  ASSERT = 2,
  WEAKSPOTS = 4,
}

enum EVarDBMode {
  Add = 0,
  Set = 1,
  Invalid = 2,
}

enum EComponentOperation {
  Enable = 0,
  Disable = 1,
}

enum EMathOperationType {
  Add = 0,
  Set = 1,
}

enum ExtraEffect {
  AccuracyVirus = 0,
  PeernoidVirus = 1,
  Undefined = 2,
}

enum HighlightMode {
  Row = 0,
  Column = 1,
}

enum OutcomeMessage {
  Success = 0,
  Failure = 1,
}

enum ETrap {
  Invalid = 0,
  GridRegen = 1,
  AppendStart = 2,
  Hidden = 3,
  Virus = 4,
}

enum ProgramEffect {
  GrantAccess = 0,
  BlockAccess = 1,
  UnlockQuestFact = 2,
}

enum ProgramType {
  BasicAccess = 0,
  ExtraPlayerProgram = 1,
  ExtraServerProgram = 2,
  EnemyProgram = 3,
  EnemyLockNetwork = 4,
}

enum ButtonStatus {
  DEFAULT = 0,
  PROCESSING = 1,
  DISABLED = 2,
}

enum HoverStatus {
  DEFAULT = 0,
  HOVER = 1,
}

enum EComputerMenuType {
  MAIN = 0,
  SYSTEM = 1,
  FILES = 2,
  MAILS = 3,
  NEWSFEED = 4,
  INTERNET = 5,
  INVALID = 6,
}

enum EDocumentType {
  FILE = 0,
  MAIL = 1,
  Invalid = 2,
}

enum EWidgetPlacementType {
  DOCKED = 0,
  FLOATING = 1,
}

enum EScreenRatio {
  Screen_21x9 = 0,
  Screen_9x21 = 1,
  Screen_9x16 = 2,
  Screen_3x4 = 3,
  Screen_4x3 = 4,
  Screen_1x1 = 5,
}

enum ELayoutType {
  Generic = 0,
  Militech = 1,
  Arasaka = 2,
  Zetatech = 3,
}

enum EWidgetState {
  DEFAULT = 0,
  ON = 1,
  OFF = 2,
  INACTIVE = 3,
  ALLOWED = 4,
  LOCKED = 5,
  SEALED = 6,
}

enum EForcedElevatorArrowsState {
  Disabled = 0,
  ArrowsUp = 1,
  ArrowsDown = 2,
}

enum EIndustrialArmAnimations {
  Idle = 0,
  RepairLoop = 1,
  RepairLoop2 = 2,
  RepairLoopBroken = 3,
  RepairLoopBelow = 4,
  RepairLoopBelowBroken = 5,
  CarDestroy = 6,
  Repair_below_loop_high = 7,
  Repair_below_loop_low = 8,
  Repair_below_loop_medium = 9,
  Repair_loop_high = 10,
}

enum ERentStatus {
  PAID = 0,
  OVERDUE = 1,
  EVICTED = 2,
}

enum EPaymentSchedule {
  WEEKLY = 0,
  MONTHLY = 1,
}

enum EPlaystyleType {
  NONE = -1,
  TECHIE = 0,
  NETRUNNER = 1,
  TECHIE_AND_NETRUNNER = 2,
}

enum ESurveillanceCameraStatus {
  THREAT = -1,
  STREAMING = 0,
  WORKING = 1,
}

enum ESurveillanceCameraState {
  Off = 0,
  Active = 1,
}

enum worldTrafficLightColor {
  GREEN = 0,
  RED = 1,
  YELLOW = 2,
  INVALID = 3,
}

enum gamedeviceRequestType {
  Undefined = 0,
  External = 1,
  Remote = 2,
  Direct = 3,
  Internal = 4,
}

enum EPersonalLinkConnectionStatus {
  NOT_CONNECTED = 0,
  CONNECTING = 1,
  CONNECTED = 2,
}

enum EGlitchState {
  NONE = 0,
  DEFAULT = 1,
  SUBLIMINAL_MESSAGE = 2,
}

enum EDeviceStatus {
  DISABLED = -2,
  UNPOWERED = -1,
  OFF = 0,
  ON = 1,
  INVALID = 2,
}

enum EDeviceDurabilityType {
  INVULNERABLE = 0,
  INDESTRUCTIBLE = 1,
  DESTRUCTIBLE = 2,
}

enum EDeviceDurabilityState {
  NOMINAL = 0,
  MALFUNCTIONING = 1,
  BROKEN = 2,
  DESTROYED = 3,
}

enum EGameplayChallengeLevel {
  NONE = 0,
  EASY = 1,
  MEDIUM = 2,
  HARD = 3,
  IMPOSSIBLE = 4,
}

enum EActivationState {
  NONE = 0,
  ACTIVATED = 1,
  DEACTIVATED = 2,
}

enum EPersonalLinkSlotSide {
  FRONT = 0,
  RIGHT = 1,
  BOTTOM = 2,
}

enum EOperationClassType {
  Local = 0,
  BaseState = 1,
  DoorState = 2,
  BaseAction = 3,
  CustomActions = 4,
  TriggerVolume = 5,
  Hit = 6,
  InteractionArea = 7,
  Senses = 8,
  FocusMode = 9,
}

enum ETriggerOperationType {
  ENTER = 0,
  EXIT = 1,
}

enum EWorkspotOperationType {
  ENTER = 0,
  LEAVE = 1,
}

enum EEffectOperationType {
  START = 0,
  STOP = 1,
  BRAKE_LOOP = 2,
}

enum ETransformAnimationOperationType {
  PLAY = 0,
  PAUSE = 1,
  RESET = 2,
  SKIP = 3,
}

enum EItemOperationType {
  ADD = 0,
  REMOVE = 1,
}

enum EBinkOperationType {
  PLAY = 0,
  STOP = 1,
  PAUSE = 2,
  RESUME = 3,
}

enum EPlaystyle {
  NETRUNNER = 0,
  SOLO = 1,
  TECHIE = 2,
}

enum EVirtualSystem {
  Undefined = 0,
  SurveillanceSystem = 1,
  DoorSystem = 2,
  MediaSystem = 3,
  SecuritySystem = 4,
}

enum EActionContext {
  Undefined = -1,
  Direct = 0,
  QHack = 1,
  Master = 2,
  Spiderbot = 3,
}

enum ETargetManagerAnimGraphState {
  MODELOOKAT = 0,
  IDLE = 1,
  JAMMED = 2,
}

enum ESensorDeviceWakeState {
  NONE = -1,
  CLOSED = 0,
  WAKEN = 1,
  OPEN = 2,
}

enum ESensorDeviceStates {
  NONE = 0,
  IDLE = 1,
  IDLEFORCED = 2,
  TARGETLOCK = 3,
  TARGETLOSE = 4,
  TARGETRECEIVED = 5,
  REPRIMAND = 6,
  JAMMER = 7,
}

enum EDebuggerColor {
  RED = 0,
  YELLOW = 1,
}

enum EDoorType {
  NONE = 0,
  INTERACTIVE = 1,
  AUTOMATIC = 2,
  PHYSICAL = 3,
  REMOTELY_CONTROLLED = 4,
}

enum EDoorStatus {
  SEALED = -2,
  LOCKED = -1,
  CLOSED = 0,
  OPENED = 1,
}

enum EDoorOpeningType {
  SLIDING_HORIZONTALLY = 0,
  SLIDING_VERTICALLY = 1,
  HINGED = 2,
  GATE = 3,
  HINGED_SIDE_ONE = 4,
  HINGED_SIDE_TWO = 5,
}

enum EAnimationType {
  REGULAR = 0,
  TRANSFORM = 1,
  TRANSFORM_TWO_SIDES = 2,
  NONE = 3,
}

enum EDoorTriggerSide {
  OUTSIDE = 0,
  ONE = 1,
  TWO = 2,
}

enum EDoorSkillcheckSide {
  BOTH = 0,
  ONE = 1,
  TWO = 2,
}

enum EExplosiveAdditionalGameEffectType {
  none = 0,
  EMP = 1,
}

enum ExplosiveTriggerDeviceLaserState {
  GREEN = 0,
  RED = 1,
  DISABLED = 2,
}

enum EFastTravelTriggerType {
  Manual = 0,
  Auto = 1,
}

enum EFastTravelDeviceType {
  DataTerm = 0,
  SubwayGate = 1,
}

enum SignType {
  INFORMATION = 0,
  ATTENTION = 1,
  WARNING = 2,
}

enum SignShape {
  RECTANGLE = 0,
  ARROWLEFT = 1,
  ARROWRIGHT = 2,
  SQUARE = 3,
}

enum ERadioStationList {
  AGGRO_INDUSTRIAL = 0,
  ELECTRO_INDUSTRIAL = 1,
  HIP_HOP = 2,
  AGGRO_TECHNO = 3,
  DOWNTEMPO = 4,
  ATTITUDE_ROCK = 5,
  POP = 6,
  LATINO = 7,
  METAL = 8,
  NONE = 9,
}

enum ETVChannel {
  CH1 = 0,
  CH2 = 1,
  CH3 = 2,
  CH4 = 3,
  CH5 = 4,
  INVALID = 5,
}

enum EWindowBlindersStates {
  NonInteractive = 0,
  Open = 1,
  Closed = 2,
  Tilted = 3,
}

enum IntercomStatus {
  DEFAULT = 0,
  CALLING = 1,
  TALKING = 2,
  CALL_MISSED = 3,
  CALL_ENDED = 4,
}

enum EViabilityDecision {
  INCONCLUSIVE = 0,
  VIABLE = 1,
  NONVIABLE = 2,
}

enum EActionsSequencerMode {
  REGULAR_INTERVALS = 0,
  ACCELERATING_INTERVALS_TODO = 1,
  DECELERATING_INTEVALS_TODO = 2,
  RANDOM_INTERVALS_TODO = 3,
  AT_THE_SAME_TIME_TODO = 4,
}

enum EToggleActivationTypeComputer {
  Undefined = 0,
  Raise = 1,
}

enum EComputerAnimationState {
  Undefined = 0,
  Opened = 1,
  Closed = 2,
}

enum ELightSwitchRandomizerType {
  RANDOM = 0,
  RANDOM_PROGRESSIVE = 1,
  NONE = 2,
}

enum ESmartHousePreset {
  MorningPreset = 0,
  EveningPreset = 1,
  NightPreset = 2,
}

enum ESoundStatusEffects {
  NONE = 0,
  DEAFENED = 1,
  SUPRESS_NOISE = 2,
}

enum ESwitchAction {
  ToggleOn = 0,
  ToggleActivate = 1,
}

enum ESystems {
  NONE = 0,
  SecuritySystem = 1,
  AccessPoints = 2,
  MaintenanceSystem = 3,
  PersonnelSystem = 4,
  SurveillanceSystem = 5,
}

enum ESecurityAreaType {
  DISABLED = 0,
  SAFE = 1,
  RESTRICTED = 2,
  DANGEROUS = 3,
}

enum EFilterType {
  ALLOW_NONE = 0,
  ALLOW_COMBAT_ONLY = 1,
  ALLOW_ALL = 2,
}

enum ETransitionMode {
  GENTLE = 0,
  FORCED = 1,
}

enum EQuestFilterType {
  DONT_CHANGE = 0,
  ALLOW_NONE = 1,
  ALLOW_COMBAT_ONLY = 2,
  ALLOW_ALL = 3,
}

enum AttitudeChange {
  DONT_CHANGE = 0,
  FRIENDLY = 1,
  NEUTRAL = 2,
  HOSTILE = 3,
}

enum SecurityEventScopeSettings {
  GLOBAL = 0,
  AREA_WHERE_PLAYER_IS = 1,
  SPECIFIC_AGENTS_ONLY = 2,
}

enum EPermissionSource {
  GAMEPLAY = 0,
  PLAYER = 1,
  QUEST = 2,
}

enum ERevealPlayerType {
  DONT_REVEAL = 0,
  REVEAL_ONCE = 1,
}

enum EAllowedTo {
  UNDEFINED = 0,
  TRESSPASSING = 1,
  ILLEGAL_ACTIONS = 2,
  COMBAT = 3,
}

enum ESecurityAccessLevel {
  ESL_NONE = 0,
  ESL_LOCAL = 1,
  ESL_0 = 2,
  ESL_1 = 3,
  ESL_2 = 4,
  ESL_3 = 5,
  ESL_4 = 6,
}

enum BlacklistReason {
  UNINITIALIZED = 0,
  TRESPASSING = 1,
  REPRIMAND = 2,
  COMBAT = 3,
}

enum ESecuritySystemState {
  UNINITIALIZED = 0,
  SAFE = 1,
  ALERTED = 2,
  COMBAT = 3,
}

enum EReprimandInstructions {
  INITIATE_FIRST = 0,
  INITIATE_SUCCESSIVE = 1,
  TAKEOVER = 2,
  CONCLUDE_SUCCESSFUL = 3,
  CONCLUDE_FAILED = 4,
  RELEASE_TO_ANOTHER_ENTITY = 5,
}

enum EBreachOrigin {
  LOCAL = 0,
  EXTERNAL = 1,
  GLOBAL = 2,
}

enum ESecurityNotificationType {
  REPRIMAND_SUCCESSFUL = -2,
  DEESCALATE = -1,
  DEFAULT = 0,
  ILLEGAL_ACTION = 1,
  REPRIMAND_ESCALATE = 2,
  DEVICE_DESTROYED = 3,
  ALARM = 4,
  SECURITY_GATE = 5,
  COMBAT = 6,
  QUEST = 7,
}

enum EShouldChangeAttitude {
  PERSISTENTLY = 0,
  TEMPORARLY = 1,
}

enum ESecurityTurretStatus {
  THREAT = -1,
  SHOOTING = 0,
  WORKING = 1,
  SCANING = 2,
  DAMAGED = 3,
}

enum ESecurityTurretType {
  SIMPLE = 0,
}

enum ESecurityGateStatus {
  READY = 0,
  SCANNING = 1,
  THREAT_DETECTED = 2,
}

enum ESecurityGateScannerIssueType {
  NoIssues = 0,
  ScannerEmpty = 1,
  Overcrowded = 2,
  TargetAlreadyScanned = 3,
}

enum ESecurityGateEntranceType {
  OnlySideA = 0,
  OnlySideB = 1,
  AnySide = 2,
}

enum ESecurityGateResponseType {
  AUDIOVISUAL_ONLY = 0,
  SEC_SYS_REPRIMAND = 1,
  SEC_SYS_COMBAT = 2,
}

enum ELightSequenceStage {
  NONE = 0,
  INPROGRESS = 1,
  COMPLETE = 2,
}

enum PaymentStatus {
  DEFAULT = 0,
  IN_PROGRESS = 1,
  NO_MONEY = 2,
}

enum ETrapEffects {
  Explosion = 0,
  Poisoned = 1,
  Bleeding = 2,
  Burning = 3,
  Blind = 4,
  SmokeScreen = 5,
  Stun = 6,
  Unconcious = 7,
}

enum EBOOL {
  UNINITIALZED = 0,
  FALSE = 1,
  TRUE = 2,
}

enum ECompareOp {
  CO_Lesser = 0,
  CO_LesserEq = 1,
  CO_Greater = 2,
  CO_GreaterEq = 3,
  CO_Equal = 4,
  CO_NotEqual = 5,
}

enum EWeaponNamesList {
  EWNL_PowerStreetRifle = 0,
  EWNL_TechStreetShotgun = 1,
  EWNL_PowerCorpHandgun = 2,
  EWNL_SmartCorpRifle = 3,
  EWNL_PowerCorpHandgunJackie = 4,
}

enum EAITargetType {
  AITT_Undefined = 0,
  AITT_Argument = 1,
  AITT_Owner = 2,
  AITT_CombatTarget = 3,
  AITT_FacingTarget = 4,
  AITT_Attacker = 5,
  AITT_Companion = 6,
  AITT_Cover = 7,
}

enum EAIThreatCalculationType {
  Regular = 0,
  Boss = 1,
  Madness = 2,
}

enum EBarkList {
  vo_enemy_reaction_surprised_combat_start = 0,
  vo_enemy_reaction_generic_cursing = 1,
  vo_enemy_reaction_jammed_weapon = 2,
  vo_enemy_reaction_impact_hit = 3,
  vo_enemy_reaction_stagger_hit = 4,
  vo_enemy_reaction_crippled_arm = 5,
  vo_enemy_reaction_crippled_leg = 6,
  vo_enemy_reaction_death = 7,
  vo_enemy_group_call_to_combat = 8,
  vo_enemy_group_call_for_help = 9,
  vo_enemy_group_order_go_to_cover = 10,
  vo_enemy_group_order_flank_target = 11,
  vo_enemy_group_order_suppressing_fire = 12,
  vo_enemy_answer_to_order_suppressing_fire = 13,
  vo_enemy_group_notification_reloading = 14,
  vo_enemy_group_notification_squad_member_died = 15,
  vo_enemy_group_notification_grenade_nearby = 16,
  vo_enemy_group_notification_target_using_sandevistan = 17,
  vo_enemy_group_notification_target_using_kerenzikov = 18,
  vo_enemy_answer_to_notification_target_using_sandevistan = 19,
  vo_enemy_answer_to_notification_target_using_kerenzikov = 20,
  vo_enemy_group_generic_combat_question = 21,
  vo_enemy_answer_to_generic_combat_question = 22,
  vo_enemy_group_boost_combat_morale = 23,
}

enum EAIActionState {
  Inactive = 0,
  Startup = 1,
  Loop = 2,
  Recover = 3,
}

enum AIactionParamsPackageTypes {
  Default = 0,
  Reaction = 1,
  StatusEffect = 2,
  Undefined = 3,
}

enum EAIActionTarget {
  Undefined = 0,
  CombatTarget = 1,
  FriendlyTarget = 2,
  CurrentCover = 3,
  StimTarget = 4,
  StimSource = 5,
  CustomWorldPosition = 6,
}

enum EAICombatPreset {
  Undefined = 0,
  IsReckless = 1,
  IsAggressive = 2,
  IsBalanced = 3,
  IsDefensive = 4,
  IsCautious = 5,
}

enum EAttackType {
  Invalid = 0,
  Ranged = 1,
  Melee = 2,
}

enum EHitReactionMode {
  Regular = 0,
  ForceImpact = 1,
  ForceStagger = 2,
  ForceKnockdown = 3,
  Fragile = 4,
  Weak = 5,
  Tough = 6,
  Bulky = 7,
  Unstoppable = 8,
  UnstoppableTwitchMin = 9,
  UnstoppableTwitchNone = 10,
  StaggerMin = 11,
  BulkyStaggerMin = 12,
  Invalid = 13,
}

enum EMeleeAttacks {
  Invalid = 0,
  LightAtk_Left = 1,
  LightAtk_Right = 2,
  ComboAtk_3hits_Part1 = 3,
  ComboAtk_3hits_Part2 = 4,
  ComboAtk_3hits_Part3 = 5,
  ChargeAttack = 6,
}

enum DeviceStimType {
  Distract = 0,
  VisualDistract = 1,
  Explosion = 2,
  VentilationAreaEffect = 3,
  Undefined = 4,
}

enum ETauntType {
  Normal = 0,
  Melee = 1,
  Ranged = 2,
}

enum EWoundedBodyPart {
  Invalid = 0,
  WoundedLeftArm = 1,
  WoundedRightArm = 2,
  WoundedLeftLeg = 3,
  WoundedRightLeg = 4,
  DismemberedLeftArm = 5,
  DismemberedRightArm = 6,
  DismemberedLeftLeg = 7,
  DismemberedRightLeg = 8,
  DismemberedBothLegs = 9,
}

enum EStatusEffects {
  Invalid = 0,
  WeaponJammed = 1,
  Blind = 2,
  SmokeScreen = 3,
  Unconscious = 4,
  Burning = 5,
  Stun = 6,
  HeartAttack = 7,
  SuicideWithWeapon = 8,
  SuicideWithGrenade = 9,
  Wounded = 10,
  MonowireGrapple = 11,
  Exhausted = 12,
  Defeated = 13,
  Sleep = 14,
  Berserker = 15,
  Pain = 16,
  Sandevistan = 17,
  NetwatcherHackStage1 = 18,
  NetwatcherHackStage2 = 19,
  NetwatcherHackStage3 = 20,
  Count = 21,
}

enum EstatusEffectsState {
  Deactivated = 0,
  Activating = 1,
  Activated = 2,
}

enum EAISquadAction {
  Invalid = 0,
  Shoot = 1,
  Charge = 2,
  TakeCover = 3,
  Search = 4,
  Reprimand = 5,
  Investigate = 6,
  Melee = 7,
  Taunt = 8,
  Defend = 9,
  Takedown = 10,
  Peek = 11,
  GrenadeThrow = 12,
  Dash = 13,
  Sync = 14,
  BattleCry = 15,
  CallOff = 16,
  BackUp = 17,
  RangedStrafe = 18,
  Quickhack = 19,
  GroupReaction = 20,
  Crouch = 21,
}

enum EAISquadTactic {
  Invalid = 0,
  Flanking = 1,
  Assault = 2,
  Snipe = 3,
  Regroup = 4,
  Retreat = 5,
  Defend = 6,
  Suppress = 7,
  Medivac = 8,
  Panic = 9,
}

enum EAISquadChoiceAlgorithm {
  Invalid = 0,
  TargetDistance = 1,
  SectorDistance = 2,
  SquadmateDistance = 3,
  CoopDistance = 4,
  LineOfSight = 5,
  StimDistance = 6,
  StimDistancePerSource = 7,
  AvoidLastPuppetIfPossible = 8,
  Officer = 9,
  Group = 10,
  CallForBackUp = 11,
  CallOffAction = 12,
  ShareNewThreat = 13,
}

enum EAISquadRing {
  Invalid = 0,
  Melee = 1,
  Close = 2,
  Medium = 3,
  Far = 4,
  Extreme = 5,
}

enum EAISquadVerb {
  Invalid = 0,
  JoinSquad = 1,
  LeaveSquad = 2,
  OpenSquadAction = 3,
  RevokeSquadAction = 4,
  RevokeOrder = 5,
  CommitToSquadAction = 6,
  ReportDoneOnSquadAction = 7,
  ReportFailureOnSquadAction = 8,
  EvaluateTicketActivation = 9,
  EvaluateTicketDeactivation = 10,
  AcknowledgeOrder = 11,
}

enum EAITicketStatus {
  Invalid = 0,
  Evaluate = 1,
  OrderFail = 2,
  OrderDone = 3,
  OrderRevoked = 4,
}

enum EAIPlayerSquadOrder {
  Takedown = 0,
  Invalid = 1,
}

enum EReactionValue {
  Fear = 0,
  Aggressive = 1,
}

enum EAICoverAction {
  StepOut = 0,
  LeanOut = 1,
  StepUp = 2,
  LeanOver = 3,
  Undefined = 4,
}

enum EAICoverActionDirection {
  Front = 0,
  FrontRight = 1,
  Right = 2,
  BackRight = 3,
  Back = 4,
  BackLeft = 5,
  Left = 6,
  FrontLeft = 7,
}

enum EAIGateSignalFlags {
  AIGSF_Undefined = 0,
  AIGSF_OverridesSelf = 1,
  AIGSF_InterruptsSamePriorityTask = 2,
  AIGSF_InterruptsForcedBehavior = 3,
  AIGSF_AcceptsAdditives = 4,
}

enum ENPCPhaseState {
  Phase1 = 0,
  Phase2 = 1,
  Phase3 = 2,
  Phase4 = 3,
  Phase5 = 4,
  Invalid = 5,
}

enum EAIGateEventFlags {
  AIGEF_Undefined = 0,
  AIGEF_OverridesSelf = 1,
  AIGEF_InterruptsSamePriorityTask = 2,
  AIGEF_InterruptsForcedBehavior = 3,
  AIGEF_AcceptsAdditives = 4,
}

enum EAIShootingPatternRange {
  Close = 0,
  Medium = 1,
  Long = 2,
  Undefined = 3,
}

enum EStatusEffectBehaviorType {
  Invalid = 0,
  Basic = 1,
  Stoppable = 2,
  Unstoppable = 3,
}

enum EComparisonOperator {
  Equal = 0,
  NotEqual = 1,
  More = 2,
  MoreOrEqual = 3,
  Less = 4,
  LessOrEqual = 5,
}

enum EArgumentType {
  Object = 0,
  CoverID = 1,
  Vector4 = 2,
}

enum EInitReactionAnim {
  Shock = 0,
  Fear = 1,
  Curious = 2,
  Call = 3,
}

enum ENeutralizeType {
  Undefined = 0,
  Killed = 1,
  Defeated = 2,
  Unconscious = 3,
}

enum EMathOperator {
  Undefined = 0,
  Add = 1,
  Subtract = 2,
  Multiply = 3,
  Divide = 4,
}

enum EMagazineAmmoState {
  Undefined = 0,
  FirstBullet = 1,
  LastBullet = 2,
}

enum EBroadcasteingType {
  Active = 0,
  SingleActive = 1,
  Direct = 2,
  Remove = 3,
  Single = 4,
}

enum EBeamStyle {
  Undefined = 0,
  Sweeping = 1,
  HeadSlicer = 2,
}

enum EGrenadeType {
  Frag = 0,
  Flash = 1,
  Piercing = 2,
  EMP = 3,
  Biohazard = 4,
  Incendiary = 5,
  Recon = 6,
  Cutting = 7,
  Sonic = 8,
}

enum EDrillMachineRewireState {
  InsideInteractionRange = 0,
  OutsideInteractionRange = 1,
  InteractionStarted = 2,
  InteractionFinished = 3,
  RewireStarted = 4,
  RewireFinished = 5,
}

enum gameEContinuousMode {
  Undefined = 0,
  Start = 1,
  Stop = 2,
}

enum gameweaponReloadStatus {
  Standard = 0,
  Interrupted = 1,
}

enum PackageStatus {
  UNINITIALIZED = 0,
  ON_HOLD = 1,
  FOR_IMMEDIATE_TRIGGER = 2,
  TRIGGERED = 3,
}

enum RequestType {
  INSTANTLY_TRIGGER = 0,
  MANUALLY_TRIGGERED = 1,
}

enum QuickSlotActionType {
  Undefined = 0,
  SelectItem = 1,
  HideWeapon = 2,
  OpenPhone = 3,
  SummonCar = 4,
  SummonBike = 5,
  ToggleRadio = 6,
  SelectRadioStation = 7,
  TurnOffRadio = 8,
  CycleTrackedQuest = 9,
  SummonVehicle = 10,
  SetActiveVehicle = 11,
  QuickHack = 12,
  ToggleSummonMode = 13,
  EquipFists = 14,
}

enum QuickSlotItemType {
  Undefined = 0,
  Vehicle = 1,
  Gadget = 2,
  Consumable = 3,
  Cyberware = 4,
  Weapon = 5,
  Interaction = 6,
}

enum EDPadSlot {
  Left = 0,
  Up = 1,
  Right = 2,
  Down = 3,
  LeftDouble = 4,
  UpDouble = 5,
  RightDouble = 6,
  DownDouble = 7,
  WeaponsWheel = 8,
  VehicleWheel = 9,
  GadgetWheel = 10,
  InteractionWheel = 11,
  Phone = 12,
  CallVehicle = 13,
  CycleObjective = 14,
  VehicleInsideWheel = 15,
  ConsumableWheel = 16,
}

enum EPowerDifferential {
  IMPOSSIBLE = -6,
  HARD = -3,
  NORMAL = 2,
  EASY = 4,
  TRASH = 5,
}

enum LaserTargettingState {
  Start = 0,
  Update = 1,
  End = 2,
}

enum gameCityAreaType {
  Undefined = 0,
  PublicZone = 1,
  SafeZone = 2,
  RestrictedZone = 3,
  DangerousZone = 4,
}

enum PlayerCombatState {
  Invalid = 0,
  InCombat = 1,
  OutOfCombat = 2,
  Stealth = 3,
}

enum PlayerCombatControllerRefreshPolicyEnum {
  Persistent = 0,
  Eventful = 1,
}

enum gamePlayerCoverDirection {
  Undefined = 0,
  Up = 1,
  Left = 2,
  Right = 3,
}

enum gamePlayerCoverMode {
  Undefined = 0,
  Auto = 1,
  Manual = 2,
}

enum worldgeometryaverageNormalDetectionHelperQueryStatus {
  Finished = 0,
  NoGeometry = 1,
}

enum gamePlayerObstacleSystemQueryType {
  Climb_Vault = 0,
  Covers = 1,
  AverageNormal = 2,
}

enum PlayerVisionModeControllerRefreshPolicyEnum {
  Persistent = 0,
  Eventful = 1,
}

enum ECarryState {
  Undefined = 0,
  Pickup = 1,
  Carry = 2,
  Drop = 3,
  Release = 4,
  Dispose = 5,
  Jump = 6,
}

enum EPlayerMovementDirection {
  Forward = 0,
  Right = 1,
  Back = 2,
  Left = 3,
}

enum EAimAssistLevel {
  Off = 0,
  Light = 1,
  Standard = 2,
}

enum EEquipmentState {
  Unequipped = 0,
  Equipped = 1,
  Equipping = 2,
  Unequipping = 3,
  FirstEquip = 4,
}

enum EEquipmentSide {
  Left = 0,
  Right = 1,
}

enum EDeathType {
  Ground = 0,
  Air = 1,
  Swimming = 2,
}

enum ETakedownActionType {
  GrappleFailed = 0,
  Grapple = 1,
  Takedown = 2,
  TakedownNonLethal = 3,
  TakedownNetrunner = 4,
  TakedownMassiveTarget = 5,
  AerialTakedown = 6,
  LeapToTarget = 7,
  Struggle = 8,
  BreakFree = 9,
  TargetDead = 10,
  KillTarget = 11,
  SpareTarget = 12,
  ForceShove = 13,
  BossTakedown = 14,
  DisposalTakedown = 15,
  DisposalTakedownNonLethal = 16,
  Undefined = 17,
}

enum ETakedownBossName {
  Smasher = 0,
  Oda = 1,
  Royce = 2,
  Sasquatch = 3,
  Undefined = 4,
}

enum LandingType {
  Off = 0,
  Regular = 1,
  Hard = 2,
  VeryHard = 3,
  Superhero = 4,
  Death = 5,
}

enum EMeleeAttackType {
  Combo = 0,
  Strong = 1,
  Final = 2,
  Block = 3,
  Safe = 4,
  Slide = 5,
  Crouch = 6,
  Jump = 7,
  Sprint = 8,
  Fall = 9,
  Throw = 10,
  Dodge = 11,
  Equip = 12,
}

enum EMoveAssistLevel {
  Off = 0,
  SpecialAttacks = 1,
  AllAttacks = 2,
}

enum meleeMoveDirection {
  Forward = 0,
  Right = 1,
  Back = 2,
  Left = 3,
}

enum meleeQueuedAttack {
  Block = 0,
  Combo = 1,
  Crouch = 2,
  Final = 3,
  Jump = 4,
  Safe = 5,
  Sprint = 6,
  Strong = 7,
  Throw = 8,
}

enum aimTypeEnum {
  AimIn = 0,
  AimOut = 1,
  Invalid = 2,
}

enum EActionType {
  QuickAction = 0,
  ChargeAction = 1,
  Undefined = 2,
}

enum ThrowType {
  Quick = 0,
  Charge = 1,
}

enum ELauncherActionType {
  QuickAction = 0,
  ChargeAction = 1,
  Undefined = 2,
}

enum ELaunchMode {
  Primary = 0,
  Secondary = 1,
  Undefined = 2,
}

enum EMissileRainPhase {
  Init = 0,
  Phase1 = 1,
  Phase2 = 2,
}

enum EquipmentPriority {
  Primary = 0,
  Secondary = 1,
  All = 2,
}

enum EHandEquipSlot {
  Undefined = 0,
  Left = 1,
  Right = 2,
}

enum ETelemetryData {
  MeleeAttacksMade = 0,
  RangedAttacksMade = 1,
  BluelinesSelected = 2,
  MeleeKills = 3,
  RangedKills = 4,
  QuickHacksMade = 5,
  LegendaryItemsCrafted = 6,
}

enum ENPCTelemetryData {
  HitByLightAttack = 0,
  HitByStrongAttack = 1,
  HitByFinalComboAttack = 2,
  HitByBlockAttack = 3,
  BlockedAttack = 4,
  DeflectedAttack = 5,
  WasGuardBreaked = 6,
}

enum EDownedType {
  Killed = 0,
  Finished = 1,
  Defeated = 2,
  Unconscious = 3,
}

enum EHotkey {
  INVALID = 0,
  DPAD_UP = 1,
  DPAD_DOWN = 2,
  DPAD_RIGHT = 3,
  RB = 4,
}

enum EHotkeyRequestType {
  Assign = 0,
  Cycle = 1,
  Restore = 2,
}

enum gameItemEquipContexts {
  LastWeaponEquipped = 0,
  LastUsedMeleeWeapon = 1,
  LastUsedRangedWeapon = 2,
  Gadget = 3,
  MeleeCyberware = 4,
  LauncherCyberware = 5,
  Fists = 6,
}

enum gameEquipAnimationType {
  Default = 0,
  Instant = 1,
  FirstEquip = 2,
}

enum gameItemUnequipContexts {
  AllWeapons = 0,
  HeadClothing = 1,
  FaceClothing = 2,
  OuterChestClothing = 3,
  InnerChestClothing = 4,
  LegClothing = 5,
  FootClothing = 6,
  AllClothing = 7,
  RightHandWeapon = 8,
  LeftHandWeapon = 9,
  AllQuestItems = 10,
  AllItems = 11,
}

enum ELastUsed {
  Weapon = 0,
  Melee = 1,
  Ranged = 2,
  Heavy = 3,
}

enum EEquipmentSetType {
  Offensive = 0,
  Defensive = 1,
  Cyberware = 2,
}

enum EquipmentManipulationAction {
  Undefined = 0,
  RequestActiveMeleeware = 1,
  RequestActiveWeapon = 2,
  RequestSlotActiveWeapon = 3,
  RequestLastUsedWeapon = 4,
  RequestFirstMeleeWeapon = 5,
  RequestLastUsedMeleeWeapon = 6,
  RequestLastUsedOrFirstAvailableWeapon = 7,
  RequestLastUsedOrFirstAvailableRangedWeapon = 8,
  RequestLastUsedOrFirstAvailableMeleeWeapon = 9,
  RequestLastUsedOrFirstAvailableOneHandedRangedWeapon = 10,
  RequestHeavyWeapon = 11,
  CycleWeaponWheelItem = 12,
  CycleNextWeaponWheelItem = 13,
  CyclePreviousWeaponWheelItem = 14,
  RequestConsumable = 15,
  RequestGadget = 16,
  RequestFists = 17,
  RequestLeftHandCyberware = 18,
  UnequipWeapon = 19,
  UnequipConsumable = 20,
  UnequipGadget = 21,
  UnequipLeftHandCyberware = 22,
  UnequipAll = 23,
  ReequipWeapon = 24,
  RequestWeaponSlot1 = 25,
  RequestWeaponSlot2 = 26,
  RequestWeaponSlot3 = 27,
  RequestWeaponSlot4 = 28,
}

enum inputContextType {
  Action = 0,
  RPG = 1,
}

enum ESlotState {
  Taken = 0,
  Empty = 1,
  Available = 2,
}

enum questPhoneStatus {
  Available = 0,
  NotAvailable = 1,
  Busy = 2,
  Minimized = 3,
}

enum questPhoneCallPhase {
  Undefined = 0,
  IncomingCall = 1,
  StartCall = 2,
  EndCall = 3,
}

enum questPhoneCallMode {
  Undefined = 0,
  Audio = 1,
  Video = 2,
}

enum questPhoneTalkingState {
  Ended = 0,
  Initializing = 1,
  Talking = 2,
}

enum telemetryLevelGainReason {
  Ignore = 0,
  Gameplay = 1,
  IsDebug = 2,
}

enum EGravityType {
  LowGravity = 0,
  Regular = 1,
}

enum ESmartBulletPhase {
  Init = 0,
  Parabolic = 1,
  Follow = 2,
  Linear = 3,
  Miss = 4,
}

enum FunctionalTestsResultCode {
  Valid = 0,
  MalformedEntityDescr = 1,
  EntityNotFound = 2,
  ComponentNotFound = 3,
  InvalidEntityType = 4,
  InvalidComponentType = 5,
  InvalidNodeRef = 6,
  SlotNotFound = 7,
  InventoryError = 8,
  InvalidInputAction = 9,
  EmptyContainer = 10,
}

enum inkELayerType {
  Watermarks = 0,
  WaitingSign = 1,
  SystemNotifications = 2,
  Loading = 3,
  GameNotifications = 4,
  Menu = 5,
  Video = 6,
  HUD = 7,
  Editor = 8,
  World = 9,
  Offscreen = 10,
  Advertisements = 11,
  StreetSigns = 12,
  PhotoMode = 13,
  Debug = 14,
  MAX = 15,
}

enum FTNpcMountingState {
  Mounted = 0,
  Unmounted = 1,
}

enum Ft_Result {
  Success = 0,
  GettingPlayerGameObjectFailed = 1,
  GetPSMBlackboardFailed = 2,
  GetStatsPoolFailed = 3,
  NoEnemyFoundInSpawner = 4,
  NoEnemyFoundInPool = 5,
  NoEntitiesFoundInSpawner = 6,
  NoEnemyTargeted = 7,
  FailedToSelectGrapple = 8,
  FailedToSelectTakedown = 9,
  TakedownWithoutGrappleAttempt = 10,
  NoInteractionAvailable = 11,
  RequestedInteractionNotAvailable = 12,
  OutOfRange = 13,
  TargetNotInEnemyPool = 14,
  DescriptorFormatError = 15,
}

enum ECameraDirectionFunctionalTestsUtil {
  Up = 0,
  Down = 1,
  Left = 2,
  Right = 3,
}

enum Ft_TakedownType {
  Lethal = 0,
  Nonlethal = 1,
  Breach = 2,
}

enum Ft_TakedownStage {
  Default = 0,
  Grappling = 1,
  Grappled = 2,
  Takedown = 3,
  Finished = 4,
}

enum ATUIComputerTestStepMode {
  SINGLE_ACTION = 0,
  ROLLING = 1,
}

enum FTScriptState {
  ERROR = 0,
}

enum FTEntityRequirementsFlag {
  Undefined = 0,
  LookAtComponent = 1,
  ScanningComponent = 2,
  DestructionComponent = 4,
  GameObject = 8,
  ScriptedPuppet = 16,
  AttitudeAgent = 32,
  Device = 64,
  VehicleObject = 128,
  GamePuppet = 256,
}

public native class IScriptable {

  public final native const func GetClassName() -> CName;

  public final native const func IsA(className: CName) -> Bool;

  public final native const func IsExactlyA(className: CName) -> Bool;

  public final static native func DetectScriptableCycles() -> Void;
}

public native struct WorldPosition {

  public final static native func SetX(worldPosition: WorldPosition, value: Float) -> Void;

  public final static native func SetY(worldPosition: WorldPosition, value: Float) -> Void;

  public final static native func SetZ(worldPosition: WorldPosition, value: Float) -> Void;

  public final static native func SetXYZ(worldPosition: WorldPosition, x: Float, y: Float, z: Float) -> Void;

  public final static native func SetVector4(worldPosition: WorldPosition, value: Vector4) -> Void;

  public final static native func GetX(worldPosition: WorldPosition) -> Float;

  public final static native func GetY(worldPosition: WorldPosition) -> Float;

  public final static native func GetZ(worldPosition: WorldPosition) -> Float;

  public final static native func ToVector4(worldPosition: WorldPosition) -> Vector4;
}

public native struct WorldTransform {

  public final static native func SetIdentity(xform: WorldTransform) -> Void;

  public final static native func SetWorldPosition(xform: WorldTransform, value: WorldPosition) -> Void;

  public final static native func SetPosition(xform: WorldTransform, value: Vector4) -> Void;

  public final static native func SetOrientation(xform: WorldTransform, value: Quaternion) -> Void;

  public final static native func SetOrientationEuler(xform: WorldTransform, value: EulerAngles) -> Void;

  public final static native func SetOrientationFromDir(xform: WorldTransform, value: Vector4) -> Void;

  public final static native func TransformXForm(xform: WorldTransform, value: Transform) -> WorldTransform;

  public final static native func TransformWorldXForm(xform: WorldTransform, value: WorldTransform) -> WorldTransform;

  public final static native func TransformPoint(xform: WorldTransform, value: Vector4) -> WorldPosition;

  public final static native func TransformWorldPosition(xform: WorldTransform, value: WorldPosition) -> WorldPosition;

  public final static native func TransformInvWorldXForm(xform: WorldTransform, value: WorldTransform) -> Transform;

  public final static native func TransformInvXForm(xform: WorldTransform, value: Transform) -> Transform;

  public final static native func TransformInvPoint(xform: WorldTransform, value: Vector4) -> Vector4;

  public final static native func TransformInvWorldPosition(xform: WorldTransform, value: WorldPosition) -> Vector4;

  public final static native func GetWorldPosition(xform: WorldTransform) -> WorldPosition;

  public final static native func GetOrientation(xform: WorldTransform) -> Quaternion;

  public final static native func GetInverse(xform: WorldTransform) -> WorldTransform;

  public final static native func GetForward(xform: WorldTransform) -> Vector4;

  public final static native func GetRight(xform: WorldTransform) -> Vector4;

  public final static native func GetUp(xform: WorldTransform) -> Vector4;

  public final static native func ToMatrix(xform: WorldTransform) -> Matrix;

  public final static native func _ToXForm(xform: WorldTransform) -> Transform;
}

public native class GameEntity extends Entity {
}

public native class AnimFeature extends IScriptable {
}

public abstract native class PersistentState extends IScriptable {

  public final native const func GetID() -> PersistentID;

  public final native const func GetPersistencySystem() -> ref<GamePersistencySystem>;

  public final native const func GetGameInstance() -> GameInstance;

  public final native func ForcePersistentStateChanged() -> Void;
}

public abstract native class IGameSystem extends IScriptable {
}

public abstract native class IGamePersistencySystem extends IGameSystem {
}

public native class ScriptTaskData extends IScriptable {
}

public class HUDManagerRegistrationTaskData extends ScriptTaskData {

  public let shouldRegister: Bool;
}

public native struct GameInstance {

  public final static native func IsRestoringState(self: GameInstance) -> Bool;

  public final static native func IsValid(self: GameInstance) -> Bool;

  public final static native func GetGameTime(self: GameInstance) -> GameTime;

  public final static native func GetEngineTime(self: GameInstance) -> EngineTime;

  public final static native func GetSimTime(self: GameInstance) -> EngineTime;

  public final static native func GetPlaythroughTime(self: GameInstance) -> EngineTime;

  public final static native func GetFrameNumber(self: GameInstance) -> Uint64;

  public final static native func GetActivityLogSystem(self: GameInstance) -> ref<ActivityLogSystem>;

  public final static native func GetAnimationSystem(self: GameInstance) -> ref<AnimationSystem>;

  public final static native func GetAttitudeSystem(self: GameInstance) -> ref<AttitudeSystem>;

  public final static native func GetAudioSystem(self: GameInstance) -> ref<AudioSystem>;

  public final static native func GetBlackboardSystem(self: GameInstance) -> ref<BlackboardSystem>;

  public final static native func GetCameraSystem(self: GameInstance) -> ref<CameraSystem>;

  public final static native func GetCommunitySystem(self: GameInstance) -> ref<CommunitySystem>;

  public final static native func GetCompanionSystem(self: GameInstance) -> ref<CompanionSystem>;

  public final static native func GetCoverManager(self: GameInstance) -> ref<CoverManager>;

  public final static native func GetDebugVisualizerSystem(self: GameInstance) -> ref<DebugVisualizerSystem>;

  public final static native func GetDebugDrawHistorySystem(self: GameInstance) -> ref<IDebugDrawHistorySystem>;

  public final static native func GetDelaySystem(self: GameInstance) -> ref<DelaySystem>;

  public final static native func GetDeviceSystem(self: GameInstance) -> ref<DeviceSystem>;

  public final static native func GetEntitySpawnerEventsBroadcaster(self: GameInstance) -> ref<EntitySpawnerEventsBroadcaster>;

  public final static native func GetGameEffectSystem(self: GameInstance) -> ref<EffectSystem>;

  public final static native func GetSpatialQueriesSystem(self: GameInstance) -> ref<SpatialQueriesSystem>;

  public final static native func GetLootManager(self: GameInstance) -> ref<LootManager>;

  public final static native func GetLocationManager(self: GameInstance) -> ref<LocationManager>;

  public final static native func GetMappinSystem(self: GameInstance) -> ref<MappinSystem>;

  public final static native func GetNavigationSystem(self: GameInstance) -> ref<NavigationSystem>;

  public final static native func GetObjectPoolSystem(self: GameInstance) -> ref<ObjectPoolSystem>;

  public final static native func GetPersistencySystem(self: GameInstance) -> ref<GamePersistencySystem>;

  public final static native func GetPlayerSystem(self: GameInstance) -> ref<PlayerSystem>;

  public final static native func GetPrereqManager(self: GameInstance) -> ref<PrereqManager>;

  public final static native func GetPreventionSpawnSystem(self: GameInstance) -> ref<PreventionSpawnSystem>;

  public final static native func GetQuestsSystem(self: GameInstance) -> ref<QuestsSystem>;

  public final static native func GetSceneSystem(self: GameInstance) -> ref<SceneSystem>;

  public final static native func GetScriptableSystemsContainer(self: GameInstance) -> ref<ScriptableSystemsContainer>;

  public final static native func GetStatPoolsSystem(self: GameInstance) -> ref<StatPoolsSystem>;

  public final static native func GetStatsSystem(self: GameInstance) -> ref<StatsSystem>;

  public final static native func GetStatsDataSystem(self: GameInstance) -> ref<StatsDataSystem>;

  public final static native func GetStatusEffectSystem(self: GameInstance) -> ref<StatusEffectSystem>;

  public final static native func GetGodModeSystem(self: GameInstance) -> ref<GodModeSystem>;

  public final static native func GetEffectorSystem(self: GameInstance) -> ref<EffectorSystem>;

  public final static native func GetDamageSystem(self: GameInstance) -> ref<DamageSystem>;

  public final static native func GetTargetingSystem(self: GameInstance) -> ref<TargetingSystem>;

  public final static native func GetTimeSystem(self: GameInstance) -> ref<TimeSystem>;

  public final static native func GetTransactionSystem(self: GameInstance) -> ref<TransactionSystem>;

  public final static native func GetTrafficSystem(self: GameInstance) -> ref<TrafficSystem>;

  public final static native func GetVisionModeSystem(self: GameInstance) -> ref<VisionModeSystem>;

  public final static native func GetVehicleSystem(self: GameInstance) -> ref<VehicleSystem>;

  public final static native func GetWorkspotSystem(self: GameInstance) -> ref<WorkspotGameSystem>;

  public final static native func GetInventoryManager(self: GameInstance) -> ref<InventoryManager>;

  public final static native func GetTeleportationFacility(self: GameInstance) -> ref<TeleportationFacility>;

  public final static native func GetInfluenceMapSystem(self: GameInstance) -> ref<InfluenceMapSystem>;

  public final static native func GetFxSystem(self: GameInstance) -> ref<FxSystem>;

  public final static native func GetMountingFacility(self: GameInstance) -> ref<IMountingFacility>;

  public final static native func GetRestrictMovementAreaManager(self: GameInstance) -> ref<RestrictMovementAreaManager>;

  public final static native func GetSafeAreaManager(self: GameInstance) -> ref<SafeAreaManager>;

  public final static native func GetGameplayLogicPackageSystem(self: GameInstance) -> ref<GameplayLogicPackageSystem>;

  public final static native func GetJournalManager(self: GameInstance) -> ref<JournalManager>;

  public final static native func GetDebugCheatsSystem(self: GameInstance) -> ref<DebugCheatsSystem>;

  public final static native func GetCombatQueriesSystem(self: GameInstance) -> ref<gameICombatQueriesSystem>;

  public final static native func GetTelemetrySystem(self: GameInstance) -> ref<TelemetrySystem>;

  public final static native func GetGameRulesSystem(self: GameInstance) -> ref<gameIGameRulesSystem>;

  public final static native func GetGameTagSystem(self: GameInstance) -> ref<GameTagSystem>;

  public final static native func GetPingSystem(self: GameInstance) -> ref<PingSystem>;

  public final static native func GetPlayerManagerSystem(self: GameInstance) -> ref<gameIPlayerManager>;

  public final static native func GetScriptsDebugOverlaySystem(self: GameInstance) -> ref<ScriptsDebugOverlaySystem>;

  public final static native func GetCooldownSystem(self: GameInstance) -> ref<ICooldownSystem>;

  public final static native func GetDebugPlayerBreadcrumbs(self: GameInstance) -> ref<DebugPlayerBreadcrumbs>;

  public final static native func GetInteractionManager(self: GameInstance) -> ref<InteractionManager>;

  public final static native func GetGlobalTVSystem(self: GameInstance) -> ref<GlobalTvSystem>;

  public final static native func GetSubtitleHandlerSystem(self: GameInstance) -> ref<SubtitleHandlerSystem>;

  public final static native func GetAINavigationSystem(self: GameInstance) -> ref<AINavigationSystem>;

  public final static native func GetSenseManager(self: GameInstance) -> ref<SenseManager>;

  public final static native func GetUISystem(self: GameInstance) -> ref<UISystem>;

  public final static native func GetAchievementSystem(self: GameInstance) -> ref<AchievementSystem>;

  public final static native func GetWatchdogSystem(self: GameInstance) -> ref<IWatchdogSystem>;

  public final static native func GetLevelAssignmentSystem(self: GameInstance) -> ref<LevelAssignmentSystem>;

  public final static native func GetPhotoModeSystem(self: GameInstance) -> ref<PhotoModeSystem>;

  public final static native func GetSettingsSystem(self: GameInstance) -> ref<UserSettings>;

  public final static native func GetCharacterCustomizationSystem(self: GameInstance) -> ref<gameuiICharacterCustomizationSystem>;

  public final static native func GetUIObjectsLoaderSystem(self: GameInstance) -> ref<gameuiIUIObjectsLoaderSystem>;

  public final static native func GetWeatherSystem(self: GameInstance) -> ref<WeatherSystem>;

  public final static native func GetReactionSystem(self: GameInstance) -> ref<ReactionSystem>;

  public final static native func GetAutoSaveSystem(self: GameInstance) -> ref<gameAutoSaveSystem>;

  public final static native func GetTutorialManager(self: GameInstance) -> ref<questTutorialManager>;

  public final static native func GetStimuliSystem(self: GameInstance) -> ref<StimuliSystem>;

  public final static native func GetPhoneManager(self: GameInstance) -> ref<questPhoneManager>;

  public final static native func IsSavingLocked(self: GameInstance, out locks: array<gameSaveLock>) -> Bool;

  public final static native func GetRuntimeInfo(self: GameInstance) -> ref<RuntimeInfo>;

  public final static native func FindWaypointsByTag(self: GameInstance, tag: CName, out waypoints: array<Vector4>) -> Void;

  public final static native func FindEntityByID(self: GameInstance, entityId: EntityID) -> ref<Entity>;

  public final static native func GetNodeTransform(self: GameInstance, nodeRef: GlobalNodeRef, out transform: Transform) -> Bool;

  public final static native func QueueScriptableSystemRequest(self: GameInstance, scriptableSystemName: CName, request: ref<ScriptableSystemRequest>) -> Bool;
}

public abstract native class IActivityLogSystem extends IGameSystem {
}

public abstract native class gameIAttitudeManager extends IGameSystem {
}

public abstract native class gameIGameAudioSystem extends IGameSystem {
}

public abstract native class IBlackboardSystem extends IGameSystem {
}

public abstract native class ICameraSystem extends IGameSystem {
}

public abstract native class ICommunitySystem extends IGameSystem {
}

public abstract native class ICompanionSystem extends IGameSystem {
}

public abstract native class ICoverManager extends IGameSystem {
}

public abstract native class gameIDebugVisualizerSystem extends IGameSystem {
}

public abstract native class IDelaySystem extends IGameSystem {
}

public abstract native class IDeviceSystem extends IGameSystem {
}

public abstract native class IEntitySpawnerEventsBroadcaster extends IGameSystem {
}

public abstract native class IEffectSystem extends IGameSystem {
}

public abstract native class gameISpatialQueriesSystem extends IGameSystem {
}

public abstract native class ILootManager extends IGameSystem {
}

public abstract native class ILocationManager extends IGameSystem {
}

public abstract native class IReplicatedGameSystem extends IGameSystem {
}

public abstract native class IMappinSystem extends IReplicatedGameSystem {
}

public abstract native class IObjectPoolSystem extends IGameSystem {
}

public abstract native class gameIPlayerSystem extends IGameSystem {
}

public abstract native class gamePlayerSystem extends gameIPlayerSystem {

  public final native func PlayerEnteredCombat(playerEnteredCombat: Bool) -> Void;
}

public abstract native class IPrereqManager extends IGameSystem {
}

public abstract native class IPreventionSpawnSystem extends IGameSystem {
}

public abstract native class questIQuestsSystem extends IReplicatedGameSystem {
}

public abstract native class ISceneSystem extends IGameSystem {
}

public abstract native class gameIScriptableSystemsContainer extends IGameSystem {
}

public abstract native class IStatPoolsSystem extends IGameSystem {
}

public abstract native class IStatsSystem extends IGameSystem {
}

public abstract native class IStatsDataSystem extends IGameSystem {
}

public abstract native class IStatusEffectSystem extends IGameSystem {
}

public abstract native class IGodModeSystem extends IReplicatedGameSystem {
}

public abstract native class IEffectorSystem extends IGameSystem {
}

public abstract native class IDamageSystem extends IReplicatedGameSystem {
}

public abstract native class ITargetingSystem extends IGameSystem {
}

public abstract native class gameITimeSystem extends IReplicatedGameSystem {
}

public abstract native class ITransactionSystem extends IGameSystem {
}

public abstract native class IVisionModeSystem extends IGameSystem {
}

public abstract native class IVehicleSystem extends IGameSystem {
}

public abstract native class IWorkspotGameSystem extends IGameSystem {
}

public abstract native class IInventoryManager extends IGameSystem {
}

public abstract native class gameITeleportationFacility extends IGameSystem {
}

public abstract native class IInfluenceMapSystem extends IGameSystem {
}

public abstract native class IFxSystem extends IGameSystem {
}

public abstract native class IRestrictMovementAreaManager extends IGameSystem {
}

public abstract native class ISafeAreaManager extends IGameSystem {
}

public abstract native class IGameplayLogicPackageSystem extends IGameSystem {
}

public abstract native class IJournalManager extends IReplicatedGameSystem {
}

public abstract native class IDebugCheatsSystem extends IReplicatedGameSystem {
}

public abstract native class ITelemetrySystem extends IGameSystem {

  public final native func LogInitialChoiceSetStatege(state: telemetryInitalChoiceStage) -> Void;

  public final native func LogInitialChoiceDifficultySelected(difficulty: gameDifficulty) -> Void;

  public final native func LogInitialChoiceLifePathSelected(lifePathID: TweakDBID) -> Void;

  public final native func LogInitialChoiceBodyGenderSelected(isMale: Bool) -> Void;

  public final native func LogInitialChoiceBrainGenderSelected(isMale: Bool) -> Void;

  public final native func LogInitialChoiceOptionSelected(const option: ref<CharacterCustomizationOption>, value: Uint32) -> Void;

  public final native func LogInitialChoicePresetSelected(presetName: CName, opt fromInit: Bool) -> Void;

  public final native func LogInitialChoiceAttributeChanged(attribute: gamedataStatType) -> Void;

  public final native func LogNewGameStarted() -> Void;
}

public abstract native class gameIPingSystem extends IReplicatedGameSystem {
}

public abstract native class gameIScriptsDebugOverlaySystem extends IGameSystem {
}

public abstract native class IDebugPlayerBreadcrumbs extends IGameSystem {
}

public abstract native class IInteractionManager extends IGameSystem {
}

public abstract native class IGlobalTvSystem extends IGameSystem {
}

public abstract native class ISubtitleHandlerSystem extends IGameSystem {
}

public abstract native class AIINavigationSystem extends IGameSystem {
}

public abstract native class ISenseManager extends IGameSystem {
}

public abstract native class IUISystem extends IGameSystem {
}

public abstract native class IAchievementSystem extends IGameSystem {
}

public abstract native class ILevelAssignmentSystem extends IGameSystem {
}

public abstract native class IPhotoModeSystem extends IGameSystem {
}

public abstract native class IReactionSystem extends IGameSystem {
}

public abstract native class gameIAutoSaveSystem extends IGameSystem {
}

public abstract native class questITutorialManager extends IGameSystem {
}

public abstract native class IStimuliSystem extends IGameSystem {
}

public abstract native class questIPhoneManager extends IGameSystem {
}

public final native class DelaySystem extends IDelaySystem {

  public final native func DelayEvent(entity: wref<Entity>, eventToDelay: ref<Event>, timeToDelay: Float, opt isAffectedByTimeDilation: Bool) -> DelayID;

  public final native func DelayCallback(delayCallback: ref<DelayCallback>, timeToDelay: Float, opt isAffectedByTimeDilation: Bool) -> DelayID;

  public final native func DelayPSEvent(psID: PersistentID, classType: CName, eventToDelay: ref<Event>, timeToDelay: Float, opt isAffectedByTimeDilation: Bool) -> DelayID;

  public final native func DelayScriptableSystemRequest(systemName: CName, requestToDelay: ref<ScriptableSystemRequest>, timeToDelay: Float, opt isAffectedByTimeDilation: Bool) -> DelayID;

  public final native func DelayEventNextFrame(entity: wref<Entity>, eventToDelay: ref<Event>) -> Void;

  public final native func DelayCallbackNextFrame(delayCallback: ref<DelayCallback>) -> Void;

  public final native func DelayPSEventNextFrame(psID: PersistentID, classType: CName, eventToDelay: ref<Event>) -> Void;

  public final native func DelayScriptableSystemRequestNextFrame(systemName: CName, requestToDelay: ref<ScriptableSystemRequest>) -> Void;

  public final native func CancelDelay(delayID: DelayID) -> Void;

  public final native func CancelCallback(delayID: DelayID) -> Void;

  public final native func TickOnEvent(entity: wref<Entity>, eventToTick: ref<TickableEvent>, duration: Float) -> DelayID;

  public final native func CancelTick(delayID: DelayID) -> Void;

  public final native func QueueTask(caller: ref<IScriptable>, data: ref<ScriptTaskData>, funtionName: CName, executionStage: gameScriptTaskExecutionStage) -> Void;
}

public native class Event extends IScriptable {
}

public static native func OperatorLogicNot(a: Bool) -> Bool;

public native class ScriptableSystemRequest extends IScriptable {

  public final native func Cancel() -> Void;
}

public native struct EntityID {

  public final static native func IsDefined(id: EntityID) -> Bool;

  public final static native func IsDynamic(id: EntityID) -> Bool;

  public final static native func IsStatic(id: EntityID) -> Bool;

  public final static native func ToDebugString(id: EntityID) -> String;

  public final static native func ToDebugStringDecimal(id: EntityID) -> String;

  public final static native func GetHash(id: EntityID) -> Uint32;
}

public native class TimeDilatable extends GameObject {

  public final native func HasIndividualTimeDilation(opt reason: CName) -> Bool;

  public final native func SetIndividualTimeDilation(reason: CName, dilation: Float, opt duration: Float, opt easeInCurve: CName, opt easeOutCurve: CName, opt ignoreGlobalDilation: Bool) -> Void;

  public final native func UnsetIndividualTimeDilation(opt easeOutCurve: CName) -> Void;

  public final native func GetTimeDilationValue() -> Float;

  public final native func IsIgnoringGlobalTimeDilation() -> Bool;

  public final native func IsIgnoringTimeDilation() -> Bool;
}

public native struct TDBID {

  public final static native func Create(str: String) -> TweakDBID;

  public final static native func IsValid(tdbID: TweakDBID) -> Bool;

  public final static native func Prepend(out tdbID: TweakDBID, toPrepend: TweakDBID) -> Void;

  public final static native func Append(out tdbID: TweakDBID, toAppend: TweakDBID) -> Void;

  public final static native func ToNumber(tdbID: TweakDBID) -> Uint64;

  public final static native func () -> TweakDBID;

  public final static native func ToStringDEBUG(tdbID: TweakDBID) -> String;
}

public static native func OperatorAdd(const a: script_ref<String>, const b: script_ref<String>) -> String;

public native class TweakDBInterface extends IScriptable {

  public final static native func GetInt(path: TweakDBID, defaultValue: Int32) -> Int32;

  public final static native func GetIntArray(path: TweakDBID) -> array<Int32>;

  protected final static native func GetIntDefault(path: TweakDBID) -> Int32;

  protected final static native func GetIntArrayDefault(path: TweakDBID) -> array<Int32>;

  public final static native func GetFloat(path: TweakDBID, defaultValue: Float) -> Float;

  public final static native func GetFloatArray(path: TweakDBID) -> array<Float>;

  protected final static native func GetFloatDefault(path: TweakDBID) -> Float;

  protected final static native func GetFloatArrayDefault(path: TweakDBID) -> array<Float>;

  public final static native func GetString(path: TweakDBID, defaultValue: String) -> String;

  public final static native func GetStringArray(path: TweakDBID) -> array<String>;

  protected final static native func GetStringDefault(path: TweakDBID) -> String;

  protected final static native func GetStringArrayDefault(path: TweakDBID) -> array<String>;

  public final static native func GetBool(path: TweakDBID, defaultValue: Bool) -> Bool;

  public final static native func GetBoolArray(path: TweakDBID) -> array<Bool>;

  protected final static native func GetBoolDefault(path: TweakDBID) -> Bool;

  protected final static native func GetBoolArrayDefault(path: TweakDBID) -> array<Bool>;

  public final static native func GetCName(path: TweakDBID, defaultValue: CName) -> CName;

  public final static native func GetCNameArray(path: TweakDBID) -> array<CName>;

  protected final static native func GetCNameDefault(path: TweakDBID) -> CName;

  protected final static native func GetCNameArrayDefault(path: TweakDBID) -> array<CName>;

  public final static native func GetLocKey(path: TweakDBID, defaultValue: CName) -> CName;

  public final static native func GetLocKeyArray(path: TweakDBID) -> array<CName>;

  protected final static native func GetLocKeyDefault(path: TweakDBID) -> CName;

  protected final static native func GetLocKeyArrayDefault(path: TweakDBID) -> array<CName>;

  public final static native func GetColor(path: TweakDBID, defaultValue: Color) -> Color;

  public final static native func GetColorArray(path: TweakDBID) -> array<Color>;

  protected final static native func GetColorDefault(path: TweakDBID) -> Color;

  protected final static native func GetColorArrayDefault(path: TweakDBID) -> array<Color>;

  public final static native func GetVector2(path: TweakDBID, defaultValue: Vector2) -> Vector2;

  public final static native func GetVector2Array(path: TweakDBID) -> array<Vector2>;

  protected final static native func GetVector2Default(path: TweakDBID) -> Vector2;

  protected final static native func GetVector2ArrayDefault(path: TweakDBID) -> array<Vector2>;

  public final static native func GetVector3(path: TweakDBID, defaultValue: Vector3) -> Vector3;

  public final static native func GetVector3Array(path: TweakDBID) -> array<Vector3>;

  protected final static native func GetVector3Default(path: TweakDBID) -> Vector3;

  protected final static native func GetVector3ArrayDefault(path: TweakDBID) -> array<Vector3>;

  public final static native func GetEulerAngles(path: TweakDBID, defaultValue: EulerAngles) -> EulerAngles;

  public final static native func GetEulerAnglesArray(path: TweakDBID) -> array<EulerAngles>;

  protected final static native func GetEulerAnglesDefault(path: TweakDBID) -> EulerAngles;

  protected final static native func GetEulerAnglesArrayDefault(path: TweakDBID) -> array<EulerAngles>;

  public final static native func GetQuaternion(path: TweakDBID, defaultValue: Quaternion) -> Quaternion;

  public final static native func GetQuaternionArray(path: TweakDBID) -> array<Quaternion>;

  protected final static native func GetQuaternionDefault(path: TweakDBID) -> Quaternion;

  protected final static native func GetQuaternionArrayDefault(path: TweakDBID) -> array<Quaternion>;

  public final static native func GetResRef(path: TweakDBID, defaultValue: ResRef) -> ResRef;

  public final static native func GetResRefArray(path: TweakDBID) -> array<ResRef>;

  protected final static native func GetResRefDefault(path: TweakDBID) -> ResRef;

  protected final static native func GetResRefArrayDefault(path: TweakDBID) -> array<ResRef>;

  public final static native func GetAIAbilityCondRecord(path: TweakDBID) -> ref<AIAbilityCond_Record>;

  public final static native func GetAIActionRecord(path: TweakDBID) -> ref<AIAction_Record>;

  public final static native func GetAIActionANDRecord(path: TweakDBID) -> ref<AIActionAND_Record>;

  public final static native func GetAIActionAnimDataRecord(path: TweakDBID) -> ref<AIActionAnimData_Record>;

  public final static native func GetAIActionAnimDirectionRecord(path: TweakDBID) -> ref<AIActionAnimDirection_Record>;

  public final static native func GetAIActionAnimSlotRecord(path: TweakDBID) -> ref<AIActionAnimSlot_Record>;

  public final static native func GetAIActionChangeNPCStateRecord(path: TweakDBID) -> ref<AIActionChangeNPCState_Record>;

  public final static native func GetAIActionConditionRecord(path: TweakDBID) -> ref<AIActionCondition_Record>;

  public final static native func GetAIActionCooldownRecord(path: TweakDBID) -> ref<AIActionCooldown_Record>;

  public final static native func GetAIActionLookAtDataRecord(path: TweakDBID) -> ref<AIActionLookAtData_Record>;

  public final static native func GetAIActionORRecord(path: TweakDBID) -> ref<AIActionOR_Record>;

  public final static native func GetAIActionPhaseRecord(path: TweakDBID) -> ref<AIActionPhase_Record>;

  public final static native func GetAIActionSecurityAreaTypeRecord(path: TweakDBID) -> ref<AIActionSecurityAreaType_Record>;

  public final static native func GetAIActionSecurityNotificationTypeRecord(path: TweakDBID) -> ref<AIActionSecurityNotificationType_Record>;

  public final static native func GetAIActionSelectorRecord(path: TweakDBID) -> ref<AIActionSelector_Record>;

  public final static native func GetAIActionSequenceRecord(path: TweakDBID) -> ref<AIActionSequence_Record>;

  public final static native func GetAIActionSlideDataRecord(path: TweakDBID) -> ref<AIActionSlideData_Record>;

  public final static native func GetAIActionSmartCompositeRecord(path: TweakDBID) -> ref<AIActionSmartComposite_Record>;

  public final static native func GetAIActionSubConditionRecord(path: TweakDBID) -> ref<AIActionSubCondition_Record>;

  public final static native func GetAIActionTargetRecord(path: TweakDBID) -> ref<AIActionTarget_Record>;

  public final static native func GetAIActionTicketRecord(path: TweakDBID) -> ref<AIActionTicket_Record>;

  public final static native func GetAIActionTypeRecord(path: TweakDBID) -> ref<AIActionType_Record>;

  public final static native func GetAIAdditionalTraceTypeRecord(path: TweakDBID) -> ref<AIAdditionalTraceType_Record>;

  public final static native func GetAIAffiliationCondRecord(path: TweakDBID) -> ref<AIAffiliationCond_Record>;

  public final static native func GetAIAmmoCountCondRecord(path: TweakDBID) -> ref<AIAmmoCountCond_Record>;

  public final static native func GetAIBlockCountCondRecord(path: TweakDBID) -> ref<AIBlockCountCond_Record>;

  public final static native func GetAICalculateLineOfSightVectorRecord(path: TweakDBID) -> ref<AICalculateLineOfSightVector_Record>;

  public final static native func GetAICalculatePathCondRecord(path: TweakDBID) -> ref<AICalculatePathCond_Record>;

  public final static native func GetAICommandRecord(path: TweakDBID) -> ref<AICommand_Record>;

  public final static native func GetAICommandCondRecord(path: TweakDBID) -> ref<AICommandCond_Record>;

  public final static native func GetAICooldownCondRecord(path: TweakDBID) -> ref<AICooldownCond_Record>;

  public final static native func GetAICoverCondRecord(path: TweakDBID) -> ref<AICoverCond_Record>;

  public final static native func GetAIDirectorEntryStartTypeRecord(path: TweakDBID) -> ref<AIDirectorEntryStartType_Record>;

  public final static native func GetAIDirectorScheduleRecord(path: TweakDBID) -> ref<AIDirectorSchedule_Record>;

  public final static native func GetAIDirectorScheduleEntryRecord(path: TweakDBID) -> ref<AIDirectorScheduleEntry_Record>;

  public final static native func GetAIDirectorSchedulePlanRecord(path: TweakDBID) -> ref<AIDirectorSchedulePlan_Record>;

  public final static native func GetAIDirectorSchedulePlanEnemyEntryRecord(path: TweakDBID) -> ref<AIDirectorSchedulePlanEnemyEntry_Record>;

  public final static native func GetAIDirectorScheduleSpawningDescRecord(path: TweakDBID) -> ref<AIDirectorScheduleSpawningDesc_Record>;

  public final static native func GetAIDodgeCountCondRecord(path: TweakDBID) -> ref<AIDodgeCountCond_Record>;

  public final static native func GetAIDriverCondRecord(path: TweakDBID) -> ref<AIDriverCond_Record>;

  public final static native func GetAIExposureMethodTypeRecord(path: TweakDBID) -> ref<AIExposureMethodType_Record>;

  public final static native func GetAIExtendTargetCirclingCondRecord(path: TweakDBID) -> ref<AIExtendTargetCirclingCond_Record>;

  public final static native func GetAIFriendlyFireCondRecord(path: TweakDBID) -> ref<AIFriendlyFireCond_Record>;

  public final static native func GetAIGoToCoverCondRecord(path: TweakDBID) -> ref<AIGoToCoverCond_Record>;

  public final static native func GetAIHasWeaponRecord(path: TweakDBID) -> ref<AIHasWeapon_Record>;

  public final static native func GetAIHitCondRecord(path: TweakDBID) -> ref<AIHitCond_Record>;

  public final static native func GetAIInTacticPositionCondRecord(path: TweakDBID) -> ref<AIInTacticPositionCond_Record>;

  public final static native func GetAIIsInActiveCameraCondRecord(path: TweakDBID) -> ref<AIIsInActiveCameraCond_Record>;

  public final static native func GetAIIsOnNavmeshCondRecord(path: TweakDBID) -> ref<AIIsOnNavmeshCond_Record>;

  public final static native func GetAIItemCondRecord(path: TweakDBID) -> ref<AIItemCond_Record>;

  public final static native func GetAILookAtCondRecord(path: TweakDBID) -> ref<AILookAtCond_Record>;

  public final static native func GetAIMovementCondRecord(path: TweakDBID) -> ref<AIMovementCond_Record>;

  public final static native func GetAINPCTypeCondRecord(path: TweakDBID) -> ref<AINPCTypeCond_Record>;

  public final static native func GetAINodeRecord(path: TweakDBID) -> ref<AINode_Record>;

  public final static native func GetAINodeMapRecord(path: TweakDBID) -> ref<AINodeMap_Record>;

  public final static native func GetAINodeMapFieldRecord(path: TweakDBID) -> ref<AINodeMapField_Record>;

  public final static native func GetAIOptimalDistanceCondRecord(path: TweakDBID) -> ref<AIOptimalDistanceCond_Record>;

  public final static native func GetAIPatternRecord(path: TweakDBID) -> ref<AIPattern_Record>;

  public final static native func GetAIPatternDelayRecord(path: TweakDBID) -> ref<AIPatternDelay_Record>;

  public final static native func GetAIPatternsPackageRecord(path: TweakDBID) -> ref<AIPatternsPackage_Record>;

  public final static native func GetAIPreviousAttackCondRecord(path: TweakDBID) -> ref<AIPreviousAttackCond_Record>;

  public final static native func GetAIReactionCondRecord(path: TweakDBID) -> ref<AIReactionCond_Record>;

  public final static native func GetAIRecordRecord(path: TweakDBID) -> ref<AIRecord_Record>;

  public final static native func GetAIRestrictedMovementAreaCondRecord(path: TweakDBID) -> ref<AIRestrictedMovementAreaCond_Record>;

  public final static native func GetAIRingTicketRecord(path: TweakDBID) -> ref<AIRingTicket_Record>;

  public final static native func GetAIRingTypeRecord(path: TweakDBID) -> ref<AIRingType_Record>;

  public final static native func GetAIRoleRecord(path: TweakDBID) -> ref<AIRole_Record>;

  public final static native func GetAISectorTypeRecord(path: TweakDBID) -> ref<AISectorType_Record>;

  public final static native func GetAISecurityCondRecord(path: TweakDBID) -> ref<AISecurityCond_Record>;

  public final static native func GetAISignalCondRecord(path: TweakDBID) -> ref<AISignalCond_Record>;

  public final static native func GetAISlotCondRecord(path: TweakDBID) -> ref<AISlotCond_Record>;

  public final static native func GetAISmartCompositeTypeRecord(path: TweakDBID) -> ref<AISmartCompositeType_Record>;

  public final static native func GetAISpatialCondRecord(path: TweakDBID) -> ref<AISpatialCond_Record>;

  public final static native func GetAISquadANDConditionRecord(path: TweakDBID) -> ref<AISquadANDCondition_Record>;

  public final static native func GetAISquadAvoidLastFilterRecord(path: TweakDBID) -> ref<AISquadAvoidLastFilter_Record>;

  public final static native func GetAISquadClosestToSectorCheckRecord(path: TweakDBID) -> ref<AISquadClosestToSectorCheck_Record>;

  public final static native func GetAISquadClosestToTargetCheckRecord(path: TweakDBID) -> ref<AISquadClosestToTargetCheck_Record>;

  public final static native func GetAISquadCondRecord(path: TweakDBID) -> ref<AISquadCond_Record>;

  public final static native func GetAISquadContainsSelfCheckRecord(path: TweakDBID) -> ref<AISquadContainsSelfCheck_Record>;

  public final static native func GetAISquadDistanceRelationToSectorCheckRecord(path: TweakDBID) -> ref<AISquadDistanceRelationToSectorCheck_Record>;

  public final static native func GetAISquadDistanceRelationToTargetCheckRecord(path: TweakDBID) -> ref<AISquadDistanceRelationToTargetCheck_Record>;

  public final static native func GetAISquadFilterByAIConditionRecord(path: TweakDBID) -> ref<AISquadFilterByAICondition_Record>;

  public final static native func GetAISquadFilterOwnTargetSpottedRecord(path: TweakDBID) -> ref<AISquadFilterOwnTargetSpotted_Record>;

  public final static native func GetAISquadFurthestToSectorCheckRecord(path: TweakDBID) -> ref<AISquadFurthestToSectorCheck_Record>;

  public final static native func GetAISquadFurthestToTargetCheckRecord(path: TweakDBID) -> ref<AISquadFurthestToTargetCheck_Record>;

  public final static native func GetAISquadInSectorFilterRecord(path: TweakDBID) -> ref<AISquadInSectorFilter_Record>;

  public final static native func GetAISquadItemCategoryPriorityFilterRecord(path: TweakDBID) -> ref<AISquadItemCategoryPriorityFilter_Record>;

  public final static native func GetAISquadItemPriorityFilterRecord(path: TweakDBID) -> ref<AISquadItemPriorityFilter_Record>;

  public final static native func GetAISquadItemTypePriorityFilterRecord(path: TweakDBID) -> ref<AISquadItemTypePriorityFilter_Record>;

  public final static native func GetAISquadJustSelfFilterRecord(path: TweakDBID) -> ref<AISquadJustSelfFilter_Record>;

  public final static native func GetAISquadMembersAmountCheckRecord(path: TweakDBID) -> ref<AISquadMembersAmountCheck_Record>;

  public final static native func GetAISquadORConditionRecord(path: TweakDBID) -> ref<AISquadORCondition_Record>;

  public final static native func GetAISquadParamsRecord(path: TweakDBID) -> ref<AISquadParams_Record>;

  public final static native func GetAISquadSpatialForOwnTargetRecord(path: TweakDBID) -> ref<AISquadSpatialForOwnTarget_Record>;

  public final static native func GetAISquadTypeRecord(path: TweakDBID) -> ref<AISquadType_Record>;

  public final static native func GetAIStatPoolCondRecord(path: TweakDBID) -> ref<AIStatPoolCond_Record>;

  public final static native func GetAIStateCondRecord(path: TweakDBID) -> ref<AIStateCond_Record>;

  public final static native func GetAIStatusEffectCondRecord(path: TweakDBID) -> ref<AIStatusEffectCond_Record>;

  public final static native func GetAISubActionRecord(path: TweakDBID) -> ref<AISubAction_Record>;

  public final static native func GetAISubActionActivateLightPresetRecord(path: TweakDBID) -> ref<AISubActionActivateLightPreset_Record>;

  public final static native func GetAISubActionActivateStrongArmsFXRecord(path: TweakDBID) -> ref<AISubActionActivateStrongArmsFX_Record>;

  public final static native func GetAISubActionAddFactRecord(path: TweakDBID) -> ref<AISubActionAddFact_Record>;

  public final static native func GetAISubActionApplyTimeDilationRecord(path: TweakDBID) -> ref<AISubActionApplyTimeDilation_Record>;

  public final static native func GetAISubActionAttackWithWeaponRecord(path: TweakDBID) -> ref<AISubActionAttackWithWeapon_Record>;

  public final static native func GetAISubActionCallReinforcementsRecord(path: TweakDBID) -> ref<AISubActionCallReinforcements_Record>;

  public final static native func GetAISubActionCallSquadSearchBackUpRecord(path: TweakDBID) -> ref<AISubActionCallSquadSearchBackUp_Record>;

  public final static native func GetAISubActionChangeAttitudeRecord(path: TweakDBID) -> ref<AISubActionChangeAttitude_Record>;

  public final static native func GetAISubActionChangeCoverSelectionPresetRecord(path: TweakDBID) -> ref<AISubActionChangeCoverSelectionPreset_Record>;

  public final static native func GetAISubActionCharacterRecordEquipRecord(path: TweakDBID) -> ref<AISubActionCharacterRecordEquip_Record>;

  public final static native func GetAISubActionCharacterRecordUnequipRecord(path: TweakDBID) -> ref<AISubActionCharacterRecordUnequip_Record>;

  public final static native func GetAISubActionCompleteCommandRecord(path: TweakDBID) -> ref<AISubActionCompleteCommand_Record>;

  public final static native func GetAISubActionConditionalFailureRecord(path: TweakDBID) -> ref<AISubActionConditionalFailure_Record>;

  public final static native func GetAISubActionCoverRecord(path: TweakDBID) -> ref<AISubActionCover_Record>;

  public final static native func GetAISubActionCreateGameEffectRecord(path: TweakDBID) -> ref<AISubActionCreateGameEffect_Record>;

  public final static native func GetAISubActionCustomEffectorsRecord(path: TweakDBID) -> ref<AISubActionCustomEffectors_Record>;

  public final static native func GetAISubActionDisableAimAssistRecord(path: TweakDBID) -> ref<AISubActionDisableAimAssist_Record>;

  public final static native func GetAISubActionDisableColliderRecord(path: TweakDBID) -> ref<AISubActionDisableCollider_Record>;

  public final static native func GetAISubActionDroneModifyAltitudeRecord(path: TweakDBID) -> ref<AISubActionDroneModifyAltitude_Record>;

  public final static native func GetAISubActionEquipOnBodyRecord(path: TweakDBID) -> ref<AISubActionEquipOnBody_Record>;

  public final static native func GetAISubActionEquipOnSlotRecord(path: TweakDBID) -> ref<AISubActionEquipOnSlot_Record>;

  public final static native func GetAISubActionFailRecord(path: TweakDBID) -> ref<AISubActionFail_Record>;

  public final static native func GetAISubActionFailIfFriendlyFireRecord(path: TweakDBID) -> ref<AISubActionFailIfFriendlyFire_Record>;

  public final static native func GetAISubActionFastExitWorkspotRecord(path: TweakDBID) -> ref<AISubActionFastExitWorkspot_Record>;

  public final static native func GetAISubActionForceDeathRecord(path: TweakDBID) -> ref<AISubActionForceDeath_Record>;

  public final static native func GetAISubActionForceEquipRecord(path: TweakDBID) -> ref<AISubActionForceEquip_Record>;

  public final static native func GetAISubActionForceHitReactionRecord(path: TweakDBID) -> ref<AISubActionForceHitReaction_Record>;

  public final static native func GetAISubActionForceUnequipRecord(path: TweakDBID) -> ref<AISubActionForceUnequip_Record>;

  public final static native func GetAISubActionGameplayLogicPackageRecord(path: TweakDBID) -> ref<AISubActionGameplayLogicPackage_Record>;

  public final static native func GetAISubActionGeneratePointOfInterestTargetRecord(path: TweakDBID) -> ref<AISubActionGeneratePointOfInterestTarget_Record>;

  public final static native func GetAISubActionHitDataRecord(path: TweakDBID) -> ref<AISubActionHitData_Record>;

  public final static native func GetAISubActionInitialReactionRecord(path: TweakDBID) -> ref<AISubActionInitialReaction_Record>;

  public final static native func GetAISubActionLeaveCoverRecord(path: TweakDBID) -> ref<AISubActionLeaveCover_Record>;

  public final static native func GetAISubActionMeleeAttackAttemptEventRecord(path: TweakDBID) -> ref<AISubActionMeleeAttackAttemptEvent_Record>;

  public final static native func GetAISubActionMeleeAttackManagerRecord(path: TweakDBID) -> ref<AISubActionMeleeAttackManager_Record>;

  public final static native func GetAISubActionMissileRainCircularRecord(path: TweakDBID) -> ref<AISubActionMissileRainCircular_Record>;

  public final static native func GetAISubActionMissileRainGridRecord(path: TweakDBID) -> ref<AISubActionMissileRainGrid_Record>;

  public final static native func GetAISubActionModifyStatPoolRecord(path: TweakDBID) -> ref<AISubActionModifyStatPool_Record>;

  public final static native func GetAISubActionMountVehicleRecord(path: TweakDBID) -> ref<AISubActionMountVehicle_Record>;

  public final static native func GetAISubActionPlaySoundRecord(path: TweakDBID) -> ref<AISubActionPlaySound_Record>;

  public final static native func GetAISubActionPlayVoiceOverRecord(path: TweakDBID) -> ref<AISubActionPlayVoiceOver_Record>;

  public final static native func GetAISubActionQueueAIEventRecord(path: TweakDBID) -> ref<AISubActionQueueAIEvent_Record>;

  public final static native func GetAISubActionQueueCommunicationEventRecord(path: TweakDBID) -> ref<AISubActionQueueCommunicationEvent_Record>;

  public final static native func GetAISubActionQuickHackRecord(path: TweakDBID) -> ref<AISubActionQuickHack_Record>;

  public final static native func GetAISubActionRandomizeRecord(path: TweakDBID) -> ref<AISubActionRandomize_Record>;

  public final static native func GetAISubActionRegisterActionNameRecord(path: TweakDBID) -> ref<AISubActionRegisterActionName_Record>;

  public final static native func GetAISubActionReloadWeaponRecord(path: TweakDBID) -> ref<AISubActionReloadWeapon_Record>;

  public final static native func GetAISubActionScaleDurationWithDistanceRecord(path: TweakDBID) -> ref<AISubActionScaleDurationWithDistance_Record>;

  public final static native func GetAISubActionSecuritySystemNotificationRecord(path: TweakDBID) -> ref<AISubActionSecuritySystemNotification_Record>;

  public final static native func GetAISubActionSendSignalRecord(path: TweakDBID) -> ref<AISubActionSendSignal_Record>;

  public final static native func GetAISubActionSetEquipPrimaryWeaponsRecord(path: TweakDBID) -> ref<AISubActionSetEquipPrimaryWeapons_Record>;

  public final static native func GetAISubActionSetEquipSecondaryWeaponsRecord(path: TweakDBID) -> ref<AISubActionSetEquipSecondaryWeapons_Record>;

  public final static native func GetAISubActionSetInfluenceMapRecord(path: TweakDBID) -> ref<AISubActionSetInfluenceMap_Record>;

  public final static native func GetAISubActionSetIntRecord(path: TweakDBID) -> ref<AISubActionSetInt_Record>;

  public final static native func GetAISubActionSetItemAsTargetRecord(path: TweakDBID) -> ref<AISubActionSetItemAsTarget_Record>;

  public final static native func GetAISubActionSetStimSourceRecord(path: TweakDBID) -> ref<AISubActionSetStimSource_Record>;

  public final static native func GetAISubActionSetTargetByTagRecord(path: TweakDBID) -> ref<AISubActionSetTargetByTag_Record>;

  public final static native func GetAISubActionSetTopThreatPersistanceRecord(path: TweakDBID) -> ref<AISubActionSetTopThreatPersistance_Record>;

  public final static native func GetAISubActionSetUnequipPrimaryWeaponsRecord(path: TweakDBID) -> ref<AISubActionSetUnequipPrimaryWeapons_Record>;

  public final static native func GetAISubActionSetUnequipSecondaryWeaponsRecord(path: TweakDBID) -> ref<AISubActionSetUnequipSecondaryWeapons_Record>;

  public final static native func GetAISubActionSetWaypointByTagRecord(path: TweakDBID) -> ref<AISubActionSetWaypointByTag_Record>;

  public final static native func GetAISubActionSetWorldPositionRecord(path: TweakDBID) -> ref<AISubActionSetWorldPosition_Record>;

  public final static native func GetAISubActionShootToPointRecord(path: TweakDBID) -> ref<AISubActionShootToPoint_Record>;

  public final static native func GetAISubActionShootWithWeaponRecord(path: TweakDBID) -> ref<AISubActionShootWithWeapon_Record>;

  public final static native func GetAISubActionSpawnFXRecord(path: TweakDBID) -> ref<AISubActionSpawnFX_Record>;

  public final static native func GetAISubActionSquadSyncRecord(path: TweakDBID) -> ref<AISubActionSquadSync_Record>;

  public final static native func GetAISubActionStartCooldownRecord(path: TweakDBID) -> ref<AISubActionStartCooldown_Record>;

  public final static native func GetAISubActionStatusEffectRecord(path: TweakDBID) -> ref<AISubActionStatusEffect_Record>;

  public final static native func GetAISubActionThrowItemRecord(path: TweakDBID) -> ref<AISubActionThrowItem_Record>;

  public final static native func GetAISubActionTriggerItemActivationRecord(path: TweakDBID) -> ref<AISubActionTriggerItemActivation_Record>;

  public final static native func GetAISubActionTriggerStimRecord(path: TweakDBID) -> ref<AISubActionTriggerStim_Record>;

  public final static native func GetAISubActionUnequipOnSlotRecord(path: TweakDBID) -> ref<AISubActionUnequipOnSlot_Record>;

  public final static native func GetAISubActionUpdateFriendlyFireParamsRecord(path: TweakDBID) -> ref<AISubActionUpdateFriendlyFireParams_Record>;

  public final static native func GetAISubActionUseSensePresetRecord(path: TweakDBID) -> ref<AISubActionUseSensePreset_Record>;

  public final static native func GetAISubActionWorkspotRecord(path: TweakDBID) -> ref<AISubActionWorkspot_Record>;

  public final static native func GetAITacticTicketRecord(path: TweakDBID) -> ref<AITacticTicket_Record>;

  public final static native func GetAITacticTypeRecord(path: TweakDBID) -> ref<AITacticType_Record>;

  public final static native func GetAITargetCondRecord(path: TweakDBID) -> ref<AITargetCond_Record>;

  public final static native func GetAIThreatPersistenceSourceRecord(path: TweakDBID) -> ref<AIThreatPersistenceSource_Record>;

  public final static native func GetAIThrowCondRecord(path: TweakDBID) -> ref<AIThrowCond_Record>;

  public final static native func GetAITicketRecord(path: TweakDBID) -> ref<AITicket_Record>;

  public final static native func GetAITicketCheckRecord(path: TweakDBID) -> ref<AITicketCheck_Record>;

  public final static native func GetAITicketConditionRecord(path: TweakDBID) -> ref<AITicketCondition_Record>;

  public final static native func GetAITicketFilterRecord(path: TweakDBID) -> ref<AITicketFilter_Record>;

  public final static native func GetAITicketTypeRecord(path: TweakDBID) -> ref<AITicketType_Record>;

  public final static native func GetAITresspassingCondRecord(path: TweakDBID) -> ref<AITresspassingCond_Record>;

  public final static native func GetAIValidCoversCondRecord(path: TweakDBID) -> ref<AIValidCoversCond_Record>;

  public final static native func GetAIVehicleCondRecord(path: TweakDBID) -> ref<AIVehicleCond_Record>;

  public final static native func GetAIVelocitiesDotCondRecord(path: TweakDBID) -> ref<AIVelocitiesDotCond_Record>;

  public final static native func GetAIVelocityCondRecord(path: TweakDBID) -> ref<AIVelocityCond_Record>;

  public final static native func GetAIVelocityDotCondRecord(path: TweakDBID) -> ref<AIVelocityDotCond_Record>;

  public final static native func GetAIWeakSpotCondRecord(path: TweakDBID) -> ref<AIWeakSpotCond_Record>;

  public final static native func GetAIWeaponLockedOnTargetCondRecord(path: TweakDBID) -> ref<AIWeaponLockedOnTargetCond_Record>;

  public final static native func GetAIWorkspotCondRecord(path: TweakDBID) -> ref<AIWorkspotCond_Record>;

  public final static native func GetAbsoluteZLimiterCoverSelectionParametersRecord(path: TweakDBID) -> ref<AbsoluteZLimiterCoverSelectionParameters_Record>;

  public final static native func GetAccelerateTowardsParametersRecord(path: TweakDBID) -> ref<AccelerateTowardsParameters_Record>;

  public final static native func GetAccuracyRecord(path: TweakDBID) -> ref<Accuracy_Record>;

  public final static native func GetAchievementRecord(path: TweakDBID) -> ref<Achievement_Record>;

  public final static native func GetActionMapRecord(path: TweakDBID) -> ref<ActionMap_Record>;

  public final static native func GetActionMapFieldRecord(path: TweakDBID) -> ref<ActionMapField_Record>;

  public final static native func GetActionPaymentRecord(path: TweakDBID) -> ref<ActionPayment_Record>;

  public final static native func GetActionRestrictionGroupRecord(path: TweakDBID) -> ref<ActionRestrictionGroup_Record>;

  public final static native func GetActionTargetInDistancePrereqRecord(path: TweakDBID) -> ref<ActionTargetInDistancePrereq_Record>;

  public final static native func GetActionTargetPrereqRecord(path: TweakDBID) -> ref<ActionTargetPrereq_Record>;

  public final static native func GetActionWidgetDefinitionRecord(path: TweakDBID) -> ref<ActionWidgetDefinition_Record>;

  public final static native func GetAddItemsEffectorRecord(path: TweakDBID) -> ref<AddItemsEffector_Record>;

  public final static native func GetAddStatusEffectToAttackEffectorRecord(path: TweakDBID) -> ref<AddStatusEffectToAttackEffector_Record>;

  public final static native func GetAdvertisementRecord(path: TweakDBID) -> ref<Advertisement_Record>;

  public final static native func GetAdvertisementFormatDefRecord(path: TweakDBID) -> ref<AdvertisementFormatDef_Record>;

  public final static native func GetAdvertisementFormatsEnumRecord(path: TweakDBID) -> ref<AdvertisementFormatsEnum_Record>;

  public final static native func GetAdvertisementGroupRecord(path: TweakDBID) -> ref<AdvertisementGroup_Record>;

  public final static native func GetAffiliationRecord(path: TweakDBID) -> ref<Affiliation_Record>;

  public final static native func GetAimAssistAimSnapRecord(path: TweakDBID) -> ref<AimAssistAimSnap_Record>;

  public final static native func GetAimAssistBulletMagnetismRecord(path: TweakDBID) -> ref<AimAssistBulletMagnetism_Record>;

  public final static native func GetAimAssistCommonRecord(path: TweakDBID) -> ref<AimAssistCommon_Record>;

  public final static native func GetAimAssistConfigPresetRecord(path: TweakDBID) -> ref<AimAssistConfigPreset_Record>;

  public final static native func GetAimAssistFinishingRecord(path: TweakDBID) -> ref<AimAssistFinishing_Record>;

  public final static native func GetAimAssistMagnetismRecord(path: TweakDBID) -> ref<AimAssistMagnetism_Record>;

  public final static native func GetAimAssistMeleeRecord(path: TweakDBID) -> ref<AimAssistMelee_Record>;

  public final static native func GetAimAssistSettingsRecord(path: TweakDBID) -> ref<AimAssistSettings_Record>;

  public final static native func GetAimAssistTargetDataRecord(path: TweakDBID) -> ref<AimAssistTargetData_Record>;

  public final static native func GetAimAssistTypeRecord(path: TweakDBID) -> ref<AimAssistType_Record>;

  public final static native func GetAngleDistanceCoverSelectionParametersRecord(path: TweakDBID) -> ref<AngleDistanceCoverSelectionParameters_Record>;

  public final static native func GetAngleRangeRecord(path: TweakDBID) -> ref<AngleRange_Record>;

  public final static native func GetAppearanceRecord(path: TweakDBID) -> ref<Appearance_Record>;

  public final static native func GetApperanceToEthnicitiesRecord(path: TweakDBID) -> ref<ApperanceToEthnicities_Record>;

  public final static native func GetApperanceToEthnicitiesMapRecord(path: TweakDBID) -> ref<ApperanceToEthnicitiesMap_Record>;

  public final static native func GetApplyEffectorEffectorRecord(path: TweakDBID) -> ref<ApplyEffectorEffector_Record>;

  public final static native func GetApplyLightPresetEffectorRecord(path: TweakDBID) -> ref<ApplyLightPresetEffector_Record>;

  public final static native func GetApplyStatGroupEffectorRecord(path: TweakDBID) -> ref<ApplyStatGroupEffector_Record>;

  public final static native func GetApplyStatusEffectEffectorRecord(path: TweakDBID) -> ref<ApplyStatusEffectEffector_Record>;

  public final static native func GetArchetypeDataRecord(path: TweakDBID) -> ref<ArchetypeData_Record>;

  public final static native func GetArchetypeTypeRecord(path: TweakDBID) -> ref<ArchetypeType_Record>;

  public final static native func GetAttachableObjectRecord(path: TweakDBID) -> ref<AttachableObject_Record>;

  public final static native func GetAttachmentSlotRecord(path: TweakDBID) -> ref<AttachmentSlot_Record>;

  public final static native func GetAttackRecord(path: TweakDBID) -> ref<Attack_Record>;

  public final static native func GetAttackDirectionRecord(path: TweakDBID) -> ref<AttackDirection_Record>;

  public final static native func GetAttackSubtypeRecord(path: TweakDBID) -> ref<AttackSubtype_Record>;

  public final static native func GetAttackTypeRecord(path: TweakDBID) -> ref<AttackType_Record>;

  public final static native func GetAttack_GameEffectRecord(path: TweakDBID) -> ref<Attack_GameEffect_Record>;

  public final static native func GetAttack_LandingRecord(path: TweakDBID) -> ref<Attack_Landing_Record>;

  public final static native func GetAttack_MeleeRecord(path: TweakDBID) -> ref<Attack_Melee_Record>;

  public final static native func GetAttack_ProjectileRecord(path: TweakDBID) -> ref<Attack_Projectile_Record>;

  public final static native func GetAttitudeRecord(path: TweakDBID) -> ref<Attitude_Record>;

  public final static native func GetAttitudeGroupRecord(path: TweakDBID) -> ref<AttitudeGroup_Record>;

  public final static native func GetAttributeRecord(path: TweakDBID) -> ref<Attribute_Record>;

  public final static native func GetAvoidLineOfSightSelectionParametersRecord(path: TweakDBID) -> ref<AvoidLineOfSightSelectionParameters_Record>;

  public final static native func GetBaseDrivingParametersRecord(path: TweakDBID) -> ref<BaseDrivingParameters_Record>;

  public final static native func GetBaseObjectRecord(path: TweakDBID) -> ref<BaseObject_Record>;

  public final static native func GetBaseSignRecord(path: TweakDBID) -> ref<BaseSign_Record>;

  public final static native func GetBase_MappinDefinitionRecord(path: TweakDBID) -> ref<Base_MappinDefinition_Record>;

  public final static native func GetBounceRecord(path: TweakDBID) -> ref<Bounce_Record>;

  public final static native func GetBountyRecord(path: TweakDBID) -> ref<Bounty_Record>;

  public final static native func GetBountyDrawTableRecord(path: TweakDBID) -> ref<BountyDrawTable_Record>;

  public final static native func GetBoxRecord(path: TweakDBID) -> ref<Box_Record>;

  public final static native func GetBuildAttributeRecord(path: TweakDBID) -> ref<BuildAttribute_Record>;

  public final static native func GetBuildAttributeSetRecord(path: TweakDBID) -> ref<BuildAttributeSet_Record>;

  public final static native func GetBuildCyberwareRecord(path: TweakDBID) -> ref<BuildCyberware_Record>;

  public final static native func GetBuildCyberwareSetRecord(path: TweakDBID) -> ref<BuildCyberwareSet_Record>;

  public final static native func GetBuildEquipmentRecord(path: TweakDBID) -> ref<BuildEquipment_Record>;

  public final static native func GetBuildEquipmentSetRecord(path: TweakDBID) -> ref<BuildEquipmentSet_Record>;

  public final static native func GetBuildPerkRecord(path: TweakDBID) -> ref<BuildPerk_Record>;

  public final static native func GetBuildPerkSetRecord(path: TweakDBID) -> ref<BuildPerkSet_Record>;

  public final static native func GetBuildProficiencyRecord(path: TweakDBID) -> ref<BuildProficiency_Record>;

  public final static native func GetBuildProficiencySetRecord(path: TweakDBID) -> ref<BuildProficiencySet_Record>;

  public final static native func GetCPOItemCategoryBaseRecord(path: TweakDBID) -> ref<CPOItemCategoryBase_Record>;

  public final static native func GetCPOLoadoutBaseRecord(path: TweakDBID) -> ref<CPOLoadoutBase_Record>;

  public final static native func GetCarriableObjectRecord(path: TweakDBID) -> ref<CarriableObject_Record>;

  public final static native func GetChannelDataRecord(path: TweakDBID) -> ref<ChannelData_Record>;

  public final static native func GetCharacterRecord(path: TweakDBID) -> ref<Character_Record>;

  public final static native func GetCharacterEntryRecord(path: TweakDBID) -> ref<CharacterEntry_Record>;

  public final static native func GetCharacterListRecord(path: TweakDBID) -> ref<CharacterList_Record>;

  public final static native func GetChatterHelperRadiusRecord(path: TweakDBID) -> ref<ChatterHelperRadius_Record>;

  public final static native func GetChoiceCaptionIconPartRecord(path: TweakDBID) -> ref<ChoiceCaptionIconPart_Record>;

  public final static native func GetChoiceCaptionPartRecord(path: TweakDBID) -> ref<ChoiceCaptionPart_Record>;

  public final static native func GetChoiceCaptionPartTypeRecord(path: TweakDBID) -> ref<ChoiceCaptionPartType_Record>;

  public final static native func GetChoiceCaptionTagPartRecord(path: TweakDBID) -> ref<ChoiceCaptionTagPart_Record>;

  public final static native func GetClearLineOfSightCoverSelectionParametersRecord(path: TweakDBID) -> ref<ClearLineOfSightCoverSelectionParameters_Record>;

  public final static native func GetClosestToOwnerCoverSelectionParametersRecord(path: TweakDBID) -> ref<ClosestToOwnerCoverSelectionParameters_Record>;

  public final static native func GetClothingRecord(path: TweakDBID) -> ref<Clothing_Record>;

  public final static native func GetClothing_inline0Record(path: TweakDBID) -> ref<Clothing_inline0_Record>;

  public final static native func GetCodexRecord(path: TweakDBID) -> ref<Codex_Record>;

  public final static native func GetCodexRecordRecord(path: TweakDBID) -> ref<CodexRecord_Record>;

  public final static native func GetCodexRecordPartRecord(path: TweakDBID) -> ref<CodexRecordPart_Record>;

  public final static native func GetCombinedStatModifierRecord(path: TweakDBID) -> ref<CombinedStatModifier_Record>;

  public final static native func GetCompanionDistancePresetRecord(path: TweakDBID) -> ref<CompanionDistancePreset_Record>;

  public final static native func GetCompoundSelectionPresetRecord(path: TweakDBID) -> ref<CompoundSelectionPreset_Record>;

  public final static native func GetComputerScreenTypeRecord(path: TweakDBID) -> ref<ComputerScreenType_Record>;

  public final static native func GetConeRecord(path: TweakDBID) -> ref<Cone_Record>;

  public final static native func GetConstantStatModifierRecord(path: TweakDBID) -> ref<ConstantStatModifier_Record>;

  public final static native func GetConsumableBaseNameRecord(path: TweakDBID) -> ref<ConsumableBaseName_Record>;

  public final static native func GetConsumableItemRecord(path: TweakDBID) -> ref<ConsumableItem_Record>;

  public final static native func GetConsumableTypeRecord(path: TweakDBID) -> ref<ConsumableType_Record>;

  public final static native func GetContentAssignmentRecord(path: TweakDBID) -> ref<ContentAssignment_Record>;

  public final static native func GetContinuousAttackEffectorRecord(path: TweakDBID) -> ref<ContinuousAttackEffector_Record>;

  public final static native func GetContinuousEffectorRecord(path: TweakDBID) -> ref<ContinuousEffector_Record>;

  public final static native func GetCooldownRecord(path: TweakDBID) -> ref<Cooldown_Record>;

  public final static native func GetCooldownTypeRecord(path: TweakDBID) -> ref<CooldownType_Record>;

  public final static native func GetCoverHealthCoverSelectionParametersRecord(path: TweakDBID) -> ref<CoverHealthCoverSelectionParameters_Record>;

  public final static native func GetCoverSelectionParametersRecord(path: TweakDBID) -> ref<CoverSelectionParameters_Record>;

  public final static native func GetCoverSelectionPresetRecord(path: TweakDBID) -> ref<CoverSelectionPreset_Record>;

  public final static native func GetCoverTypeCoverSelectionParametersRecord(path: TweakDBID) -> ref<CoverTypeCoverSelectionParameters_Record>;

  public final static native func GetCrackActionRecord(path: TweakDBID) -> ref<CrackAction_Record>;

  public final static native func GetCraftableRecord(path: TweakDBID) -> ref<Craftable_Record>;

  public final static native func GetCraftingPackageRecord(path: TweakDBID) -> ref<CraftingPackage_Record>;

  public final static native func GetCraftingResultRecord(path: TweakDBID) -> ref<CraftingResult_Record>;

  public final static native func GetCrosshairRecord(path: TweakDBID) -> ref<Crosshair_Record>;

  public final static native func GetCrowdSettingsPackageBaseRecord(path: TweakDBID) -> ref<CrowdSettingsPackageBase_Record>;

  public final static native func GetCrowdSlotMovementPatternBaseRecord(path: TweakDBID) -> ref<CrowdSlotMovementPatternBase_Record>;

  public final static native func GetCrowdSlotMovementSettingsBaseRecord(path: TweakDBID) -> ref<CrowdSlotMovementSettingsBase_Record>;

  public final static native func GetCurrencyRewardRecord(path: TweakDBID) -> ref<CurrencyReward_Record>;

  public final static native func GetCurrencyReward_inline0Record(path: TweakDBID) -> ref<CurrencyReward_inline0_Record>;

  public final static native func GetCurveRecord(path: TweakDBID) -> ref<Curve_Record>;

  public final static native func GetCurveStatModifierRecord(path: TweakDBID) -> ref<CurveStatModifier_Record>;

  public final static native func GetCurvesRecord(path: TweakDBID) -> ref<Curves_Record>;

  public final static native func GetCyberwareAreaRecord(path: TweakDBID) -> ref<CyberwareArea_Record>;

  public final static native func GetDPadUIDataRecord(path: TweakDBID) -> ref<DPadUIData_Record>;

  public final static native func GetDamageTypeRecord(path: TweakDBID) -> ref<DamageType_Record>;

  public final static native func GetDefenseModeRecord(path: TweakDBID) -> ref<DefenseMode_Record>;

  public final static native func GetDestructibleObjectRecord(path: TweakDBID) -> ref<DestructibleObject_Record>;

  public final static native func GetDetectionCurveRecord(path: TweakDBID) -> ref<DetectionCurve_Record>;

  public final static native func GetDevelopmentPointRecord(path: TweakDBID) -> ref<DevelopmentPoint_Record>;

  public final static native func GetDeviceRecord(path: TweakDBID) -> ref<Device_Record>;

  public final static native func GetDeviceAreaAttackRecord(path: TweakDBID) -> ref<DeviceAreaAttack_Record>;

  public final static native func GetDeviceContentAssignmentRecord(path: TweakDBID) -> ref<DeviceContentAssignment_Record>;

  public final static native func GetDeviceFXRecord(path: TweakDBID) -> ref<DeviceFX_Record>;

  public final static native func GetDeviceScreenTypeRecord(path: TweakDBID) -> ref<DeviceScreenType_Record>;

  public final static native func GetDeviceUIDefinitionRecord(path: TweakDBID) -> ref<DeviceUIDefinition_Record>;

  public final static native func GetDeviceWidgetDefinitionRecord(path: TweakDBID) -> ref<DeviceWidgetDefinition_Record>;

  public final static native func GetDisassemblingResultRecord(path: TweakDBID) -> ref<DisassemblingResult_Record>;

  public final static native func GetDistanceFromOthersCoverSelectionParametersRecord(path: TweakDBID) -> ref<DistanceFromOthersCoverSelectionParameters_Record>;

  public final static native func GetDistrictRecord(path: TweakDBID) -> ref<District_Record>;

  public final static native func GetDistrictPreventionDataRecord(path: TweakDBID) -> ref<DistrictPreventionData_Record>;

  public final static native func GetDriveHelperRecord(path: TweakDBID) -> ref<DriveHelper_Record>;

  public final static native func GetDriveHelperTypeRecord(path: TweakDBID) -> ref<DriveHelperType_Record>;

  public final static native func GetDriveWheelsAccelerateNoiseRecord(path: TweakDBID) -> ref<DriveWheelsAccelerateNoise_Record>;

  public final static native func GetDroneAnimationSetupRecord(path: TweakDBID) -> ref<DroneAnimationSetup_Record>;

  public final static native func GetDynamicDownforceHelperRecord(path: TweakDBID) -> ref<DynamicDownforceHelper_Record>;

  public final static native func GetEffectorRecord(path: TweakDBID) -> ref<Effector_Record>;

  public final static native func GetEnvLightRecord(path: TweakDBID) -> ref<EnvLight_Record>;

  public final static native func GetEquipmentAreaRecord(path: TweakDBID) -> ref<EquipmentArea_Record>;

  public final static native func GetEquipmentMovementSoundRecord(path: TweakDBID) -> ref<EquipmentMovementSound_Record>;

  public final static native func GetEthnicNamesRecord(path: TweakDBID) -> ref<EthnicNames_Record>;

  public final static native func GetEthnicityRecord(path: TweakDBID) -> ref<Ethnicity_Record>;

  public final static native func GetFacialPresetRecord(path: TweakDBID) -> ref<FacialPreset_Record>;

  public final static native func GetFastTravelBinkDataRecord(path: TweakDBID) -> ref<FastTravelBinkData_Record>;

  public final static native func GetFastTravelBinksGroupRecord(path: TweakDBID) -> ref<FastTravelBinksGroup_Record>;

  public final static native func GetFastTravelPointRecord(path: TweakDBID) -> ref<FastTravelPoint_Record>;

  public final static native func GetFastTravelScreenDataRecord(path: TweakDBID) -> ref<FastTravelScreenData_Record>;

  public final static native func GetFastTravelScreenDataGroupRecord(path: TweakDBID) -> ref<FastTravelScreenDataGroup_Record>;

  public final static native func GetFocusClueRecord(path: TweakDBID) -> ref<FocusClue_Record>;

  public final static native func GetFootstepRecord(path: TweakDBID) -> ref<Footstep_Record>;

  public final static native func GetForceDismembermentEffectorRecord(path: TweakDBID) -> ref<ForceDismembermentEffector_Record>;

  public final static native func GetFriendlyTargetAngleDistanceCoverSelectionParametersRecord(path: TweakDBID) -> ref<FriendlyTargetAngleDistanceCoverSelectionParameters_Record>;

  public final static native func GetFriendlyTargetDistanceCoverSelectionParametersRecord(path: TweakDBID) -> ref<FriendlyTargetDistanceCoverSelectionParameters_Record>;

  public final static native func GetFxActionRecord(path: TweakDBID) -> ref<FxAction_Record>;

  public final static native func GetFxActionTypeRecord(path: TweakDBID) -> ref<FxActionType_Record>;

  public final static native func GetGOGRewardRecord(path: TweakDBID) -> ref<GOGReward_Record>;

  public final static native func GetGadgetRecord(path: TweakDBID) -> ref<Gadget_Record>;

  public final static native func GetGameplayAbilityRecord(path: TweakDBID) -> ref<GameplayAbility_Record>;

  public final static native func GetGameplayAbilityGroupRecord(path: TweakDBID) -> ref<GameplayAbilityGroup_Record>;

  public final static native func GetGameplayLogicPackageRecord(path: TweakDBID) -> ref<GameplayLogicPackage_Record>;

  public final static native func GetGameplayLogicPackageUIDataRecord(path: TweakDBID) -> ref<GameplayLogicPackageUIData_Record>;

  public final static native func GetGameplayRestrictionStatusEffectRecord(path: TweakDBID) -> ref<GameplayRestrictionStatusEffect_Record>;

  public final static native func GetGameplayTagsPrereqRecord(path: TweakDBID) -> ref<GameplayTagsPrereq_Record>;

  public final static native func GetGenderRecord(path: TweakDBID) -> ref<Gender_Record>;

  public final static native func GetGenderEntityRecord(path: TweakDBID) -> ref<GenderEntity_Record>;

  public final static native func GetGenericHighwaySignRecord(path: TweakDBID) -> ref<GenericHighwaySign_Record>;

  public final static native func GetGenericMetroSignRecord(path: TweakDBID) -> ref<GenericMetroSign_Record>;

  public final static native func GetGenericStreetNameSignRecord(path: TweakDBID) -> ref<GenericStreetNameSign_Record>;

  public final static native func GetGrenadeRecord(path: TweakDBID) -> ref<Grenade_Record>;

  public final static native func GetGrenadeDeliveryMethodRecord(path: TweakDBID) -> ref<GrenadeDeliveryMethod_Record>;

  public final static native func GetGrenadeDeliveryMethodTypeRecord(path: TweakDBID) -> ref<GrenadeDeliveryMethodType_Record>;

  public final static native func GetHUD_Preset_EntryRecord(path: TweakDBID) -> ref<HUD_Preset_Entry_Record>;

  public final static native func GetHackCategoryRecord(path: TweakDBID) -> ref<HackCategory_Record>;

  public final static native func GetHackingMiniGameRecord(path: TweakDBID) -> ref<HackingMiniGame_Record>;

  public final static native func GetHandbrakeFrictionModifierRecord(path: TweakDBID) -> ref<HandbrakeFrictionModifier_Record>;

  public final static native func GetHitPrereqRecord(path: TweakDBID) -> ref<HitPrereq_Record>;

  public final static native func GetHitPrereqConditionRecord(path: TweakDBID) -> ref<HitPrereqCondition_Record>;

  public final static native func GetHitPrereqConditionTypeRecord(path: TweakDBID) -> ref<HitPrereqConditionType_Record>;

  public final static native func GetHomingGDMRecord(path: TweakDBID) -> ref<HomingGDM_Record>;

  public final static native func GetHomingParametersRecord(path: TweakDBID) -> ref<HomingParameters_Record>;

  public final static native func GetHudEnhancerRecord(path: TweakDBID) -> ref<HudEnhancer_Record>;

  public final static native func GetIPrereqRecord(path: TweakDBID) -> ref<IPrereq_Record>;

  public final static native func GetIconsGeneratorContextRecord(path: TweakDBID) -> ref<IconsGeneratorContext_Record>;

  public final static native func GetImprovementRelationRecord(path: TweakDBID) -> ref<ImprovementRelation_Record>;

  public final static native func GetInAirGravityModifierRecord(path: TweakDBID) -> ref<InAirGravityModifier_Record>;

  public final static native func GetInitLoadingScreenRecord(path: TweakDBID) -> ref<InitLoadingScreen_Record>;

  public final static native func GetInteractionBaseRecord(path: TweakDBID) -> ref<InteractionBase_Record>;

  public final static native func GetInteractionMountBaseRecord(path: TweakDBID) -> ref<InteractionMountBase_Record>;

  public final static native func GetInventoryItemRecord(path: TweakDBID) -> ref<InventoryItem_Record>;

  public final static native func GetInventoryItemGroupRecord(path: TweakDBID) -> ref<InventoryItemGroup_Record>;

  public final static native func GetInventoryItemSetRecord(path: TweakDBID) -> ref<InventoryItemSet_Record>;

  public final static native func GetItemRecord(path: TweakDBID) -> ref<Item_Record>;

  public final static native func GetItemActionRecord(path: TweakDBID) -> ref<ItemAction_Record>;

  public final static native func GetItemArrayQueryRecord(path: TweakDBID) -> ref<ItemArrayQuery_Record>;

  public final static native func GetItemBlueprintRecord(path: TweakDBID) -> ref<ItemBlueprint_Record>;

  public final static native func GetItemBlueprintElementRecord(path: TweakDBID) -> ref<ItemBlueprintElement_Record>;

  public final static native func GetItemCategoryRecord(path: TweakDBID) -> ref<ItemCategory_Record>;

  public final static native func GetItemCostRecord(path: TweakDBID) -> ref<ItemCost_Record>;

  public final static native func GetItemCreationPrereqRecord(path: TweakDBID) -> ref<ItemCreationPrereq_Record>;

  public final static native func GetItemDropSettingsRecord(path: TweakDBID) -> ref<ItemDropSettings_Record>;

  public final static native func GetItemPartConnectionRecord(path: TweakDBID) -> ref<ItemPartConnection_Record>;

  public final static native func GetItemPartListElementRecord(path: TweakDBID) -> ref<ItemPartListElement_Record>;

  public final static native func GetItemQueryRecord(path: TweakDBID) -> ref<ItemQuery_Record>;

  public final static native func GetItemQueryElementRecord(path: TweakDBID) -> ref<ItemQueryElement_Record>;

  public final static native func GetItemRecipeRecord(path: TweakDBID) -> ref<ItemRecipe_Record>;

  public final static native func GetItemRequiredSlotRecord(path: TweakDBID) -> ref<ItemRequiredSlot_Record>;

  public final static native func GetItemStructureRecord(path: TweakDBID) -> ref<ItemStructure_Record>;

  public final static native func GetItemTypeRecord(path: TweakDBID) -> ref<ItemType_Record>;

  public final static native func GetItemsFactoryAppearanceSuffixBaseRecord(path: TweakDBID) -> ref<ItemsFactoryAppearanceSuffixBase_Record>;

  public final static native func GetItemsFactoryAppearanceSuffixOrderRecord(path: TweakDBID) -> ref<ItemsFactoryAppearanceSuffixOrder_Record>;

  public final static native func GetJournalIconRecord(path: TweakDBID) -> ref<JournalIcon_Record>;

  public final static native func GetKeepCurrentCoverCoverSelectionParametersRecord(path: TweakDBID) -> ref<KeepCurrentCoverCoverSelectionParameters_Record>;

  public final static native func GetLCDScreenRecord(path: TweakDBID) -> ref<LCDScreen_Record>;

  public final static native func GetLandingFxMaterialRecord(path: TweakDBID) -> ref<LandingFxMaterial_Record>;

  public final static native func GetLandingFxPackageRecord(path: TweakDBID) -> ref<LandingFxPackage_Record>;

  public final static native func GetLayoutRecord(path: TweakDBID) -> ref<Layout_Record>;

  public final static native func GetLifePathRecord(path: TweakDBID) -> ref<LifePath_Record>;

  public final static native func GetLightPresetRecord(path: TweakDBID) -> ref<LightPreset_Record>;

  public final static native func GetLinearAccuracyRecord(path: TweakDBID) -> ref<LinearAccuracy_Record>;

  public final static native func GetLoadingTipsGroupRecord(path: TweakDBID) -> ref<LoadingTipsGroup_Record>;

  public final static native func GetLocomotionModeRecord(path: TweakDBID) -> ref<LocomotionMode_Record>;

  public final static native func GetLookAtPartRecord(path: TweakDBID) -> ref<LookAtPart_Record>;

  public final static native func GetLookAtPresetRecord(path: TweakDBID) -> ref<LookAtPreset_Record>;

  public final static native func GetLootItemRecord(path: TweakDBID) -> ref<LootItem_Record>;

  public final static native func GetLootTableRecord(path: TweakDBID) -> ref<LootTable_Record>;

  public final static native func GetLootTableElementRecord(path: TweakDBID) -> ref<LootTableElement_Record>;

  public final static native func GetMappinClampingSettingsRecord(path: TweakDBID) -> ref<MappinClampingSettings_Record>;

  public final static native func GetMappinDefinitionRecord(path: TweakDBID) -> ref<MappinDefinition_Record>;

  public final static native func GetMappinPhaseRecord(path: TweakDBID) -> ref<MappinPhase_Record>;

  public final static native func GetMappinPhaseDefinitionRecord(path: TweakDBID) -> ref<MappinPhaseDefinition_Record>;

  public final static native func GetMappinUICustomOpacityParamsRecord(path: TweakDBID) -> ref<MappinUICustomOpacityParams_Record>;

  public final static native func GetMappinUIFilterGroupRecord(path: TweakDBID) -> ref<MappinUIFilterGroup_Record>;

  public final static native func GetMappinUIGlobalProfileRecord(path: TweakDBID) -> ref<MappinUIGlobalProfile_Record>;

  public final static native func GetMappinUIParamGroupRecord(path: TweakDBID) -> ref<MappinUIParamGroup_Record>;

  public final static native func GetMappinUIRuntimeProfileRecord(path: TweakDBID) -> ref<MappinUIRuntimeProfile_Record>;

  public final static native func GetMappinUISettingsRecord(path: TweakDBID) -> ref<MappinUISettings_Record>;

  public final static native func GetMappinUISpawnProfileRecord(path: TweakDBID) -> ref<MappinUISpawnProfile_Record>;

  public final static native func GetMappinVariantRecord(path: TweakDBID) -> ref<MappinVariant_Record>;

  public final static native func GetMaterialRecord(path: TweakDBID) -> ref<Material_Record>;

  public final static native func GetMaterialFxRecord(path: TweakDBID) -> ref<MaterialFx_Record>;

  public final static native func GetMeleeAttackDirectionRecord(path: TweakDBID) -> ref<MeleeAttackDirection_Record>;

  public final static native func GetMetaQuestRecord(path: TweakDBID) -> ref<MetaQuest_Record>;

  public final static native func GetMiniGame_AllSymbolsRecord(path: TweakDBID) -> ref<MiniGame_AllSymbols_Record>;

  public final static native func GetMiniGame_AllSymbols_inline0Record(path: TweakDBID) -> ref<MiniGame_AllSymbols_inline0_Record>;

  public final static native func GetMiniGame_AllSymbols_inline1Record(path: TweakDBID) -> ref<MiniGame_AllSymbols_inline1_Record>;

  public final static native func GetMiniGame_AllSymbols_inline2Record(path: TweakDBID) -> ref<MiniGame_AllSymbols_inline2_Record>;

  public final static native func GetMiniGame_AllSymbols_inline3Record(path: TweakDBID) -> ref<MiniGame_AllSymbols_inline3_Record>;

  public final static native func GetMiniGame_AllSymbols_inline4Record(path: TweakDBID) -> ref<MiniGame_AllSymbols_inline4_Record>;

  public final static native func GetMiniGame_SymbolsWithRarityRecord(path: TweakDBID) -> ref<MiniGame_SymbolsWithRarity_Record>;

  public final static native func GetMiniGame_TrapRecord(path: TweakDBID) -> ref<MiniGame_Trap_Record>;

  public final static native func GetMinigameActionRecord(path: TweakDBID) -> ref<MinigameAction_Record>;

  public final static native func GetMinigameActionTypeRecord(path: TweakDBID) -> ref<MinigameActionType_Record>;

  public final static native func GetMinigameCategoryRecord(path: TweakDBID) -> ref<MinigameCategory_Record>;

  public final static native func GetMinigameTrapTypeRecord(path: TweakDBID) -> ref<MinigameTrapType_Record>;

  public final static native func GetMinigame_DefRecord(path: TweakDBID) -> ref<Minigame_Def_Record>;

  public final static native func GetModifyStatPoolModifierEffectorRecord(path: TweakDBID) -> ref<ModifyStatPoolModifierEffector_Record>;

  public final static native func GetMovementParamRecord(path: TweakDBID) -> ref<MovementParam_Record>;

  public final static native func GetMovementParamsRecord(path: TweakDBID) -> ref<MovementParams_Record>;

  public final static native func GetMovementPolicyRecord(path: TweakDBID) -> ref<MovementPolicy_Record>;

  public final static native func GetMovementPolicyTagListRecord(path: TweakDBID) -> ref<MovementPolicyTagList_Record>;

  public final static native func GetMultiPrereqRecord(path: TweakDBID) -> ref<MultiPrereq_Record>;

  public final static native func GetMutablePoolValueModifierRecord(path: TweakDBID) -> ref<MutablePoolValueModifier_Record>;

  public final static native func GetNPCBehaviorStateRecord(path: TweakDBID) -> ref<NPCBehaviorState_Record>;

  public final static native func GetNPCEquipmentGroupRecord(path: TweakDBID) -> ref<NPCEquipmentGroup_Record>;

  public final static native func GetNPCEquipmentGroupEntryRecord(path: TweakDBID) -> ref<NPCEquipmentGroupEntry_Record>;

  public final static native func GetNPCEquipmentItemRecord(path: TweakDBID) -> ref<NPCEquipmentItem_Record>;

  public final static native func GetNPCEquipmentItemPoolRecord(path: TweakDBID) -> ref<NPCEquipmentItemPool_Record>;

  public final static native func GetNPCEquipmentItemsPoolEntryRecord(path: TweakDBID) -> ref<NPCEquipmentItemsPoolEntry_Record>;

  public final static native func GetNPCHighLevelStateRecord(path: TweakDBID) -> ref<NPCHighLevelState_Record>;

  public final static native func GetNPCQuestAffiliationRecord(path: TweakDBID) -> ref<NPCQuestAffiliation_Record>;

  public final static native func GetNPCRarityRecord(path: TweakDBID) -> ref<NPCRarity_Record>;

  public final static native func GetNPCStanceStateRecord(path: TweakDBID) -> ref<NPCStanceState_Record>;

  public final static native func GetNPCTypeRecord(path: TweakDBID) -> ref<NPCType_Record>;

  public final static native func GetNPCTypePrereqRecord(path: TweakDBID) -> ref<NPCTypePrereq_Record>;

  public final static native func GetNPCUpperBodyStateRecord(path: TweakDBID) -> ref<NPCUpperBodyState_Record>;

  public final static native func GetNetworkPingingParameteresRecord(path: TweakDBID) -> ref<NetworkPingingParameteres_Record>;

  public final static native func GetNetworkPresetBinderParametersRecord(path: TweakDBID) -> ref<NetworkPresetBinderParameters_Record>;

  public final static native func GetNewsFeedTitleRecord(path: TweakDBID) -> ref<NewsFeedTitle_Record>;

  public final static native func GetNonLinearAccuracyRecord(path: TweakDBID) -> ref<NonLinearAccuracy_Record>;

  public final static native func GetNumberPlateRecord(path: TweakDBID) -> ref<NumberPlate_Record>;

  public final static native func GetObjectActionRecord(path: TweakDBID) -> ref<ObjectAction_Record>;

  public final static native func GetObjectActionCostRecord(path: TweakDBID) -> ref<ObjectActionCost_Record>;

  public final static native func GetObjectActionEffectRecord(path: TweakDBID) -> ref<ObjectActionEffect_Record>;

  public final static native func GetObjectActionGameplayCategoryRecord(path: TweakDBID) -> ref<ObjectActionGameplayCategory_Record>;

  public final static native func GetObjectActionPrereqRecord(path: TweakDBID) -> ref<ObjectActionPrereq_Record>;

  public final static native func GetObjectActionReferenceRecord(path: TweakDBID) -> ref<ObjectActionReference_Record>;

  public final static native func GetObjectActionTypeRecord(path: TweakDBID) -> ref<ObjectActionType_Record>;

  public final static native func GetOffMeshLinkTagRecord(path: TweakDBID) -> ref<OffMeshLinkTag_Record>;

  public final static native func GetOutputRecord(path: TweakDBID) -> ref<Output_Record>;

  public final static native func GetOwnerAngleCoverSelectionParametersRecord(path: TweakDBID) -> ref<OwnerAngleCoverSelectionParameters_Record>;

  public final static native func GetOwnerDistanceCoverSelectionParametersRecord(path: TweakDBID) -> ref<OwnerDistanceCoverSelectionParameters_Record>;

  public final static native func GetOwnerThreatCoverSelectionParametersRecord(path: TweakDBID) -> ref<OwnerThreatCoverSelectionParameters_Record>;

  public final static native func GetParentAttachmentTypeRecord(path: TweakDBID) -> ref<ParentAttachmentType_Record>;

  public final static native func GetParticleDamageRecord(path: TweakDBID) -> ref<ParticleDamage_Record>;

  public final static native func GetPassiveProficiencyBonusRecord(path: TweakDBID) -> ref<PassiveProficiencyBonus_Record>;

  public final static native func GetPassiveProficiencyBonusUIDataRecord(path: TweakDBID) -> ref<PassiveProficiencyBonusUIData_Record>;

  public final static native func GetPathLengthCoverSelectionParametersRecord(path: TweakDBID) -> ref<PathLengthCoverSelectionParameters_Record>;

  public final static native func GetPathSecurityCoverSelectionParametersRecord(path: TweakDBID) -> ref<PathSecurityCoverSelectionParameters_Record>;

  public final static native func GetPerkRecord(path: TweakDBID) -> ref<Perk_Record>;

  public final static native func GetPerkAreaRecord(path: TweakDBID) -> ref<PerkArea_Record>;

  public final static native func GetPerkLevelDataRecord(path: TweakDBID) -> ref<PerkLevelData_Record>;

  public final static native func GetPerkLevelUIDataRecord(path: TweakDBID) -> ref<PerkLevelUIData_Record>;

  public final static native func GetPerkUtilityRecord(path: TweakDBID) -> ref<PerkUtility_Record>;

  public final static native func GetPhotoModeBackgroundRecord(path: TweakDBID) -> ref<PhotoModeBackground_Record>;

  public final static native func GetPhotoModeEffectRecord(path: TweakDBID) -> ref<PhotoModeEffect_Record>;

  public final static native func GetPhotoModeFaceRecord(path: TweakDBID) -> ref<PhotoModeFace_Record>;

  public final static native func GetPhotoModeFrameRecord(path: TweakDBID) -> ref<PhotoModeFrame_Record>;

  public final static native func GetPhotoModeItemRecord(path: TweakDBID) -> ref<PhotoModeItem_Record>;

  public final static native func GetPhotoModePoseRecord(path: TweakDBID) -> ref<PhotoModePose_Record>;

  public final static native func GetPhotoModePoseCategoryRecord(path: TweakDBID) -> ref<PhotoModePoseCategory_Record>;

  public final static native func GetPhotoModeStickerRecord(path: TweakDBID) -> ref<PhotoModeSticker_Record>;

  public final static native func GetPierceRecord(path: TweakDBID) -> ref<Pierce_Record>;

  public final static native func GetPingRecord(path: TweakDBID) -> ref<Ping_Record>;

  public final static native func GetPlayerBuildRecord(path: TweakDBID) -> ref<PlayerBuild_Record>;

  public final static native func GetPlayerPossesionRecord(path: TweakDBID) -> ref<PlayerPossesion_Record>;

  public final static native func GetPoolValueModifierRecord(path: TweakDBID) -> ref<PoolValueModifier_Record>;

  public final static native func GetPrereqRecord(path: TweakDBID) -> ref<Prereq_Record>;

  public final static native func GetPrereqCheckRecord(path: TweakDBID) -> ref<PrereqCheck_Record>;

  public final static native func GetPresetMapperRecord(path: TweakDBID) -> ref<PresetMapper_Record>;

  public final static native func GetPreventionFallbackUnitDataRecord(path: TweakDBID) -> ref<PreventionFallbackUnitData_Record>;

  public final static native func GetPreventionHeatDataRecord(path: TweakDBID) -> ref<PreventionHeatData_Record>;

  public final static native func GetPreventionUnitPoolDataRecord(path: TweakDBID) -> ref<PreventionUnitPoolData_Record>;

  public final static native func GetProficiencyRecord(path: TweakDBID) -> ref<Proficiency_Record>;

  public final static native func GetProgramRecord(path: TweakDBID) -> ref<Program_Record>;

  public final static native func GetProgressionBuildRecord(path: TweakDBID) -> ref<ProgressionBuild_Record>;

  public final static native func GetProjectileCollisionRecord(path: TweakDBID) -> ref<ProjectileCollision_Record>;

  public final static native func GetProjectileLaunchRecord(path: TweakDBID) -> ref<ProjectileLaunch_Record>;

  public final static native func GetProjectileLaunchModeRecord(path: TweakDBID) -> ref<ProjectileLaunchMode_Record>;

  public final static native func GetProjectileOnCollisionActionRecord(path: TweakDBID) -> ref<ProjectileOnCollisionAction_Record>;

  public final static native func GetPropRecord(path: TweakDBID) -> ref<Prop_Record>;

  public final static native func GetQualityRecord(path: TweakDBID) -> ref<Quality_Record>;

  public final static native func GetQueryRecord(path: TweakDBID) -> ref<Query_Record>;

  public final static native func GetQuestRestrictionModeRecord(path: TweakDBID) -> ref<QuestRestrictionMode_Record>;

  public final static native func GetQuestSystemSetupRecord(path: TweakDBID) -> ref<QuestSystemSetup_Record>;

  public final static native func GetRPGActionRecord(path: TweakDBID) -> ref<RPGAction_Record>;

  public final static native func GetRPGDataPackageRecord(path: TweakDBID) -> ref<RPGDataPackage_Record>;

  public final static native func GetRaceCheckpointRecord(path: TweakDBID) -> ref<RaceCheckpoint_Record>;

  public final static native func GetRadioStationRecord(path: TweakDBID) -> ref<RadioStation_Record>;

  public final static native func GetRandomNewsFeedBatchRecord(path: TweakDBID) -> ref<RandomNewsFeedBatch_Record>;

  public final static native func GetRandomPassengerEntryRecord(path: TweakDBID) -> ref<RandomPassengerEntry_Record>;

  public final static native func GetRandomRatioCoverSelectionParametersRecord(path: TweakDBID) -> ref<RandomRatioCoverSelectionParameters_Record>;

  public final static native func GetRandomStatModifierRecord(path: TweakDBID) -> ref<RandomStatModifier_Record>;

  public final static native func GetRangedAttackRecord(path: TweakDBID) -> ref<RangedAttack_Record>;

  public final static native func GetRangedAttackPackageRecord(path: TweakDBID) -> ref<RangedAttackPackage_Record>;

  public final static native func GetReactionLimitRecord(path: TweakDBID) -> ref<ReactionLimit_Record>;

  public final static native func GetReactionPresetRecord(path: TweakDBID) -> ref<ReactionPreset_Record>;

  public final static native func GetReactionPresetCivilianRecord(path: TweakDBID) -> ref<ReactionPresetCivilian_Record>;

  public final static native func GetReactionPresetCorpoRecord(path: TweakDBID) -> ref<ReactionPresetCorpo_Record>;

  public final static native func GetReactionPresetGangerRecord(path: TweakDBID) -> ref<ReactionPresetGanger_Record>;

  public final static native func GetReactionPresetMechanicalRecord(path: TweakDBID) -> ref<ReactionPresetMechanical_Record>;

  public final static native func GetReactionPresetNoReactionRecord(path: TweakDBID) -> ref<ReactionPresetNoReaction_Record>;

  public final static native func GetReactionPresetPoliceRecord(path: TweakDBID) -> ref<ReactionPresetPolice_Record>;

  public final static native func GetRearWheelsFrictionModifierRecord(path: TweakDBID) -> ref<RearWheelsFrictionModifier_Record>;

  public final static native func GetRecipeElementRecord(path: TweakDBID) -> ref<RecipeElement_Record>;

  public final static native func GetRecipeItemRecord(path: TweakDBID) -> ref<RecipeItem_Record>;

  public final static native func GetRegularRecord(path: TweakDBID) -> ref<Regular_Record>;

  public final static native func GetRegularGDMRecord(path: TweakDBID) -> ref<RegularGDM_Record>;

  public final static native func GetRewardBaseRecord(path: TweakDBID) -> ref<RewardBase_Record>;

  public final static native func GetRewardBase_inline0Record(path: TweakDBID) -> ref<RewardBase_inline0_Record>;

  public final static native func GetRewardSetRecord(path: TweakDBID) -> ref<RewardSet_Record>;

  public final static native func GetRigsRecord(path: TweakDBID) -> ref<Rigs_Record>;

  public final static native func GetRotationLimiterRecord(path: TweakDBID) -> ref<RotationLimiter_Record>;

  public final static native func GetRowSymbolsRecord(path: TweakDBID) -> ref<RowSymbols_Record>;

  public final static native func GetRowTrapsRecord(path: TweakDBID) -> ref<RowTraps_Record>;

  public final static native func GetRuleRecord(path: TweakDBID) -> ref<Rule_Record>;

  public final static native func GetScannableDataRecord(path: TweakDBID) -> ref<ScannableData_Record>;

  public final static native func GetScannerModuleVisibilityPresetRecord(path: TweakDBID) -> ref<ScannerModuleVisibilityPreset_Record>;

  public final static native func GetSceneCameraDoFRecord(path: TweakDBID) -> ref<SceneCameraDoF_Record>;

  public final static native func GetScreenMessageDataRecord(path: TweakDBID) -> ref<ScreenMessageData_Record>;

  public final static native func GetScreenMessagesListRecord(path: TweakDBID) -> ref<ScreenMessagesList_Record>;

  public final static native func GetSeatStateRecord(path: TweakDBID) -> ref<SeatState_Record>;

  public final static native func GetSectorSelectorRecord(path: TweakDBID) -> ref<SectorSelector_Record>;

  public final static native func GetSenseObjectTypeRecord(path: TweakDBID) -> ref<SenseObjectType_Record>;

  public final static native func GetSensePresetRecord(path: TweakDBID) -> ref<SensePreset_Record>;

  public final static native func GetSenseShapeRecord(path: TweakDBID) -> ref<SenseShape_Record>;

  public final static native func GetSlotItemPartElementRecord(path: TweakDBID) -> ref<SlotItemPartElement_Record>;

  public final static native func GetSlotItemPartListElementRecord(path: TweakDBID) -> ref<SlotItemPartListElement_Record>;

  public final static native func GetSlotItemPartPresetRecord(path: TweakDBID) -> ref<SlotItemPartPreset_Record>;

  public final static native func GetSmartGunMissParamsRecord(path: TweakDBID) -> ref<SmartGunMissParams_Record>;

  public final static native func GetSmartGunTargetSortConfigurationsRecord(path: TweakDBID) -> ref<SmartGunTargetSortConfigurations_Record>;

  public final static native func GetSmartGunTargetSortDataRecord(path: TweakDBID) -> ref<SmartGunTargetSortData_Record>;

  public final static native func GetSpawnableObjectRecord(path: TweakDBID) -> ref<SpawnableObject_Record>;

  public final static native func GetSpawnableObjectPriorityRecord(path: TweakDBID) -> ref<SpawnableObjectPriority_Record>;

  public final static native func GetSpreadEffectorRecord(path: TweakDBID) -> ref<SpreadEffector_Record>;

  public final static native func GetSpreadInitEffectorRecord(path: TweakDBID) -> ref<SpreadInitEffector_Record>;

  public final static native func GetSquadBackyardBaseRecord(path: TweakDBID) -> ref<SquadBackyardBase_Record>;

  public final static native func GetSquadBaseRecord(path: TweakDBID) -> ref<SquadBase_Record>;

  public final static native func GetSquadFenceBaseRecord(path: TweakDBID) -> ref<SquadFenceBase_Record>;

  public final static native func GetSquadInstanceRecord(path: TweakDBID) -> ref<SquadInstance_Record>;

  public final static native func GetStatRecord(path: TweakDBID) -> ref<Stat_Record>;

  public final static native func GetStatDistributionDataRecord(path: TweakDBID) -> ref<StatDistributionData_Record>;

  public final static native func GetStatModifierRecord(path: TweakDBID) -> ref<StatModifier_Record>;

  public final static native func GetStatModifierGroupRecord(path: TweakDBID) -> ref<StatModifierGroup_Record>;

  public final static native func GetStatPoolRecord(path: TweakDBID) -> ref<StatPool_Record>;

  public final static native func GetStatPoolCostRecord(path: TweakDBID) -> ref<StatPoolCost_Record>;

  public final static native func GetStatPoolDistributionDataRecord(path: TweakDBID) -> ref<StatPoolDistributionData_Record>;

  public final static native func GetStatPoolPrereqRecord(path: TweakDBID) -> ref<StatPoolPrereq_Record>;

  public final static native func GetStatPoolUpdateRecord(path: TweakDBID) -> ref<StatPoolUpdate_Record>;

  public final static native func GetStatPrereqRecord(path: TweakDBID) -> ref<StatPrereq_Record>;

  public final static native func GetStatsArrayRecord(path: TweakDBID) -> ref<StatsArray_Record>;

  public final static native func GetStatsFolderRecord(path: TweakDBID) -> ref<StatsFolder_Record>;

  public final static native func GetStatsListRecord(path: TweakDBID) -> ref<StatsList_Record>;

  public final static native func GetStatusEffectRecord(path: TweakDBID) -> ref<StatusEffect_Record>;

  public final static native func GetStatusEffectAIBehaviorFlagRecord(path: TweakDBID) -> ref<StatusEffectAIBehaviorFlag_Record>;

  public final static native func GetStatusEffectAIBehaviorTypeRecord(path: TweakDBID) -> ref<StatusEffectAIBehaviorType_Record>;

  public final static native func GetStatusEffectAIDataRecord(path: TweakDBID) -> ref<StatusEffectAIData_Record>;

  public final static native func GetStatusEffectAttackDataRecord(path: TweakDBID) -> ref<StatusEffectAttackData_Record>;

  public final static native func GetStatusEffectFXRecord(path: TweakDBID) -> ref<StatusEffectFX_Record>;

  public final static native func GetStatusEffectPlayerDataRecord(path: TweakDBID) -> ref<StatusEffectPlayerData_Record>;

  public final static native func GetStatusEffectPrereqRecord(path: TweakDBID) -> ref<StatusEffectPrereq_Record>;

  public final static native func GetStatusEffectTypeRecord(path: TweakDBID) -> ref<StatusEffectType_Record>;

  public final static native func GetStatusEffectUIDataRecord(path: TweakDBID) -> ref<StatusEffectUIData_Record>;

  public final static native func GetStatusEffectVariationRecord(path: TweakDBID) -> ref<StatusEffectVariation_Record>;

  public final static native func GetStatusEffect_inline0Record(path: TweakDBID) -> ref<StatusEffect_inline0_Record>;

  public final static native func GetStatusEffect_inline1Record(path: TweakDBID) -> ref<StatusEffect_inline1_Record>;

  public final static native func GetStickyGDMRecord(path: TweakDBID) -> ref<StickyGDM_Record>;

  public final static native func GetStimRecord(path: TweakDBID) -> ref<Stim_Record>;

  public final static native func GetStimPriorityRecord(path: TweakDBID) -> ref<StimPriority_Record>;

  public final static native func GetStimPropagationRecord(path: TweakDBID) -> ref<StimPropagation_Record>;

  public final static native func GetStimTypeRecord(path: TweakDBID) -> ref<StimType_Record>;

  public final static native func GetStopRecord(path: TweakDBID) -> ref<Stop_Record>;

  public final static native func GetStopAndStickRecord(path: TweakDBID) -> ref<StopAndStick_Record>;

  public final static native func GetStopAndStickPerpendicularRecord(path: TweakDBID) -> ref<StopAndStickPerpendicular_Record>;

  public final static native func GetStreetCredTierRecord(path: TweakDBID) -> ref<StreetCredTier_Record>;

  public final static native func GetStreetSignRecord(path: TweakDBID) -> ref<StreetSign_Record>;

  public final static native func GetSubCharacterRecord(path: TweakDBID) -> ref<SubCharacter_Record>;

  public final static native func GetSubStatModifierRecord(path: TweakDBID) -> ref<SubStatModifier_Record>;

  public final static native func GetSubstatRecord(path: TweakDBID) -> ref<Substat_Record>;

  public final static native func GetTPPCameraSetupRecord(path: TweakDBID) -> ref<TPPCameraSetup_Record>;

  public final static native func GetTPPLookAtPresetsRecord(path: TweakDBID) -> ref<TPPLookAtPresets_Record>;

  public final static native func GetTVBaseRecord(path: TweakDBID) -> ref<TVBase_Record>;

  public final static native func GetTacticLimiterCoverSelectionParametersRecord(path: TweakDBID) -> ref<TacticLimiterCoverSelectionParameters_Record>;

  public final static native func GetTemporalPrereqRecord(path: TweakDBID) -> ref<TemporalPrereq_Record>;

  public final static native func GetTerminalScreenTypeRecord(path: TweakDBID) -> ref<TerminalScreenType_Record>;

  public final static native func GetThreatDistanceCoverSelectionParametersRecord(path: TweakDBID) -> ref<ThreatDistanceCoverSelectionParameters_Record>;

  public final static native func GetThreatTrackingPresetBaseRecord(path: TweakDBID) -> ref<ThreatTrackingPresetBase_Record>;

  public final static native func GetThumbnailWidgetDefinitionRecord(path: TweakDBID) -> ref<ThumbnailWidgetDefinition_Record>;

  public final static native func GetTimeRecord(path: TweakDBID) -> ref<Time_Record>;

  public final static native func GetTrackingRecord(path: TweakDBID) -> ref<Tracking_Record>;

  public final static native func GetTrackingModeRecord(path: TweakDBID) -> ref<TrackingMode_Record>;

  public final static native func GetTraitRecord(path: TweakDBID) -> ref<Trait_Record>;

  public final static native func GetTraitDataRecord(path: TweakDBID) -> ref<TraitData_Record>;

  public final static native func GetTransgressionRecord(path: TweakDBID) -> ref<Transgression_Record>;

  public final static native func GetTrapRecord(path: TweakDBID) -> ref<Trap_Record>;

  public final static native func GetTrapTypeRecord(path: TweakDBID) -> ref<TrapType_Record>;

  public final static native func GetTriggerAttackEffectorRecord(path: TweakDBID) -> ref<TriggerAttackEffector_Record>;

  public final static native func GetTriggerHackingMinigameEffectorRecord(path: TweakDBID) -> ref<TriggerHackingMinigameEffector_Record>;

  public final static native func GetTriggerModeRecord(path: TweakDBID) -> ref<TriggerMode_Record>;

  public final static native func GetUIAnimationRecord(path: TweakDBID) -> ref<UIAnimation_Record>;

  public final static native func GetUICharacterCreationAttributeRecord(path: TweakDBID) -> ref<UICharacterCreationAttribute_Record>;

  public final static native func GetUICharacterCreationAttributesPresetRecord(path: TweakDBID) -> ref<UICharacterCreationAttributesPreset_Record>;

  public final static native func GetUIConditionRecord(path: TweakDBID) -> ref<UICondition_Record>;

  public final static native func GetUIElementRecord(path: TweakDBID) -> ref<UIElement_Record>;

  public final static native func GetUIIconRecord(path: TweakDBID) -> ref<UIIcon_Record>;

  public final static native func GetUIIconCensorFlagRecord(path: TweakDBID) -> ref<UIIconCensorFlag_Record>;

  public final static native func GetUIIconCensorshipRecord(path: TweakDBID) -> ref<UIIconCensorship_Record>;

  public final static native func GetUINameplateRecord(path: TweakDBID) -> ref<UINameplate_Record>;

  public final static native func GetUINameplateDisplayTypeRecord(path: TweakDBID) -> ref<UINameplateDisplayType_Record>;

  public final static native func GetUIStatsMapRecord(path: TweakDBID) -> ref<UIStatsMap_Record>;

  public final static native func GetUncontrolledMovementEffectorRecord(path: TweakDBID) -> ref<UncontrolledMovementEffector_Record>;

  public final static native func GetUpgradingDataRecord(path: TweakDBID) -> ref<UpgradingData_Record>;

  public final static native func GetUphillDriveHelperRecord(path: TweakDBID) -> ref<UphillDriveHelper_Record>;

  public final static native func GetUtilityLossCoverSelectionParametersRecord(path: TweakDBID) -> ref<UtilityLossCoverSelectionParameters_Record>;

  public final static native func GetVehicleRecord(path: TweakDBID) -> ref<Vehicle_Record>;

  public final static native func GetVehicleAIBoostSettingsRecord(path: TweakDBID) -> ref<VehicleAIBoostSettings_Record>;

  public final static native func GetVehicleAirControlRecord(path: TweakDBID) -> ref<VehicleAirControl_Record>;

  public final static native func GetVehicleAirControlAxisRecord(path: TweakDBID) -> ref<VehicleAirControlAxis_Record>;

  public final static native func GetVehicleBehaviorDataRecord(path: TweakDBID) -> ref<VehicleBehaviorData_Record>;

  public final static native func GetVehicleCameraManagerRecord(path: TweakDBID) -> ref<VehicleCameraManager_Record>;

  public final static native func GetVehicleDataPackageRecord(path: TweakDBID) -> ref<VehicleDataPackage_Record>;

  public final static native func GetVehicleDefaultStateRecord(path: TweakDBID) -> ref<VehicleDefaultState_Record>;

  public final static native func GetVehicleDeformablePartRecord(path: TweakDBID) -> ref<VehicleDeformablePart_Record>;

  public final static native func GetVehicleDeformableZoneRecord(path: TweakDBID) -> ref<VehicleDeformableZone_Record>;

  public final static native func GetVehicleDestructibleGlassRecord(path: TweakDBID) -> ref<VehicleDestructibleGlass_Record>;

  public final static native func GetVehicleDestructibleLightRecord(path: TweakDBID) -> ref<VehicleDestructibleLight_Record>;

  public final static native func GetVehicleDestructibleWheelRecord(path: TweakDBID) -> ref<VehicleDestructibleWheel_Record>;

  public final static native func GetVehicleDestructionRecord(path: TweakDBID) -> ref<VehicleDestruction_Record>;

  public final static native func GetVehicleDestructionPointDamperRecord(path: TweakDBID) -> ref<VehicleDestructionPointDamper_Record>;

  public final static native func GetVehicleDetachablePartRecord(path: TweakDBID) -> ref<VehicleDetachablePart_Record>;

  public final static native func GetVehicleDriveModelDataRecord(path: TweakDBID) -> ref<VehicleDriveModelData_Record>;

  public final static native func GetVehicleEngineDataRecord(path: TweakDBID) -> ref<VehicleEngineData_Record>;

  public final static native func GetVehicleFPPCameraParamsRecord(path: TweakDBID) -> ref<VehicleFPPCameraParams_Record>;

  public final static native func GetVehicleFxCollisionRecord(path: TweakDBID) -> ref<VehicleFxCollision_Record>;

  public final static native func GetVehicleFxCollisionMaterialRecord(path: TweakDBID) -> ref<VehicleFxCollisionMaterial_Record>;

  public final static native func GetVehicleFxWheelsDecalsRecord(path: TweakDBID) -> ref<VehicleFxWheelsDecals_Record>;

  public final static native func GetVehicleFxWheelsDecalsMaterialRecord(path: TweakDBID) -> ref<VehicleFxWheelsDecalsMaterial_Record>;

  public final static native func GetVehicleFxWheelsDecalsMaterialSmearRecord(path: TweakDBID) -> ref<VehicleFxWheelsDecalsMaterialSmear_Record>;

  public final static native func GetVehicleFxWheelsParticlesRecord(path: TweakDBID) -> ref<VehicleFxWheelsParticles_Record>;

  public final static native func GetVehicleFxWheelsParticlesMaterialRecord(path: TweakDBID) -> ref<VehicleFxWheelsParticlesMaterial_Record>;

  public final static native func GetVehicleGearRecord(path: TweakDBID) -> ref<VehicleGear_Record>;

  public final static native func GetVehicleImpactTrafficRecord(path: TweakDBID) -> ref<VehicleImpactTraffic_Record>;

  public final static native func GetVehicleManufacturerRecord(path: TweakDBID) -> ref<VehicleManufacturer_Record>;

  public final static native func GetVehicleModelRecord(path: TweakDBID) -> ref<VehicleModel_Record>;

  public final static native func GetVehiclePIDSettingsRecord(path: TweakDBID) -> ref<VehiclePIDSettings_Record>;

  public final static native func GetVehicleProceduralFPPCameraParamsRecord(path: TweakDBID) -> ref<VehicleProceduralFPPCameraParams_Record>;

  public final static native func GetVehicleSeatRecord(path: TweakDBID) -> ref<VehicleSeat_Record>;

  public final static native func GetVehicleSeatSetRecord(path: TweakDBID) -> ref<VehicleSeatSet_Record>;

  public final static native func GetVehicleSteeringSettingsRecord(path: TweakDBID) -> ref<VehicleSteeringSettings_Record>;

  public final static native func GetVehicleStoppingSettingsRecord(path: TweakDBID) -> ref<VehicleStoppingSettings_Record>;

  public final static native func GetVehicleSurfaceBindingRecord(path: TweakDBID) -> ref<VehicleSurfaceBinding_Record>;

  public final static native func GetVehicleSurfaceTypeRecord(path: TweakDBID) -> ref<VehicleSurfaceType_Record>;

  public final static native func GetVehicleTPPCameraParamsRecord(path: TweakDBID) -> ref<VehicleTPPCameraParams_Record>;

  public final static native func GetVehicleTPPCameraPresetParamsRecord(path: TweakDBID) -> ref<VehicleTPPCameraPresetParams_Record>;

  public final static native func GetVehicleTypeRecord(path: TweakDBID) -> ref<VehicleType_Record>;

  public final static native func GetVehicleUIDataRecord(path: TweakDBID) -> ref<VehicleUIData_Record>;

  public final static native func GetVehicleVisualDestructionRecord(path: TweakDBID) -> ref<VehicleVisualDestruction_Record>;

  public final static native func GetVehicleWaterRecord(path: TweakDBID) -> ref<VehicleWater_Record>;

  public final static native func GetVehicleWeaponRecord(path: TweakDBID) -> ref<VehicleWeapon_Record>;

  public final static native func GetVehicleWheelDimensionsPresetRecord(path: TweakDBID) -> ref<VehicleWheelDimensionsPreset_Record>;

  public final static native func GetVehicleWheelDimensionsSetupRecord(path: TweakDBID) -> ref<VehicleWheelDimensionsSetup_Record>;

  public final static native func GetVehicleWheelDrivingPresetRecord(path: TweakDBID) -> ref<VehicleWheelDrivingPreset_Record>;

  public final static native func GetVehicleWheelDrivingSetupRecord(path: TweakDBID) -> ref<VehicleWheelDrivingSetup_Record>;

  public final static native func GetVehicleWheelDrivingSetup_2Record(path: TweakDBID) -> ref<VehicleWheelDrivingSetup_2_Record>;

  public final static native func GetVehicleWheelDrivingSetup_4Record(path: TweakDBID) -> ref<VehicleWheelDrivingSetup_4_Record>;

  public final static native func GetVehicleWheelRoleRecord(path: TweakDBID) -> ref<VehicleWheelRole_Record>;

  public final static native func GetVehicleWheelsFrictionMapRecord(path: TweakDBID) -> ref<VehicleWheelsFrictionMap_Record>;

  public final static native func GetVehicleWheelsFrictionPresetRecord(path: TweakDBID) -> ref<VehicleWheelsFrictionPreset_Record>;

  public final static native func GetVendorRecord(path: TweakDBID) -> ref<Vendor_Record>;

  public final static native func GetVendorCraftableRecord(path: TweakDBID) -> ref<VendorCraftable_Record>;

  public final static native func GetVendorExperienceRecord(path: TweakDBID) -> ref<VendorExperience_Record>;

  public final static native func GetVendorItemRecord(path: TweakDBID) -> ref<VendorItem_Record>;

  public final static native func GetVendorProgressionBasedStockRecord(path: TweakDBID) -> ref<VendorProgressionBasedStock_Record>;

  public final static native func GetVendorTypeRecord(path: TweakDBID) -> ref<VendorType_Record>;

  public final static native func GetVendorWareRecord(path: TweakDBID) -> ref<VendorWare_Record>;

  public final static native func GetVirtualNetworkRecord(path: TweakDBID) -> ref<VirtualNetwork_Record>;

  public final static native func GetVirtualNetworkPathRecord(path: TweakDBID) -> ref<VirtualNetworkPath_Record>;

  public final static native func GetVisionGroupRecord(path: TweakDBID) -> ref<VisionGroup_Record>;

  public final static native func GetVisionModuleBaseRecord(path: TweakDBID) -> ref<VisionModuleBase_Record>;

  public final static native func GetVisualTagsPrereqRecord(path: TweakDBID) -> ref<VisualTagsPrereq_Record>;

  public final static native func GetWeakspotRecord(path: TweakDBID) -> ref<Weakspot_Record>;

  public final static native func GetWeaponEvolutionRecord(path: TweakDBID) -> ref<WeaponEvolution_Record>;

  public final static native func GetWeaponFxPackageRecord(path: TweakDBID) -> ref<WeaponFxPackage_Record>;

  public final static native func GetWeaponItemRecord(path: TweakDBID) -> ref<WeaponItem_Record>;

  public final static native func GetWeaponManufacturerRecord(path: TweakDBID) -> ref<WeaponManufacturer_Record>;

  public final static native func GetWeaponVFXActionRecord(path: TweakDBID) -> ref<WeaponVFXAction_Record>;

  public final static native func GetWeaponVFXSetRecord(path: TweakDBID) -> ref<WeaponVFXSet_Record>;

  public final static native func GetWeatherRecord(path: TweakDBID) -> ref<Weather_Record>;

  public final static native func GetWeatherPresetRecord(path: TweakDBID) -> ref<WeatherPreset_Record>;

  public final static native func GetWebsiteRecord(path: TweakDBID) -> ref<Website_Record>;

  public final static native func GetWeightedCharacterRecord(path: TweakDBID) -> ref<WeightedCharacter_Record>;

  public final static native func GetWidgetDefinitionRecord(path: TweakDBID) -> ref<WidgetDefinition_Record>;

  public final static native func GetWidgetRatioRecord(path: TweakDBID) -> ref<WidgetRatio_Record>;

  public final static native func GetWidgetStyleRecord(path: TweakDBID) -> ref<WidgetStyle_Record>;

  public final static native func GetWorkspotActionTypeRecord(path: TweakDBID) -> ref<WorkspotActionType_Record>;

  public final static native func GetWorkspotCategoryRecord(path: TweakDBID) -> ref<WorkspotCategory_Record>;

  public final static native func GetWorkspotReactionTypeRecord(path: TweakDBID) -> ref<WorkspotReactionType_Record>;

  public final static native func GetWorkspotStatusEffectRecord(path: TweakDBID) -> ref<WorkspotStatusEffect_Record>;

  public final static native func GetWorldMapFilterRecord(path: TweakDBID) -> ref<WorldMapFilter_Record>;

  public final static native func GetWorldMapFreeCameraSettingsRecord(path: TweakDBID) -> ref<WorldMapFreeCameraSettings_Record>;

  public final static native func GetWorldMapSettingsRecord(path: TweakDBID) -> ref<WorldMapSettings_Record>;

  public final static native func GetWorldMapZoomLevelRecord(path: TweakDBID) -> ref<WorldMapZoomLevel_Record>;

  public final static native func GetXPPointsRecord(path: TweakDBID) -> ref<XPPoints_Record>;

  public final static native func GetXPPoints_inline0Record(path: TweakDBID) -> ref<XPPoints_inline0_Record>;

  public final static native func Getdevice_gameplay_roleRecord(path: TweakDBID) -> ref<device_gameplay_role_Record>;

  public final static native func Getdevice_role_action_desctiptionRecord(path: TweakDBID) -> ref<device_role_action_desctiption_Record>;

  public final static native func Getdevice_scanning_dataRecord(path: TweakDBID) -> ref<device_scanning_data_Record>;

  public final static native func Getnpc_scanning_dataRecord(path: TweakDBID) -> ref<npc_scanning_data_Record>;
}

public native class TweakDBRecord extends IScriptable {

  public final native func GetID() -> TweakDBID;
}

public native class AIActionSubCondition_Record extends TweakDBRecord {

  public final native func Invert() -> Bool;
}

public native class AIRecord_Record extends TweakDBRecord {
}

public native class AINode_Record extends AIRecord_Record {

  public final native func ActivationCondition() -> wref<AIActionCondition_Record>;

  public final native func ActivationConditionHandle() -> ref<AIActionCondition_Record>;

  public final native func MinLOD() -> Int32;

  public final native func IsVirtual() -> Bool;
}

public native class AITicket_Record extends TweakDBRecord {

  public final native func TicketType() -> wref<AITicketType_Record>;

  public final native func TicketTypeHandle() -> ref<AITicketType_Record>;

  public final native func SyncWithTickets(out outList: array<wref<AITicketType_Record>>) -> Void;

  public final native func GetSyncWithTicketsCount() -> Int32;

  public final native func GetSyncWithTicketsItem(index: Int32) -> wref<AITicketType_Record>;

  public final native func GetSyncWithTicketsItemHandle(index: Int32) -> wref<AITicketType_Record>;

  public final native func SyncWithTicketsContains(item: wref<AITicketType_Record>) -> Bool;

  public final native func Cooldowns(out outList: array<wref<AIActionCooldown_Record>>) -> Void;

  public final native func GetCooldownsCount() -> Int32;

  public final native func GetCooldownsItem(index: Int32) -> wref<AIActionCooldown_Record>;

  public final native func GetCooldownsItemHandle(index: Int32) -> wref<AIActionCooldown_Record>;

  public final native func CooldownsContains(item: wref<AIActionCooldown_Record>) -> Bool;

  public final native func ActivationCondition(out outList: array<wref<AITicketCondition_Record>>) -> Void;

  public final native func GetActivationConditionCount() -> Int32;

  public final native func GetActivationConditionItem(index: Int32) -> wref<AITicketCondition_Record>;

  public final native func GetActivationConditionItemHandle(index: Int32) -> wref<AITicketCondition_Record>;

  public final native func ActivationConditionContains(item: wref<AITicketCondition_Record>) -> Bool;

  public final native func DeactivationCondition(out outList: array<wref<AITicketCondition_Record>>) -> Void;

  public final native func GetDeactivationConditionCount() -> Int32;

  public final native func GetDeactivationConditionItem(index: Int32) -> wref<AITicketCondition_Record>;

  public final native func GetDeactivationConditionItemHandle(index: Int32) -> wref<AITicketCondition_Record>;

  public final native func DeactivationConditionContains(item: wref<AITicketCondition_Record>) -> Bool;

  public final native func MaxNumberOfTickets() -> Int32;

  public final native func MinNumberOfTickets() -> Int32;

  public final native func MaxTicketDesyncTime() -> Float;

  public final native func MinTicketDesyncTime() -> Float;

  public final native func PercentageNumberOfTickets() -> Float;

  public final native func Timeout() -> Float;

  public final native func SyncTimeout() -> Float;

  public final native func DeactivationConditionCheckInterval() -> Float;

  public final native func ConditionSuccessDuration() -> Float;

  public final native func ScaleNumberOfTicketsFromWorkspots() -> Bool;

  public final native func ReleaseAll() -> Bool;

  public final native func RevokeOnTimeout() -> Bool;

  public final native func StartCooldownOnFailure() -> Bool;
}

public native class AIItemCond_Record extends AIActionSubCondition_Record {

  public final native func ItemCategory() -> wref<ItemCategory_Record>;

  public final native func ItemCategoryHandle() -> ref<ItemCategory_Record>;

  public final native func ItemType() -> wref<ItemType_Record>;

  public final native func ItemTypeHandle() -> ref<ItemType_Record>;

  public final native func ItemID() -> wref<Item_Record>;

  public final native func ItemIDHandle() -> ref<Item_Record>;

  public final native func Evolution() -> wref<WeaponEvolution_Record>;

  public final native func EvolutionHandle() -> ref<WeaponEvolution_Record>;

  public final native func TriggerModes(out outList: array<wref<TriggerMode_Record>>) -> Void;

  public final native func GetTriggerModesCount() -> Int32;

  public final native func GetTriggerModesItem(index: Int32) -> wref<TriggerMode_Record>;

  public final native func GetTriggerModesItemHandle(index: Int32) -> wref<TriggerMode_Record>;

  public final native func TriggerModesContains(item: wref<TriggerMode_Record>) -> Bool;

  public final native func ItemTag() -> CName;

  public final native func EquipmentGroup() -> CName;

  public final native func CheckAllItemsInEquipmentGroup() -> Bool;
}

public native class BaseObject_Record extends TweakDBRecord {

  public final native func StatModifierGroups(out outList: array<wref<StatModifierGroup_Record>>) -> Void;

  public final native func GetStatModifierGroupsCount() -> Int32;

  public final native func GetStatModifierGroupsItem(index: Int32) -> wref<StatModifierGroup_Record>;

  public final native func GetStatModifierGroupsItemHandle(index: Int32) -> wref<StatModifierGroup_Record>;

  public final native func StatModifierGroupsContains(item: wref<StatModifierGroup_Record>) -> Bool;

  public final native func Effectors(out outList: array<wref<Effector_Record>>) -> Void;

  public final native func GetEffectorsCount() -> Int32;

  public final native func GetEffectorsItem(index: Int32) -> wref<Effector_Record>;

  public final native func GetEffectorsItemHandle(index: Int32) -> wref<Effector_Record>;

  public final native func EffectorsContains(item: wref<Effector_Record>) -> Bool;

  public final native func StatPools(out outList: array<wref<StatPool_Record>>) -> Void;

  public final native func GetStatPoolsCount() -> Int32;

  public final native func GetStatPoolsItem(index: Int32) -> wref<StatPool_Record>;

  public final native func GetStatPoolsItemHandle(index: Int32) -> wref<StatPool_Record>;

  public final native func StatPoolsContains(item: wref<StatPool_Record>) -> Bool;

  public final native func StatModifiers(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetStatModifiersCount() -> Int32;

  public final native func GetStatModifiersItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetStatModifiersItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func StatModifiersContains(item: wref<StatModifier_Record>) -> Bool;

  public final native func Weakspots(out outList: array<wref<Weakspot_Record>>) -> Void;

  public final native func GetWeakspotsCount() -> Int32;

  public final native func GetWeakspotsItem(index: Int32) -> wref<Weakspot_Record>;

  public final native func GetWeakspotsItemHandle(index: Int32) -> wref<Weakspot_Record>;

  public final native func WeakspotsContains(item: wref<Weakspot_Record>) -> Bool;

  public final native func ObjectActions(out outList: array<wref<ObjectAction_Record>>) -> Void;

  public final native func GetObjectActionsCount() -> Int32;

  public final native func GetObjectActionsItem(index: Int32) -> wref<ObjectAction_Record>;

  public final native func GetObjectActionsItemHandle(index: Int32) -> wref<ObjectAction_Record>;

  public final native func ObjectActionsContains(item: wref<ObjectAction_Record>) -> Bool;

  public final native func Savable() -> Bool;
}

public native class SpawnableObject_Record extends BaseObject_Record {

  public final native func Priority() -> wref<SpawnableObjectPriority_Record>;

  public final native func PriorityHandle() -> ref<SpawnableObjectPriority_Record>;

  public final native func Tags() -> array<CName>;

  public final native func GetTagsCount() -> Int32;

  public final native func GetTagsItem(index: Int32) -> CName;

  public final native func TagsContains(item: CName) -> Bool;

  public final native func VisualTags() -> array<CName>;

  public final native func GetVisualTagsCount() -> Int32;

  public final native func GetVisualTagsItem(index: Int32) -> CName;

  public final native func VisualTagsContains(item: CName) -> Bool;

  public final native func MultiplayerTemplatePaths() -> array<ResRef>;

  public final native func GetMultiplayerTemplatePathsCount() -> Int32;

  public final native func GetMultiplayerTemplatePathsItem(index: Int32) -> ResRef;

  public final native func AppearanceName() -> CName;

  public final native func PersistentName() -> CName;

  public final native func EntityTemplatePath() -> ResRef;
}

public native class AITicketCondition_Record extends TweakDBRecord {

  public final native func Invert() -> Bool;
}

public native class AITicketCheck_Record extends AITicketCondition_Record {

  public final native func OptionalFastExit() -> Bool;
}

public native class AITicketFilter_Record extends AITicketCondition_Record {

  public final native func ResetMembers() -> Bool;

  public final native func ResetMembersIncludingUnwillings() -> Bool;

  public final native func SkipSelfOnce() -> Bool;
}

public native class AISquadDistanceRelationToSectorCheck_Record extends AITicketCheck_Record {

  public final native func Sectors(out outList: array<wref<AISectorType_Record>>) -> Void;

  public final native func GetSectorsCount() -> Int32;

  public final native func GetSectorsItem(index: Int32) -> wref<AISectorType_Record>;

  public final native func GetSectorsItemHandle(index: Int32) -> wref<AISectorType_Record>;

  public final native func SectorsContains(item: wref<AISectorType_Record>) -> Bool;
}

public native class AISquadDistanceRelationToTargetCheck_Record extends AITicketCheck_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func RingRadius() -> Float;
}

public native class AISquadItemPriorityFilter_Record extends AITicketFilter_Record {

  public final native func RestoreOnFail() -> Bool;
}

public native class AISubAction_Record extends TweakDBRecord {
}

public native class AISubActionCharacterRecordEquip_Record extends AISubAction_Record {

  public final native func AnimationTime() -> Float;
}

public native class AISubActionShootWithWeapon_Record extends AISubAction_Record {

  public final native func Instigator() -> wref<AIActionTarget_Record>;

  public final native func InstigatorHandle() -> ref<AIActionTarget_Record>;

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func RangedAttack() -> wref<RangedAttack_Record>;

  public final native func RangedAttackHandle() -> ref<RangedAttack_Record>;

  public final native func TriggerMode() -> wref<TriggerMode_Record>;

  public final native func TriggerModeHandle() -> ref<TriggerMode_Record>;

  public final native func ShootingPatternPackages(out outList: array<wref<AIPatternsPackage_Record>>) -> Void;

  public final native func GetShootingPatternPackagesCount() -> Int32;

  public final native func GetShootingPatternPackagesItem(index: Int32) -> wref<AIPatternsPackage_Record>;

  public final native func GetShootingPatternPackagesItemHandle(index: Int32) -> wref<AIPatternsPackage_Record>;

  public final native func ShootingPatternPackagesContains(item: wref<AIPatternsPackage_Record>) -> Bool;

  public final native func PauseCondition(out outList: array<wref<AIActionCondition_Record>>) -> Void;

  public final native func GetPauseConditionCount() -> Int32;

  public final native func GetPauseConditionItem(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func GetPauseConditionItemHandle(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func PauseConditionContains(item: wref<AIActionCondition_Record>) -> Bool;

  public final native func WeaponSlots(out outList: array<wref<AttachmentSlot_Record>>) -> Void;

  public final native func GetWeaponSlotsCount() -> Int32;

  public final native func GetWeaponSlotsItem(index: Int32) -> wref<AttachmentSlot_Record>;

  public final native func GetWeaponSlotsItemHandle(index: Int32) -> wref<AttachmentSlot_Record>;

  public final native func WeaponSlotsContains(item: wref<AttachmentSlot_Record>) -> Bool;

  public final native func DualWieldShootingStyle() -> CName;

  public final native func TargetOffset() -> Vector3;

  public final native func Delay() -> Float;

  public final native func PauseConditionCheckInterval() -> Float;

  public final native func TbhCoefficient() -> Float;

  public final native func AimingDelay() -> Float;

  public final native func PredictionTime() -> Float;

  public final native func NumberOfShots() -> Int32;

  public final native func MaxNumberOfShots() -> Int32;
}

public native class AISubActionSetTargetByTag_Record extends AISubAction_Record {

  public final native func RangeObj() -> wref<AIActionTarget_Record>;

  public final native func RangeObjHandle() -> ref<AIActionTarget_Record>;

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func LineOfSightTarget() -> wref<AIActionTarget_Record>;

  public final native func LineOfSightTargetHandle() -> ref<AIActionTarget_Record>;

  public final native func AllowedOffMeshTags() -> array<CName>;

  public final native func GetAllowedOffMeshTagsCount() -> Int32;

  public final native func GetAllowedOffMeshTagsItem(index: Int32) -> CName;

  public final native func AllowedOffMeshTagsContains(item: CName) -> Bool;

  public final native func SelectionMethod() -> CName;

  public final native func Tag() -> CName;

  public final native func RangeFromOwner() -> Vector2;

  public final native func RangeFromObj() -> Vector2;

  public final native func AvoidSelectingSameTargetMethod() -> Int32;

  public final native func Delay() -> Float;

  public final native func AvoidSelectingSameTarget() -> Bool;
}

public native class AISubActionCharacterRecordUnequip_Record extends AISubAction_Record {

  public final native func AnimationTime() -> Float;

  public final native func DropItem() -> Bool;
}

public native class CoverSelectionParameters_Record extends TweakDBRecord {

  public final native func ScoreOnlyForCombatTarget() -> Bool;

  public final native func VaidateOnlyForCombatTarget() -> Bool;
}

public native class ObjectAction_Record extends TweakDBRecord {

  public final native func Cooldown() -> wref<Cooldown_Record>;

  public final native func CooldownHandle() -> ref<Cooldown_Record>;

  public final native func ObjectActionType() -> wref<ObjectActionType_Record>;

  public final native func ObjectActionTypeHandle() -> ref<ObjectActionType_Record>;

  public final native func ObjectActionUI() -> wref<InteractionBase_Record>;

  public final native func ObjectActionUIHandle() -> ref<InteractionBase_Record>;

  public final native func GameplayCategory() -> wref<ObjectActionGameplayCategory_Record>;

  public final native func GameplayCategoryHandle() -> ref<ObjectActionGameplayCategory_Record>;

  public final native func HackCategory() -> wref<HackCategory_Record>;

  public final native func HackCategoryHandle() -> ref<HackCategory_Record>;

  public final native func TargetPrereqs(out outList: array<wref<IPrereq_Record>>) -> Void;

  public final native func GetTargetPrereqsCount() -> Int32;

  public final native func GetTargetPrereqsItem(index: Int32) -> wref<IPrereq_Record>;

  public final native func GetTargetPrereqsItemHandle(index: Int32) -> wref<IPrereq_Record>;

  public final native func TargetPrereqsContains(item: wref<IPrereq_Record>) -> Bool;

  public final native func Costs(out outList: array<wref<ObjectActionCost_Record>>) -> Void;

  public final native func GetCostsCount() -> Int32;

  public final native func GetCostsItem(index: Int32) -> wref<ObjectActionCost_Record>;

  public final native func GetCostsItemHandle(index: Int32) -> wref<ObjectActionCost_Record>;

  public final native func CostsContains(item: wref<ObjectActionCost_Record>) -> Bool;

  public final native func InstigatorActivePrereqs(out outList: array<wref<ObjectActionPrereq_Record>>) -> Void;

  public final native func GetInstigatorActivePrereqsCount() -> Int32;

  public final native func GetInstigatorActivePrereqsItem(index: Int32) -> wref<ObjectActionPrereq_Record>;

  public final native func GetInstigatorActivePrereqsItemHandle(index: Int32) -> wref<ObjectActionPrereq_Record>;

  public final native func InstigatorActivePrereqsContains(item: wref<ObjectActionPrereq_Record>) -> Bool;

  public final native func StartEffects(out outList: array<wref<ObjectActionEffect_Record>>) -> Void;

  public final native func GetStartEffectsCount() -> Int32;

  public final native func GetStartEffectsItem(index: Int32) -> wref<ObjectActionEffect_Record>;

  public final native func GetStartEffectsItemHandle(index: Int32) -> wref<ObjectActionEffect_Record>;

  public final native func StartEffectsContains(item: wref<ObjectActionEffect_Record>) -> Bool;

  public final native func ActivationTime(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetActivationTimeCount() -> Int32;

  public final native func GetActivationTimeItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetActivationTimeItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func ActivationTimeContains(item: wref<StatModifier_Record>) -> Bool;

  public final native func TargetActivePrereqs(out outList: array<wref<ObjectActionPrereq_Record>>) -> Void;

  public final native func GetTargetActivePrereqsCount() -> Int32;

  public final native func GetTargetActivePrereqsItem(index: Int32) -> wref<ObjectActionPrereq_Record>;

  public final native func GetTargetActivePrereqsItemHandle(index: Int32) -> wref<ObjectActionPrereq_Record>;

  public final native func TargetActivePrereqsContains(item: wref<ObjectActionPrereq_Record>) -> Bool;

  public final native func InstigatorPrereqs(out outList: array<wref<IPrereq_Record>>) -> Void;

  public final native func GetInstigatorPrereqsCount() -> Int32;

  public final native func GetInstigatorPrereqsItem(index: Int32) -> wref<IPrereq_Record>;

  public final native func GetInstigatorPrereqsItemHandle(index: Int32) -> wref<IPrereq_Record>;

  public final native func InstigatorPrereqsContains(item: wref<IPrereq_Record>) -> Bool;

  public final native func Rewards(out outList: array<wref<RewardBase_Record>>) -> Void;

  public final native func GetRewardsCount() -> Int32;

  public final native func GetRewardsItem(index: Int32) -> wref<RewardBase_Record>;

  public final native func GetRewardsItemHandle(index: Int32) -> wref<RewardBase_Record>;

  public final native func RewardsContains(item: wref<RewardBase_Record>) -> Bool;

  public final native func CompletionEffects(out outList: array<wref<ObjectActionEffect_Record>>) -> Void;

  public final native func GetCompletionEffectsCount() -> Int32;

  public final native func GetCompletionEffectsItem(index: Int32) -> wref<ObjectActionEffect_Record>;

  public final native func GetCompletionEffectsItemHandle(index: Int32) -> wref<ObjectActionEffect_Record>;

  public final native func CompletionEffectsContains(item: wref<ObjectActionEffect_Record>) -> Bool;

  public final native func ActionName() -> CName;

  public final native func InteractionLayer() -> CName;

  public final native func Priority() -> Float;
}

public native class ScannableData_Record extends TweakDBRecord {

  public final native func FriendlyName() -> String;

  public final native func IconRecord() -> wref<UIIcon_Record>;

  public final native func IconRecordHandle() -> ref<UIIcon_Record>;

  public final native func LocalizedDescription() -> CName;

  public final native func LocalizedName() -> CName;

  public final native func IconName() -> CName;
}

public native class IPrereq_Record extends TweakDBRecord {

  public final native func PrereqClassName() -> CName;
}

public native class WidgetDefinition_Record extends TweakDBRecord {

  public final native func LibraryID() -> String;

  public final native func Styles(out outList: array<wref<WidgetStyle_Record>>) -> Void;

  public final native func GetStylesCount() -> Int32;

  public final native func GetStylesItem(index: Int32) -> wref<WidgetStyle_Record>;

  public final native func GetStylesItemHandle(index: Int32) -> wref<WidgetStyle_Record>;

  public final native func StylesContains(item: wref<WidgetStyle_Record>) -> Bool;

  public final native func Ratios(out outList: array<wref<WidgetRatio_Record>>) -> Void;

  public final native func GetRatiosCount() -> Int32;

  public final native func GetRatiosItem(index: Int32) -> wref<WidgetRatio_Record>;

  public final native func GetRatiosItemHandle(index: Int32) -> wref<WidgetRatio_Record>;

  public final native func RatiosContains(item: wref<WidgetRatio_Record>) -> Bool;

  public final native func LibraryPath() -> ResRef;

  public final native func UseContentRatio() -> Bool;
}

public native class Effector_Record extends TweakDBRecord {

  public final native func PrereqRecord() -> wref<IPrereq_Record>;

  public final native func PrereqRecordHandle() -> ref<IPrereq_Record>;

  public final native func StatModifierGroups(out outList: array<wref<StatModifierGroup_Record>>) -> Void;

  public final native func GetStatModifierGroupsCount() -> Int32;

  public final native func GetStatModifierGroupsItem(index: Int32) -> wref<StatModifierGroup_Record>;

  public final native func GetStatModifierGroupsItemHandle(index: Int32) -> wref<StatModifierGroup_Record>;

  public final native func StatModifierGroupsContains(item: wref<StatModifierGroup_Record>) -> Bool;

  public final native func StatPoolUpdates(out outList: array<wref<StatPoolUpdate_Record>>) -> Void;

  public final native func GetStatPoolUpdatesCount() -> Int32;

  public final native func GetStatPoolUpdatesItem(index: Int32) -> wref<StatPoolUpdate_Record>;

  public final native func GetStatPoolUpdatesItemHandle(index: Int32) -> wref<StatPoolUpdate_Record>;

  public final native func StatPoolUpdatesContains(item: wref<StatPoolUpdate_Record>) -> Bool;

  public final native func EffectorClassName() -> CName;

  public final native func RemoveAfterActionCall() -> Bool;
}

public native class SenseShape_Record extends TweakDBRecord {

  public final native func Name() -> CName;

  public final native func DetectionMultiplier() -> Float;
}

public native class Attack_Record extends TweakDBRecord {

  public final native func AttackName() -> String;

  public final native func UserDataPath() -> String;

  public final native func DamageType() -> wref<DamageType_Record>;

  public final native func DamageTypeHandle() -> ref<DamageType_Record>;

  public final native func AttackType() -> wref<AttackType_Record>;

  public final native func AttackTypeHandle() -> ref<AttackType_Record>;

  public final native func StatModifiers(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetStatModifiersCount() -> Int32;

  public final native func GetStatModifiersItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetStatModifiersItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func StatModifiersContains(item: wref<StatModifier_Record>) -> Bool;

  public final native func StatusEffects(out outList: array<wref<StatusEffectAttackData_Record>>) -> Void;

  public final native func GetStatusEffectsCount() -> Int32;

  public final native func GetStatusEffectsItem(index: Int32) -> wref<StatusEffectAttackData_Record>;

  public final native func GetStatusEffectsItemHandle(index: Int32) -> wref<StatusEffectAttackData_Record>;

  public final native func StatusEffectsContains(item: wref<StatusEffectAttackData_Record>) -> Bool;

  public final native func HitFlags() -> array<String>;

  public final native func GetHitFlagsCount() -> Int32;

  public final native func GetHitFlagsItem(index: Int32) -> String;

  public final native func HitFlagsContains(item: String) -> Bool;

  public final native func ClassName() -> CName;

  public final native func Range() -> Float;

  public final native func PlayerIncomingDamageMultiplier() -> Float;

  public final native func HitReactionSeverityMin() -> Int32;

  public final native func HitReactionSeverityMax() -> Int32;

  public final native func UseDefaultAimData() -> Bool;
}

public native class Attack_GameEffect_Record extends Attack_Record {

  public final native func ExplosionAttack() -> wref<Attack_GameEffect_Record>;

  public final native func ExplosionAttackHandle() -> ref<Attack_GameEffect_Record>;

  public final native func AttackTag() -> CName;

  public final native func EffectTag() -> CName;

  public final native func EffectName() -> CName;

  public final native func AudioTag() -> CName;

  public final native func AudioAttackIndex() -> Float;
}

public native class Stat_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func LocalizedDescription() -> String;

  public final native func LocalizedName() -> String;

  public final native func EnumName() -> String;

  public final native func LocalizedStatDisplay() -> String;

  public final native func ImprovementRelation() -> wref<ImprovementRelation_Record>;

  public final native func ImprovementRelationHandle() -> ref<ImprovementRelation_Record>;

  public final native func Flags() -> array<CName>;

  public final native func GetFlagsCount() -> Int32;

  public final native func GetFlagsItem(index: Int32) -> CName;

  public final native func FlagsContains(item: CName) -> Bool;

  public final native func Substats(out outList: array<wref<Substat_Record>>) -> Void;

  public final native func GetSubstatsCount() -> Int32;

  public final native func GetSubstatsItem(index: Int32) -> wref<Substat_Record>;

  public final native func GetSubstatsItemHandle(index: Int32) -> wref<Substat_Record>;

  public final native func SubstatsContains(item: wref<Substat_Record>) -> Bool;

  public final native func Min() -> Float;

  public final native func Max() -> Float;

  public final native func StatType() -> gamedataStatType;
}

public native class ProjectileCollision_Record extends TweakDBRecord {

  public final native func Type() -> wref<ProjectileOnCollisionAction_Record>;

  public final native func TypeHandle() -> ref<ProjectileOnCollisionAction_Record>;

  public final native func EnergyLossFactor() -> Float;

  public final native func CanStopAndStickOnHardSurfaces() -> Bool;
}

public native class ChoiceCaptionPart_Record extends TweakDBRecord {

  public final native func PartType() -> wref<ChoiceCaptionPartType_Record>;

  public final native func PartTypeHandle() -> ref<ChoiceCaptionPartType_Record>;
}

public native class Item_Record extends BaseObject_Record {

  public final native func FriendlyName() -> String;

  public final native func IconPath() -> String;

  public final native func LocalizedName() -> String;

  public final native func MovementSound() -> wref<EquipmentMovementSound_Record>;

  public final native func MovementSoundHandle() -> ref<EquipmentMovementSound_Record>;

  public final native func DropSettings() -> wref<ItemDropSettings_Record>;

  public final native func DropSettingsHandle() -> ref<ItemDropSettings_Record>;

  public final native func Crosshair() -> wref<Crosshair_Record>;

  public final native func CrosshairHandle() -> ref<Crosshair_Record>;

  public final native func EquipArea() -> wref<EquipmentArea_Record>;

  public final native func EquipAreaHandle() -> ref<EquipmentArea_Record>;

  public final native func CraftingData() -> wref<CraftingPackage_Record>;

  public final native func CraftingDataHandle() -> ref<CraftingPackage_Record>;

  public final native func ItemSecondaryAction() -> wref<ItemAction_Record>;

  public final native func ItemSecondaryActionHandle() -> ref<ItemAction_Record>;

  public final native func ItemType() -> wref<ItemType_Record>;

  public final native func ItemTypeHandle() -> ref<ItemType_Record>;

  public final native func Blueprint() -> wref<ItemBlueprint_Record>;

  public final native func BlueprintHandle() -> ref<ItemBlueprint_Record>;

  public final native func NpcRPGData() -> wref<RPGDataPackage_Record>;

  public final native func NpcRPGDataHandle() -> ref<RPGDataPackage_Record>;

  public final native func Quality() -> wref<Quality_Record>;

  public final native func QualityHandle() -> ref<Quality_Record>;

  public final native func ParentAttachmentType() -> wref<ParentAttachmentType_Record>;

  public final native func ParentAttachmentTypeHandle() -> ref<ParentAttachmentType_Record>;

  public final native func ItemStructure() -> wref<ItemStructure_Record>;

  public final native func ItemStructureHandle() -> ref<ItemStructure_Record>;

  public final native func MinigameInstance() -> wref<Minigame_Def_Record>;

  public final native func MinigameInstanceHandle() -> ref<Minigame_Def_Record>;

  public final native func Equivalent() -> wref<Item_Record>;

  public final native func EquivalentHandle() -> ref<Item_Record>;

  public final native func ItemCategory() -> wref<ItemCategory_Record>;

  public final native func ItemCategoryHandle() -> ref<ItemCategory_Record>;

  public final native func CpoItemCategory() -> wref<CPOItemCategoryBase_Record>;

  public final native func CpoItemCategoryHandle() -> ref<CPOItemCategoryBase_Record>;

  public final native func Icon() -> wref<UIIcon_Record>;

  public final native func IconHandle() -> ref<UIIcon_Record>;

  public final native func OnEquipStats() -> wref<StatsList_Record>;

  public final native func OnEquipStatsHandle() -> ref<StatsList_Record>;

  public final native func EquipPrereqs(out outList: array<wref<IPrereq_Record>>) -> Void;

  public final native func GetEquipPrereqsCount() -> Int32;

  public final native func GetEquipPrereqsItem(index: Int32) -> wref<IPrereq_Record>;

  public final native func GetEquipPrereqsItemHandle(index: Int32) -> wref<IPrereq_Record>;

  public final native func EquipPrereqsContains(item: wref<IPrereq_Record>) -> Bool;

  public final native func SlotPartListPreset(out outList: array<wref<SlotItemPartPreset_Record>>) -> Void;

  public final native func GetSlotPartListPresetCount() -> Int32;

  public final native func GetSlotPartListPresetItem(index: Int32) -> wref<SlotItemPartPreset_Record>;

  public final native func GetSlotPartListPresetItemHandle(index: Int32) -> wref<SlotItemPartPreset_Record>;

  public final native func SlotPartListPresetContains(item: wref<SlotItemPartPreset_Record>) -> Bool;

  public final native func EquipAreas(out outList: array<wref<EquipmentArea_Record>>) -> Void;

  public final native func GetEquipAreasCount() -> Int32;

  public final native func GetEquipAreasItem(index: Int32) -> wref<EquipmentArea_Record>;

  public final native func GetEquipAreasItemHandle(index: Int32) -> wref<EquipmentArea_Record>;

  public final native func EquipAreasContains(item: wref<EquipmentArea_Record>) -> Bool;

  public final native func AppearanceSuffixes(out outList: array<wref<ItemsFactoryAppearanceSuffixBase_Record>>) -> Void;

  public final native func GetAppearanceSuffixesCount() -> Int32;

  public final native func GetAppearanceSuffixesItem(index: Int32) -> wref<ItemsFactoryAppearanceSuffixBase_Record>;

  public final native func GetAppearanceSuffixesItemHandle(index: Int32) -> wref<ItemsFactoryAppearanceSuffixBase_Record>;

  public final native func AppearanceSuffixesContains(item: wref<ItemsFactoryAppearanceSuffixBase_Record>) -> Bool;

  public final native func GameplayRestrictions(out outList: array<wref<GameplayRestrictionStatusEffect_Record>>) -> Void;

  public final native func GetGameplayRestrictionsCount() -> Int32;

  public final native func GetGameplayRestrictionsItem(index: Int32) -> wref<GameplayRestrictionStatusEffect_Record>;

  public final native func GetGameplayRestrictionsItemHandle(index: Int32) -> wref<GameplayRestrictionStatusEffect_Record>;

  public final native func GameplayRestrictionsContains(item: wref<GameplayRestrictionStatusEffect_Record>) -> Bool;

  public final native func HairSkinnedMeshComponents() -> array<CName>;

  public final native func GetHairSkinnedMeshComponentsCount() -> Int32;

  public final native func GetHairSkinnedMeshComponentsItem(index: Int32) -> CName;

  public final native func HairSkinnedMeshComponentsContains(item: CName) -> Bool;

  public final native func AppearanceSuffixesOwnerOverride() -> array<Bool>;

  public final native func GetAppearanceSuffixesOwnerOverrideCount() -> Int32;

  public final native func GetAppearanceSuffixesOwnerOverrideItem(index: Int32) -> Bool;

  public final native func AppearanceSuffixesOwnerOverrideContains(item: Bool) -> Bool;

  public final native func OnEquip(out outList: array<wref<GameplayLogicPackage_Record>>) -> Void;

  public final native func GetOnEquipCount() -> Int32;

  public final native func GetOnEquipItem(index: Int32) -> wref<GameplayLogicPackage_Record>;

  public final native func GetOnEquipItemHandle(index: Int32) -> wref<GameplayLogicPackage_Record>;

  public final native func OnEquipContains(item: wref<GameplayLogicPackage_Record>) -> Bool;

  public final native func AttachmentSlots(out outList: array<wref<AttachmentSlot_Record>>) -> Void;

  public final native func GetAttachmentSlotsCount() -> Int32;

  public final native func GetAttachmentSlotsItem(index: Int32) -> wref<AttachmentSlot_Record>;

  public final native func GetAttachmentSlotsItemHandle(index: Int32) -> wref<AttachmentSlot_Record>;

  public final native func AttachmentSlotsContains(item: wref<AttachmentSlot_Record>) -> Bool;

  public final native func Tags() -> array<CName>;

  public final native func GetTagsCount() -> Int32;

  public final native func GetTagsItem(index: Int32) -> CName;

  public final native func TagsContains(item: CName) -> Bool;

  public final native func OnAttach(out outList: array<wref<GameplayLogicPackage_Record>>) -> Void;

  public final native func GetOnAttachCount() -> Int32;

  public final native func GetOnAttachItem(index: Int32) -> wref<GameplayLogicPackage_Record>;

  public final native func GetOnAttachItemHandle(index: Int32) -> wref<GameplayLogicPackage_Record>;

  public final native func OnAttachContains(item: wref<GameplayLogicPackage_Record>) -> Bool;

  public final native func SellPrice(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetSellPriceCount() -> Int32;

  public final native func GetSellPriceItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetSellPriceItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func SellPriceContains(item: wref<StatModifier_Record>) -> Bool;

  public final native func VisualTags() -> array<CName>;

  public final native func GetVisualTagsCount() -> Int32;

  public final native func GetVisualTagsItem(index: Int32) -> CName;

  public final native func VisualTagsContains(item: CName) -> Bool;

  public final native func BuyPrice(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetBuyPriceCount() -> Int32;

  public final native func GetBuyPriceItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetBuyPriceItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func BuyPriceContains(item: wref<StatModifier_Record>) -> Bool;

  public final native func OnLooted(out outList: array<wref<GameplayLogicPackage_Record>>) -> Void;

  public final native func GetOnLootedCount() -> Int32;

  public final native func GetOnLootedItem(index: Int32) -> wref<GameplayLogicPackage_Record>;

  public final native func GetOnLootedItemHandle(index: Int32) -> wref<GameplayLogicPackage_Record>;

  public final native func OnLootedContains(item: wref<GameplayLogicPackage_Record>) -> Bool;

  public final native func PlacementSlots(out outList: array<wref<AttachmentSlot_Record>>) -> Void;

  public final native func GetPlacementSlotsCount() -> Int32;

  public final native func GetPlacementSlotsItem(index: Int32) -> wref<AttachmentSlot_Record>;

  public final native func GetPlacementSlotsItemHandle(index: Int32) -> wref<AttachmentSlot_Record>;

  public final native func PlacementSlotsContains(item: wref<AttachmentSlot_Record>) -> Bool;

  public final native func SlotPartList(out outList: array<wref<SlotItemPartListElement_Record>>) -> Void;

  public final native func GetSlotPartListCount() -> Int32;

  public final native func GetSlotPartListItem(index: Int32) -> wref<SlotItemPartListElement_Record>;

  public final native func GetSlotPartListItemHandle(index: Int32) -> wref<SlotItemPartListElement_Record>;

  public final native func SlotPartListContains(item: wref<SlotItemPartListElement_Record>) -> Bool;

  public final native func RequiredSlots(out outList: array<wref<ItemRequiredSlot_Record>>) -> Void;

  public final native func GetRequiredSlotsCount() -> Int32;

  public final native func GetRequiredSlotsItem(index: Int32) -> wref<ItemRequiredSlot_Record>;

  public final native func GetRequiredSlotsItemHandle(index: Int32) -> wref<ItemRequiredSlot_Record>;

  public final native func RequiredSlotsContains(item: wref<ItemRequiredSlot_Record>) -> Bool;

  public final native func Parts(out outList: array<wref<Item_Record>>) -> Void;

  public final native func GetPartsCount() -> Int32;

  public final native func GetPartsItem(index: Int32) -> wref<Item_Record>;

  public final native func GetPartsItemHandle(index: Int32) -> wref<Item_Record>;

  public final native func PartsContains(item: wref<Item_Record>) -> Bool;

  public final native func Connections(out outList: array<wref<ItemPartConnection_Record>>) -> Void;

  public final native func GetConnectionsCount() -> Int32;

  public final native func GetConnectionsItem(index: Int32) -> wref<ItemPartConnection_Record>;

  public final native func GetConnectionsItemHandle(index: Int32) -> wref<ItemPartConnection_Record>;

  public final native func ConnectionsContains(item: wref<ItemPartConnection_Record>) -> Bool;

  public final native func AnimationParameters() -> array<CName>;

  public final native func GetAnimationParametersCount() -> Int32;

  public final native func GetAnimationParametersItem(index: Int32) -> CName;

  public final native func AnimationParametersContains(item: CName) -> Bool;

  public final native func DisplayName() -> CName;

  public final native func DropObject() -> CName;

  public final native func AudioName() -> CName;

  public final native func EquipSoundMetadata() -> CName;

  public final native func AudioSwitchValue() -> CName;

  public final native func EntityName() -> CName;

  public final native func AppearanceName() -> CName;

  public final native func AudioSwitchName() -> CName;

  public final native func AnimFeatureName() -> CName;

  public final native func StateMachineName() -> CName;

  public final native func AppearanceResourceName() -> CName;

  public final native func AnimName() -> CName;

  public final native func AnimSetResource() -> ResRef;

  public final native func MovementPattern() -> CName;

  public final native func LocalizedDescription() -> CName;

  public final native func CameraForward() -> Vector3;

  public final native func CameraUp() -> Vector3;

  public final native func GarmentOffset() -> Int32;

  public final native func Mass() -> Float;

  public final native func IsSingleInstance() -> Bool;

  public final native func IsPart() -> Bool;

  public final native func UseNewSpawnMethod() -> Bool;

  public final native func IsGarment() -> Bool;

  public final native func IsCustomizable() -> Bool;

  public final native func EnableNpcRPGData() -> Bool;

  public final native func ReplicateWhenNotActive() -> Bool;
}

public native class StatusEffect_Record extends TweakDBRecord {

  public final native func MaxStacks() -> wref<StatModifierGroup_Record>;

  public final native func MaxStacksHandle() -> ref<StatModifierGroup_Record>;

  public final native func RemoveAllStacksWhenDurationEndsStatModifiers() -> wref<StatModifierGroup_Record>;

  public final native func RemoveAllStacksWhenDurationEndsStatModifiersHandle() -> ref<StatModifierGroup_Record>;

  public final native func StatusEffectType() -> wref<StatusEffectType_Record>;

  public final native func StatusEffectTypeHandle() -> ref<StatusEffectType_Record>;

  public final native func AIData() -> wref<StatusEffectAIData_Record>;

  public final native func AIDataHandle() -> ref<StatusEffectAIData_Record>;

  public final native func UiData() -> wref<StatusEffectUIData_Record>;

  public final native func UiDataHandle() -> ref<StatusEffectUIData_Record>;

  public final native func Duration() -> wref<StatModifierGroup_Record>;

  public final native func DurationHandle() -> ref<StatModifierGroup_Record>;

  public final native func PlayerData() -> wref<StatusEffectPlayerData_Record>;

  public final native func PlayerDataHandle() -> ref<StatusEffectPlayerData_Record>;

  public final native func DebugTags() -> array<CName>;

  public final native func GetDebugTagsCount() -> Int32;

  public final native func GetDebugTagsItem(index: Int32) -> CName;

  public final native func DebugTagsContains(item: CName) -> Bool;

  public final native func GameplayTags() -> array<CName>;

  public final native func GetGameplayTagsCount() -> Int32;

  public final native func GetGameplayTagsItem(index: Int32) -> CName;

  public final native func GameplayTagsContains(item: CName) -> Bool;

  public final native func SFX(out outList: array<wref<StatusEffectFX_Record>>) -> Void;

  public final native func GetSFXCount() -> Int32;

  public final native func GetSFXItem(index: Int32) -> wref<StatusEffectFX_Record>;

  public final native func GetSFXItemHandle(index: Int32) -> wref<StatusEffectFX_Record>;

  public final native func SFXContains(item: wref<StatusEffectFX_Record>) -> Bool;

  public final native func VFX(out outList: array<wref<StatusEffectFX_Record>>) -> Void;

  public final native func GetVFXCount() -> Int32;

  public final native func GetVFXItem(index: Int32) -> wref<StatusEffectFX_Record>;

  public final native func GetVFXItemHandle(index: Int32) -> wref<StatusEffectFX_Record>;

  public final native func VFXContains(item: wref<StatusEffectFX_Record>) -> Bool;

  public final native func ImmunityStats(out outList: array<wref<Stat_Record>>) -> Void;

  public final native func GetImmunityStatsCount() -> Int32;

  public final native func GetImmunityStatsItem(index: Int32) -> wref<Stat_Record>;

  public final native func GetImmunityStatsItemHandle(index: Int32) -> wref<Stat_Record>;

  public final native func ImmunityStatsContains(item: wref<Stat_Record>) -> Bool;

  public final native func Packages(out outList: array<wref<GameplayLogicPackage_Record>>) -> Void;

  public final native func GetPackagesCount() -> Int32;

  public final native func GetPackagesItem(index: Int32) -> wref<GameplayLogicPackage_Record>;

  public final native func GetPackagesItemHandle(index: Int32) -> wref<GameplayLogicPackage_Record>;

  public final native func PackagesContains(item: wref<GameplayLogicPackage_Record>) -> Bool;

  public final native func AdditionalParam() -> CName;

  public final native func StopActiveSfxOnDeactivate() -> Bool;

  public final native func RemoveOnStoryTier() -> Bool;

  public final native func IsAffectedByTimeDilationPlayer() -> Bool;

  public final native func Savable() -> Bool;

  public final native func RemoveAllStacksWhenDurationEnds() -> Bool;

  public final native func IsAffectedByTimeDilationNPC() -> Bool;

  public final native func Replicated() -> Bool;
}

public native class StatModifier_Record extends TweakDBRecord {

  public final native func StatType() -> wref<Stat_Record>;

  public final native func StatTypeHandle() -> ref<Stat_Record>;

  public final native func ModifierType() -> CName;
}

public native class ConstantStatModifier_Record extends StatModifier_Record {

  public final native func Value() -> Float;
}

public native class DeviceScreenType_Record extends TweakDBRecord {

  public final native func Ratio() -> wref<WidgetRatio_Record>;

  public final native func RatioHandle() -> ref<WidgetRatio_Record>;

  public final native func ContentRatio() -> wref<WidgetRatio_Record>;

  public final native func ContentRatioHandle() -> ref<WidgetRatio_Record>;

  public final native func LibraryPath() -> ResRef;
}

public native class ContinuousEffector_Record extends Effector_Record {

  public final native func DelayTime() -> Float;
}

public native class ItemAction_Record extends ObjectAction_Record {

  public final native func RemoveAfterUse() -> Bool;
}

public native class EquipmentArea_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func LocalizedName() -> String;

  public final native func EnumName() -> CName;

  public final native func NumberOfEquipSlots() -> Int32;

  public final native func Locked() -> Bool;

  public final native func Type() -> gamedataEquipmentArea;
}

public native class ContentAssignment_Record extends TweakDBRecord {

  public final native func PowerLevelMod() -> wref<StatModifier_Record>;

  public final native func PowerLevelModHandle() -> ref<StatModifier_Record>;

  public final native func QuestType() -> wref<NPCQuestAffiliation_Record>;

  public final native func QuestTypeHandle() -> ref<NPCQuestAffiliation_Record>;
}

public native class DriveHelper_Record extends TweakDBRecord {

  public final native func Type() -> wref<DriveHelperType_Record>;

  public final native func TypeHandle() -> ref<DriveHelperType_Record>;
}

public native class WeaponItem_Record extends Item_Record {

  public final native func Ammo() -> wref<Item_Record>;

  public final native func AmmoHandle() -> ref<Item_Record>;

  public final native func FxPackageQuickMelee() -> wref<WeaponFxPackage_Record>;

  public final native func FxPackageQuickMeleeHandle() -> ref<WeaponFxPackage_Record>;

  public final native func HudIcon() -> wref<UIIcon_Record>;

  public final native func HudIconHandle() -> ref<UIIcon_Record>;

  public final native func RangedAttacks() -> wref<RangedAttackPackage_Record>;

  public final native func RangedAttacksHandle() -> ref<RangedAttackPackage_Record>;

  public final native func SecondaryTriggerMode() -> wref<TriggerMode_Record>;

  public final native func SecondaryTriggerModeHandle() -> ref<TriggerMode_Record>;

  public final native func Evolution() -> wref<WeaponEvolution_Record>;

  public final native func EvolutionHandle() -> ref<WeaponEvolution_Record>;

  public final native func Manufacturer() -> wref<WeaponManufacturer_Record>;

  public final native func ManufacturerHandle() -> ref<WeaponManufacturer_Record>;

  public final native func PrimaryTriggerMode() -> wref<TriggerMode_Record>;

  public final native func PrimaryTriggerModeHandle() -> ref<TriggerMode_Record>;

  public final native func FxPackage() -> wref<WeaponFxPackage_Record>;

  public final native func FxPackageHandle() -> ref<WeaponFxPackage_Record>;

  public final native func DamageType() -> wref<DamageType_Record>;

  public final native func DamageTypeHandle() -> ref<DamageType_Record>;

  public final native func HolsteredItem() -> wref<Item_Record>;

  public final native func HolsteredItemHandle() -> ref<Item_Record>;

  public final native func Attacks(out outList: array<wref<Attack_Record>>) -> Void;

  public final native func GetAttacksCount() -> Int32;

  public final native func GetAttacksItem(index: Int32) -> wref<Attack_Record>;

  public final native func GetAttacksItemHandle(index: Int32) -> wref<Attack_Record>;

  public final native func AttacksContains(item: wref<Attack_Record>) -> Bool;

  public final native func TriggerModes(out outList: array<wref<TriggerMode_Record>>) -> Void;

  public final native func GetTriggerModesCount() -> Int32;

  public final native func GetTriggerModesItem(index: Int32) -> wref<TriggerMode_Record>;

  public final native func GetTriggerModesItemHandle(index: Int32) -> wref<TriggerMode_Record>;

  public final native func TriggerModesContains(item: wref<TriggerMode_Record>) -> Bool;

  public final native func ShootingPatternPackages(out outList: array<wref<AIPatternsPackage_Record>>) -> Void;

  public final native func GetShootingPatternPackagesCount() -> Int32;

  public final native func GetShootingPatternPackagesItem(index: Int32) -> wref<AIPatternsPackage_Record>;

  public final native func GetShootingPatternPackagesItemHandle(index: Int32) -> wref<AIPatternsPackage_Record>;

  public final native func ShootingPatternPackagesContains(item: wref<AIPatternsPackage_Record>) -> Bool;

  public final native func AudioWeaponConfiguration() -> CName;

  public final native func EffectiveRangeFalloffCurve() -> CName;

  public final native func NPCAnimWrapperWeightOverride() -> CName;

  public final native func PreviewEffectTag() -> CName;

  public final native func EffectiveRangeCurve() -> CName;

  public final native func ProjectileEaseOutCurveName() -> CName;

  public final native func PreviewEffectName() -> CName;

  public final native func IkOffset() -> Vector3;

  public final native func ForcedMinHitReaction() -> Int32;

  public final native func UninterruptibleEmptyReloadStart() -> Float;

  public final native func UninterruptibleReloadStart() -> Float;

  public final native func BaseEmptyReloadTime() -> Float;

  public final native func BaseReloadTime() -> Float;

  public final native func UseForcedTBHZOffset() -> Bool;

  public final native func IsIKEnabled() -> Bool;
}

public native class BaseSign_Record extends TweakDBRecord {

  public final native func Resource() -> ResRef;

  public final native func StyleStateName() -> CName;

  public final native func IsUnique() -> Bool;
}

public native class Gadget_Record extends WeaponItem_Record {
}

public native class GrenadeDeliveryMethod_Record extends TweakDBRecord {

  public final native func Type() -> wref<GrenadeDeliveryMethodType_Record>;

  public final native func TypeHandle() -> ref<GrenadeDeliveryMethodType_Record>;

  public final native func Bounciness() -> Float;

  public final native func DetonationTimer() -> Float;

  public final native func TrackingRadius() -> Float;

  public final native func InitialVelocity() -> Float;

  public final native func InitialQuickThrowVelocity() -> Float;

  public final native func AccelerationZ() -> Float;
}

public native class InteractionBase_Record extends TweakDBRecord {

  public final native func Name() -> String;

  public final native func Action() -> String;

  public final native func PrereqID() -> String;

  public final native func CaptionIcon() -> wref<ChoiceCaptionIconPart_Record>;

  public final native func CaptionIconHandle() -> ref<ChoiceCaptionIconPart_Record>;

  public final native func Caption() -> CName;

  public final native func Description() -> CName;
}

public native class Query_Record extends TweakDBRecord {

  public final native func RecordType() -> CName;
}

public native class ItemQuery_Record extends Query_Record {

  public final native func Tags() -> array<CName>;

  public final native func GetTagsCount() -> Int32;

  public final native func GetTagsItem(index: Int32) -> CName;

  public final native func TagsContains(item: CName) -> Bool;

  public final native func TagsToExclude() -> array<CName>;

  public final native func GetTagsToExcludeCount() -> Int32;

  public final native func GetTagsToExcludeItem(index: Int32) -> CName;

  public final native func TagsToExcludeContains(item: CName) -> Bool;
}

public native class ObjectActionCost_Record extends TweakDBRecord {

  public final native func CostMods(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetCostModsCount() -> Int32;

  public final native func GetCostModsItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetCostModsItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func CostModsContains(item: wref<StatModifier_Record>) -> Bool;
}

public native class StatPrereq_Record extends IPrereq_Record {

  public final native func StatType() -> CName;

  public final native func ComparisonType() -> CName;

  public final native func ValueToCheck() -> Float;
}

public native class LootTableElement_Record extends TweakDBRecord {

  public final native func PrereqID() -> wref<Prereq_Record>;

  public final native func PrereqIDHandle() -> ref<Prereq_Record>;

  public final native func StatModifiers(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetStatModifiersCount() -> Int32;

  public final native func GetStatModifiersItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetStatModifiersItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func StatModifiersContains(item: wref<StatModifier_Record>) -> Bool;

  public final native func DropChance() -> Float;

  public final native func DropCountMin() -> Int32;

  public final native func DropCountMax() -> Int32;
}

public native class UIIcon_Record extends TweakDBRecord {

  public final native func AtlasResourcePath() -> ResRef;

  public final native func AtlasPartName() -> CName;
}

public native class Accuracy_Record extends TweakDBRecord {

  public final native func AccuracyDropCooldown() -> Float;

  public final native func MinDistanceToRunCooldown() -> Float;
}

public native class Base_MappinDefinition_Record extends TweakDBRecord {

  public final native func VisibilityRange() -> Float;

  public final native func ShowOnMinimap() -> Bool;

  public final native func ShowOnMap() -> Bool;

  public final native func ShowInWorld() -> Bool;
}

public native class MappinUIRuntimeProfile_Record extends TweakDBRecord {

  public final native func ScaleDistanceScanningParams() -> wref<MappinUIParamGroup_Record>;

  public final native func ScaleDistanceScanningParamsHandle() -> ref<MappinUIParamGroup_Record>;

  public final native func ClampingParams() -> wref<MappinClampingSettings_Record>;

  public final native func ClampingParamsHandle() -> ref<MappinClampingSettings_Record>;

  public final native func OpacityDistanceParams() -> wref<MappinUIParamGroup_Record>;

  public final native func OpacityDistanceParamsHandle() -> ref<MappinUIParamGroup_Record>;

  public final native func ScaleDistanceParams() -> wref<MappinUIParamGroup_Record>;

  public final native func ScaleDistanceParamsHandle() -> ref<MappinUIParamGroup_Record>;

  public final native func OpacityAngleParams() -> wref<MappinUIParamGroup_Record>;

  public final native func OpacityAngleParamsHandle() -> ref<MappinUIParamGroup_Record>;

  public final native func OpacityCustomParams() -> wref<MappinUICustomOpacityParams_Record>;

  public final native func OpacityCustomParamsHandle() -> ref<MappinUICustomOpacityParams_Record>;

  public final native func VisibleInTier() -> array<Bool>;

  public final native func GetVisibleInTierCount() -> Int32;

  public final native func GetVisibleInTierItem(index: Int32) -> Bool;

  public final native func VisibleInTierContains(item: Bool) -> Bool;

  public final native func WorldOffset() -> Vector3;

  public final native func ClampEllipseSize() -> Vector2;

  public final native func ClampRectMargin() -> Vector2;

  public final native func ScreenOffset() -> Vector2;

  public final native func Priority() -> Int32;

  public final native func ShowDistanceMinRange() -> Float;

  public final native func ShowNameMinRange() -> Float;

  public final native func HoverRadius() -> Float;

  public final native func ShowDistance() -> Bool;

  public final native func DynamicClamping() -> Bool;

  public final native func ClampY() -> Bool;

  public final native func VisibleInScanning() -> Bool;

  public final native func ClampX() -> Bool;

  public final native func VisibleInBraindance() -> Bool;

  public final native func ScaleByDistance() -> Bool;

  public final native func KeepNameplate() -> Bool;

  public final native func UseQuestProperties() -> Bool;

  public final native func ShowTrackedIcon() -> Bool;
}

public native class MiniGame_SymbolsWithRarity_Record extends TweakDBRecord {

  public final native func Name() -> String;

  public final native func Symbol() -> String;

  public final native func Probability() -> Float;
}

public native class PoolValueModifier_Record extends TweakDBRecord {

  public final native func StartDelay() -> Float;

  public final native func ValuePerSec() -> Float;

  public final native func RangeBegin() -> Float;

  public final native func RangeEnd() -> Float;

  public final native func Enabled() -> Bool;

  public final native func UsingPointValues() -> Bool;

  public final native func DelayOnChange() -> Bool;
}

public native class NPCEquipmentGroupEntry_Record extends TweakDBRecord {
}

public native class LCDScreen_Record extends BaseSign_Record {

  public final native func Message() -> wref<ScreenMessageData_Record>;

  public final native func MessageHandle() -> ref<ScreenMessageData_Record>;
}

public native class PhotoModeItem_Record extends TweakDBRecord {

  public final native func DisplayName() -> CName;

  public final native func Locked() -> Bool;
}

public native class ReactionPreset_Record extends TweakDBRecord {

  public final native func ReactionGroup() -> String;

  public final native func EnumComment() -> String;

  public final native func StatModifiers(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetStatModifiersCount() -> Int32;

  public final native func GetStatModifiersItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetStatModifiersItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func StatModifiersContains(item: wref<StatModifier_Record>) -> Bool;

  public final native func Rules(out outList: array<wref<Rule_Record>>) -> Void;

  public final native func GetRulesCount() -> Int32;

  public final native func GetRulesItem(index: Int32) -> wref<Rule_Record>;

  public final native func GetRulesItemHandle(index: Int32) -> wref<Rule_Record>;

  public final native func RulesContains(item: wref<Rule_Record>) -> Bool;

  public final native func PresetMapper(out outList: array<wref<PresetMapper_Record>>) -> Void;

  public final native func GetPresetMapperCount() -> Int32;

  public final native func GetPresetMapperItem(index: Int32) -> wref<PresetMapper_Record>;

  public final native func GetPresetMapperItemHandle(index: Int32) -> wref<PresetMapper_Record>;

  public final native func PresetMapperContains(item: wref<PresetMapper_Record>) -> Bool;

  public final native func EnumName() -> CName;

  public final native func FearThreshold() -> Float;

  public final native func AggressiveThreshold() -> Float;

  public final native func IsAggressive() -> Bool;

  public final native func Type() -> gamedataReactionPresetType;
}

public native class ProjectileLaunch_Record extends TweakDBRecord {

  public final native func Type() -> wref<ProjectileLaunchMode_Record>;

  public final native func TypeHandle() -> ref<ProjectileLaunchMode_Record>;

  public final native func ApplyAdditiveProjectileSpiraling() -> Bool;

  public final native func CanTrackDevices() -> Bool;
}

public native class StatModifierGroup_Record extends TweakDBRecord {

  public final native func StatModsLimitModifier() -> wref<StatModifier_Record>;

  public final native func StatModsLimitModifierHandle() -> ref<StatModifier_Record>;

  public final native func StatModifiers(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetStatModifiersCount() -> Int32;

  public final native func GetStatModifiersItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetStatModifiersItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func StatModifiersContains(item: wref<StatModifier_Record>) -> Bool;

  public final native func StatModsLimit() -> Int32;

  public final native func DrawBasedOnStatType() -> Bool;
}

public native class Character_Record extends SpawnableObject_Record {

  public final native func CpoCharacterBuild() -> String;

  public final native func DevNotes() -> String;

  public final native func VendorID() -> wref<Vendor_Record>;

  public final native func VendorIDHandle() -> ref<Vendor_Record>;

  public final native func Driving() -> wref<BaseDrivingParameters_Record>;

  public final native func DrivingHandle() -> ref<BaseDrivingParameters_Record>;

  public final native func ThreatTrackingPreset() -> wref<ThreatTrackingPresetBase_Record>;

  public final native func ThreatTrackingPresetHandle() -> ref<ThreatTrackingPresetBase_Record>;

  public final native func LootDrop() -> wref<LootTable_Record>;

  public final native func LootDropHandle() -> ref<LootTable_Record>;

  public final native func SquadParamsID() -> wref<AISquadParams_Record>;

  public final native func SquadParamsIDHandle() -> ref<AISquadParams_Record>;

  public final native func BountyDrawTable() -> wref<BountyDrawTable_Record>;

  public final native func BountyDrawTableHandle() -> ref<BountyDrawTable_Record>;

  public final native func SecondaryEquipment() -> wref<NPCEquipmentGroup_Record>;

  public final native func SecondaryEquipmentHandle() -> ref<NPCEquipmentGroup_Record>;

  public final native func CharacterType() -> wref<NPCType_Record>;

  public final native func CharacterTypeHandle() -> ref<NPCType_Record>;

  public final native func PrimaryEquipment() -> wref<NPCEquipmentGroup_Record>;

  public final native func PrimaryEquipmentHandle() -> ref<NPCEquipmentGroup_Record>;

  public final native func UiNameplate() -> wref<UINameplate_Record>;

  public final native func UiNameplateHandle() -> ref<UINameplate_Record>;

  public final native func ArchetypeData() -> wref<ArchetypeData_Record>;

  public final native func ArchetypeDataHandle() -> ref<ArchetypeData_Record>;

  public final native func MinigameInstance() -> wref<Minigame_Def_Record>;

  public final native func MinigameInstanceHandle() -> ref<Minigame_Def_Record>;

  public final native func Quest() -> wref<NPCQuestAffiliation_Record>;

  public final native func QuestHandle() -> ref<NPCQuestAffiliation_Record>;

  public final native func DefaultEquipment() -> wref<NPCEquipmentItem_Record>;

  public final native func DefaultEquipmentHandle() -> ref<NPCEquipmentItem_Record>;

  public final native func CrowdMemberSettings() -> wref<CrowdSettingsPackageBase_Record>;

  public final native func CrowdMemberSettingsHandle() -> ref<CrowdSettingsPackageBase_Record>;

  public final native func Rarity() -> wref<NPCRarity_Record>;

  public final native func RarityHandle() -> ref<NPCRarity_Record>;

  public final native func ActionMap() -> wref<ActionMap_Record>;

  public final native func ActionMapHandle() -> ref<ActionMap_Record>;

  public final native func DefaultCrosshair() -> wref<Crosshair_Record>;

  public final native func DefaultCrosshairHandle() -> ref<Crosshair_Record>;

  public final native func SensePreset() -> wref<SensePreset_Record>;

  public final native func SensePresetHandle() -> ref<SensePreset_Record>;

  public final native func ContentAssignment() -> wref<ContentAssignment_Record>;

  public final native func ContentAssignmentHandle() -> ref<ContentAssignment_Record>;

  public final native func Affiliation() -> wref<Affiliation_Record>;

  public final native func AffiliationHandle() -> ref<Affiliation_Record>;

  public final native func ReactionPreset() -> wref<ReactionPreset_Record>;

  public final native func ReactionPresetHandle() -> ref<ReactionPreset_Record>;

  public final native func IdleActions() -> wref<AIActionSmartComposite_Record>;

  public final native func IdleActionsHandle() -> ref<AIActionSmartComposite_Record>;

  public final native func ScannerModulePreset() -> wref<ScannerModuleVisibilityPreset_Record>;

  public final native func ScannerModulePresetHandle() -> ref<ScannerModuleVisibilityPreset_Record>;

  public final native func OnSpawnGLPs(out outList: array<wref<GameplayLogicPackage_Record>>) -> Void;

  public final native func GetOnSpawnGLPsCount() -> Int32;

  public final native func GetOnSpawnGLPsItem(index: Int32) -> wref<GameplayLogicPackage_Record>;

  public final native func GetOnSpawnGLPsItemHandle(index: Int32) -> wref<GameplayLogicPackage_Record>;

  public final native func OnSpawnGLPsContains(item: wref<GameplayLogicPackage_Record>) -> Bool;

  public final native func Genders(out outList: array<wref<GenderEntity_Record>>) -> Void;

  public final native func GetGendersCount() -> Int32;

  public final native func GetGendersItem(index: Int32) -> wref<GenderEntity_Record>;

  public final native func GetGendersItemHandle(index: Int32) -> wref<GenderEntity_Record>;

  public final native func GendersContains(item: wref<GenderEntity_Record>) -> Bool;

  public final native func Abilities(out outList: array<wref<GameplayAbility_Record>>) -> Void;

  public final native func GetAbilitiesCount() -> Int32;

  public final native func GetAbilitiesItem(index: Int32) -> wref<GameplayAbility_Record>;

  public final native func GetAbilitiesItemHandle(index: Int32) -> wref<GameplayAbility_Record>;

  public final native func AbilitiesContains(item: wref<GameplayAbility_Record>) -> Bool;

  public final native func Items(out outList: array<wref<InventoryItem_Record>>) -> Void;

  public final native func GetItemsCount() -> Int32;

  public final native func GetItemsItem(index: Int32) -> wref<InventoryItem_Record>;

  public final native func GetItemsItemHandle(index: Int32) -> wref<InventoryItem_Record>;

  public final native func ItemsContains(item: wref<InventoryItem_Record>) -> Bool;

  public final native func CrowdAppearanceNames() -> array<CName>;

  public final native func GetCrowdAppearanceNamesCount() -> Int32;

  public final native func GetCrowdAppearanceNamesItem(index: Int32) -> CName;

  public final native func CrowdAppearanceNamesContains(item: CName) -> Bool;

  public final native func EquipmentAreas(out outList: array<wref<EquipmentArea_Record>>) -> Void;

  public final native func GetEquipmentAreasCount() -> Int32;

  public final native func GetEquipmentAreasItem(index: Int32) -> wref<EquipmentArea_Record>;

  public final native func GetEquipmentAreasItemHandle(index: Int32) -> wref<EquipmentArea_Record>;

  public final native func EquipmentAreasContains(item: wref<EquipmentArea_Record>) -> Bool;

  public final native func AttachmentSlots(out outList: array<wref<AttachmentSlot_Record>>) -> Void;

  public final native func GetAttachmentSlotsCount() -> Int32;

  public final native func GetAttachmentSlotsItem(index: Int32) -> wref<AttachmentSlot_Record>;

  public final native func GetAttachmentSlotsItemHandle(index: Int32) -> wref<AttachmentSlot_Record>;

  public final native func AttachmentSlotsContains(item: wref<AttachmentSlot_Record>) -> Bool;

  public final native func ItemGroups(out outList: array<wref<InventoryItemGroup_Record>>) -> Void;

  public final native func GetItemGroupsCount() -> Int32;

  public final native func GetItemGroupsItem(index: Int32) -> wref<InventoryItemGroup_Record>;

  public final native func GetItemGroupsItemHandle(index: Int32) -> wref<InventoryItemGroup_Record>;

  public final native func ItemGroupsContains(item: wref<InventoryItemGroup_Record>) -> Bool;

  public final native func SecuritySquad() -> CName;

  public final native func DisplayName() -> CName;

  public final native func LootBagEntity() -> CName;

  public final native func GlobalSquad() -> CName;

  public final native func ArchetypeName() -> CName;

  public final native func AudioResourceName() -> CName;

  public final native func CommunitySquad() -> CName;

  public final native func DisplayDescription() -> CName;

  public final native func AlternativeDisplayName() -> CName;

  public final native func StateMachineName() -> CName;

  public final native func BaseAttitudeGroup() -> CName;

  public final native func AlternativeFullDisplayName() -> CName;

  public final native func AudioMeleeMaterial() -> CName;

  public final native func FullDisplayName() -> CName;

  public final native func CpoClassName() -> CName;

  public final native func VoiceTag() -> CName;

  public final native func ForcedTBHZOffset() -> Float;

  public final native func Level() -> Int32;

  public final native func IsChild() -> Bool;

  public final native func DespawnChildCommunityWhenPlayerInVehicle() -> Bool;

  public final native func IsCrowd() -> Bool;

  public final native func CanHaveGenericTalk() -> Bool;

  public final native func DropsAmmoOnDeath() -> Bool;

  public final native func DropsWeaponOnDeath() -> Bool;

  public final native func StaticCommunityAppearancesDistributionEnabled() -> Bool;

  public final native func IsBumpable() -> Bool;

  public final native func IsLightCrowd() -> Bool;

  public final native func ForceCanHaveGenericTalk() -> Bool;

  public final native func EnableSensesOnStart() -> Bool;

  public final native func HasDirectionalStarts() -> Bool;

  public final native func DropsMoneyOnDeath() -> Bool;

  public final native func UseForcedTBHZOffset() -> Bool;

  public final native func SkipDisplayArchetype() -> Bool;
}

public native class Device_Record extends BaseObject_Record {

  public final native func RPGActions(out outList: array<wref<RPGAction_Record>>) -> Void;

  public final native func GetRPGActionsCount() -> Int32;

  public final native func GetRPGActionsItem(index: Int32) -> wref<RPGAction_Record>;

  public final native func GetRPGActionsItemHandle(index: Int32) -> wref<RPGAction_Record>;

  public final native func RPGActionsContains(item: wref<RPGAction_Record>) -> Bool;

  public final native func AudioResourceName() -> CName;
}

public native class VehicleFxWheelsDecalsMaterial_Record extends TweakDBRecord {

  public final native func Material() -> wref<Material_Record>;

  public final native func MaterialHandle() -> ref<Material_Record>;

  public final native func Skid_marks_decal() -> ResRef;

  public final native func Tire_tracks_decal() -> ResRef;
}

public native class VehicleWheelDrivingSetup_Record extends TweakDBRecord {

  public final native func FrontPreset() -> wref<VehicleWheelDrivingPreset_Record>;

  public final native func FrontPresetHandle() -> ref<VehicleWheelDrivingPreset_Record>;

  public final native func BackPreset() -> wref<VehicleWheelDrivingPreset_Record>;

  public final native func BackPresetHandle() -> ref<VehicleWheelDrivingPreset_Record>;
}

public native class VendorWare_Record extends TweakDBRecord {

  public final native func AvailabilityPrereq() -> wref<IPrereq_Record>;

  public final native func AvailabilityPrereqHandle() -> ref<IPrereq_Record>;

  public final native func GenerationPrereqs(out outList: array<wref<IPrereq_Record>>) -> Void;

  public final native func GetGenerationPrereqsCount() -> Int32;

  public final native func GetGenerationPrereqsItem(index: Int32) -> wref<IPrereq_Record>;

  public final native func GetGenerationPrereqsItemHandle(index: Int32) -> wref<IPrereq_Record>;

  public final native func GenerationPrereqsContains(item: wref<IPrereq_Record>) -> Bool;

  public final native func Quantity(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetQuantityCount() -> Int32;

  public final native func GetQuantityItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetQuantityItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func QuantityContains(item: wref<StatModifier_Record>) -> Bool;

  public final native func ForceQuality() -> CName;
}

public native class gamePuppet extends gamePuppetBase {

  public final native const func GetVelocity() -> Vector4;

  public final native const func GetSenses() -> ref<SenseComponent>;

  public final native const func GetAttitude() -> ref<AttitudeAgent>;

  public final native const func GetVisibleObject() -> ref<VisibleObjectComponent>;

  public final native const func GetBlackboard() -> ref<IBlackboard>;

  public final native const func GetTargetTracker() -> ref<TargetTrackerComponent>;

  public final native const func HideIrreversibly() -> Void;

  public final native const func SetCPOMissionData(hasCPOMissionData: Bool) -> Void;

  public final native const func HasCPOMissionData() -> Bool;

  public final native const func SetCPOMissionVoted(deviceGroup: CName, hasVoted: Bool) -> Void;

  public final native const func GetCPOMissionVoted(deviceGroup: CName) -> Bool;

  public final native const func GetResolvedGenderName() -> CName;

  public final native const func GetBodyType() -> CName;

  public final native const func GenerateLoot() -> Void;

  public final native const func GenerateLootWithStats(lootModifiers: array<ref<gameStatModifierData>>) -> Void;

  public final native const func DropWeapons() -> Void;

  public final native const func DropAmmo() -> Void;

  public final native const func HasRuntimeAnimsetTags(tagList: array<CName>) -> Bool;

  public final native const func HasCrowdStaticLOD() -> Bool;

  public final native const func IsLooted() -> Bool;

  public final native func CacheLootForDroping() -> Void;

  public final native func DropLootBag() -> Void;

  public final native func InitializeBaseInventory() -> Void;

  public final native func WasLootGenerated() -> Bool;

  public final native func GetCurrentNavmeshPosition(position: script_ref<Vector4>) -> navNaviPositionType;

  public final native func CanRagdoll() -> Bool;

  public final native func GetLastValidNavmeshPoint() -> Vector4;
}

public abstract native class IComponent extends IScriptable {

  public final native const func GetEntity() -> wref<Entity>;

  protected final native const func FindComponentByName(componentName: CName) -> wref<IComponent>;

  public final native const func GetName() -> CName;

  public final native const func IsEnabled() -> Bool;

  public final native func Toggle(on: Bool) -> Void;

  public final native func QueueEntityEvent(ev: ref<Event>) -> Void;

  protected final native func RegisterRenderDebug(filterName: String, functionName: CName) -> Void;
}

public abstract native class IPlacedComponent extends IComponent {

  public final native func GetLocalToWorld() -> Matrix;

  public final native func GetInitialPosition() -> Vector4;

  public final native func GetInitialOrientation() -> Quaternion;

  public final native func GetInitialTransform() -> Matrix;

  public final native func GetLocalPosition() -> Vector4;

  public final native func GetLocalOrientation() -> Quaternion;

  public final native func GetLocalTransform() -> Matrix;

  public final native func SetLocalPosition(pos: Vector4) -> Void;

  public final native func SetLocalOrientation(rot: Quaternion) -> Void;

  public final native func SetLocalTransform(pos: Vector4, rot: Quaternion) -> Void;
}

public native class GameComponent extends IComponent {

  protected native const func GetPS() -> ref<GameComponentPS>;

  protected final native const func GetBasePS() -> ref<GameComponentPS>;

  public final native const func GetPersistentID() -> PersistentID;
}

public class DeathTaskData extends ScriptTaskData {

  public let instigator: wref<GameObject>;
}

public final native class StatPoolsSystem extends IStatPoolsSystem {

  public final native func RequestAddingStatPool(objID: StatsObjectID, statPoolRecordID: TweakDBID, opt forceCreateStatPools: Bool) -> Void;

  public final native func RequestRemovingStatPool(objID: StatsObjectID, statPoolType: gamedataStatPoolType) -> Void;

  public final native func GetStatPoolMaxPointValue(objID: StatsObjectID, statPoolType: gamedataStatPoolType) -> Float;

  public final native func GetStatPoolValue(objID: StatsObjectID, statPoolType: gamedataStatPoolType, opt perc: Bool) -> Float;

  public final native func GetStatPoolValueCustomLimit(objID: StatsObjectID, statPoolType: gamedataStatPoolType, opt perc: Bool) -> Float;

  public final native func GetBonus(objID: StatsObjectID, statPoolType: gamedataStatPoolType, opt perc: Bool) -> Float;

  public final native func IsStatPoolAdded(objID: StatsObjectID, statPoolType: gamedataStatPoolType) -> Bool;

  public final native func HasActiveStatPool(objID: StatsObjectID, statPoolType: gamedataStatPoolType) -> Bool;

  public final native func HasStatPoolValueReachedMin(objID: StatsObjectID, statPoolType: gamedataStatPoolType) -> Bool;

  public final native func HasStatPoolValueReachedMax(objID: StatsObjectID, statPoolType: gamedataStatPoolType) -> Bool;

  public final native func HasStatPoolValueReachedCustomLimit(objID: StatsObjectID, statPoolType: gamedataStatPoolType) -> Bool;

  public final native func RequestSettingStatPoolMinValue(objID: StatsObjectID, statPoolType: gamedataStatPoolType, instigator: wref<GameObject>) -> Void;

  public final native func RequestSettingStatPoolMaxValue(objID: StatsObjectID, statPoolType: gamedataStatPoolType, instigator: wref<GameObject>) -> Void;

  public final native func RequestSettingStatPoolValue(objID: StatsObjectID, statPoolType: gamedataStatPoolType, newValue: Float, instigator: wref<GameObject>, opt perc: Bool) -> Void;

  public final native func RequestSettingStatPoolValueCustomLimit(objID: StatsObjectID, statPoolType: gamedataStatPoolType, newValue: Float, instigator: wref<GameObject>, opt perc: Bool) -> Void;

  public final native func RequestSettingStatPoolValueIgnoreChangeMode(objID: StatsObjectID, statPoolType: gamedataStatPoolType, newValue: Float, instigator: wref<GameObject>, opt perc: Bool) -> Void;

  public final native func RequestChangingStatPoolValue(objID: StatsObjectID, statPoolType: gamedataStatPoolType, diff: Float, instigator: wref<GameObject>, forceChunkTransfering: Bool, opt perc: Bool) -> Void;

  public final native func RequestSettingStatPoolBonus(objID: StatsObjectID, statPoolType: gamedataStatPoolType, bonus: Float, instigator: wref<GameObject>, persistentBonus: Bool, opt perc: Bool) -> Void;

  public final native func GetModifier(objID: StatsObjectID, statPoolType: gamedataStatPoolType, type: gameStatPoolModificationTypes, out modifier: StatPoolModifier) -> Bool;

  public final native func RequestSettingModifier(objID: StatsObjectID, statPoolType: gamedataStatPoolType, type: gameStatPoolModificationTypes, modifier: StatPoolModifier) -> Void;

  public final native func RequestSettingModifierWithRecord(objID: StatsObjectID, statPoolType: gamedataStatPoolType, type: gameStatPoolModificationTypes, modifierRecordID: TweakDBID) -> Void;

  public final native func RequestResetingModifier(objID: StatsObjectID, statPoolType: gamedataStatPoolType, type: gameStatPoolModificationTypes) -> Void;

  public final native const func GetActiveModifierRecordID(objID: StatsObjectID, statPoolType: gamedataStatPoolType, type: gameStatPoolModificationTypes, out isModifierDefault: Bool) -> TweakDBID;

  public final native func ToPercentage(objID: StatsObjectID, statPoolType: gamedataStatPoolType, value: Float) -> Float;

  public final native func ToPoints(objID: StatsObjectID, statPoolType: gamedataStatPoolType, percValue: Float) -> Float;

  public final native func RequestRegisteringListener(objID: StatsObjectID, statPoolType: gamedataStatPoolType, listener: ref<IStatPoolsListener>) -> Void;

  public final native func RequestUnregisteringListener(objID: StatsObjectID, statPoolType: gamedataStatPoolType, listener: ref<IStatPoolsListener>) -> Void;

  public final static native func GetStatPoolType(damageType: gamedataDamageType) -> gamedataStatPoolType;
}

public static native func Cast(a: EntityID) -> StatsObjectID;

public native struct StatPoolModifier {

  public native let enabled: Bool;

  public native let rangeBegin: Float;

  public native let rangeEnd: Float;

  public native let startDelay: Float;

  public native let valuePerSec: Float;

  public native let delayOnChange: Bool;
}

public static native func OperatorGreater(a: Int32, b: Int32) -> Bool;

public static native func OperatorLess(a: Int32, b: Int32) -> Bool;

public static native func OperatorNotEqual(const a: ref<IScriptable>, const b: ref<IScriptable>) -> Bool;

public struct DamageHistoryEntry {

  public let hitEvent: ref<gameHitEvent>;

  public let totalDamageReceived: Float;

  public let frameReceived: Uint64;

  public let timestamp: Float;

  public let healthAtTheTime: Float;

  public let source: wref<GameObject>;

  public let target: wref<GameObject>;
}

public static native func OperatorSubtract(a: Int32, b: Int32) -> Int32;

public struct PlayerTotalDamageAgainstHealth {

  public let player: wref<GameObject>;

  public let totalDamage: Float;

  public let targetHealth: Float;
}

public static native func OperatorAssignAdd(out a: Float, b: Float) -> Float;

public static native func OperatorGreater(a: Float, b: Float) -> Bool;

public native class gameHitEvent extends Event {

  public native let attackData: ref<AttackData>;

  public native let target: wref<GameObject>;

  public native let hitPosition: Vector4;

  public native let hitDirection: Vector4;

  public native let hitComponent: wref<IPlacedComponent>;

  public native let hitRepresentationResult: HitRepresentationQueryResult;

  public native let hasPiercedTechSurface: Bool;

  public native let attackPentration: Float;

  public native let attackComputed: ref<gameAttackComputed>;

  public let wasAliveBeforeHit: Bool;

  public let projectionPipeline: Bool;
}

public static native func OperatorLogicOr(a: Bool, b: Bool) -> Bool;

public abstract native class IAttack extends IScriptable {

  public final static native func Create(context: AttackInitContext) -> ref<IAttack>;

  public final native func GetParameterBool(parameterName: CName, opt defaultValue: Bool) -> Bool;

  public final native func GetParameterFloat(parameterName: CName, opt defaultValue: Float) -> Float;

  public final native func GetParameterInt(parameterName: CName, opt defaultValue: Int32) -> Int32;

  public final native func GetParameterName(parameterName: CName, opt defaultValue: CName) -> CName;

  public final native func GetRecord() -> wref<Attack_Record>;

  public final native func GetStatModList(statModList: array<ref<gameStatModifierData>>) -> Void;

  public final native func StartAttack() -> Bool;

  public final native func SetPreviewActive(previewActive: Bool) -> Void;

  public final native func SetDamageProjectionActive(active: Bool) -> Void;

  public final native func GetDebugData() -> AttackDebugData;
}

public native class AttackType_Record extends TweakDBRecord {

  public final native func Name() -> String;

  public final native func Comment() -> String;

  public final native func Type() -> gamedataAttackType;
}

public abstract native class InteractionBaseEvent extends Event {

  public native let hotspot: wref<GameObject>;

  public native let activator: wref<GameObject>;

  public native let layerData: InteractionLayerData;
}

public native struct InteractionLayerData {

  public native let tag: CName;
}

public final native class AudioEvent extends Event {

  public native let eventName: CName;

  public native let nameData: CName;

  public native let floatData: Float;

  public native let eventType: audioEventActionType;

  public native let eventFlags: audioAudioEventFlags;
}

public static native func IsNameValid(n: CName) -> Bool;

public native class InteractionSetEnableEvent extends Event {

  public native let enable: Bool;

  public native let linkedLayers: CName;

  public native let layer: CName;
}

public static native func OperatorEqual(const a: ref<IScriptable>, const b: ref<IScriptable>) -> Bool;

public static native func OperatorAssignAdd(out a: Int32, b: Int32) -> Int32;

public static native func OperatorAssignMultiply(out a: Float, b: Float) -> Float;

public static native func OperatorMultiply(a: Float, b: Float) -> Float;

public abstract final native class StatsSystem extends IStatsSystem {

  public final native func GetStatType(damageType: gamedataDamageType) -> gamedataStatType;

  public final native func GetDamageType(statType: gamedataStatType) -> gamedataDamageType;

  public final native func GetDamageRecordId(damageType: gamedataDamageType) -> TweakDBID;

  public final native func GetDamageTypeByRecordID(damageTypeRecordId: TweakDBID) -> gamedataDamageType;

  public final native func GetDamageRecordFromId(damageTypeRecordId: TweakDBID) -> wref<DamageType_Record>;

  public final native func GetDamageRecordFromType(damageType: gamedataDamageType) -> wref<DamageType_Record>;

  public final native const func GetStatValue(objID: StatsObjectID, statType: gamedataStatType) -> Float;

  public final native const func GetStatBoolValue(objID: StatsObjectID, statType: gamedataStatType) -> Bool;

  public final native const func GetStatValueFromDamageType(objId: StatsObjectID, damageType: gamedataDamageType) -> Float;

  public final native func GetStatDetails(objID: StatsObjectID) -> array<gameStatDetailedData>;

  public final native func AddModifier(objID: StatsObjectID, modifierData: ref<gameStatModifierData>) -> Bool;

  public final native func AddModifiers(objID: StatsObjectID, modifierData: array<ref<gameStatModifierData>>) -> Bool;

  public final native func AddSavedModifier(objID: StatsObjectID, modifierData: ref<gameStatModifierData>) -> Bool;

  public final native func RemoveModifier(objID: StatsObjectID, modifierData: ref<gameStatModifierData>) -> Bool;

  public final native func RemoveAllModifiers(objID: StatsObjectID, statType: gamedataStatType, opt removeSavedModifiers: Bool) -> Bool;

  public final native func DefineModifierGroupFromRecord(groupID: Uint64, recordID: TweakDBID) -> Bool;

  public final native func UndefineModifierGroup(groupID: Uint64) -> Bool;

  public final native func ApplyModifierGroup(objID: StatsObjectID, groupID: Uint64) -> Bool;

  public final native func RemoveModifierGroup(objID: StatsObjectID, groupID: Uint64) -> Bool;

  public final native func RegisterListener(objID: StatsObjectID, listener: ref<IStatsListener>) -> Void;

  public final native func UnregisterListener(objID: StatsObjectID, listener: ref<IStatsListener>) -> Void;
}

public abstract native class gameItemData extends IScriptable {

  public final native func GetID() -> ItemID;

  public final native func GetName() -> CName;

  public final native func GetNameAsString() -> String;

  public final native func GetQuantity() -> Int32;

  public final native func HasAttachmentSlot(slotID: TweakDBID) -> Bool;

  public final native func HasPlacementSlot(slotID: TweakDBID) -> Bool;

  public final native const func HasTag(tag: CName) -> Bool;

  public final native func SetDynamicTag(tag: CName) -> Bool;

  public final native func RemoveDynamicTag(tag: CName) -> Bool;

  public final native func GetTimestamp() -> GameTime;

  public final native func GetStatValueByType(type: gamedataStatType) -> Float;

  public final native func HasStatData(type: gamedataStatType) -> Bool;

  public final native func GetStatsObjectID() -> StatsObjectID;

  public final native func HasPartInSlot(slotID: TweakDBID) -> Bool;

  public final native func GetItemPart(out part: InnerItemData, slotId: TweakDBID) -> Void;

  public final native func GetItemParts(out parts: array<InnerItemData>) -> Void;

  public final native func GetTemporaryStatBundle() -> ref<StatsBundleHandler>;

  public final native func GetItemType() -> gamedataItemType;

  public final native func GetLocalizedItemType() -> CName;
}

public abstract native class IPrereq extends IScriptable {

  public native const func IsFulfilled(game: GameInstance, context: ref<IScriptable>) -> Bool;

  public final native const func RegisterEntity(game: GameInstance, entityId: EntityID) -> ref<PrereqState>;

  public final static native func CreatePrereq(id: TweakDBID) -> ref<IPrereq>;
}

public native class NPCRarity_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func StatModifiers(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetStatModifiersCount() -> Int32;

  public final native func GetStatModifiersItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetStatModifiersItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func StatModifiersContains(item: wref<StatModifier_Record>) -> Bool;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataNPCRarity;
}

public final native class StatsDataSystem extends IStatsDataSystem {

  public final native const func GetDifficulty() -> gameDifficulty;

  public final native func SetDifficulty(difficulty: gameDifficulty) -> Void;

  public final native func GetValueFromCurve(curveSetName: CName, argumentValue: Float, opt curveName: CName, opt difficulty: gameDifficulty) -> Float;

  public final native func GetMinValueFromCurve(curveSetName: CName, opt curveName: CName, opt difficulty: gameDifficulty) -> Float;

  public final native func GetMaxValueFromCurve(curveSetName: CName, opt curveName: CName, opt difficulty: gameDifficulty) -> Float;
}

public final native class GameplayLogicPackageSystem extends IGameplayLogicPackageSystem {

  public final native func ApplyPackage(object: wref<GameObject>, instigator: wref<GameObject>, packageID: TweakDBID) -> Void;

  public final native func ApplyPackages(object: wref<GameObject>, instigator: wref<GameObject>, packageID: TweakDBID, applyCount: Uint32) -> Void;

  public final native func RemovePackage(object: wref<GameObject>, packageID: TweakDBID) -> Void;

  public final native func RemovePackages(object: wref<GameObject>, packageID: TweakDBID, removeCount: Uint32) -> Void;

  public final native func GetAppliedPackages(object: wref<GameObject>, out outPackageIDs: array<TweakDBID>) -> Void;

  public final native func RemoveEntry(entityID: EntityID) -> Void;
}

public native class GameplayAbility_Record extends TweakDBRecord {

  public final native func AbilityPackage() -> wref<GameplayLogicPackage_Record>;

  public final native func AbilityPackageHandle() -> ref<GameplayLogicPackage_Record>;

  public final native func PrereqsForUse(out outList: array<wref<IPrereq_Record>>) -> Void;

  public final native func GetPrereqsForUseCount() -> Int32;

  public final native func GetPrereqsForUseItem(index: Int32) -> wref<IPrereq_Record>;

  public final native func GetPrereqsForUseItemHandle(index: Int32) -> wref<IPrereq_Record>;

  public final native func PrereqsForUseContains(item: wref<IPrereq_Record>) -> Bool;

  public final native func Loc_key_name() -> CName;

  public final native func Loc_key_desc() -> CName;

  public final native func ShowInCodex() -> Bool;
}

public native class GameplayAbilityGroup_Record extends TweakDBRecord {

  public final native func Abilities(out outList: array<wref<GameplayAbility_Record>>) -> Void;

  public final native func GetAbilitiesCount() -> Int32;

  public final native func GetAbilitiesItem(index: Int32) -> wref<GameplayAbility_Record>;

  public final native func GetAbilitiesItemHandle(index: Int32) -> wref<GameplayAbility_Record>;

  public final native func AbilitiesContains(item: wref<GameplayAbility_Record>) -> Bool;
}

public native class GameplayLogicPackage_Record extends TweakDBRecord {

  public final native func UIData() -> wref<GameplayLogicPackageUIData_Record>;

  public final native func UIDataHandle() -> ref<GameplayLogicPackageUIData_Record>;

  public final native func StatPools(out outList: array<wref<StatPool_Record>>) -> Void;

  public final native func GetStatPoolsCount() -> Int32;

  public final native func GetStatPoolsItem(index: Int32) -> wref<StatPool_Record>;

  public final native func GetStatPoolsItemHandle(index: Int32) -> wref<StatPool_Record>;

  public final native func StatPoolsContains(item: wref<StatPool_Record>) -> Bool;

  public final native func Effectors(out outList: array<wref<Effector_Record>>) -> Void;

  public final native func GetEffectorsCount() -> Int32;

  public final native func GetEffectorsItem(index: Int32) -> wref<Effector_Record>;

  public final native func GetEffectorsItemHandle(index: Int32) -> wref<Effector_Record>;

  public final native func EffectorsContains(item: wref<Effector_Record>) -> Bool;

  public final native func Stats(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetStatsCount() -> Int32;

  public final native func GetStatsItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetStatsItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func StatsContains(item: wref<StatModifier_Record>) -> Bool;

  public final native func Items(out outList: array<wref<InventoryItem_Record>>) -> Void;

  public final native func GetItemsCount() -> Int32;

  public final native func GetItemsItem(index: Int32) -> wref<InventoryItem_Record>;

  public final native func GetItemsItemHandle(index: Int32) -> wref<InventoryItem_Record>;

  public final native func ItemsContains(item: wref<InventoryItem_Record>) -> Bool;

  public final native func AnimationWrapperOverrides() -> array<CName>;

  public final native func GetAnimationWrapperOverridesCount() -> Int32;

  public final native func GetAnimationWrapperOverridesItem(index: Int32) -> CName;

  public final native func AnimationWrapperOverridesContains(item: CName) -> Bool;

  public final native func Prereq() -> CName;

  public final native func Stackable() -> Bool;
}

public native class EffectorSystem extends IEffectorSystem {

  public final native func ApplyEffector(objID: EntityID, instigator: wref<GameObject>, recordID: TweakDBID, opt parentRecordID: TweakDBID) -> Void;

  public final native func RemoveEffector(objID: EntityID, recordID: TweakDBID) -> Void;

  public final native func IsEffectorPresent(objID: EntityID, recordID: TweakDBID) -> Bool;

  public final native func GetEffectorsList(objID: EntityID, outEffectors: array<wref<Effector>>) -> Void;

  public final native func GetEffectorsByID(objID: EntityID, recordID: TweakDBID, outEffectors: array<wref<Effector>>) -> Void;

  public final native func RemoveEffectorsByID(objID: EntityID, recordID: TweakDBID) -> Bool;
}

public abstract native class IScriptableSystem extends IScriptable {
}

public native class ScriptableSystemsContainer extends gameIScriptableSystemsContainer {

  public final native func Get(systemName: CName) -> ref<ScriptableSystem>;

  public final native func QueueRequest(request: ref<ScriptableSystemRequest>) -> Void;
}

public native class PlayerScriptableSystemRequest extends ScriptableSystemRequest {

  public native let owner: wref<GameObject>;
}

public static native func LogChannel(channel: CName, const text: script_ref<String>) -> Void;

public static native func OperatorEqual(a: Int32, b: Int32) -> Bool;

public struct SProficiency {

  public persistent let type: gamedataProficiencyType;

  public persistent let currentLevel: Int32;

  public let maxLevel: Int32;

  public let isAtMaxLevel: Bool;

  public persistent let currentExp: Int32;

  public let expToLevel: Int32;

  public persistent let spentPerkPoints: Int32;
}

public static native func EnumValueToString(const enumStr: script_ref<String>, enumValue: Int64) -> String;

public static native func Cast(a: Int32) -> Int64;

public native class Proficiency_Record extends TweakDBRecord {

  public final native func Loc_desc_key() -> String;

  public final native func Loc_name_key() -> String;

  public final native func EnumComment() -> String;

  public final native func DisplayName() -> String;

  public final native func Trait() -> wref<Trait_Record>;

  public final native func TraitHandle() -> ref<Trait_Record>;

  public final native func TiedAttribute() -> wref<Stat_Record>;

  public final native func TiedAttributeHandle() -> ref<Stat_Record>;

  public final native func PerkAreas(out outList: array<wref<PerkArea_Record>>) -> Void;

  public final native func GetPerkAreasCount() -> Int32;

  public final native func GetPerkAreasItem(index: Int32) -> wref<PerkArea_Record>;

  public final native func GetPerkAreasItemHandle(index: Int32) -> wref<PerkArea_Record>;

  public final native func PerkAreasContains(item: wref<PerkArea_Record>) -> Bool;

  public final native func PassiveBonuses(out outList: array<wref<PassiveProficiencyBonus_Record>>) -> Void;

  public final native func GetPassiveBonusesCount() -> Int32;

  public final native func GetPassiveBonusesItem(index: Int32) -> wref<PassiveProficiencyBonus_Record>;

  public final native func GetPassiveBonusesItemHandle(index: Int32) -> wref<PassiveProficiencyBonus_Record>;

  public final native func PassiveBonusesContains(item: wref<PassiveProficiencyBonus_Record>) -> Bool;

  public final native func Packages(out outList: array<wref<GameplayLogicPackage_Record>>) -> Void;

  public final native func GetPackagesCount() -> Int32;

  public final native func GetPackagesItem(index: Int32) -> wref<GameplayLogicPackage_Record>;

  public final native func GetPackagesItemHandle(index: Int32) -> wref<GameplayLogicPackage_Record>;

  public final native func PackagesContains(item: wref<GameplayLogicPackage_Record>) -> Bool;

  public final native func EnumName() -> CName;

  public final native func CurveSetName() -> CName;

  public final native func CurveName() -> CName;

  public final native func IconPath() -> CName;

  public final native func MaxLevel() -> Int32;

  public final native func MinLevel() -> Int32;

  public final native func Type() -> gamedataProficiencyType;
}

public static native func Cast(a: Int64) -> Int32;

public static native func EnumValueFromString(const enumStr: script_ref<String>, const enumValue: script_ref<String>) -> Int64;

public static native func OperatorGreaterEqual(a: Int32, b: Int32) -> Bool;

public struct SAttribute {

  public persistent let attributeName: gamedataStatType;

  public persistent let value: Int32;

  public persistent let id: TweakDBID;
}

public static native func Max(a: Int32, b: Int32) -> Int32;

public static native func Min(a: Int32, b: Int32) -> Int32;

public static native func OperatorLogicAnd(a: Bool, b: Bool) -> Bool;

public static native func OperatorNotEqual(a: Int32, b: Int32) -> Bool;

public static native func IntToString(value: Int32) -> String;

public static native func Cast(a: Float) -> Int32;

public static native func Cast(a: Int32) -> Float;

public static native func OperatorAdd(a: Int32, b: Int32) -> Int32;

public static native func OperatorLessEqual(a: Int32, b: Int32) -> Bool;

public struct SPerkArea {

  public persistent let type: gamedataPerkArea;

  public persistent let unlocked: Bool;

  public persistent let boughtPerks: array<SPerk>;
}

public native class PerkArea_Record extends TweakDBRecord {

  public final native func DisplayName() -> String;

  public final native func Loc_name_key() -> String;

  public final native func EnumComment() -> String;

  public final native func Loc_desc_key() -> String;

  public final native func Requirement() -> wref<IPrereq_Record>;

  public final native func RequirementHandle() -> ref<IPrereq_Record>;

  public final native func Curve() -> wref<Curve_Record>;

  public final native func CurveHandle() -> ref<Curve_Record>;

  public final native func Proficiency() -> wref<Proficiency_Record>;

  public final native func ProficiencyHandle() -> ref<Proficiency_Record>;

  public final native func MasteryLevel() -> wref<StatPrereq_Record>;

  public final native func MasteryLevelHandle() -> ref<StatPrereq_Record>;

  public final native func Perks(out outList: array<wref<Perk_Record>>) -> Void;

  public final native func GetPerksCount() -> Int32;

  public final native func GetPerksItem(index: Int32) -> wref<Perk_Record>;

  public final native func GetPerksItemHandle(index: Int32) -> wref<Perk_Record>;

  public final native func PerksContains(item: wref<Perk_Record>) -> Bool;

  public final native func EnumName() -> CName;

  public final native func MinLevel() -> Int32;

  public final native func MaxLevel() -> Int32;

  public final native func Type() -> gamedataPerkArea;
}

public struct STrait {

  public persistent let type: gamedataTraitType;

  public persistent let unlocked: Bool;

  public persistent let currLevel: Int32;
}

public struct SDevelopmentPoints {

  public persistent let type: gamedataDevelopmentPointType;

  public persistent let spent: Int32;

  public persistent let unspent: Int32;
}

public native class BlackboardSystem extends IBlackboardSystem {

  public final native func Get(definition: ref<BlackboardDefinition>) -> ref<IBlackboard>;

  public final native func GetLocalInstanced(entityID: EntityID, definition: ref<BlackboardDefinition>) -> ref<IBlackboard>;

  public final native func RegisterLocalBlackboard(blackboard: ref<IBlackboard>) -> Void;

  public final native func UnregisterLocalBlackboard(blackboard: ref<IBlackboard>) -> Void;

  public final native func RegisterLocalBlackboardForDebugRender(blackboard: ref<IBlackboard>, debugName: String) -> Void;
}

public static native func GetAllBlackboardDefs() -> ref<AllBlackboardDefinitions>;

public native class AllBlackboardDefinitions extends IScriptable {

  public let PlayerStateMachine: ref<PlayerStateMachineDef>;

  public let PlayerPerkData: ref<PlayerPerkDataDef>;

  public let PlayerQuickHackData: ref<PlayerQuickHackDataDef>;

  public let EffectSharedData: ref<EffectSharedDataDef>;

  public let FollowNPC: ref<FollowNPCDef>;

  public let AISquadBlackBoard: ref<AISquadBlackBoardDef>;

  public let Puppet: ref<PuppetDef>;

  public let PuppetState: ref<PuppetStateDef>;

  public let PuppetReaction: ref<PuppetReactionDef>;

  public let LocalPlayer: ref<PuppetReactionDef>;

  public let UIGameData: ref<UIGameDataDef>;

  public let UIInteractions: ref<UIInteractionsDef>;

  public let Weapon: ref<WeaponDataDef>;

  public let DeviceTakeControl: ref<DeviceTakeControlDef>;

  public let TaggedObjectsList: ref<TaggedObjectsListDef>;

  public let AdHocAnimation: ref<AdHocAnimationDef>;

  public let QuickMeleeData: ref<QuickMeleeDataDef>;

  public let Vehicle: ref<VehicleDef>;

  public let VehicleSummonData: ref<VehicleSummonDataDef>;

  public let Braindance: ref<BraindanceBlackboardDef>;

  public let HackingMinigame: ref<HackingMinigameDef>;

  public let HackingData: ref<HackingDataDef>;

  public let AIShooting: ref<AIShootingDataDef>;

  public let AICover: ref<AICoverDataDef>;

  public let AIAction: ref<AIActionDataDef>;

  public let AIPatrol: ref<AIPatrolDef>;

  public let AIAlertedPatrol: ref<AIAlertedPatrolDef>;

  public let VendorRegister: ref<VendorRegisterBlackBoardDef>;

  public let AIFollowSlot: ref<AIFollowSlotDef>;

  public let AIActionBossData: ref<AIActionBossDataDef>;

  public let UI_System: ref<UI_SystemDef>;

  public let UI_ActiveVehicleData: ref<UI_ActiveVehicleDataDef>;

  public let UIWorldBoundaries: ref<UIWorldBoundariesDef>;

  public let UI_PlayerStats: ref<UI_PlayerStatsDef>;

  public let UI_EquipmentData: ref<UI_EquipmentDataDef>;

  public let UI_PlayerBioMonitor: ref<UI_PlayerBioMonitorDef>;

  public let FastTRavelSystem: ref<FastTRavelSystemDef>;

  public let UI_ComDevice: ref<UI_ComDeviceDef>;

  public let UI_Scanner: ref<UI_ScannerDef>;

  public let UI_ScannerModules: ref<UI_ScannerModulesDef>;

  public let UI_WantedBar: ref<UI_WantedBarDef>;

  public let UI_FastForward: ref<UI_FastForwardDef>;

  public let UI_HUDProgressBar: ref<UI_HUDProgressBarDef>;

  public let UI_HUDSignalProgressBar: ref<UI_HUDSignalProgressBarDef>;

  public let UI_Hotkeys: ref<UI_HotkeysDef>;

  public let DeviceBaseBlackboard: ref<DeviceBaseBlackboardDef>;

  public let TVDeviceBlackboard: ref<TVDeviceBlackboardDef>;

  public let ArcadeMachineBlackBoard: ref<ArcadeMachineBlackboardDef>;

  public let LcdScreenBlackBoard: ref<LcdScreenBlackBoardDef>;

  public let NcartTimetableBlackboard: ref<NcartTimetableBlackboardDef>;

  public let IntercomBlackboard: ref<IntercomBlackboardDef>;

  public let ElevatorDeviceBlackboard: ref<ElevatorDeviceBlackboardDef>;

  public let VendingMachineDeviceBlackboard: ref<VendingMachineDeviceBlackboardDef>;

  public let InteractiveDeviceBlackboard: ref<InteractiveDeviceBlackboardDef>;

  public let MasterDeviceBaseBlackboard: ref<MasterDeviceBaseBlackboardDef>;

  public let ComputerDeviceBlackboard: ref<ComputerDeviceBlackboardDef>;

  public let DataTermDeviceBlackboard: ref<DataTermDeviceBlackboardDef>;

  public let NetworkBlackboard: ref<NetworkBlackboardDef>;

  public let StorageBlackboard: ref<StorageBlackboardDef>;

  public let BackdoorBlackboard: ref<BackDoorDeviceBlackboardDef>;

  public let ConfessionalBlackboard: ref<ConfessionalBlackboardDef>;

  public let JukeboxBlackboard: ref<JukeboxBlackboardDef>;

  public let MenuEventBlackboard: ref<MenuEventBlackboardDef>;

  public let UI_NPCNextToTheCrosshair: ref<UI_NPCNextToTheCrosshairDef>;

  public let UI_NameplateData: ref<UI_NameplateDataDef>;

  public let UI_DamageInfo: ref<UI_DamageInfoDef>;

  public let UI_InterfaceOptions: ref<UI_InterfaceOptionsDef>;

  public let UI_CompassInfo: ref<UI_CompassInfoDef>;

  public let UI_ActiveWeaponData: ref<UI_ActiveWeaponDataDef>;

  public let UI_TargetingInfo: ref<UI_TargetingInfoDef>;

  public let UI_Notifications: ref<UI_NotificationsDef>;

  public let LeftHandCyberware: ref<LeftHandCyberwareDataDef>;

  public let CoverAction: ref<CoverActionDataDef>;

  public let UI_QuickSlotsData: ref<UI_QuickSlotsDataDef>;

  public let UI_VisionMode: ref<UI_VisionModeDef>;

  public let UI_HudTooltip: ref<UI_HudTooltipDef>;

  public let UI_HudButtonHelp: ref<UI_HudButtonHelpDef>;

  public let UI_ActivityLog: ref<UI_ActivityLogDef>;

  public let UI_LevelUp: ref<UI_LevelUpDef>;

  public let UI_Vendor: ref<UI_VendorDef>;

  public let UI_Briefing: ref<UI_BriefingDef>;

  public let UI_ItemModSystem: ref<UI_ItemModSystemDef>;

  public let UI_CodexSystem: ref<UI_CodexSystemDef>;

  public let UI_Equipment: ref<UI_EquipmentDef>;

  public let UI_Crafting: ref<UI_CraftingDef>;

  public let UI_Map: ref<UI_MapDef>;

  public let UI_CpoCharacterSelection: ref<UI_CpoCharacterSelectionDef>;

  public let UI_ChatBox: ref<UI_ChatBoxDef>;

  public let UI_HUDNarrationLog: ref<UI_HUDNarrationLogDef>;

  public let UI_NarrativePlate: ref<UI_NarrativePlateDef>;

  public let UI_Crosshair: ref<UI_CrosshairDef>;

  public let UI_ItemLog: ref<UI_ItemLogDef>;

  public let UI_HUDButtonHints: ref<UI_HUDButtonHintDef>;

  public let UI_Companion: ref<UI_CompanionDef>;

  public let UI_CustomQuestNotification: ref<UI_CustomQuestNotificationDef>;

  public let HUD_Manager: ref<HUDManagerDef>;

  public let UI_Hacking: ref<UI_HackingDef>;

  public let UI_Stealth: ref<UI_StealthDef>;

  public let UI_TopbarHubMenu: ref<UI_TopbarHubMenuDef>;

  public let UI_LocalPlayer: ref<LocalPlayerDef>;

  public let UI_SceneScreen: ref<UI_SceneScreenDef>;

  public let UI_PointOfNoReturnRewardScreen: ref<UI_PointOfNoReturnRewardScreenDef>;

  public let CombatGadget: ref<CombatGadgetDataDef>;

  public let Mines: ref<MinesDataDef>;

  public let DebugData: ref<DebugDataDef>;

  public let DeviceDebug: ref<DeviceDebugDef>;

  public let CustomCentaurBlackboard: ref<CustomCentaurBlackboardDef>;

  public let CW_MuteArm: ref<CW_MuteArmDef>;

  public let PhotoMode: ref<PhotoModeDef>;

  public let GameplaySettings: ref<GameplaySettingsDef>;
}

public native class BlackboardDefinition extends IScriptable {
}

public abstract class AIBlackboardDef extends BlackboardDefinition {
}

public native struct BlackboardID {
}

public class MasterDeviceBaseBlackboardDef extends DeviceBaseBlackboardDef {

  public let ThumbnailWidgetsData: BlackboardID_Variant;
}

public abstract class CustomBlackboardDef extends BlackboardDefinition {
}

public static native func Cast(a: Int32) -> Bool;

public final native class QuestsSystem extends questIQuestsSystem {

  public final native func GetFact(factName: CName) -> Int32;

  public final native func GetFactStr(factName: String) -> Int32;

  public final native func SetFact(factName: CName, value: Int32) -> Void;

  public final native func SetFactStr(factName: String, value: Int32) -> Void;

  public final native func RegisterListener(factName: CName, listener: ref<IScriptable>, funcName: CName) -> Uint32;

  public final native func UnregisterListener(factName: CName, id: Uint32) -> Void;

  public final native func RegisterEntity(factName: CName, entityId: EntityID) -> Uint32;

  public final native func UnregisterEntity(factName: CName, callbackId: Uint32) -> Void;

  public final native func GetGameplayTimerData(out seconds: Float, out percent: Float) -> Void;
}

public native class PushUIGameContextEvent extends Event {

  public native let context: UIGameContext;
}

public native class PopUIGameContextEvent extends Event {

  public native let context: UIGameContext;
}

public native class SwapUIGameContextEvent extends Event {

  public native let oldContext: UIGameContext;

  public native let newContext: UIGameContext;
}

public native class ResetUIGameContextEvent extends Event {
}

public native class VisualStateChangeEvent extends Event {

  public native let visualState: CName;
}

public native class VisualStateRestorePreviousEvent extends Event {

  public native let visualState: CName;
}

public static native func OperatorEqual(a: TweakDBID, b: TweakDBID) -> Bool;

public abstract native class IBlackboard extends IScriptable {

  public final static native func Create(definition: ref<BlackboardDefinition>) -> ref<IBlackboard>;

  public final native const func Signal(id: BlackboardID) -> Void;

  public final native const func FireCallbacks() -> Void;

  public final native func ClearAllFields(signal: Bool) -> Void;

  public final native func RegisterEntity(id: BlackboardID, gameInstance: GameInstance, entityID: EntityID) -> Uint32;

  public final native func UnregisterEntity(id: BlackboardID, out callbackHandle: ref<CallbackHandle>) -> Void;

  public final native const func GetBool(id: BlackboardID_Bool) -> Bool;

  public final native func SetBool(id: BlackboardID_Bool, value: Bool, opt forceFire: Bool) -> Void;

  public final native func SignalBool(id: BlackboardID_Bool) -> Void;

  public final native func RegisterListenerBool(id: BlackboardID_Bool, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func RegisterDelayedListenerBool(id: BlackboardID_Bool, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func UnregisterListenerBool(id: BlackboardID_Bool, out callbackHandle: ref<CallbackHandle>) -> Void;

  public final native const func GetInt(id: BlackboardID_Int) -> Int32;

  public final native func SetInt(id: BlackboardID_Int, value: Int32, opt forceFire: Bool) -> Void;

  public final native func SignalInt(id: BlackboardID_Int) -> Void;

  public final native func RegisterListenerInt(id: BlackboardID_Int, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func RegisterDelayedListenerInt(id: BlackboardID_Int, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func UnregisterListenerInt(id: BlackboardID_Int, out callbackHandle: ref<CallbackHandle>) -> Void;

  public final native const func GetUint(id: BlackboardID_Uint) -> Uint32;

  public final native func SetUint(id: BlackboardID_Uint, value: Uint32, opt forceFire: Bool) -> Void;

  public final native func SignalUint(id: BlackboardID_Uint) -> Void;

  public final native func RegisterListenerUint(id: BlackboardID_Uint, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func RegisterDelayedListenerUint(id: BlackboardID_Uint, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func UnregisterListenerUint(id: BlackboardID_Uint, out callbackHandle: ref<CallbackHandle>) -> Void;

  public final native const func GetFloat(id: BlackboardID_Float) -> Float;

  public final native func SetFloat(id: BlackboardID_Float, value: Float, opt forceFire: Bool) -> Void;

  public final native func SignalFloat(id: BlackboardID_Float) -> Void;

  public final native func RegisterListenerFloat(id: BlackboardID_Float, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func RegisterDelayedListenerFloat(id: BlackboardID_Float, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func UnregisterListenerFloat(id: BlackboardID_Float, out callbackHandle: ref<CallbackHandle>) -> Void;

  public final native const func GetString(id: BlackboardID_String) -> String;

  public final native func SetString(id: BlackboardID_String, value: String, opt forceFire: Bool) -> Void;

  public final native func SignalString(id: BlackboardID_String) -> Void;

  public final native func RegisterListenerString(id: BlackboardID_String, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func RegisterDelayedListenerString(id: BlackboardID_String, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func UnregisterListenerString(id: BlackboardID_String, out callbackHandle: ref<CallbackHandle>) -> Void;

  public final native const func GetName(id: BlackboardID_Name) -> CName;

  public final native func SetName(id: BlackboardID_Name, value: CName, opt forceFire: Bool) -> Void;

  public final native func SignalName(id: BlackboardID_Name) -> Void;

  public final native func RegisterListenerName(id: BlackboardID_Name, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func RegisterDelayedListenerName(id: BlackboardID_Name, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func UnregisterListenerName(id: BlackboardID_Name, out callbackHandle: ref<CallbackHandle>) -> Void;

  public final native const func GetVector2(id: BlackboardID_Vector2) -> Vector2;

  public final native func SetVector2(id: BlackboardID_Vector2, value: Vector2, opt forceFire: Bool) -> Void;

  public final native func SignalVector2(id: BlackboardID_Vector2) -> Void;

  public final native func RegisterListenerVector2(id: BlackboardID_Vector2, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func RegisterDelayedListenerVector2(id: BlackboardID_Vector2, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func UnregisterListenerVector2(id: BlackboardID_Vector2, out callbackHandle: ref<CallbackHandle>) -> Void;

  public final native const func GetVector4(id: BlackboardID_Vector4) -> Vector4;

  public final native func SetVector4(id: BlackboardID_Vector4, value: Vector4, opt forceFire: Bool) -> Void;

  public final native func SignalVector4(id: BlackboardID_Vector4) -> Void;

  public final native func RegisterListenerVector4(id: BlackboardID_Vector4, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func RegisterDelayedListenerVector4(id: BlackboardID_Vector4, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func UnregisterListenerVector4(id: BlackboardID_Vector4, out callbackHandle: ref<CallbackHandle>) -> Void;

  public final native const func GetQuat(id: BlackboardID_Quat) -> Quaternion;

  public final native func SetQuat(id: BlackboardID_Quat, value: Quaternion, opt forceFire: Bool) -> Void;

  public final native func SignalQuat(id: BlackboardID_Quat) -> Void;

  public final native func RegisterListenerQuat(id: BlackboardID_Quat, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func RegisterDelayedListenerQuat(id: BlackboardID_Quat, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func UnregisterListenerQuat(id: BlackboardID_Quat, out callbackHandle: ref<CallbackHandle>) -> Void;

  public final native const func GetEntityID(id: BlackboardID_EntityID) -> EntityID;

  public final native func SetEntityID(id: BlackboardID_EntityID, value: EntityID, opt forceFire: Bool) -> Void;

  public final native func SignalEntityID(id: BlackboardID_EntityID) -> Void;

  public final native func RegisterListenerEntityID(id: BlackboardID_EntityID, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func RegisterDelayedListenerEntityID(id: BlackboardID_EntityID, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func UnregisterListenerEntityID(id: BlackboardID_EntityID, out callbackHandle: ref<CallbackHandle>) -> Void;

  public final native const func GetVariant(tag: BlackboardID_Variant) -> Variant;

  public final native func SetVariant(tag: BlackboardID_Variant, value: Variant, opt forceFire: Bool) -> Void;

  public final native func SignalVariant(id: BlackboardID_Variant) -> Void;

  public final native func RegisterListenerVariant(tag: BlackboardID_Variant, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func RegisterDelayedListenerVariant(id: BlackboardID_Variant, object: ref<IScriptable>, func: CName, opt fireIfValueExist: Bool) -> ref<CallbackHandle>;

  public final native func UnregisterListenerVariant(id: BlackboardID_Variant, out callbackHandle: ref<CallbackHandle>) -> Void;

  public final native func UnregisterDelayedListener(id: BlackboardID, out callbackHandle: ref<CallbackHandle>) -> Void;
}

public abstract native class gameStatModifierData extends IScriptable {

  public native let statType: gamedataStatType;

  public native let modifierType: gameStatModifierType;
}

public static native func OperatorNotEqual(a: TweakDBID, b: TweakDBID) -> Bool;

public native class GameObjectPS extends PersistentState {
}

public struct PSOwnerData {

  public persistent let id: PersistentID;

  public persistent let className: CName;
}

public native class DeviceAction extends Event {

  @default(ActionDemolition, ActionDemolition)
  @default(ActionEngineering, ActionEngineering)
  @default(ActionForceResetDevice, ActionForceResetDevice)
  @default(ActionHacking, ActionHacking)
  @default(ActionOverride, ActionOverride)
  @default(TakeOverSecuritySystem, TakeOverSecuritySystem)
  @default(ToggleGlassTint, ToggleTint)
  @default(ToggleGlassTintHack, ToggleGlassTintHack)
  public native let actionName: CName;

  public native let clearanceLevel: Int32;

  public native let localizedObjectName: String;

  public final native func SetUp(const ps: ref<PersistentState>) -> Void;

  public native func GetProperties() -> array<ref<DeviceActionProperty>>;

  public final native func GetPersistentID() -> PersistentID;

  public final native func GetDeviceClassName() -> CName;

  public native const func GetCurrentDisplayString() -> String;
}

public native struct PersistentID {

  public final static native func IsDefined(id: PersistentID) -> Bool;

  public final static native func IsDynamic(id: PersistentID) -> Bool;

  public final static native func IsStatic(id: PersistentID) -> Bool;

  public final static native func IsEntity(id: PersistentID) -> Bool;

  public final static native func IsComponent(id: PersistentID) -> Bool;

  public final static native func GetComponentName(id: PersistentID) -> CName;

  public final static native func ToDebugString(id: PersistentID) -> String;

  public final static native func ExtractEntityID(id: PersistentID) -> EntityID;
}

public static native func Cast(a: EntityID) -> PersistentID;

public final native class GamePersistencySystem extends IGamePersistencySystem {

  public final native func QueueEntityEvent(targetEntity: EntityID, evt: ref<Event>) -> Void;

  public final native func QueuePSEvent(targetID: PersistentID, psClassName: CName, evt: ref<Event>) -> Void;

  public final native func GetConstAccessToPSObject(targetID: PersistentID, psClassName: CName) -> ref<PersistentState>;

  public final native func ForgetObject(targetID: PersistentID, notifyEntity: Bool) -> Void;

  public final native func QueuePSDeviceEvent(action: ref<DeviceAction>) -> Void;

  public final native func GetPersistentBool(targetEntity: PersistentID, psClassName: CName, varName: CName) -> Bool;

  public final native func GetPersistentInt(targetEntity: PersistentID, psClassName: CName, varName: CName) -> Int32;

  public final native func GetPersistentFloat(targetEntity: PersistentID, psClassName: CName, varName: CName) -> Float;

  public final native func SetPersistentBool(targetEntity: PersistentID, psClassName: CName, varName: CName, newValue: Bool) -> Void;

  public final native func SetPersistentInt(targetEntity: PersistentID, psClassName: CName, varName: CName, newValue: Int32) -> Void;

  public final native func SetPersistentFloat(targetEntity: PersistentID, psClassName: CName, varName: CName, newValue: Float) -> Void;
}

public abstract native class InteractionChoiceCaptionPart extends IScriptable {

  public final native func GetType() -> gamedataChoiceCaptionPartType;
}

public native struct InteractionChoiceMetaData {

  public edit native let tweakDBName: String;

  public edit native let tweakDBID: TweakDBID;

  public edit native let type: ChoiceTypeWrapper;

  public final static native func GetTweakData(metaData: InteractionChoiceMetaData) -> wref<InteractionBase_Record>;
}

public native struct InteractionChoice {

  public edit native let caption: String;

  public edit native let captionParts: InteractionChoiceCaption;

  public edit native let data: array<Variant>;

  public edit native let choiceMetaData: InteractionChoiceMetaData;
}

public static native func IsStringValid(const n: script_ref<String>) -> Bool;

public native struct InteractionChoiceCaption {

  public native const let parts: array<ref<InteractionChoiceCaptionPart>>;

  public final static native func AddPartFromRecordID(self: InteractionChoiceCaption, recordId: TDBID) -> Void;

  public final static native func AddPartFromRecord(self: InteractionChoiceCaption, record: wref<ChoiceCaptionPart_Record>) -> Void;

  public final static native func AddTextPart(self: InteractionChoiceCaption, text: String) -> Void;

  public final static native func AddTagPart(self: InteractionChoiceCaption, tag: String) -> Void;

  public final static native func AddScriptPart(self: InteractionChoiceCaption, part: ref<InteractionChoiceCaptionScriptPart>) -> Void;

  public final static native func Clear(self: InteractionChoiceCaption) -> Void;
}

public native struct ChoiceTypeWrapper {

  public final static native func IsType(context: ChoiceTypeWrapper, type: gameinteractionsChoiceType) -> Bool;

  public final static native func SetType(context: ChoiceTypeWrapper, type: gameinteractionsChoiceType) -> Void;

  public final static native func ClearType(context: ChoiceTypeWrapper, type: gameinteractionsChoiceType) -> Void;
}

public static native func NameToString(n: CName) -> String;

public final native class gameObjectActionsCallbackController extends IScriptable {

  public final static native func Create(target: wref<Entity>, instigator: wref<Entity>, gameInstance: GameInstance) -> ref<gameObjectActionsCallbackController>;

  public final native func AddObjectAction(objectActionRecord: wref<ObjectAction_Record>) -> Void;

  public final native const func HasObjectAction(objectActionRecord: wref<ObjectAction_Record>) -> Bool;

  public final native func ClearAllObjectActions() -> Void;

  public final native const func IsObjectActionTargetPrereqFulfilled(objectActionRecord: wref<ObjectAction_Record>) -> Bool;

  public final native const func IsObjectActionInstigatorPrereqFulfilled(objectActionRecord: wref<ObjectAction_Record>) -> Bool;

  public final native func UnlockNotifications() -> Void;

  public final native func RegisterSkillCheckCallbacks() -> Void;

  public final native func UnregisterSkillCheckCallbacks() -> Void;
}

public native struct GetActionsContext {

  public native let clearance: ref<Clearance>;

  public native let requestorID: EntityID;

  public native let requestType: gamedeviceRequestType;

  public native let actionPrereqs: array<ActionPrereqs>;

  public native let interactionLayerTag: CName;

  public native let processInitiatorObject: wref<GameObject>;

  public native let ignoresAuthorization: Bool;

  public native let ignoresRPG: Bool;
}

public native class ObjectActionEffect_Record extends TweakDBRecord {

  public final native func EffectorToTrigger() -> wref<Effector_Record>;

  public final native func EffectorToTriggerHandle() -> ref<Effector_Record>;

  public final native func StatusEffect() -> wref<StatusEffect_Record>;

  public final native func StatusEffectHandle() -> ref<StatusEffect_Record>;

  public final native func Recipient() -> wref<ObjectActionReference_Record>;

  public final native func RecipientHandle() -> ref<ObjectActionReference_Record>;
}

public native class ObjectActionReference_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataObjectActionReference;
}

public native class Craftable_Record extends TweakDBRecord {

  public final native func CraftableItem(out outList: array<wref<Item_Record>>) -> Void;

  public final native func GetCraftableItemCount() -> Int32;

  public final native func GetCraftableItemItem(index: Int32) -> wref<Item_Record>;

  public final native func GetCraftableItemItemHandle(index: Int32) -> wref<Item_Record>;

  public final native func CraftableItemContains(item: wref<Item_Record>) -> Bool;
}

public struct ItemRecipe {

  public persistent let targetItem: TweakDBID;

  public persistent let isHidden: Bool;

  public persistent let amount: Int32;
}

public native struct ItemID {

  public final static native func IsValid(itemID: ItemID) -> Bool;

  public final static native func () -> ItemID;

  public final static native func FromTDBID(tdbID: TweakDBID) -> ItemID;

  public final static native func GetTDBID(itemID: ItemID) -> TweakDBID;

  public final static native func CreateQuery(tdbID: TweakDBID) -> ItemID;

  public final static native func IsOfTDBID(itemID: ItemID, tdbID: TweakDBID) -> Bool;

  public final static native func IsQuery(itemID: ItemID) -> Bool;

  public final static native func GetStructure(itemID: ItemID) -> gamedataItemStructure;

  public final static native func GetCombinedHash(itemID: ItemID) -> Uint64;
}

public abstract final native class TransactionSystem extends ITransactionSystem {

  public final native func PrefetchItemAppearance(obj: ref<GameObject>, itemID: ItemID, newAppearanceName: CName) -> Void;

  public final native func ChangeItemAppearance(obj: ref<GameObject>, itemID: ItemID, newAppearanceName: CName, opt useSuffixes: Bool) -> Void;

  public final native func GetItemAppearance(obj: ref<GameObject>, itemID: ItemID) -> CName;

  public final native func ResetItemAppearance(obj: ref<GameObject>, itemID: ItemID) -> Void;

  public final native func RemoveMoney(obj: ref<GameObject>, amount: Int32, currency: CName) -> Bool;

  public final native func GiveMoney(source: ref<GameObject>, target: ref<GameObject>, amount: Int32, currency: CName) -> Bool;

  public final native func RemoveItem(obj: ref<GameObject>, itemID: ItemID, amount: Int32) -> Bool;

  public final native func RemoveItemByTDBID(obj: ref<GameObject>, tdbID: TweakDBID, amount: Int32) -> Bool;

  public final native func GiveItem(obj: ref<GameObject>, itemID: ItemID, amount: Int32) -> Bool;

  public final native func GiveItemByTDBID(obj: ref<GameObject>, tdbID: TweakDBID, amount: Int32) -> Bool;

  public final native func GiveItems(obj: ref<GameObject>, itemList: array<ItemModParams>) -> Bool;

  public final native func GiveItemByItemData(obj: ref<GameObject>, itemData: ref<gameItemData>) -> Bool;

  public final native func GivePreviewItemByItemData(obj: ref<GameObject>, itemData: ref<gameItemData>) -> Bool;

  public final native func GiveItemByItemQuery(obj: ref<GameObject>, itemQueryTDBID: TweakDBID, opt amount: Uint32, opt seed: Uint64, opt telemetryLogSource: String) -> Bool;

  public final native func GiveItemByItemArrayQuery(obj: ref<GameObject>, itemQueryTDBID: TweakDBID, opt seed: Uint64) -> Bool;

  public final native func TransferItem(source: ref<GameObject>, target: ref<GameObject>, itemID: ItemID, amount: Int32) -> Bool;

  public final native func TransferAllItems(source: ref<GameObject>, target: ref<GameObject>) -> Bool;

  public final native func TakeItem(newOwner: ref<GameObject>, itemToLoot: wref<ItemObject>) -> Bool;

  public final native func SellItem(seller: ref<GameObject>, buyer: ref<GameObject>, itemID: ItemID, amount: Int32, currency: CName, opt price: Int32) -> Bool;

  public final native func SellItemStrict(seller: ref<GameObject>, buyer: ref<GameObject>, itemID: ItemID, amount: Int32, currency: CName, opt price: Int32) -> Bool;

  public final native func HasItem(obj: ref<GameObject>, itemID: ItemID) -> Bool;

  public final native func GetNumItems(obj: ref<GameObject>, opt tagFilters: array<CName>) -> Int32;

  public final native func GetTotalItemQuantity(obj: ref<GameObject>) -> Int32;

  public final native func HasTag(obj: ref<GameObject>, tag: CName, itemID: ItemID) -> Bool;

  public final native func GetItemData(obj: ref<GameObject>, itemID: ItemID) -> wref<gameItemData>;

  public final native func GetItemDataByOwnerEntityId(id: EntityID, itemID: ItemID) -> wref<gameItemData>;

  public final native func GetItemQuantity(obj: ref<GameObject>, itemID: ItemID) -> Int32;

  public final native func GetItemQuantityByTag(obj: ref<GameObject>, tag: CName) -> Int32;

  public final native func GetItemList(obj: ref<GameObject>, out itemList: array<wref<gameItemData>>) -> Bool;

  public final native func GetItemListByTag(obj: ref<GameObject>, tag: CName, out itemList: array<wref<gameItemData>>) -> Bool;

  public final native func GetItemListByTags(obj: ref<GameObject>, tagList: array<CName>, out itemList: array<wref<gameItemData>>) -> Bool;

  public final native func GetItemListExcludingTags(obj: ref<GameObject>, tagList: array<CName>, out itemList: array<wref<gameItemData>>) -> Bool;

  public final native func RemoveAllItems(obj: ref<GameObject>) -> Bool;

  public final native func InitializeSlots(obj: ref<GameObject>, out slotIDList: array<TweakDBID>) -> Bool;

  public final native func RefreshAttachment(obj: ref<GameObject>, out slotID: TweakDBID, opt keepWorldTransform: Bool) -> Void;

  public final native func AddItemToSlot(obj: ref<GameObject>, slotID: TweakDBID, itemID: ItemID, opt highPriority: Bool, opt itemObject: wref<ItemObject>, opt plane: ERenderingPlane, opt keepWorldTransform: Bool, opt ignoreRestrictions: Bool) -> Bool;

  public final native func RemoveItemFromSlot(obj: ref<GameObject>, slotID: TweakDBID, opt shouldDestroyEntity: Bool, opt keepWorldTransform: Bool, opt skipSendAnimEquipEvents: Bool) -> Bool;

  public final native func RemoveItemFromAnySlot(obj: ref<GameObject>, itemID: ItemID, opt shouldDestroyEntity: Bool, opt keepWorldTransform: Bool) -> Bool;

  public final native func ChangeItemToSlot(obj: ref<GameObject>, newSlotID: TweakDBID, itemID: ItemID) -> Bool;

  public final native func ClearAllSlots(obj: ref<GameObject>) -> Bool;

  public final native func IsSlotEmpty(obj: ref<GameObject>, slotID: TweakDBID) -> Bool;

  public final native func IsSlotEmptySpawningItem(obj: ref<GameObject>, slotID: TweakDBID) -> Bool;

  public final native func HasItemDataInSlot(obj: ref<GameObject>, slotID: TweakDBID, itemID: ItemID) -> Bool;

  public final native func HasItemInSlot(obj: ref<GameObject>, slotID: TweakDBID, itemID: ItemID) -> Bool;

  public final native func HasItemInAnySlot(obj: ref<GameObject>, itemID: ItemID) -> Bool;

  public final native func CanPlaceItemInSlot(obj: ref<GameObject>, slotID: TweakDBID, itemID: ItemID) -> Bool;

  public final native func GetItemInSlot(obj: ref<GameObject>, slotID: TweakDBID) -> ref<ItemObject>;

  public final native func GetItemInSlotByItemID(obj: ref<GameObject>, itemID: ItemID) -> ref<ItemObject>;

  public final native func MatchVisualTag(entity: ref<Entity>, tag: CName, opt matchUsingDefaultAppearance: Bool) -> Bool;

  public final native func MatchVisualTagByItemID(itemID: ItemID, tag: CName) -> Bool;

  public final native func GetVisualTags(entity: ref<Entity>, opt matchUsingDefaultAppearance: Bool) -> array<CName>;

  public final native func GetVisualTagsByItemID(itemID: ItemID) -> array<CName>;

  public final native func CycleActiveItemInSlot(obj: ref<GameObject>, slotID: TweakDBID) -> ItemID;

  public final native func SetActiveItemInSlot(obj: ref<GameObject>, slotID: TweakDBID, itemID: ItemID) -> Bool;

  public final native func EquipActiveItemInSlot(obj: ref<GameObject>, slotID: TweakDBID, highPriority: Bool) -> Bool;

  public final native func GetActiveItemInSlot(obj: ref<GameObject>, slotID: TweakDBID) -> ItemID;

  public final native func CanItemBeActiveInSlot(obj: ref<GameObject>, slotID: TweakDBID, itemID: ItemID) -> Bool;

  public final native func GetNextActiveItemInSlot(obj: ref<GameObject>, slotID: TweakDBID) -> ItemID;

  public final native func RemovePart(obj: ref<GameObject>, itemID: ItemID, slotID: TweakDBID, opt shouldUpdateEntity: Bool) -> ItemID;

  public final native func AddPart(obj: ref<GameObject>, itemID: ItemID, partItemID: ItemID, opt slotID: TweakDBID) -> Bool;

  public final native func ForcePartInSlot(obj: ref<GameObject>, itemID: ItemID, partItemID: ItemID, slotID: TweakDBID) -> Bool;

  public final native func GetEmptySlotsOnItem(obj: ref<GameObject>, itemID: ItemID, out emptySlots: array<TweakDBID>) -> Void;

  public final native func GetAvailableSlotsOnItem(obj: ref<GameObject>, itemID: ItemID, out availableSlots: array<TweakDBID>) -> Void;

  public final native func GetUsedSlotsOnItem(obj: ref<GameObject>, itemID: ItemID, out used: array<TweakDBID>) -> Void;

  public final native func GetItemsInstallableInSlot(obj: ref<GameObject>, itemID: ItemID, slotID: TweakDBID, out installableItems: array<ItemID>) -> Void;

  public final native func ReinitializeStatsOnEntityItems(obj: ref<GameObject>) -> Void;

  public final native func CalculateTemporaryStatsBundle(obj: ref<GameObject>, rootPartID: ItemID, replacementPartID: ItemID, slotIdForReplacement: TweakDBID) -> ref<StatsBundleHandler>;

  public final native func ReleaseItem(owner: ref<GameObject>, item: wref<ItemObject>) -> Bool;

  public final native func ThrowItem(owner: ref<GameObject>, item: wref<GameObject>, setUpAndLaunchEvent: ref<gameprojectileSetUpAndLaunchEvent>) -> Bool;

  public final native func RegisterInventoryListener(owner: ref<GameObject>, callback: ref<InventoryScriptCallback>) -> ref<InventoryScriptListener>;

  public final native func RegisterAttachmentSlotListener(owner: ref<GameObject>, callback: ref<AttachmentSlotsScriptCallback>) -> ref<AttachmentSlotsScriptListener>;

  public final native func UnregisterInventoryListener(owner: ref<GameObject>, listener: ref<InventoryScriptListener>) -> Void;

  public final native func UnregisterAttachmentSlotListener(owner: ref<GameObject>, listener: ref<AttachmentSlotsScriptListener>) -> Void;

  public final native func OnItemAddedToEquipmentSlot(owner: ref<GameObject>, itemID: ItemID) -> Bool;

  public final native func OnItemRemovedFromEquipmentSlot(owner: ref<GameObject>, itemID: ItemID) -> Bool;
}

public native class gameprojectileLaunchEvent extends Event {

  public native let launchParams: gameprojectileLaunchParams;

  public native let owner: wref<GameObject>;

  public native let projectileParams: gameprojectileWeaponParams;
}

public abstract native class InventoryListener extends IScriptable {
}

public abstract native class AttachmentSlotsListener extends IScriptable {
}

public native class ItemRecipe_Record extends Item_Record {

  public final native func CraftingResult() -> wref<CraftingResult_Record>;

  public final native func CraftingResultHandle() -> ref<CraftingResult_Record>;

  public final native func HideOnItemsAdded(out outList: array<wref<Item_Record>>) -> Void;

  public final native func GetHideOnItemsAddedCount() -> Int32;

  public final native func GetHideOnItemsAddedItem(index: Int32) -> wref<Item_Record>;

  public final native func GetHideOnItemsAddedItemHandle(index: Int32) -> wref<Item_Record>;

  public final native func HideOnItemsAddedContains(item: wref<Item_Record>) -> Bool;
}

public class AddRecipeRequest extends PlayerScriptableSystemRequest {

  public let recipe: TweakDBID;

  public let amount: Int32;

  public let hideOnItemsAdded: array<wref<Item_Record>>;
}

public native class CraftingResult_Record extends TweakDBRecord {

  public final native func Item() -> wref<Item_Record>;

  public final native func ItemHandle() -> ref<Item_Record>;

  public final native func Amount() -> Int32;
}

public final native struct SimpleScreenMessage {

  public native let isShown: Bool;

  public native let duration: Float;

  public native let message: String;

  public native let isInstant: Bool;
}

public static native func Log(const text: script_ref<String>) -> Void;

public native class ItemCategory_Record extends TweakDBRecord {

  public final native func Name() -> CName;

  public final native func LocalizedCategory() -> CName;

  public final native func Type() -> gamedataItemCategory;
}

public native class gameConstantStatModifierData extends gameStatModifierData {

  public native let value: Float;
}

public static native func OperatorAdd(a: TweakDBID, b: TweakDBID) -> TweakDBID;

public native class UpgradingData_Record extends TweakDBRecord {

  public final native func Ingredients(out outList: array<wref<RecipeElement_Record>>) -> Void;

  public final native func GetIngredientsCount() -> Int32;

  public final native func GetIngredientsItem(index: Int32) -> wref<RecipeElement_Record>;

  public final native func GetIngredientsItemHandle(index: Int32) -> wref<RecipeElement_Record>;

  public final native func IngredientsContains(item: wref<RecipeElement_Record>) -> Bool;
}

public native class RecipeElement_Record extends TweakDBRecord {

  public final native func Ingredient() -> wref<Item_Record>;

  public final native func IngredientHandle() -> ref<Item_Record>;

  public final native func Amount() -> Int32;
}

public struct IngredientData {

  public let label: String;

  public let quantity: Int32;

  public let baseQuantity: Int32;

  public let itemAmount: Int32;

  public let inventoryQuantity: Int32;

  public let id: ref<Item_Record>;

  public let icon: String;

  public let iconGender: ItemIconGender;

  public let playerSelectableIngredient: Bool;

  public let buyableIngredient: Bool;

  public let hasEnoughQuantity: Bool;
}

public static native func RoundF(a: Float) -> Int32;

public static native func OperatorMultiply(a: Int32, b: Int32) -> Int32;

public static native func OperatorSubtract(a: Float, b: Float) -> Float;

public native class CraftingPackage_Record extends TweakDBRecord {

  public final native func CraftingRecipe(out outList: array<wref<RecipeElement_Record>>) -> Void;

  public final native func GetCraftingRecipeCount() -> Int32;

  public final native func GetCraftingRecipeItem(index: Int32) -> wref<RecipeElement_Record>;

  public final native func GetCraftingRecipeItemHandle(index: Int32) -> wref<RecipeElement_Record>;

  public final native func CraftingRecipeContains(item: wref<RecipeElement_Record>) -> Bool;

  public final native func CraftingExpModifier() -> Float;

  public final native func OvercraftPenaltyModifier() -> Float;
}

public static native func CeilF(a: Float) -> Int32;

public native class Quality_Record extends TweakDBRecord {

  public final native func Name() -> String;

  public final native func StatModifier() -> wref<StatModifier_Record>;

  public final native func StatModifierHandle() -> ref<StatModifier_Record>;

  public final native func Value() -> Int32;

  public final native func Type() -> gamedataQuality;
}

public static native func EnumValueFromName(enumName: CName, enumValue: CName) -> Int64;

public static native func EnumGetMax(type: CName) -> Int64;

public static native func OperatorEqual(a: ItemID, b: ItemID) -> Bool;

public abstract native class inkILogicController extends IScriptable {
}

public native struct inkMargin {

  public edit native let left: Float;

  public edit native let top: Float;

  public edit native let right: Float;

  public edit native let bottom: Float;

  public final static native func SetUniform(self: inkMargin, uniformThickness: Float) -> Void;
}

public native struct Vector2 {

  public native let X: Float;

  public native let Y: Float;
}

public native struct HDRColor {

  public native let Red: Float;

  public native let Green: Float;

  public native let Blue: Float;

  public native let Alpha: Float;
}

public static native func OperatorDivide(a: Float, b: Float) -> Float;

public static native func Cast(a: Uint8) -> Float;

public native class inkAsyncSpawnData extends IScriptable {

  public native let libraryID: CName;

  public native let parentWidget: wref<inkCompoundWidget>;

  public native let triggerCallbackAsync: Bool;

  public native let userData: ref<IScriptable>;

  public native let introAnimation: CName;

  public final native func SetResourcePath(resourceRef: ResRef) -> Void;
}

public static native func StringToName(const str: script_ref<String>) -> CName;

public native class WidgetStyle_Record extends TweakDBRecord {

  public final native func EnumName() -> String;
}

public static native func OperatorAssignAdd(a: script_ref<String>, const b: script_ref<String>) -> String;

public native class WidgetRatio_Record extends TweakDBRecord {

  public final native func EnumName() -> String;
}

public abstract native class worlduiIGameController extends inkIGameController {

  public final native func ProjectWorldToScreen(worldPosition: Vector4) -> Vector2;

  public final native func QueueBroadcastEvent(evt: ref<Event>) -> Void;

  public final native func ShowGameNotification(data: ref<inkGameNotificationData>) -> ref<inkGameNotificationToken>;
}

public native class inkUserData extends IScriptable {
}

public native class inkGameController extends worlduiIGameController {

  public final native func GetOwnerEntity() -> ref<Entity>;

  public final native func GetPlayerControlledObject() -> ref<GameObject>;

  public final native func GetBlackboardSystem() -> ref<BlackboardSystem>;

  public final native func PlaySound(widgetName: CName, eventName: CName, opt actionKey: CName) -> Void;

  public final native func GetUIBlackboard() -> ref<IBlackboard>;

  public final native func GetPSMBlackboard(playerPuppet: ref<GameObject>) -> ref<IBlackboard>;

  public final native func RegisterDebugCommand(debugFunctionName: CName) -> Void;

  public final native func SetCursorContext(context: CName, opt data: ref<inkUserData>) -> Void;

  public final native func SetCursorOverWidget(widget: wref<inkWidget>) -> Void;
}

public native class ItemType_Record extends TweakDBRecord {

  public final native func Name() -> CName;

  public final native func LocalizedType() -> CName;

  public final native func AnimFeatureIndex() -> Int32;

  public final native func Type() -> gamedataItemType;
}

public native struct InnerItemData {

  public final static native func GetItemID(innerItemData: InnerItemData) -> ItemID;

  public final static native func GetSlotID(innerItemData: InnerItemData) -> TweakDBID;

  public final static native func GetStaticData(innerItemData: InnerItemData) -> ref<Item_Record>;

  public final static native func HasStatData(innerItemData: InnerItemData, type: gamedataStatType) -> Bool;

  public final static native func GetStatValueByType(innerItemData: InnerItemData, type: gamedataStatType) -> Float;
}

public class PartUninstallRequest extends PlayerScriptableSystemRequest {

  public let itemID: ItemID;

  public let partID: ItemID;
}

public class PartInstallRequest extends PlayerScriptableSystemRequest {

  public let itemID: ItemID;

  public let partID: ItemID;
}

public native struct SPartSlots {

  public native let status: ESlotState;

  public native let installedPart: ItemID;

  public native let slotID: TweakDBID;

  public native let innerItemData: InnerItemData;
}

public native class ItemBlueprintElement_Record extends TweakDBRecord {

  public final native func Slot() -> wref<AttachmentSlot_Record>;

  public final native func SlotHandle() -> ref<AttachmentSlot_Record>;

  public final native func PrereqID() -> wref<IPrereq_Record>;

  public final native func PrereqIDHandle() -> ref<IPrereq_Record>;

  public final native func ChildElements(out outList: array<wref<ItemBlueprintElement_Record>>) -> Void;

  public final native func GetChildElementsCount() -> Int32;

  public final native func GetChildElementsItem(index: Int32) -> wref<ItemBlueprintElement_Record>;

  public final native func GetChildElementsItemHandle(index: Int32) -> wref<ItemBlueprintElement_Record>;

  public final native func ChildElementsContains(item: wref<ItemBlueprintElement_Record>) -> Bool;
}

public native class ItemBlueprint_Record extends TweakDBRecord {

  public final native func RootElement() -> wref<ItemBlueprintElement_Record>;

  public final native func RootElementHandle() -> ref<ItemBlueprintElement_Record>;
}

public native class SlotItemPartPreset_Record extends TweakDBRecord {

  public final native func Slot() -> wref<AttachmentSlot_Record>;

  public final native func SlotHandle() -> ref<AttachmentSlot_Record>;

  public final native func ItemPartPreset() -> wref<Item_Record>;

  public final native func ItemPartPresetHandle() -> ref<Item_Record>;

  public final native func ItemPartList(out outList: array<wref<ItemPartListElement_Record>>) -> Void;

  public final native func GetItemPartListCount() -> Int32;

  public final native func GetItemPartListItem(index: Int32) -> wref<ItemPartListElement_Record>;

  public final native func GetItemPartListItemHandle(index: Int32) -> wref<ItemPartListElement_Record>;

  public final native func ItemPartListContains(item: wref<ItemPartListElement_Record>) -> Bool;
}

public native class inkWeakHashMap extends IScriptable {

  public final native func Insert(key: Uint64, value: wref<IScriptable>) -> Void;

  public final native func Get(key: Uint64) -> wref<IScriptable>;

  public final native func Set(key: Uint64, value: wref<IScriptable>) -> Void;

  public final native func KeyExist(key: Uint64) -> Bool;

  public final native func Remove(key: Uint64) -> Bool;

  public final native func Clear() -> Void;

  public final native func GetValues(out values: array<wref<IScriptable>>) -> Void;
}

public struct UILocRecord {

  public let m_tag: CName;

  public let m_value: String;
}

public native struct SlotWeaponData {

  public native let weaponID: ItemID;

  public native let ammoCurrent: Int32;

  public native let magazineCap: Int32;

  public native let ammoId: ItemID;

  public native let triggerModeCurrent: gamedataTriggerMode;

  public native let triggerModeList: array<gamedataTriggerMode>;

  public native let evolution: gamedataWeaponEvolution;

  public native let isActive: Bool;

  public native let isFirstEquip: Bool;
}

public native class SlotDataHolder extends IScriptable {

  public native let ammoData: array<AmmoData>;

  public native let weapon: SlotWeaponData;
}

public native struct SLoadout {

  public native persistent let equipAreas: array<SEquipArea>;

  public native persistent let equipmentSets: array<SEquipmentSet>;
}

public native struct SEquipArea {

  public native persistent let areaType: gamedataEquipmentArea;

  public native persistent let equipSlots: array<SEquipSlot>;

  public native persistent let activeIndex: Int32;
}

public native struct SEquipSlot {

  public native persistent let itemID: ItemID;

  public native persistent let isLocked: Bool;
}

public native struct StatViewData {

  public native let type: gamedataStatType;

  public native let statName: String;

  public native let value: Int32;

  public native let diffValue: Int32;

  public native let isMaxValue: Bool;

  public native let valueF: Float;

  public native let diffValueF: Float;

  public native let statMinValueF: Float;

  public native let statMaxValueF: Float;

  public native let canBeCompared: Bool;

  public native let isCompared: Bool;

  public native let statMinValue: Int32;

  public native let statMaxValue: Int32;
}

public static native func LocKeyToString(hashKey: CName) -> String;

public abstract class ATooltipData extends IScriptable {
}

public native struct ItemViewData {

  public native let primaryStats: array<StatViewData>;

  public native let secondaryStats: array<StatViewData>;

  public native let id: ItemID;

  public native let itemName: String;

  public native let categoryName: String;

  public native let description: String;

  public native let quality: String;

  public native let price: Float;

  public native let isBroken: Bool;

  public native let comparedQuality: gamedataQuality;
}

public struct InventoryTooltipData_StatData {

  public let statType: gamedataStatType;

  public let statName: String;

  public let minStatValue: Int32;

  public let maxStatValue: Int32;

  public let currentValue: Int32;

  public let diffValue: Int32;

  public let minStatValueF: Float;

  public let maxStatValueF: Float;

  public let currentValueF: Float;

  public let diffValueF: Float;

  public let state: EInventoryDataStatDisplayType;
}

public static native func MinF(a: Float, b: Float) -> Float;

public static native func MaxF(a: Float, b: Float) -> Float;

public native class DamageType_Record extends TweakDBRecord {

  public final native func EnumName() -> String;

  public final native func AssociatedStat() -> wref<Stat_Record>;

  public final native func AssociatedStatHandle() -> ref<Stat_Record>;

  public final native func Resistances(out outList: array<wref<StatDistributionData_Record>>) -> Void;

  public final native func GetResistancesCount() -> Int32;

  public final native func GetResistancesItem(index: Int32) -> wref<StatDistributionData_Record>;

  public final native func GetResistancesItemHandle(index: Int32) -> wref<StatDistributionData_Record>;

  public final native func ResistancesContains(item: wref<StatDistributionData_Record>) -> Bool;

  public final native func Tags() -> array<CName>;

  public final native func GetTagsCount() -> Int32;

  public final native func GetTagsItem(index: Int32) -> CName;

  public final native func TagsContains(item: CName) -> Bool;

  public final native func DamageType() -> gamedataDamageType;
}

public struct InventoryItemAttachments {

  public let SlotID: TweakDBID;

  public let ItemData: InventoryItemData;

  public let SlotName: String;

  public let SlotType: InventoryItemAttachmentType;
}

public class RecipeData extends IScriptable {

  public let label: String;

  public let ingredients: array<IngredientData>;

  public let icon: String;

  public let iconGender: ItemIconGender;

  public let description: String;

  public let type: String;

  public let id: ref<Item_Record>;

  public let isCraftable: Bool;

  public let inventoryItem: InventoryItemData;

  public let amount: Int32;

  public let isNew: Bool;

  public let isSelected: Bool;
}

public native class WeaponEvolution_Record extends TweakDBRecord {

  public final native func Name() -> String;

  public final native func Type() -> gamedataWeaponEvolution;
}

public native class UIStatsMap_Record extends TweakDBRecord {

  public final native func TypesToCompareWith(out outList: array<wref<ItemType_Record>>) -> Void;

  public final native func GetTypesToCompareWithCount() -> Int32;

  public final native func GetTypesToCompareWithItem(index: Int32) -> wref<ItemType_Record>;

  public final native func GetTypesToCompareWithItemHandle(index: Int32) -> wref<ItemType_Record>;

  public final native func TypesToCompareWithContains(item: wref<ItemType_Record>) -> Bool;

  public final native func StatsToCompare(out outList: array<wref<Stat_Record>>) -> Void;

  public final native func GetStatsToCompareCount() -> Int32;

  public final native func GetStatsToCompareItem(index: Int32) -> wref<Stat_Record>;

  public final native func GetStatsToCompareItemHandle(index: Int32) -> wref<Stat_Record>;

  public final native func StatsToCompareContains(item: wref<Stat_Record>) -> Bool;

  public final native func PrimaryStats(out outList: array<wref<Stat_Record>>) -> Void;

  public final native func GetPrimaryStatsCount() -> Int32;

  public final native func GetPrimaryStatsItem(index: Int32) -> wref<Stat_Record>;

  public final native func GetPrimaryStatsItemHandle(index: Int32) -> wref<Stat_Record>;

  public final native func PrimaryStatsContains(item: wref<Stat_Record>) -> Bool;

  public final native func SecondaryStats(out outList: array<wref<Stat_Record>>) -> Void;

  public final native func GetSecondaryStatsCount() -> Int32;

  public final native func GetSecondaryStatsItem(index: Int32) -> wref<Stat_Record>;

  public final native func GetSecondaryStatsItemHandle(index: Int32) -> wref<Stat_Record>;

  public final native func SecondaryStatsContains(item: wref<Stat_Record>) -> Bool;
}

public static native func GetLocalizedItemNameByCName(hashKey: CName) -> String;

public static native func GetLocalizedText(const textKey: script_ref<String>) -> String;

public static native func OperatorEqual(a: Float, b: Float) -> Bool;

public static native func OperatorGreaterEqual(a: Float, b: Float) -> Bool;

public static native func FloorF(a: Float) -> Int32;

public static native func OperatorAdd(a: Float, b: Float) -> Float;

public native struct InventoryItemAbility {

  public native let IconPath: CName;

  public native let Title: String;

  public native let Description: String;

  public native let LocalizationDataPackage: ref<UILocalizationDataPackage>;
}

public native class GameplayLogicPackageUIData_Record extends TweakDBRecord {

  public final native func LocalizedDescription() -> String;

  public final native func LocalizedName() -> String;

  public final native func FloatValues() -> array<Float>;

  public final native func GetFloatValuesCount() -> Int32;

  public final native func GetFloatValuesItem(index: Int32) -> Float;

  public final native func FloatValuesContains(item: Float) -> Bool;

  public final native func IntValues() -> array<Int32>;

  public final native func GetIntValuesCount() -> Int32;

  public final native func GetIntValuesItem(index: Int32) -> Int32;

  public final native func IntValuesContains(item: Int32) -> Bool;

  public final native func NameValues() -> array<CName>;

  public final native func GetNameValuesCount() -> Int32;

  public final native func GetNameValuesItem(index: Int32) -> CName;

  public final native func NameValuesContains(item: CName) -> Bool;

  public final native func Stats(out outList: array<wref<Stat_Record>>) -> Void;

  public final native func GetStatsCount() -> Int32;

  public final native func GetStatsItem(index: Int32) -> wref<Stat_Record>;

  public final native func GetStatsItemHandle(index: Int32) -> wref<Stat_Record>;

  public final native func StatsContains(item: wref<Stat_Record>) -> Bool;

  public final native func IconPath() -> CName;
}

public native struct GameTime {

  public final static native func MakeGameTime(days: Int32, hours: Int32, opt minutes: Int32, opt seconds: Int32) -> GameTime;

  public final static native func Day() -> GameTime;

  public final static native func Hour() -> GameTime;

  public final static native func Minute() -> GameTime;

  public final static native func GetSeconds(self: GameTime) -> Int32;

  public final static native func Seconds(self: GameTime) -> Int32;

  public final static native func Minutes(self: GameTime) -> Int32;

  public final static native func Hours(self: GameTime) -> Int32;

  public final static native func Days(self: GameTime) -> Int32;

  public final static native func ToString(self: GameTime) -> String;

  public final static native func IsAfter(self: GameTime, other: GameTime) -> Bool;
}

public static native func EnumValueToName(enumName: CName, enumValue: Int64) -> CName;

public native class IMarketSystem extends ScriptableSystem {

  public final native func AddVendorHashMap(key: EntityID, tweakID: TweakDBID, vendor: ref<IScriptable>) -> Bool;

  public final native func ClearVendorHashMap() -> Void;

  public final native const func GetVendorHashMap(key: EntityID) -> wref<IScriptable>;

  public final native const func GetVendorTBIDHashMap(key: TweakDBID) -> wref<IScriptable>;
}

public native class Vendor_Record extends TweakDBRecord {

  public final native func LocalizedDescription() -> String;

  public final native func LocalizedName() -> String;

  public final native func Faction() -> wref<Affiliation_Record>;

  public final native func FactionHandle() -> ref<Affiliation_Record>;

  public final native func VendorType() -> wref<VendorType_Record>;

  public final native func VendorTypeHandle() -> ref<VendorType_Record>;

  public final native func VendorFilterTags() -> array<CName>;

  public final native func GetVendorFilterTagsCount() -> Int32;

  public final native func GetVendorFilterTagsItem(index: Int32) -> CName;

  public final native func VendorFilterTagsContains(item: CName) -> Bool;

  public final native func ItemStock(out outList: array<wref<VendorItem_Record>>) -> Void;

  public final native func GetItemStockCount() -> Int32;

  public final native func GetItemStockItem(index: Int32) -> wref<VendorItem_Record>;

  public final native func GetItemStockItemHandle(index: Int32) -> wref<VendorItem_Record>;

  public final native func ItemStockContains(item: wref<VendorItem_Record>) -> Bool;

  public final native func AccessPrereqs(out outList: array<wref<IPrereq_Record>>) -> Void;

  public final native func GetAccessPrereqsCount() -> Int32;

  public final native func GetAccessPrereqsItem(index: Int32) -> wref<IPrereq_Record>;

  public final native func GetAccessPrereqsItemHandle(index: Int32) -> wref<IPrereq_Record>;

  public final native func AccessPrereqsContains(item: wref<IPrereq_Record>) -> Bool;

  public final native func ExperienceStock(out outList: array<wref<VendorExperience_Record>>) -> Void;

  public final native func GetExperienceStockCount() -> Int32;

  public final native func GetExperienceStockItem(index: Int32) -> wref<VendorExperience_Record>;

  public final native func GetExperienceStockItemHandle(index: Int32) -> wref<VendorExperience_Record>;

  public final native func ExperienceStockContains(item: wref<VendorExperience_Record>) -> Bool;

  public final native func VendorInverseFilterTags() -> array<CName>;

  public final native func GetVendorInverseFilterTagsCount() -> Int32;

  public final native func GetVendorInverseFilterTagsItem(index: Int32) -> CName;

  public final native func VendorInverseFilterTagsContains(item: CName) -> Bool;

  public final native func CustomerInverseFilterTags() -> array<CName>;

  public final native func GetCustomerInverseFilterTagsCount() -> Int32;

  public final native func GetCustomerInverseFilterTagsItem(index: Int32) -> CName;

  public final native func CustomerInverseFilterTagsContains(item: CName) -> Bool;

  public final native func CustomerFilterTags() -> array<CName>;

  public final native func GetCustomerFilterTagsCount() -> Int32;

  public final native func GetCustomerFilterTagsItem(index: Int32) -> CName;

  public final native func CustomerFilterTagsContains(item: CName) -> Bool;

  public final native func MapVisibilityPrereqs(out outList: array<wref<IPrereq_Record>>) -> Void;

  public final native func GetMapVisibilityPrereqsCount() -> Int32;

  public final native func GetMapVisibilityPrereqsItem(index: Int32) -> wref<IPrereq_Record>;

  public final native func GetMapVisibilityPrereqsItemHandle(index: Int32) -> wref<IPrereq_Record>;

  public final native func MapVisibilityPrereqsContains(item: wref<IPrereq_Record>) -> Bool;

  public final native func Craftbooks(out outList: array<wref<VendorCraftable_Record>>) -> Void;

  public final native func GetCraftbooksCount() -> Int32;

  public final native func GetCraftbooksItem(index: Int32) -> wref<VendorCraftable_Record>;

  public final native func GetCraftbooksItemHandle(index: Int32) -> wref<VendorCraftable_Record>;

  public final native func CraftbooksContains(item: wref<VendorCraftable_Record>) -> Bool;

  public final native func InGameTimeToRestock() -> Float;
}

public native class VendorItem_Record extends VendorWare_Record {

  public final native func Item() -> wref<Item_Record>;

  public final native func ItemHandle() -> ref<Item_Record>;
}

public native struct SItemStack {

  public native persistent let itemID: ItemID;

  public native persistent let quantity: Int32;

  public native persistent let powerLevel: Int32;

  public native persistent let vendorItemID: TweakDBID;

  public native let isAvailable: Bool;

  public native let requirement: SItemStackRequirementData;
}

public static native func OperatorLessEqual(a: Float, b: Float) -> Bool;

public static native func OperatorLess(a: Float, b: Float) -> Bool;

public static native func RandF() -> Float;

public static native func SqrtF(a: Float) -> Float;

public static native func LogF(a: Float) -> Float;

public static native func CosF(a: Float) -> Float;

public native class VendorType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataVendorType;
}

public native class VendorProgressionBasedStock_Record extends TweakDBRecord {

  public final native func Items(out outList: array<wref<VendorItem_Record>>) -> Void;

  public final native func GetItemsCount() -> Int32;

  public final native func GetItemsItem(index: Int32) -> wref<VendorItem_Record>;

  public final native func GetItemsItemHandle(index: Int32) -> wref<VendorItem_Record>;

  public final native func ItemsContains(item: wref<VendorItem_Record>) -> Bool;
}

public static native func RandRange(min: Int32, max: Int32) -> Int32;

public static native func OperatorModulo(a: Int32, b: Int32) -> Int32;

public class MarketSystemRequest extends ScriptableSystemRequest {

  public let owner: wref<GameObject>;

  public let vendorID: TweakDBID;
}

public class AttachVendorRequest extends MarketSystemRequest {
}

public abstract final native class GodModeSystem extends IGodModeSystem {

  public final native func AddGodMode(entID: EntityID, gmType: gameGodModeType, sourceInfo: CName) -> Bool;

  public final native func RemoveGodMode(entID: EntityID, gmType: gameGodModeType, sourceInfo: CName) -> Bool;

  public final native func HasGodMode(entID: EntityID, gmType: gameGodModeType) -> Bool;

  public final native func GetGodModeCount(entID: EntityID, gmType: gameGodModeType) -> Uint32;

  public final native func GetGodModeSources(entID: EntityID, gmType: gameGodModeType) -> array<CName>;

  public final native func ClearGodMode(entID: EntityID, sourceInfo: CName) -> Void;

  public final native func EnableOverride(entID: EntityID, gmType: gameGodModeType, sourceInfo: CName) -> Bool;

  public final native func DisableOverride(entID: EntityID, sourceInfo: CName) -> Bool;
}

public native class ArchetypeData_Record extends TweakDBRecord {

  public final native func Type() -> wref<ArchetypeType_Record>;

  public final native func TypeHandle() -> ref<ArchetypeType_Record>;

  public final native func StatModifierGroups(out outList: array<wref<StatModifierGroup_Record>>) -> Void;

  public final native func GetStatModifierGroupsCount() -> Int32;

  public final native func GetStatModifierGroupsItem(index: Int32) -> wref<StatModifierGroup_Record>;

  public final native func GetStatModifierGroupsItemHandle(index: Int32) -> wref<StatModifierGroup_Record>;

  public final native func StatModifierGroupsContains(item: wref<StatModifierGroup_Record>) -> Bool;

  public final native func AbilityGroups(out outList: array<wref<GameplayAbilityGroup_Record>>) -> Void;

  public final native func GetAbilityGroupsCount() -> Int32;

  public final native func GetAbilityGroupsItem(index: Int32) -> wref<GameplayAbilityGroup_Record>;

  public final native func GetAbilityGroupsItemHandle(index: Int32) -> wref<GameplayAbilityGroup_Record>;

  public final native func AbilityGroupsContains(item: wref<GameplayAbilityGroup_Record>) -> Bool;

  public final native func ShootingPatternPackages(out outList: array<wref<AIPatternsPackage_Record>>) -> Void;

  public final native func GetShootingPatternPackagesCount() -> Int32;

  public final native func GetShootingPatternPackagesItem(index: Int32) -> wref<AIPatternsPackage_Record>;

  public final native func GetShootingPatternPackagesItemHandle(index: Int32) -> wref<AIPatternsPackage_Record>;

  public final native func ShootingPatternPackagesContains(item: wref<AIPatternsPackage_Record>) -> Bool;
}

public class PlayerCompanionCacheDataEvent extends Event {

  public let m_isPlayerCompanionCached: Bool;

  public let m_isPlayerCompanionCachedTimeStamp: Float;
}

public native struct EngineTime {

  public final static native func IsValid(self: EngineTime) -> Bool;

  public final static native func FromFloat(value: Float) -> EngineTime;

  public final static native func ToFloat(self: EngineTime) -> Float;

  public final static native func ToString(self: EngineTime) -> String;
}

public native class ScriptableComponent extends GameComponent {

  public final native const func GetOwner() -> ref<GameObject>;

  public final native const func GetGameTime() -> GameTime;

  public final native const func GetEngineTime() -> EngineTime;

  public final native const func GetSimTime() -> EngineTime;

  public final native const func GetAudioSystem() -> ref<AudioSystem>;

  public final native const func GetDebugVisualizerSystem() -> ref<DebugVisualizerSystem>;

  public final native const func GetDelaySystem() -> ref<DelaySystem>;

  public final native const func GetGameEffectSystem() -> ref<EffectSystem>;

  public final native const func GetPlayerSystem() -> ref<PlayerSystem>;

  public final native const func GetQuestsSystem() -> ref<QuestsSystem>;

  public final native const func GetStatsSystem() -> ref<StatsSystem>;

  public final native const func GetStatPoolsSystem() -> ref<StatPoolsSystem>;

  public final native const func GetTargetingSystem() -> ref<TargetingSystem>;

  public final native const func GetTimeSystem() -> ref<TimeSystem>;

  public final native const func GetTransactionSystem() -> ref<TransactionSystem>;

  public final native const func GetPersistencySystem() -> ref<GamePersistencySystem>;

  public final native const func GetVisionModeSystem() -> ref<VisionModeSystem>;
}

public native class AIEvent extends Event {

  public native let name: CName;

  public native let timeToLive: Float;

  public final native const func HasTag(tag: CName) -> Bool;

  public final native const func GetTimeToLive() -> Float;
}

public native class BaseStimuliEvent extends AIEvent {
}

public class StimEventTaskData extends ScriptTaskData {

  public let cachedEvt: ref<StimuliEvent>;
}

public native class Stim_Record extends TweakDBRecord {

  public final native func Propagation() -> wref<StimPropagation_Record>;

  public final native func PropagationHandle() -> ref<StimPropagation_Record>;

  public final native func Type() -> wref<StimType_Record>;

  public final native func TypeHandle() -> ref<StimType_Record>;

  public final native func Priority() -> wref<StimPriority_Record>;

  public final native func PriorityHandle() -> ref<StimPriority_Record>;

  public final native func Tags() -> array<CName>;

  public final native func GetTagsCount() -> Int32;

  public final native func GetTagsItem(index: Int32) -> CName;

  public final native func TagsContains(item: CName) -> Bool;

  public final native func Category() -> CName;

  public final native func Interval() -> Float;

  public final native func Radius() -> Float;

  public final native func Fear() -> Float;

  public final native func Aggressive() -> Float;

  public final native func IsReactionStim() -> Bool;
}

public final native class StatusEffectSystem extends IStatusEffectSystem {

  public final native func ApplyStatusEffect(objID: EntityID, statusEffectID: TweakDBID, opt instigatorID: TweakDBID, opt instigatorEntityID: EntityID, opt applyCount: Uint32, opt direction: Vector4) -> Bool;

  public final native func RemoveStatusEffect(objID: EntityID, statusEffectID: TweakDBID, opt removeCount: Uint32) -> Bool;

  public final native func RemoveAllStatusEffectOfType(objID: EntityID, statusEffectType: gamedataStatusEffectType) -> Bool;

  public final native func HasStatusEffect(objID: EntityID, statusEffectID: TweakDBID) -> Bool;

  public final native func HasStatusEffectOfType(objID: EntityID, statusEffectType: gamedataStatusEffectType) -> Bool;

  public final native func HasStatusEffectOfTypeName(objID: EntityID, statusEffectTypeName: String) -> Bool;

  public final native func HasStatusEffectWithTag(objID: EntityID, tag: CName) -> Bool;

  public final native const func GetAppliedEffects(objID: EntityID, out appliedEffects: array<ref<StatusEffect>>) -> Void;

  public final native func SetStatusEffectRemainingDuration(objID: EntityID, statusEffectID: TweakDBID, duration: Float) -> Bool;

  public final native func RegisterListener(objID: EntityID, listener: ref<IStatusEffectListener>) -> Void;

  public final static native func ObjectHasStatusEffect(target: wref<GameObject>, statusEffectID: TweakDBID) -> Bool;

  public final static native func ObjectHasStatusEffectOfType(target: wref<GameObject>, statusEffectType: gamedataStatusEffectType) -> Bool;

  public final static native func ObjectHasStatusEffectOfTypeName(target: wref<GameObject>, statusEffectTypeName: String) -> Bool;

  public final static native func ObjectHasStatusEffectWithTag(target: wref<GameObject>, tag: CName) -> Bool;

  public final static native func ObjectHasStatusEffectWithTags(target: wref<GameObject>, tag: script_ref<array<CName>>) -> Bool;
}

public abstract native class StatusEffectBase extends IScriptable {
}

public native class AttitudeAgent extends GameComponent {

  public final native func IsDangerous(other: ref<AttitudeAgent>) -> Bool;

  public final native func GetAttitudeGroup() -> CName;

  public final native func GetAttitudeTowards(other: ref<AttitudeAgent>) -> EAIAttitude;

  public final native func SetAttitudeGroup(group: CName) -> Void;

  public final native func SetAttitudeTowards(agent: ref<AttitudeAgent>, attitude: EAIAttitude) -> Void;

  public final native func SetAttitudeTowardsAgentGroup(targetAgent: ref<AttitudeAgent>, ownerAgent: ref<AttitudeAgent>, attitude: EAIAttitude) -> Void;
}

public static native func OperatorAssignAdd(out a: Uint8, b: Uint8) -> Uint8;

public static native func OperatorEqual(a: Uint8, b: Uint8) -> Bool;

public final native class StimBroadcasterComponentHelper extends IScriptable {

  public final static native func CreateStimEvent(owner: ref<GameObject>, stimType: gamedataStimType, opt radius: Float, opt investigateData: stimInvestigateData, opt propagationChange: Bool) -> ref<StimuliEvent>;

  public final static native func ProcessSingleStimuliBroadcast(owner: ref<GameObject>, stimuli: ref<StimuliEvent>, isCrowd: Bool, isSurveillanceCamera: Bool, invalidDistraction: Bool, targets: array<NPCstubData>) -> Bool;
}

public static native func IsHost() -> Bool;

public native class AnimInputSetter extends Event {

  public native let key: CName;
}

public native class AnimInputSetterVector extends AnimInputSetter {

  public native let value: Vector4;
}

public native class AnimInputSetterAnimFeature extends AnimInputSetter {

  public native let value: ref<AnimFeature>;

  public native let delay: Float;
}

public native class AnimExternalEvent extends Event {

  public native let name: CName;
}

public native class AnimInputSetterFloat extends AnimInputSetter {

  public native let value: Float;
}

public native class AnimInputSetterBool extends AnimInputSetter {

  public native let value: Bool;
}

public native class AnimInputSetterInt extends AnimInputSetter {

  public native let value: Int32;
}

public native class AnimInputSetterUsesSleepMode extends Event {

  public native let value: Bool;
}

public native class AnimWrapperWeightSetter extends AnimInputSetter {

  public native let value: Float;
}

public native struct EntityRequestComponentsInterface {

  public final static native func RequestComponent(self: EntityRequestComponentsInterface, componentName: CName, componentType: CName, mandatory: Bool) -> Void;
}

public native class MaraudersMapDevicesSink extends IScriptable {

  public final native func PushName(key: CName, value: CName) -> Void;

  public final native func PushString(key: String, value: String) -> Void;

  public final native func PushVector4(key: String, value: Vector4) -> Void;

  public final native func PushVector2(key: String, value: Vector2) -> Void;

  public final native func PushQuaternion(key: String, value: Quaternion) -> Void;

  public final native func PushFloat(key: String, value: Float) -> Void;

  public final native func PushInt32(key: String, value: Int32) -> Void;

  public final native func PushUint32(key: String, value: Uint32) -> Void;

  public final native func PushBool(key: String, value: Bool) -> Void;

  public final native func BeginCategory(name: String) -> Void;

  public final native func EndCategory() -> Void;
}

public struct SDeviceMappinData {

  public let mappinName: CName;

  @attrib(customEditor, "TweakDBGroupInheritance;MappinDefinition")
  public let mappinType: TweakDBID;

  public let mappinVariant: gamedataMappinVariant;

  @default(SDeviceMappinData, true)
  public let enabled: Bool;

  @default(SDeviceMappinData, 30.f)
  public let range: Float;

  public let caption: String;

  public let offset: Vector4;

  public let position: Vector4;

  public let permanent: Bool;

  @default(SDeviceMappinData, true)
  public let checkIfIsTarget: Bool;

  public let id: NewMappinID;

  @default(SDeviceMappinData, false)
  public let active: Bool;

  public let gameplayRole: EGameplayRole;

  public let visualStateData: ref<GameplayRoleMappinData>;
}

public native class MappinScriptData extends IScriptable {

  public native let statPoolType: gamedataStatPoolType;
}

public struct FocusClueDefinition {

  @attrib(category, "Extended Clues")
  public const let extendedClueRecords: array<ClueRecordData>;

  @attrib(category, "Final Conclusion")
  @attrib(customEditor, "TweakDBGroupInheritance;scanning.FocusClue;FocusClue")
  public let clueRecord: TweakDBID;

  @attrib(category, "Final Conclusion")
  public let factToActivate: CName;

  @attrib(category, "Final Conclusion")
  public const let facts: array<SFactOperationData>;

  public let useAutoInspect: Bool;

  public let isEnabled: Bool;

  @default(FocusClueDefinition, true)
  public let isProgressing: Bool;

  public let clueGroupID: CName;

  public let wasInspected: Bool;

  public let qDbCallbackID: Uint32;

  public let conclusionQuestState: EConclusionQuestState;
}

public native class NativeHudManager extends ScriptableSystem {

  protected final native func RegisterActor(actorId: EntityID) -> ref<HUDActor>;

  protected final native func UnregisterActor(actorId: EntityID) -> Bool;

  protected final native const func GetActor(actorId: EntityID) -> ref<HUDActor>;

  protected final native const func GetAllActors() -> array<ref<HUDActor>>;

  public final native const func IsQuickHackPanelOpened() -> Bool;

  public final native func SetIsQuickHackPanelOpened(isOpen: Bool) -> Void;
}

public final native class VisionModeSystem extends IVisionModeSystem {

  public final native func EnterMode(activator: ref<GameObject>, mode: gameVisionModeType) -> Void;

  public final native func SetEntityVisionMode(id: EntityID, val: Bool) -> Void;

  public final native func SetChildEntityVisionMode(parentId: EntityID, childNodeRef: NodeRef, enable: Bool) -> Void;

  public final native func ForceVisionAppearance(entity: ref<GameObject>, appearance: VisionAppearance, opt transitionTime: Float) -> Void;

  public final native func CancelForceVisionAppearance(entity: ref<GameObject>, opt transitionTime: Float) -> Void;

  public final native func GetScanningController() -> ref<ScanningController>;

  public final native func RegisterActivatorCallback(activator: ref<GameObject>, listener: ref<GameObject>) -> Bool;

  public final native func UnregisterActivatorCallback(activator: ref<GameObject>, listener: ref<GameObject>) -> Void;

  public final native func RequestPulse(entity: ref<GameObject>, initialAppearance: VisionAppearance, peakAppearance: VisionAppearance, opt transitionInTime: Float, opt transitionOutTime: Float) -> Void;

  public final native func RegisterDelayedReveal(revealEntityId: EntityID, revealId: gameVisionModeSystemRevealIdentifier, delayTime: Float) -> Void;

  public final native func UnregisterDelayedReveal(revealEntityId: EntityID, revealId: gameVisionModeSystemRevealIdentifier) -> Void;

  public final native const func IsDelayedRevealInProgress(revealEntityId: EntityID, revealId: gameVisionModeSystemRevealIdentifier) -> Bool;

  public final native const func GetDelayedRevealEntries(revealEntityId: EntityID, out revealIds: array<gameVisionModeSystemRevealIdentifier>) -> Void;
}

public static native func OperatorEqual(a: EntityID, b: EntityID) -> Bool;

public class HUDActorUpdateData extends IScriptable {

  public let updateVisibility: Bool;

  public let visibilityValue: ActorVisibilityStatus;

  public let updateIsRevealed: Bool;

  public let isRevealedValue: Bool;

  public let updateIsTagged: Bool;

  public let isTaggedValue: Bool;

  public let updateClueData: Bool;

  public let clueDataValue: HUDClueData;

  public let updateIsRemotelyAccessed: Bool;

  public let isRemotelyAccessedValue: Bool;

  public let updateCanOpenScannerInfo: Bool;

  public let canOpenScannerInfoValue: Bool;

  public let updateIsInIconForcedVisibilityRange: Bool;

  public let isInIconForcedVisibilityRangeValue: Bool;

  public let updateIsIconForcedVisibleThroughWalls: Bool;

  public let isIconForcedVisibleThroughWallsValue: Bool;
}

public struct HUDClueData {

  public let isClue: Bool;

  public let clueGroupID: CName;
}

public struct HUDJob {

  public let actor: wref<HUDActor>;

  public let instruction: ref<HUDInstruction>;
}

public final native class ScanningController extends IScriptable {

  public final native func IsScanned(object: ref<GameObject>) -> Bool;

  public final native func SetIsScanned_Event(object: ref<GameObject>, val: Bool) -> Bool;

  public final native func GetScanProgress(object: ref<GameObject>) -> Float;

  public final native func TagObject(object: ref<GameObject>) -> Void;

  public final native func UntagObject(object: ref<GameObject>) -> Float;

  public final native func UntagAll() -> Void;

  public final native const func IsTagged(const object: ref<GameObject>) -> Bool;

  public final native func EnterMode(object: ref<GameObject>, mode: gameScanningMode) -> Void;

  public final native func PulseScan(object: ref<GameObject>, range3D: Float, opt range2D: Vector4, opt startPosition: Vector4) -> Void;

  public final native func ImmediateScan(object: ref<GameObject>, range3D: Float, opt range2D: Vector4, opt startPosition: Vector4) -> Void;

  public final native const func GetExclusiveFocusClueEntity() -> EntityID;
}

public static native func OperatorNotEqual(a: EntityID, b: EntityID) -> Bool;

public class BraindanceInstance extends ModuleInstance {
}

public static native func OperatorNotEqual(a: DelayID, b: DelayID) -> Bool;

public class CrosshairModule extends HUDModule {

  private let m_activeCrosshairs: array<ref<Crosshair>>;
}

public class AimAssistModule extends HUDModule {

  private let m_activeAssists: array<ref<AimAssist>>;
}

public class RevealQuickhackMenu extends HUDManagerRequest {

  public let shouldOpenWheel: Bool;
}

public class QuickhackData extends IScriptable {

  public let m_action: ref<BaseScriptableAction>;

  public let m_actionOwner: EntityID;

  public let m_actionOwnerName: CName;

  public let m_icon: TweakDBID;

  public let m_iconCategory: CName;

  public let m_title: String;

  public let m_titleAlternative: String;

  public let m_description: String;

  public let m_inactiveReason: String;

  public let m_isLocked: Bool;

  public let m_actionState: EActionInactivityReson;

  public let m_type: gamedataObjectActionType;

  public let m_cost: Int32;

  public let m_costRaw: Int32;

  public let m_uploadTime: Float;

  public let m_duration: Float;

  public let m_ICELevelVisible: Bool;

  public let m_ICELevel: Float;

  public let m_vulnerabilities: array<TweakDBID>;

  public let m_quality: Int32;

  public let m_isInstant: Bool;

  public let m_cooldown: Float;

  public let m_cooldownTweak: TweakDBID;

  public let m_actionMatchesTarget: Bool;

  public let m_maxListSize: Int32;

  public let m_category: wref<HackCategory_Record>;

  public let m_actionCompletionEffects: array<wref<ObjectActionEffect_Record>>;

  public let m_networkBreached: Bool;
}

public class RevealInteractionWheel extends Event {

  public let lookAtObject: wref<GameObject>;

  public let commands: array<ref<QuickhackData>>;

  public let shouldReveal: Bool;
}

public static native func OperatorAssignSubtract(out a: Int32, b: Int32) -> Int32;

public class ActivateNetworkLinkTaskData extends ScriptTaskData {

  public let linkIndex: Int32;
}

public struct SNetworkLinkData {

  public let beam: ref<FxInstance>;

  public let fxResource: FxResource;

  public let slaveID: EntityID;

  public let masterID: EntityID;

  public let slavePos: Vector4;

  public let masterPos: Vector4;

  @default(SNetworkLinkData, true)
  public let drawLink: Bool;

  public let isActive: Bool;

  public let isDynamic: Bool;

  @default(SNetworkLinkData, true)
  public let revealMaster: Bool;

  @default(SNetworkLinkData, true)
  public let revealSlave: Bool;

  @default(SNetworkLinkData, false)
  public let permanent: Bool;

  @default(SNetworkLinkData, false)
  public let isPing: Bool;

  public let isNetrunner: Bool;

  public let linkType: ELinkType;

  public let priority: EPriority;

  @default(SNetworkLinkData, -1.0f)
  public let lifetime: Float;

  public let delayID: DelayID;

  public let weakLink: Bool;
}

public final native struct FxResource {

  public final static native func IsValid(self: FxResource) -> Bool;
}

public static native func RandRangeF(min: Float, max: Float) -> Float;

public static native func SinF(a: Float) -> Float;

public static native func Deg2Rad(deg: Float) -> Float;

public static native func RandNoiseF(seed: Int32, max: Float, opt min: Float) -> Float;

public static native func OperatorNeg(a: Float) -> Float;

public static native func OperatorSubtract(a: Vector4, b: Vector4) -> Vector4;

public static native func OperatorAdd(a: Vector4, b: Vector4) -> Vector4;

public static native func OperatorMultiply(a: Vector4, b: Float) -> Vector4;

public static native func FloatToString(value: Float) -> String;

public static native func FloatToStringPrec(value: Float, precision: Int32) -> String;

public static native func ClampF(v: Float, min: Float, max: Float) -> Float;

public native struct Vector3 {

  public native let X: Float;

  public native let Y: Float;

  public native let Z: Float;
}

public final native class FxSystem extends IFxSystem {

  public final native func SpawnEffect(resource: FxResource, transform: WorldTransform, opt ignoreTimeDilation: Bool) -> ref<FxInstance>;

  public final native func SpawnEffectOnGround(resource: FxResource, transform: WorldTransform, opt maxDistance: Float, opt minDistance: Float) -> ref<FxInstance>;
}

public final native class FxInstance extends IScriptable {

  public final native func Kill() -> Void;

  public final native func BreakLoop() -> Void;

  public final native func UpdateTransform(transform: WorldTransform) -> Void;

  public final native func UpdateTargetPosition(position: WorldPosition) -> Void;

  public final native func SetBlackboardValue(parameterName: CName, clampedValue: Float) -> Void;

  public final native func IsValid() -> Bool;

  public final native func AttachToSlot(entity: wref<Entity>, targetType: entAttachmentTarget, slotName: CName, opt localTransform: WorldTransform) -> Void;

  public final native func AttachToComponent(entity: wref<Entity>, targetType: entAttachmentTarget, componentName: CName, opt localTransform: WorldTransform) -> Void;
}

public class RevealDeviceRequest extends Event {

  public let shouldReveal: Bool;

  public let sourceID: EntityID;

  public let linkData: SNetworkLinkData;
}

public class DeactivateNetworkLinkTaskData extends ScriptTaskData {

  public let linkIndex: Int32;

  public let instant: Bool;
}

public native class NetworkPingingParameteres_Record extends TweakDBRecord {

  public final native func VirtualNetwork() -> wref<VirtualNetwork_Record>;

  public final native func VirtualNetworkHandle() -> ref<VirtualNetwork_Record>;

  public final native func DirectPingDuration() -> Float;

  public final native func PingRange() -> Float;

  public final native func PulseRange() -> Float;

  public final native func RevealMasterAfterLeavingFocusDuration() -> Float;

  public final native func NetworkRevealDuration() -> Float;

  public final native func RevealLinksAfterLeavingFocusDuration() -> Float;

  public final native func SpacePingDuration() -> Float;

  public final native func MaxFreePingLinks() -> Int32;

  public final native func AmmountOfIntervals() -> Int32;

  public final native func SpacePingAppearModifier() -> Float;

  public final native func AllowSimultanousPinging() -> Bool;

  public final native func ForceInstantBeamKill() -> Bool;

  public final native func ShouldNetworkElementsPersistAfterFocus() -> Bool;

  public final native func RevealSlave() -> Bool;

  public final native func UsePulse() -> Bool;

  public final native func ShouldRevealNetworkAfterPulse() -> Bool;

  public final native func SuppressPingIfBackdoorsFound() -> Bool;

  public final native func RevealMaster() -> Bool;

  public final native func PulseRealObjects() -> Bool;

  public final native func ReavealNetworkOnMaster() -> Bool;

  public final native func QuickHacksExposedByDefaul() -> Bool;

  public final native func ShowOnlyTargetQuickHacks() -> Bool;
}

public static native func OperatorEqual(a: Uint32, b: Uint32) -> Bool;

public native class NetworkPresetBinderParameters_Record extends TweakDBRecord {

  public final native func PingPresetID() -> wref<NetworkPingingParameteres_Record>;

  public final native func PingPresetIDHandle() -> ref<NetworkPingingParameteres_Record>;
}

public static native func Cast(a: Uint32) -> Bool;

public abstract native class IEffect extends IScriptable {
}

public class RevealNetworkGridOnPulse extends Event {

  @default(RevealNetworkGridOnPulse, 1.0f)
  public let duration: Float;

  public let revealSlave: Bool;

  public let revealMaster: Bool;
}

public class RevealNetworkRequestRequest extends ScriptableSystemRequest {

  public let target: EntityID;

  public let delay: Float;

  public let nextFrame: Bool;
}

public class UnregisterNetworkLinkRequest extends ScriptableSystemRequest {

  public let linksData: array<SNetworkLinkData>;
}

public class RegisterNetworkLinkRequest extends ScriptableSystemRequest {

  public let linksData: array<SNetworkLinkData>;
}

public class NewBackdoorDeviceRequest extends ScriptableSystemRequest {

  public let device: ref<ScriptableDeviceComponentPS>;
}

public native class GameComponentPS extends PersistentState {
}

public class ExtractDevicesEvent extends Event {

  public let lazyDevices: array<ref<LazyDevice>>;

  public let devices: array<ref<DeviceComponentPS>>;

  public let eventToSendOnCompleted: ref<ProcessDevicesEvent>;

  public let lastExtractedIndex: Int32;
}

public final native class LazyDevice extends IScriptable {

  public final native const func ExtractDevice(game: GameInstance) -> ref<DeviceComponentPS>;
}

public class ProcessDevicesEvent extends Event {

  public let devices: array<ref<DeviceComponentPS>>;
}

public static native func IsFinal() -> Bool;

public static native func StrAfterLast(const str: script_ref<String>, const match: script_ref<String>) -> String;

public final native class DeviceSystem extends IDeviceSystem {

  public final native const func GetNodePosition(entityID: EntityID, out position: Vector4) -> Bool;

  public final native const func GetAllAncestors(entityID: EntityID, out outDevices: array<ref<DeviceComponentPS>>) -> Void;

  public final native const func GetParents(entityID: EntityID, out outDevices: array<ref<DeviceComponentPS>>) -> Void;

  public final native const func GetChildren(entityID: EntityID, out outDevices: array<ref<DeviceComponentPS>>) -> Void;

  public final native const func GetAllDescendants(entityID: EntityID, out outDevices: array<ref<DeviceComponentPS>>) -> Void;

  public final native const func GetLazyAllAncestors(entityID: EntityID, out outDevices: array<ref<LazyDevice>>) -> Void;

  public final native const func GetLazyParents(entityID: EntityID, out outDevices: array<ref<LazyDevice>>) -> Void;

  public final native const func GetLazyChildren(entityID: EntityID, out outDevices: array<ref<LazyDevice>>) -> Void;

  public final native const func GetLazyAllDescendants(entityID: EntityID, out outDevices: array<ref<LazyDevice>>) -> Void;

  public final native const func HasAnyAncestor(entityID: EntityID) -> Bool;

  public final native const func HasAnyParent(entityID: EntityID) -> Bool;

  public final native const func HasAnyChild(entityID: EntityID) -> Bool;

  public final native const func HasAnyDescendant(entityID: EntityID) -> Bool;

  public final native func AddDynamicConnection(deviceEntityID: PersistentID, deviceClassName: CName, parentEntityID: PersistentID, parentClassName: CName) -> Void;

  public final native func RemoveDynamicConnection(deviceEntityID: PersistentID, parentEntityID: PersistentID) -> Void;

  public final native const func DEBUG_GetAncestorsData(entityID: EntityID, out outDevicesData: array<DeviceRef>) -> Void;

  public final native const func DEBUG_GetParentsData(entityID: EntityID, out outDevicesData: array<DeviceRef>) -> Void;

  public final native const func DEBUG_GetChildrenData(entityID: EntityID, out outDevicesData: array<DeviceRef>) -> Void;

  public final native const func DEBUG_GetDescendantsData(entityID: EntityID, out outDevicesData: array<DeviceRef>) -> Void;
}

public class GameAttachedEvent extends Event {

  public let isGameplayRelevant: Bool;

  public let displayName: String;

  public let contentScale: TweakDBID;
}

public final native class LevelAssignmentSystem extends ILevelAssignmentSystem {

  public final native func LockLevelAssignment(levelAssignmentTDBID: TweakDBID) -> Void;

  public final native func IsLocked(levelAssignmentTDBID: TweakDBID) -> Bool;

  public final native func GetLevelAssignment(levelAssignmentTDBID: TweakDBID) -> Int32;

  public final native func MarkPlayerLevelRestored(opt playerLevelRestored: Bool) -> Void;
}

public native class CurveStatModifier_Record extends StatModifier_Record {

  public final native func Id() -> String;

  public final native func Column() -> String;

  public final native func RefStat() -> wref<Stat_Record>;

  public final native func RefStatHandle() -> ref<Stat_Record>;

  public final native func RefObject() -> CName;
}

public native class gameCurveStatModifierData extends gameStatModifierData {

  public native let curveName: CName;

  public native let columnName: CName;

  public native let curveStat: gamedataStatType;
}

public final native class SetQuickHackableMask extends Event {

  public native let isQuickHackable: Bool;
}

public class SetLogicReadyEvent extends Event {

  public let isReady: Bool;
}

public class RemoveFromChainRequest extends ScriptableSystemRequest {

  public let requestSource: EntityID;
}

public native class DeviceEndPlayerCameraControlEvent extends Event {
}

public abstract native class IStatPoolsListener extends IScriptable {
}

public native class CustomValueStatPoolsListener extends ScriptStatPoolsListener {

  public final native func SetValue(valuePerc: Float) -> Void;
}

public class ActionUploadListener extends CustomValueStatPoolsListener {

  public let m_action: ref<ScriptableDeviceAction>;

  public let m_gameInstance: GameInstance;
}

public native class ObjectActionType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataObjectActionType;
}

public class UploadProgramProgressEvent extends Event {

  public let state: EUploadProgramState;

  @default(UploadProgramProgressEvent, EProgressBarType.UPLOAD)
  public let progressBarType: EProgressBarType;

  @default(UploadProgramProgressEvent, EProgressBarContext.QuickHack)
  public let progressBarContext: EProgressBarContext;

  @default(UploadProgramProgressEvent, 3.0f)
  public let duration: Float;

  public let iconRecord: wref<ChoiceCaptionIconPart_Record>;

  public let action: ref<ScriptableDeviceAction>;

  public let slotName: CName;

  @default(UploadProgramProgressEvent, gamedataStatPoolType.Invalid)
  public let statPoolType: gamedataStatPoolType;
}

public class RemoveLinkEvent extends Event {
}

public class RemoveLinkedStatusEffectsEvent extends Event {

  public let ssAction: Bool;
}

public class SetQuickHackAttemptEvent extends Event {

  public let wasQuickHackAttempt: Bool;
}

public class SetQuickHackEvent extends Event {

  public let wasQuickHacked: Bool;

  public let quickHackName: CName;
}

public native class StatPoolCost_Record extends ObjectActionCost_Record {

  public final native func StatPool() -> wref<StatPool_Record>;

  public final native func StatPoolHandle() -> ref<StatPool_Record>;
}

public native class StatPool_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func Stat() -> wref<Stat_Record>;

  public final native func StatHandle() -> ref<Stat_Record>;

  public final native func Regen() -> wref<PoolValueModifier_Record>;

  public final native func RegenHandle() -> ref<PoolValueModifier_Record>;

  public final native func Decay() -> wref<PoolValueModifier_Record>;

  public final native func DecayHandle() -> ref<PoolValueModifier_Record>;

  public final native func EnumName() -> CName;

  public final native func InitialValue() -> Float;

  public final native func EnableDefeated() -> Bool;

  public final native func Savable() -> Bool;

  public final native func StatPoolType() -> gamedataStatPoolType;
}

public native class HackCategory_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func LocalizedDescription() -> String;

  public final native func EnumName() -> CName;
}

public struct SWidgetPackage extends SWidgetPackageBase {

  public let displayName: String;

  public let ownerID: PersistentID;

  public let ownerIDClassName: CName;

  public let customData: ref<WidgetCustomData>;

  public let isWidgetInactive: Bool;

  public let widgetState: EWidgetState;

  public let iconID: CName;

  public let bckgroundTextureID: TweakDBID;

  public let iconTextureID: TweakDBID;

  public let textData: ref<inkTextParams>;
}

public struct SActionWidgetPackage extends SWidgetPackage {

  public let action: ref<DeviceAction>;

  public let wasInitalized: Bool;

  public let dependendActions: array<ref<DeviceAction>>;
}

public final native struct ResRef {

  public final static native func FromString(path: String) -> ResRef;

  public final static native func FromHash(hash: Uint64) -> ResRef;

  public final static native func FromName(path: CName) -> ResRef;

  public final static native func IsValid(path: ResRef) -> Bool;
}

public native class ActivityLogSystem extends IActivityLogSystem {

  public final native func AddLog(logEntry: String) -> Void;

  public final native func AddLogFromParts(textpart1: String, opt textpart2: String, opt textpart3: String, opt textpart4: String, opt textpart5: String) -> Void;
}

public native class DeviceActionProperty extends IScriptable {

  public native let name: CName;

  public native let typeName: CName;

  public native let flags: gamedeviceActionPropertyFlags;

  public native let first: Variant;

  public native let second: Variant;

  public native let third: Variant;
}

public abstract class ActionEnum extends ActionInt {
}

public native class Clearance extends IScriptable {

  public edit native let min: Int32;

  public edit native let max: Int32;

  public final static native func IsInRange(clearance: ref<Clearance>, clearanceLevel: Int32) -> Bool;

  public final static native func CreateClearance(opt min: Int32, opt max: Int32) -> ref<Clearance>;

  public final static native func ReadValues(clearance: ref<Clearance>, out min: Int32, out max: Int32) -> Void;

  public final static native func GetMaxClearanceLevel() -> Int32;

  public final static native func GetMinClearanceLevel() -> Int32;
}

public native class MinigameAction_Record extends ObjectAction_Record {

  public final native func JournalEntry() -> String;

  public final native func Type() -> wref<MinigameActionType_Record>;

  public final native func TypeHandle() -> ref<MinigameActionType_Record>;

  public final native func Category() -> wref<MinigameCategory_Record>;

  public final native func CategoryHandle() -> ref<MinigameCategory_Record>;

  public final native func Reward() -> wref<RewardBase_Record>;

  public final native func RewardHandle() -> ref<RewardBase_Record>;

  public final native func FactName() -> CName;

  public final native func Complexity() -> Float;

  public final native func FactValue() -> Int32;

  public final native func MemoryCost() -> Float;

  public final native func Duration() -> Float;

  public final native func ShowPopup() -> Bool;
}

public class RequestTakeControl extends ScriptableSystemRequest {

  public let requestSource: EntityID;

  public let originalEvent: ref<ToggleTakeOverControl>;
}

public class TCSTakeOverControlDeactivate extends Event {
}

public static native func CreatePersistentID(entityID: EntityID, opt componentName: CName) -> PersistentID;

public native struct EntityResolveComponentsInterface {

  public final static native func GetComponent(self: EntityResolveComponentsInterface, componentName: CName) -> ref<IComponent>;
}

public native struct VisionAppearance {

  public native let fill: Int32;

  public native let outline: Int32;

  public native let showThroughWalls: Bool;

  public native let patternType: VisionModePatternType;
}

public class ForceVisionApperanceEvent extends Event {

  public let forcedHighlight: ref<FocusForcedHighlightData>;

  public let apply: Bool;

  public let forceCancel: Bool;

  public let ignoreStackEvaluation: Bool;

  public let responseData: ref<IScriptable>;
}

public class HighlightEditableData extends IScriptable {

  public edit let highlightType: EFocusForcedHighlightType;

  @default(HighlightEditableData, EFocusOutlineType.INVALID)
  public edit let outlineType: EFocusOutlineType;

  @default(HighlightEditableData, EPriority.VeryLow)
  public edit let priority: EPriority;

  @default(HighlightEditableData, 0.5f)
  public edit let inTransitionTime: Float;

  @default(HighlightEditableData, 0.5f)
  public edit let outTransitionTime: Float;

  public edit let isRevealed: Bool;

  public edit let patternType: VisionModePatternType;
}

public class RevealStatusNotification extends HUDManagerRequest {

  public let isRevealed: Bool;
}

public class RevealStateChangedEvent extends Event {

  public let state: ERevealState;

  public let reason: gameVisionModeSystemRevealIdentifier;

  public let transitionTime: Float;
}

public abstract final native class PhotoModeSystem extends IPhotoModeSystem {

  public final native func UnlockPhotoModeItem(stickerID: TweakDBID) -> Bool;

  public final native func IsExitLocked() -> Bool;

  public final native func IsPhotoModeActive() -> Bool;

  public final native func CanPhotoModeBeEnabled() -> Bool;

  public final native func GetCameraLocation(location: WorldPosition) -> Void;
}

public native struct gameVisionModeSystemRevealIdentifier {

  public native let sourceEntityId: EntityID;

  public native let reason: CName;
}

public class ResponseEvent extends Event {

  public let responseData: ref<IScriptable>;
}

public native class RevealObjectEvent extends Event {

  public native let reveal: Bool;

  public native let reason: gameVisionModeSystemRevealIdentifier;

  public let lifetime: Float;
}

public final native class gameVisionRevealExpiredEvent extends Event {

  public native let revealId: gameVisionModeSystemRevealIdentifier;
}

public final native class gameVisionModeUpdateVisuals extends Event {

  public native let pulse: Bool;
}

public class WorkspotEntryData extends IScriptable {

  public let workspotRef: NodeRef;

  public let isEnabled: Bool;

  @default(WorkspotEntryData, true)
  public let isAvailable: Bool;
}

public class OnWorkspotAvailabilityEvent extends Event {

  public let workspotRef: NodeRef;
}

public native class SquadMemberComponent extends GameComponent {

  public final native func MySquad(sqtype: AISquadType) -> ref<SquadScriptInterface>;

  public final native func MySquadName(sqtype: AISquadType) -> CName;

  public final native func MySquadNameCurrentOrRecent(sqtype: AISquadType) -> CName;

  public final native func MySquads() -> array<ref<SquadScriptInterface>>;

  public final native func MySquadsNames() -> array<CName>;

  public final native func MySquadsNamesCurrentOrRecent() -> array<CName>;

  public final native func FindSquad(sqName: CName) -> ref<SquadScriptInterface>;

  public final native func GetGameTime() -> Float;
}

public native class AISquadParams_Record extends TweakDBRecord {

  public final native func AllTickets(out outList: array<wref<AITicket_Record>>) -> Void;

  public final native func GetAllTicketsCount() -> Int32;

  public final native func GetAllTicketsItem(index: Int32) -> wref<AITicket_Record>;

  public final native func GetAllTicketsItemHandle(index: Int32) -> wref<AITicket_Record>;

  public final native func AllTicketsContains(item: wref<AITicket_Record>) -> Bool;

  public final native func OverridenTickets(out outList: array<wref<AITicket_Record>>) -> Void;

  public final native func GetOverridenTicketsCount() -> Int32;

  public final native func GetOverridenTicketsItem(index: Int32) -> wref<AITicket_Record>;

  public final native func GetOverridenTicketsItemHandle(index: Int32) -> wref<AITicket_Record>;

  public final native func OverridenTicketsContains(item: wref<AITicket_Record>) -> Bool;

  public final native func ProhibitedTickets(out outList: array<wref<AITicketType_Record>>) -> Void;

  public final native func GetProhibitedTicketsCount() -> Int32;

  public final native func GetProhibitedTicketsItem(index: Int32) -> wref<AITicketType_Record>;

  public final native func GetProhibitedTicketsItemHandle(index: Int32) -> wref<AITicketType_Record>;

  public final native func ProhibitedTicketsContains(item: wref<AITicketType_Record>) -> Bool;
}

public native class AITicketType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataAITicketType;
}

public static native func StrFindFirst(const str: script_ref<String>, const match: script_ref<String>) -> Int32;

public native struct ScriptExecutionContext {

  public final static native func GetOwner(context: ScriptExecutionContext) -> ref<gamePuppet>;

  public final static native func GetAITime(context: ScriptExecutionContext) -> EngineTime;

  public final static native func GetArgumentBool(context: ScriptExecutionContext, entry: CName) -> Bool;

  public final static native func SetArgumentBool(context: ScriptExecutionContext, entry: CName, value: Bool) -> Void;

  public final static native func GetArgumentInt(context: ScriptExecutionContext, entry: CName) -> Int32;

  public final static native func SetArgumentInt(context: ScriptExecutionContext, entry: CName, value: Int32) -> Void;

  public final static native func GetArgumentUint64(context: ScriptExecutionContext, entry: CName) -> Uint64;

  public final static native func SetArgumentUint64(context: ScriptExecutionContext, entry: CName, value: Uint64) -> Void;

  public final static native func GetArgumentFloat(context: ScriptExecutionContext, entry: CName) -> Float;

  public final static native func SetArgumentFloat(context: ScriptExecutionContext, entry: CName, value: Float) -> Void;

  public final static native func GetArgumentName(context: ScriptExecutionContext, entry: CName) -> CName;

  public final static native func SetArgumentName(context: ScriptExecutionContext, entry: CName, value: CName) -> Void;

  public final static native func GetArgumentVector(context: ScriptExecutionContext, entry: CName) -> Vector4;

  public final static native func SetArgumentVector(context: ScriptExecutionContext, entry: CName, value: Vector4) -> Void;

  public final static native func GetArgumentObject(context: ScriptExecutionContext, entry: CName) -> wref<GameObject>;

  public final static native func SetArgumentObject(context: ScriptExecutionContext, entry: CName, value: wref<GameObject>) -> Void;

  public final static native func GetArgumentScriptable(context: ScriptExecutionContext, entry: CName) -> wref<IScriptable>;

  public final static native func SetArgumentScriptable(context: ScriptExecutionContext, entry: CName, value: wref<IScriptable>) -> Void;

  public final static native func GetArgumentNodeRef(context: ScriptExecutionContext, entry: CName) -> NodeRef;

  public final static native func SetArgumentNodeRef(context: ScriptExecutionContext, entry: CName, value: NodeRef) -> Void;

  public final static native func GetArgumentGlobalNodeId(context: ScriptExecutionContext, entry: CName) -> GlobalNodeID;

  public final static native func SetArgumentGlobalNodeId(context: ScriptExecutionContext, entry: CName, value: GlobalNodeID) -> Void;

  public final static native func GetMappingValue(context: ScriptExecutionContext, mapping: ref<AIArgumentMapping>) -> Variant;

  public final static native func GetScriptableMappingValue(context: ScriptExecutionContext, mapping: ref<AIArgumentMapping>) -> ref<IScriptable>;

  public final static native func GetTweakDBIDMappingValue(context: script_ref<ScriptExecutionContext>, mapping: ref<AIArgumentMapping>) -> TweakDBID;

  public final static native func SetMappingValue(context: ScriptExecutionContext, mapping: ref<AIArgumentMapping>, value: Variant) -> Bool;

  public final static native func SetEnumMappingValue(context: ScriptExecutionContext, mapping: ref<AIArgumentMapping>, value: Int64) -> Bool;

  public final static native func GetDelegate(context: ScriptExecutionContext) -> ref<BehaviorDelegate>;

  public final static native func GetClosestDelegate(context: ScriptExecutionContext) -> ref<BehaviorDelegate>;

  public final static native func CreateActionID(context: ScriptExecutionContext, actionStringName: String, actionPackageType: AIactionParamsPackageTypes) -> TweakDBID;

  public final static native func CreateActionParamID(context: ScriptExecutionContext, actionStringName: String, paramName: String) -> TweakDBID;

  public final static native func GetOverriddenNode(context: script_ref<ScriptExecutionContext>, nodeId: TweakDBID, out result: ref<AIRecord_Record>, lookupDefault: Bool) -> Bool;

  public final static native func PuppetRefToObject(context: ScriptExecutionContext, puppetRef: EntityReference) -> ref<GameObject>;

  public final static native func AddBehaviorCallback(context: ScriptExecutionContext, cbName: CName, callback: ref<IScriptable>) -> Uint32;

  public final static native func RemoveBehaviorCallback(context: ScriptExecutionContext, id: Uint32) -> Bool;

  public final static native func InvokeBehaviorCallback(context: script_ref<ScriptExecutionContext>, cbName: CName) -> Void;

  public final static native func GetLOD(context: script_ref<ScriptExecutionContext>) -> Int32;

  public final static native func GetTweakActionSystem(context: script_ref<ScriptExecutionContext>) -> ref<AITweakActionSystem>;

  public final static native func DebugLog(context: ScriptExecutionContext, category: CName, message: String) -> Void;
}

public abstract native class BehaviorBlackboard extends IScriptable {
}

public native class SquadScriptInterface extends IScriptable {

  public final native func GetName() -> CName;

  public final native func GetTemplate() -> CName;

  public final native func Join(et: ref<Entity>) -> Bool;

  public final native func Leave(et: ref<Entity>) -> Bool;

  public final native func OpenSquadAction(name: CName, et: ref<Entity>, timeout: Float) -> Bool;

  public final native func RefreshSquadAction(name: CName, et: ref<Entity>, timeout: Float) -> Bool;

  public final native func RevokeSquadAction(name: CName, et: ref<Entity>) -> Bool;

  public final native func TriggerEvaluation(name: CName, et: ref<Entity>) -> Bool;

  public final native func TriggerActivation(name: CName, et: ref<Entity>) -> Bool;

  public final native func TriggerDeactivation(name: CName, et: ref<Entity>) -> Bool;

  public final native func RequestOrder(sqAction: CName, et: ref<Entity>) -> Bool;

  public final native func GiveOrder(sqAction: CName, et: ref<Entity>) -> Uint32;

  public final native func AckOrder(sqAction: CName, et: ref<Entity>) -> Bool;

  public final native func RevokeOrder(sqAction: CName, et: ref<Entity>) -> Bool;

  public final native func Commit(sqAction: CName, et: ref<Entity>) -> Bool;

  public final native func ReportDone(sqAction: CName, et: ref<Entity>) -> Bool;

  public final native func ReportFail(sqAction: CName, et: ref<Entity>) -> Bool;

  public final native func ListMembers() -> array<ref<Entity>>;

  public final native func ListMembersWeak() -> array<wref<Entity>>;

  public final native func ListMembersWithSquadActionWeak(sqAction: CName) -> array<wref<Entity>>;

  public final native func GetMembersCount() -> Uint32;

  public final native func IsSquadActionOpen(sqAction: CName, et: ref<Entity>) -> Bool;

  public final native func HasOrderBySquadAction(sqAction: CName, et: ref<Entity>) -> Bool;

  public final native func HasAcknowledgedOrderBySquadAction(sqAction: CName, et: ref<Entity>) -> Bool;

  public final native func GetOrderById(orderId: Uint32) -> SquadOrder;

  public final native func GetAllOrders(et: ref<Entity>) -> array<Uint32>;

  public final native func GetAllCommitedOrders(et: ref<Entity>) -> array<Uint32>;

  public final native func GetAllAcknowledgedOrders(et: ref<Entity>) -> array<Uint32>;

  public final native func GetSquadType() -> AISquadType;

  public final native func LockAccess() -> Bool;

  public final native func UnlockAccess() -> Bool;

  public final native func GuardedCall(callThisFunction: CName) -> Void;
}

public native class CombatSquadScriptInterface extends SquadScriptInterface {

  public final native func GetDefensiveCombatAlley() -> ref<CombatAlley>;

  public final native func GetOffensiveCombatAlley() -> ref<CombatAlley>;

  public final native func AddEnemy(et: ref<Entity>) -> Bool;

  public final native func RemoveEnemy(et: ref<Entity>) -> Bool;

  public final native func EnemyList() -> array<ref<Entity>>;

  public final native func EnemyListWeak() -> array<wref<Entity>>;

  public final native func IsEnemy(potentialEnemy: ref<Entity>) -> Bool;

  public final native func GetEnemiesCount() -> Uint32;

  public final native func SetAsEnemyAttacker(squadMember: ref<Entity>, enemy: ref<Entity>) -> Void;

  public final native func GetEnemyAttackersCount(enemy: ref<Entity>) -> Uint32;

  public final native func RegisterTactic(sqAction: CName, sectors: array<AICombatSectorType>, alley: ref<CombatAlley>, timeout: Float) -> Void;

  public final native func UnregisterTactic(sqAction: CName) -> Void;

  public final native func ValidCombatSquad() -> Bool;

  public final native func GetTacticRatio() -> TacticRatio;

  public final native func PullEnemies(sourceSquadName: CName) -> Void;
}

public native struct EnumNameToIndexCache {

  public final static native func Rebuild(cache: script_ref<EnumNameToIndexCache>, enumTypeName: CName) -> Bool;

  public final static native func GetIndex(cache: script_ref<EnumNameToIndexCache>, enumValueName: CName, out index: Int32) -> Bool;
}

public native struct AIScriptUtils {

  public final static native func GetClosestPointOnSpline(game: GameInstance, splineRef: NodeRef, refPoint: Vector4, out closestPoint: Vector4) -> Bool;

  public final static native func GetStartPointOfSpline(game: GameInstance, splineRef: NodeRef, out startPoint: Vector4) -> Bool;

  public final static native func GetEndPointOfSpline(game: GameInstance, splineRef: NodeRef, out endPoint: Vector4) -> Bool;

  public final static native func IsSplineStartRecalculated(context: ScriptExecutionContext, splineRef: NodeRef) -> Bool;

  public final static native func CalculateDistanceToEndFrom(game: GameInstance, splineRef: NodeRef, refPoint: Vector4, out endDistance: Float) -> Bool;

  public final static native func ArePositionsEqual(a: Vector4, b: Vector4) -> Bool;

  public final static native func GetActionNameFromRecord(recordId: TweakDBID, out actionName: TweakDBID) -> Bool;

  public final static native func IsArchetypeAction(recordId: TweakDBID) -> Bool;

  public final static native func CheckActionCondition(ctx: ScriptExecutionContext, condition: wref<AIActionCondition_Record>) -> Bool;

  public final static native func CallActivateSubAction(context: ScriptExecutionContext, subAction: ref<AISubAction_Record>) -> Void;

  public final static native func CallUpdateSubAction(context: ScriptExecutionContext, subAction: ref<AISubAction_Record>, duration: Float) -> AIbehaviorUpdateOutcome;

  public final static native func CallDeactivateSubAction(context: ScriptExecutionContext, subAction: ref<AISubAction_Record>, duration: Float, interrupted: Bool) -> Void;

  public final static native func CallGetAnimVariation(context: ScriptExecutionContext, subActionRecord: ref<AISubAction_Record>) -> Int32;

  public final static native func CallGetPhaseDuration(context: ScriptExecutionContext, subActionRecord: ref<AISubAction_Record>, actionPhase: Int32, baseDuration: Float) -> Float;

  public final static native func CallCheckSubCondition(context: ScriptExecutionContext, check: ref<AIActionSubCondition_Record>) -> Bool;

  public final static native func GetActionTarget(context: ScriptExecutionContext, target: ref<AIActionTarget_Record>, out object: ref<GameObject>) -> Bool;

  public final static native func GetActionTarget2(context: ScriptExecutionContext, targetId: TweakDBID, predictionTime: Float, out object: ref<GameObject>, out position: Vector4, out coverId: Uint64) -> Bool;

  public final static native func CheckActionCooldowns(context: ScriptExecutionContext, check: ref<AIAction_Record>) -> Bool;

  public final static native func CheckCooldownConditions(context: ScriptExecutionContext, check: ref<AICooldownCond_Record>) -> Bool;

  public final static native func CheckAnimation(context: script_ref<ScriptExecutionContext>, animFeatureName: CName, animVariation: Int32, animState: Int32, triggerPreload: Bool) -> Bool;

  public final static native func GetTicketType(ticketName: CName, puppet: ref<gamePuppet>, fallbackSquad: ref<AISquadParams_Record>, out outTicket: ref<AITicket_Record>, out outSquadRecord: ref<AISquadParams_Record>) -> Bool;

  public final static native func GetWaterLevel(game: GameInstance, position: Vector3, out outWaterLevel: Float) -> Bool;

  public final static native func DebugLog(entityId: EntityID, category: CName, message: String) -> Void;
}

public struct SquadTicketReceipt {

  public let acknowledgedTimeStamp: Float;

  public let conditionDeactivationCheckTimeStamp: Float;

  public let conditionDeactivationSuccessfulCheckTimeStamp: Float;

  public let conditionCheckRandomizedInterval: Float;

  public let lastRecipient: EntityID;

  public let acknowledgesInQueue: Int32;

  public let numberOfOrders: Int32;

  public let cooldownID: Int32;
}

public class SquadActionEvent extends Event {

  public let squadActionName: CName;

  public let squadVerb: EAISquadVerb;
}

public native class AIRingTicket_Record extends AITicket_Record {

  public final native func RingType() -> wref<AIRingType_Record>;

  public final native func RingTypeHandle() -> ref<AIRingType_Record>;
}

public native class AIRole_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func RolePackage() -> wref<GameplayLogicPackage_Record>;

  public final native func RolePackageHandle() -> ref<GameplayLogicPackage_Record>;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataAIRole;
}

public final native class CoverManager extends ICoverManager {

  public final native func RegisterCoverOccupant(coverId: Uint64, occupant: ref<GameObject>) -> Void;

  public final native func UnregisterCoverOccupant(occupant: ref<GameObject>) -> Void;

  public final native func IsCoverAvailable(coverId: Uint64, occupant: ref<GameObject>) -> Bool;

  public final native func GetCoverHeight(coverId: Uint64) -> gameCoverHeight;

  public final native func GetCoverPosition(coverId: Uint64) -> Vector4;

  public final native func GetCoverWorldForward(coverId: Uint64) -> Vector4;

  public final native func GetCoverWorldUp(coverId: Uint64) -> Vector4;

  public final native func GetCoverRemainingHealthPercentage(coverId: Uint64) -> Float;

  public final native func IsProtectingHorizontallyAgainstObject(coverId: Uint64, object: ref<GameObject>, angleMultiplier: Float) -> Bool;

  public final native func GetThreatsNotProtectedFrom(coverId: Uint64, occupant: ref<GameObject>, angleMultiplier: Float, predictionTime: Float, trackingMode: gamedataTrackingMode) -> array<TrackedLocation>;

  public final native func GetUsableExposureSpotsForCover(coverId: Uint64, const threat: ref<GameObject>) -> array<gameAvailableExposureMethodResult>;

  public final native func GetUsableExposureSpotsForCoverTolerance(coverId: Uint64, const threat: ref<GameObject>, maxTolerance: Float) -> array<gameAvailableExposureMethodResult>;

  public final native func GetUsableExposureSpotsForCoverOccupant(occupant: ref<GameObject>, threat: ref<GameObject>) -> array<gameAvailableExposureMethodResult>;

  public final native func GetUsableExposureSpotsNumForCoverTolerance(coverId: Uint64, const threat: ref<GameObject>, maxTolerance: Float, useRoughCalculations: Bool) -> Uint32;

  public final native func GetCurrentCover(occupant: ref<GameObject>) -> Uint64;

  public final native func NodeRefToObjectId(nodeRef: NodeRef) -> Uint64;

  public final native func GetDemandCoverHolder(nodeRef: NodeRef) -> ref<CoverDemandHolder>;

  public final native func LeaveCoverImmediately(occupant: ref<GameObject>) -> Void;

  public final native func IsEnteringOrLeavingCover(occupant: ref<GameObject>) -> Bool;

  public final native func GetCoverActionType(occupant: ref<GameObject>) -> AIUninterruptibleActionType;

  public final native func NotifyGotDamageInCover(coverId: Uint64, damageTime: EngineTime, executingCoverAction: Bool, isShooting: Bool) -> Void;

  public final native func IsCoverRegular(coverIdValue: Uint64) -> Bool;

  public final native func IsShootingSpot(coverIdValue: Uint64) -> Bool;

  public final native func SetMaxAllowedActionHalfAngleDeg(angleDeg: Float) -> Void;

  public final native func NotifyBehaviourCoverArgumentChanged(entity: ref<GameObject>, behaviorArgumentName: CName, prevValue: Uint64, currentValue: Uint64) -> Void;

  public final native func IsCoverValid(coverId: Uint64) -> Bool;
}

public abstract native class CActionScriptProxy extends IScriptable {

  public final native func Bind(go: ref<GameObject>) -> Void;

  public final native func Launch() -> Void;

  public final native func Stop() -> Void;

  public final native func GetStatus() -> gameEActionStatus;
}

public native class DeviceComponent extends GameComponent {
}

public final native class InteractionComponent extends IPlacedComponent {

  public final native func SetSingleChoice(choice: InteractionChoice, opt layer: CName) -> Void;

  public final native func SetChoices(choices: array<InteractionChoice>, opt layer: CName) -> Void;

  public final native func ResetChoices(opt layer: CName, opt deactivate: Bool) -> Void;

  public final native const func GetActiveInputLayers(out activeInputLayers: array<gameinteractionsActiveLayerData>) -> Bool;

  public final native const func GetActivatorsForLayer(layerName: CName, out activeInputLayers: array<gameinteractionsActiveLayerData>) -> Bool;
}

public abstract native class WidgetBaseComponent extends IPlacedComponent {
}

public native class AdvertGlitchEvent extends Event {

  public final native func SetShouldGlitch(shouldGlitch: Float) -> Void;

  public final native func SetGlitchTime(glitchTime: Float) -> Void;
}

public native class vehicleControllerPS extends GameComponentPS {

  public final native func GetState() -> vehicleEState;

  public final native func SetState(state: vehicleEState) -> Void;

  public final native func SetLightMode(lightMode: vehicleELightMode) -> Void;

  public final native func GetLightMode() -> vehicleELightMode;

  public final native func CycleLightMode() -> Void;

  public final native func IsAlarmOn() -> Bool;

  public final native func SetAlarm(on: Bool) -> Void;

  public final native func SetDoorState(door: EVehicleDoor, state: VehicleDoorState) -> Void;

  public final native func GetDoorState(door: EVehicleDoor) -> VehicleDoorState;

  public final native func SetWindowState(door: EVehicleDoor, state: EVehicleWindowState) -> Void;

  public final native func GetWindowState(door: EVehicleDoor) -> EVehicleWindowState;

  public final native func SetDoorInteractionState(door: EVehicleDoor, state: VehicleDoorInteractionState) -> Void;

  public final native func GetDoorInteractionState(door: EVehicleDoor) -> VehicleDoorInteractionState;
}

public struct Condition {

  public let passed: Bool;

  public let description: String;
}

public struct ConditionGroupData {

  public inline const let conditions: array<ref<GameplayConditionBase>>;

  public let logicOperator: ELogicOperator;
}

public struct ConditionData {

  public let conditionOperator: ELogicOperator;

  public let requirementList: array<Condition>;
}

public class DemolitionSkillCheck extends SkillCheckBase {
}

public class EngineeringSkillCheck extends SkillCheckBase {
}

public class HackingSkillCheck extends SkillCheckBase {
}

public struct DisassembleOptions {

  public persistent let m_canBeDisassembled: Bool;
}

public struct DestructionData {

  public persistent let m_durabilityType: EDeviceDurabilityType;

  public persistent let m_canBeFixed: Bool;
}

public struct IllegalActionTypes {

  public persistent let regularActions: Bool;

  public persistent let quickHacks: Bool;

  @default(IllegalActionTypes, true)
  public persistent let skillChecks: Bool;
}

public class RevokeQuickHackAccess extends Event {
}

public class DeviceLinkEstablished extends Event {

  public let deviceLinkPS: wref<DeviceLinkComponentPS>;
}

public struct SecurityAreaData {

  public let securityArea: wref<SecurityAreaControllerPS>;

  public let securityAreaType: ESecurityAreaType;

  public let accessLevel: ESecurityAccessLevel;

  public let zoneName: String;

  public let entered: Bool;

  public let id: PersistentID;

  public let incomingFilters: EFilterType;

  public let outgoingFilters: EFilterType;
}

public native struct RWLock {

  public final static native func Acquire(self: script_ref<RWLock>) -> Void;

  public final static native func Release(self: script_ref<RWLock>) -> Void;

  public final static native func AcquireShared(self: script_ref<RWLock>) -> Void;

  public final static native func ReleaseShared(self: script_ref<RWLock>) -> Void;
}

public native class MappinSystem extends IMappinSystem {

  public final native func ChangeMappinVariant(id: NewMappinID, newVariant: gamedataMappinVariant) -> Void;

  public final native func SetMappinActive(id: NewMappinID, active: Bool) -> Void;

  public final native func SetMappinPosition(id: NewMappinID, position: Vector4) -> Void;

  public final native func SetMappinScriptData(id: NewMappinID, scriptData: ref<MappinScriptData>) -> Void;

  public final native func SetMappinDebugCaption(id: NewMappinID, caption: String) -> Void;

  public final native func RegisterMappin(data: MappinData, position: Vector4) -> NewMappinID;

  public final native func RegisterMappinWithObject(data: MappinData, object: wref<GameObject>, opt slotName: CName, opt offset: Vector3) -> NewMappinID;

  public final native func RegisterGrenadeMappin(data: MappinData, grenadeObject: wref<GameObject>) -> NewMappinID;

  public final native func RegisterFastTravelMappin(data: MappinData, fastTravelData: ref<FastTravelPointData>) -> NewMappinID;

  public final native func RegisterRemotePlayerMappin(data: MappinData, playerObject: wref<GameObject>) -> NewMappinID;

  public final native func RegisterVehicleMappin(data: MappinData, object: wref<GameObject>, opt slotName: CName, opt offset: Vector3) -> NewMappinID;

  public final native func UnregisterMappin(id: NewMappinID) -> Void;

  public final native func GetMappins(targetType: gamemappinsMappinTargetType, out mappins: array<MappinEntry>) -> Void;

  public final native func OnAreaEntered(evt: ref<AreaEnteredEvent>) -> Void;

  public final native func OnAreaExited(obj: wref<GameObject>, triggerId: EntityID) -> Void;

  public final native func OnAreaTypeChanged(entityID: EntityID, areaType: CName) -> Void;

  public final native func UpdateCurrentLocationName(locationName: String, isNewLocation: Bool) -> Void;

  public final native func GetPointOfInterestMappinSavedState(hash: Uint32, out mappinPhase: Uint16, out mappinVariant: Uint16, out active: Bool) -> Bool;

  public final native func GetQuestMappinPositionsByObjective(objectiveHash: Uint32, out positions: array<Vector3>) -> Bool;

  public final native func GetQuestMappinPosition(mappinHash: Uint32, out position: Vector3) -> Bool;

  public final native func SetMappinTrackingAlternative(mappinID: NewMappinID, targetMappinID: NewMappinID) -> Void;

  public final native func DebugDiscoverAllPoiMappins() -> Void;
}

public native struct IMappinData {
}

public abstract native class TriggerEvent extends Event {

  public native let triggerID: EntityID;

  public native let activator: EntityGameInterface;

  public native let worldPosition: Vector4;

  public native let numActivatorsInArea: Uint32;

  public native let activatorID: Uint32;

  public native let componentName: CName;
}

public struct AreaTypeTransition {

  @attrib(tooltip, "Decide to what security type you want this area transition to. DISABLED = SecurityArea no longer receives or broadcasts any events. Does not register enter events.")
  public let transitionTo: ESecurityAreaType;

  @attrib(rangeMax, "23")
  @attrib(toolitp, "At what hour should transition occur. Works even if area was not streamed in at given time and/or with passing time feature")
  @attrib(rangeMin, "0")
  public let transitionHour: Int32;

  @attrib(category, "TransitionConditions")
  @attrib(tooltip, "Decides how 'aggressively' transition is supposed to occur.  ")
  public let transitionMode: ETransitionMode;

  public let listenerID: Uint32;
}

public struct SAreaEffectData {

  public inline let action: ref<ScriptableDeviceAction>;

  public let areaEffectID: CName;

  @attrib(category, "VFX Data")
  @default(SAreaEffectData, focus_10m)
  public let indicatorEffectName: CName;

  @attrib(category, "VFX Data")
  @default(SAreaEffectData, false)
  public let useIndicatorEffect: Bool;

  @attrib(rangeMax, "1.f")
  @attrib(category, "VFX Data")
  @attrib(rangeMin, "0.f")
  @default(SAreaEffectData, 1.f)
  public let indicatorEffectSize: Float;

  @attrib(category, "Stim Data")
  @default(SAreaEffectData, 10.f)
  public let stimRange: Float;

  @attrib(category, "Stim Data")
  @default(SAreaEffectData, 3.f)
  public let stimLifetime: Float;

  @attrib(category, "Stim Data")
  @default(SAreaEffectData, DeviceStimType.Distract)
  public let stimType: DeviceStimType;

  @attrib(category, "Stim Data")
  public let stimSource: NodeRef;

  @attrib(category, "Stim Data")
  public const let additionaStimSources: array<NodeRef>;

  @attrib(category, "Stim Data")
  public let investigateSpot: NodeRef;

  @attrib(category, "Stim Data")
  public let investigateController: Bool;

  @attrib(category, "Stim Data")
  public let controllerSource: NodeRef;

  @attrib(category, "Highlight Data")
  @default(SAreaEffectData, true)
  public let highlightTargets: Bool;

  @attrib(category, "Highlight Data")
  @default(SAreaEffectData, EFocusForcedHighlightType.DISTRACTION)
  public let highlightType: EFocusForcedHighlightType;

  @attrib(category, "Highlight Data")
  @default(SAreaEffectData, EPriority.High)
  public let highlightPriority: EPriority;

  public let effectInstance: ref<EffectInstance>;
}

public class AreaEffectTargetData extends IScriptable {

  public let areaEffectID: CName;

  @default(AreaEffectTargetData, true)
  public let onSelf: Bool;

  public let onSlaves: Bool;
}

public struct SAreaEffectTargetData {

  public let areaEffectID: CName;

  @default(SAreaEffectTargetData, true)
  public let onSelf: Bool;

  public let onSlaves: Bool;
}

public static native func LogChannelWarning(channel: CName, const text: script_ref<String>) -> Void;

public static native func LogChannelError(channel: CName, const text: script_ref<String>) -> Void;

public static native func LogError(const text: script_ref<String>) -> Void;

public static native func Trace() -> Void;

public class RefreshSlavesEvent extends ProcessDevicesEvent {

  public let onInitialize: Bool;

  public let force: Bool;
}

public abstract class ProgramAction extends ActionBool {
}

public class ModifyTelemetryVariable extends PlayerScriptableSystemRequest {

  public let dataTrackingFact: ETelemetryData;

  @default(ModifyTelemetryVariable, 1)
  public let value: Int32;
}

public class ResetMeleeAttackDelayedRequest extends ScriptableSystemRequest {
}

public class ResetRangedAttackDelayedRequest extends ScriptableSystemRequest {
}

public final native class AchievementSystem extends IAchievementSystem {

  public final native func UnlockAchievement(achievement: ref<Achievement_Record>) -> Void;

  public final native func SetAchievementProgress(achievement: ref<Achievement_Record>, precentComplete: Float) -> Void;
}

public native class Achievement_Record extends TweakDBRecord {

  public final native func LocalizedDescription() -> String;

  public final native func GOGKey() -> String;

  public final native func XB1Key() -> String;

  public final native func SteamKey() -> String;

  public final native func Tags() -> array<CName>;

  public final native func GetTagsCount() -> Int32;

  public final native func GetTagsItem(index: Int32) -> CName;

  public final native func TagsContains(item: CName) -> Bool;

  public final native func DisplayName() -> CName;

  public final native func EnumName() -> CName;

  public final native func PS4Key() -> Int32;

  public final native func Type() -> gamedataAchievement;
}

public class ResetAttackDelayedRequest extends ScriptableSystemRequest {
}

public class ResetNPCKilledDelayedRequest extends ScriptableSystemRequest {
}

public class ModifyNPCTelemetryVariable extends PlayerScriptableSystemRequest {

  public let dataTrackingFact: ENPCTelemetryData;

  @default(ModifyNPCTelemetryVariable, 1)
  public let value: Int32;
}

public class AddAchievementRequest extends PlayerScriptableSystemRequest {

  public let achievement: gamedataAchievement;

  public let achievementRecord: wref<Achievement_Record>;
}

public class SetAchievementProgressRequest extends PlayerScriptableSystemRequest {

  public let achievement: gamedataAchievement;

  public let currentValue: Int32;

  public let maxValue: Int32;
}

public class ItemCraftedDataTrackingRequest extends PlayerScriptableSystemRequest {

  public let targetItem: ItemID;
}

public final native class TimeSystem extends gameITimeSystem {

  public final native func SetGameTimeBySeconds(seconds: Int32) -> Void;

  public final native func SetGameTimeByHMS(hours: Int32, minutes: Int32, seconds: Int32) -> Void;

  public final native func GetGameTime() -> GameTime;

  public final native func GetGameTimeStamp() -> Float;

  public final native func GetSimTime() -> EngineTime;

  public final native func RealTimeSecondsToGameTime(seconds: Float) -> GameTime;

  public final native func SetTimeDilation(reason: CName, dilation: Float, opt duration: Float, opt easeInCurve: CName, opt easeOutCurve: CName, opt listener: ref<TimeDilationListener>) -> Void;

  public final native func UnsetTimeDilation(reason: CName, opt easeOutCurve: CName) -> Void;

  public final native func SetIgnoreTimeDilationOnLocalPlayerZero(ignore: Bool) -> Void;

  public final native func SetTimeDilationOnLocalPlayerZero(reason: CName, dilation: Float, opt duration: Float, opt easeInCurve: CName, opt easeOutCurve: CName, opt ignore: Bool) -> Void;

  public final native func UnsetTimeDilationOnLocalPlayerZero(opt easeOutCurve: CName) -> Void;

  public final native func IsTimeDilationActive(opt reason: CName) -> Bool;

  public final native func RegisterListener(entity: wref<Entity>, eventToDelay: ref<Event>, expectedTime: GameTime, repeat: Int32, opt sendOldNoifications: Bool) -> Uint32;

  public final native func RegisterDelayedListener(entity: wref<Entity>, eventToDelay: ref<Event>, delay: GameTime, repeat: Int32, opt sendOldNoifications: Bool) -> Uint32;

  public final native func RegisterIntervalListener(entity: wref<Entity>, eventToDelay: ref<Event>, expectedHour: GameTime, timeout: GameTime, opt repeat: Int32) -> Uint32;

  public final native func UnregisterListener(listenerID: Uint32) -> Void;

  public final native func RegisterScriptableSystemIntervalListener(systemName: CName, requestToDelay: ref<ScriptableSystemRequest>, expectedHour: GameTime, timeout: GameTime, opt repeat: Int32) -> Uint32;

  public final native func SetPausedState() -> Void;

  public final native func IsPausedState() -> Bool;
}

public abstract native class tickITimeDilationListener extends IScriptable {
}

public class NPCKillDataTrackingRequest extends PlayerScriptableSystemRequest {

  public let eventType: EDownedType;

  public let damageEntry: DamageHistoryEntry;

  public let isDownedRecorded: Bool;
}

public native class IFxPackage extends IScriptable {
}

public final native class EffectSystem extends IEffectSystem {

  public final native func CreateEffect(definition: EffectRef, instigator: ref<Entity>, opt weapon: ref<Entity>) -> ref<EffectInstance>;

  public final native func CreateEffectStatic(effectName: CName, effectTag: CName, instigator: ref<Entity>, opt weapon: ref<Entity>) -> ref<EffectInstance>;

  public final native func PreloadStaticEffectResources(effectName: CName, effectTag: CName) -> Void;

  public final native func ReleaseStaticEffectResources(effectName: CName, effectTag: CName) -> Void;
}

public native struct EffectData {

  public final static native func SetBool(ctx: EffectData, id: BlackboardID_Bool, value: Bool) -> Bool;

  public final static native func SetInt(ctx: EffectData, id: BlackboardID_Int, value: Int32) -> Bool;

  public final static native func SetFloat(ctx: EffectData, id: BlackboardID_Float, value: Float) -> Bool;

  public final static native func SetName(ctx: EffectData, id: BlackboardID_Name, value: CName) -> Bool;

  public final static native func SetString(ctx: EffectData, id: BlackboardID_String, value: String) -> Bool;

  public final static native func SetVector(ctx: EffectData, id: BlackboardID_Vector4, value: Vector4) -> Bool;

  public final static native func SetEulerAngles(ctx: EffectData, id: BlackboardID_EulerAngles, value: EulerAngles) -> Bool;

  public final static native func SetQuat(ctx: EffectData, id: BlackboardID_Quat, value: Quaternion) -> Bool;

  public final static native func SetEntity(ctx: EffectData, id: BlackboardID_Entity, value: wref<Entity>) -> Bool;

  public final static native func SetVariant(ctx: EffectData, id: BlackboardID_Variant, value: Variant) -> Bool;

  public final static native func GetBool(ctx: EffectData, id: BlackboardID_Bool, out value: Bool) -> Bool;

  public final static native func GetInt(ctx: EffectData, id: BlackboardID_Int, out value: Int32) -> Bool;

  public final static native func GetFloat(ctx: EffectData, id: BlackboardID_Float, out value: Float) -> Bool;

  public final static native func GetName(ctx: EffectData, id: BlackboardID_Name, out value: CName) -> Bool;

  public final static native func GetString(ctx: EffectData, id: BlackboardID_String, out value: String) -> Bool;

  public final static native func GetVector(ctx: EffectData, id: BlackboardID_Vector4, out value: Vector4) -> Bool;

  public final static native func GetEulerAngles(ctx: EffectData, id: BlackboardID_EulerAngles, out value: EulerAngles) -> Bool;

  public final static native func GetQuat(ctx: EffectData, id: BlackboardID_Quat, out value: Quaternion) -> Bool;

  public final static native func GetEntity(ctx: EffectData, id: BlackboardID_Entity, out value: wref<Entity>) -> Bool;

  public final static native func GetVariant(ctx: EffectData, id: BlackboardID_Variant, out value: Variant) -> Bool;
}

public final native class EffectInstance extends IEffect {

  public final native func Run() -> Bool;

  public final native func AttachToEntity(entity: wref<Entity>, positionParameter: BlackboardID_Vector4, opt offset: Vector4) -> Void;

  public final native func AttachToSlot(entity: wref<Entity>, slotName: CName, positionParameter: BlackboardID_Vector4, directionParameter: BlackboardID_Vector4) -> Void;

  public final native func Terminate() -> Void;

  public final native func IsFinished() -> Bool;

  public final native func GetSharedData() -> EffectData;

  public final static native func GetBlackboard() -> ref<IBlackboard>;

  public final native func GetLastError() -> String;

  public final native func GetExecutionInfo() -> Void;

  public final native func RegisterCallbackEntity(entity: wref<Entity>, tag: String) -> Void;
}

public class UpdateWeaponChargeEvent extends Event {

  public let newValue: Float;

  public let oldValue: Float;
}

public abstract native class IStatsListener extends IScriptable {
}

public class UpdateDamageChangeEvent extends Event {
}

public class AnimFeature_WeaponScopeData extends AnimFeature {

  public edit let ironsightAngleWithScope: Float;

  public edit let hasScope: Bool;
}

public class AnimFeature_WeaponStats extends AnimFeature {

  public edit let magazineCapacity: Int32;

  public edit let cycleTime: Float;
}

public final native class GameObjectEffectHelper extends IScriptable {

  public final static native func ActivateEffectAction(obj: wref<GameObject>, actionType: gamedataFxActionType, fxName: CName, opt fxBlackboard: ref<worldEffectBlackboard>) -> Void;

  public final static native func StartEffectEvent(obj: ref<GameObject>, effectName: CName, opt shouldPersist: Bool, opt blackboard: ref<worldEffectBlackboard>) -> Void;

  public final static native func BreakEffectLoopEvent(obj: ref<GameObject>, effectName: CName) -> Void;

  public final static native func StopEffectEvent(obj: ref<GameObject>, effectName: CName) -> Void;
}

public native class WeaponFxPackage_Record extends TweakDBRecord {

  public final native func Vfx_impact_glass_bulletproof() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_glass_bulletproofHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_metal_transparent() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_metal_transparentHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_food() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_foodHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_linoleum() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_linoleumHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_wood_bamboo_poles() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_wood_bamboo_polesHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_rubber() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_rubberHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_tiles() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_tilesHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_character_vr() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_character_vrHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_leaves_semitransparent() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_leaves_semitransparentHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_dirt() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_dirtHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_glass_semitransparent() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_glass_semitransparentHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_stone() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_stoneHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_metal_pipe_water() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_metal_pipe_waterHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_default() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_defaultHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_metal_car() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_metal_carHandle() -> ref<MaterialFx_Record>;

  public final native func Npc_vfx_set() -> wref<WeaponVFXSet_Record>;

  public final native func Npc_vfx_setHandle() -> ref<WeaponVFXSet_Record>;

  public final native func Vfx_impact_glass_opaque() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_glass_opaqueHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_water() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_waterHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_plexiglass() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_plexiglassHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_character_flesh() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_character_fleshHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_wood_tree() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_wood_treeHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_plastic() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_plasticHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_vehicle_chassis() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_vehicle_chassisHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_cardboard() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_cardboardHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_metal_painted() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_metal_paintedHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_leaves() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_leavesHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_furniture_leather() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_furniture_leatherHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_meat() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_meatHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_wood_crown() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_wood_crownHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_furniture_upholstery() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_furniture_upholsteryHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_carpet() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_carpetHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_concrete() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_concreteHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_upholstery_car() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_upholstery_carHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_asphalt() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_asphaltHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_plastic_car() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_plastic_carHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_plastic_road() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_plastic_roadHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_ceramic() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_ceramicHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_metal_semitransparent() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_metal_semitransparentHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_paper() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_paperHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_plaster() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_plasterHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_neon() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_neonHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_character_cyberflesh() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_character_cyberfleshHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_glass_car() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_glass_carHandle() -> ref<MaterialFx_Record>;

  public final native func Player_vfx_set() -> wref<WeaponVFXSet_Record>;

  public final native func Player_vfx_setHandle() -> ref<WeaponVFXSet_Record>;

  public final native func Vfx_impact_character_metal() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_character_metalHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_cyberware_metal_head() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_cyberware_metal_headHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_wood() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_woodHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_metal_pipe_steam() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_metal_pipe_steamHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_sand() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_sandHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_cyberware_metal() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_cyberware_metalHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_metal_catwalk() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_metal_catwalkHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_character_flesh_head() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_character_flesh_headHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_glass() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_glassHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_metal_hollow() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_metal_hollowHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_metal() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_metalHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_tire_car() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_tire_carHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_camouflage() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_camouflageHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_wood_hedge() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_wood_hedgeHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_leather() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_leatherHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_meatbag() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_meatbagHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_fabrics() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_fabricsHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_character_armor() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_character_armorHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_grass() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_grassHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_cyberware_flesh() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_cyberware_fleshHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_trash_bag() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_trash_bagHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_flesh() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_fleshHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_brick() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_brickHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_glass_electronics() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_glass_electronicsHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_metal_road() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_metal_roadHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_plastic_electronics() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_plastic_electronicsHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_glass_dst() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_glass_dstHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_trash() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_trashHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_mud() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_mudHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_concrete_water_puddles() -> wref<MaterialFx_Record>;

  public final native func Vfx_impact_concrete_water_puddlesHandle() -> ref<MaterialFx_Record>;

  public final native func Vfx_impact_add_names() -> array<CName>;

  public final native func GetVfx_impact_add_namesCount() -> Int32;

  public final native func GetVfx_impact_add_namesItem(index: Int32) -> CName;

  public final native func Vfx_impact_add_namesContains(item: CName) -> Bool;

  public final native func Character_surrounding_decals() -> array<ResRef>;

  public final native func GetCharacter_surrounding_decalsCount() -> Int32;

  public final native func GetCharacter_surrounding_decalsItem(index: Int32) -> ResRef;

  public final native func Character_pseudo_piercing() -> array<ResRef>;

  public final native func GetCharacter_pseudo_piercingCount() -> Int32;

  public final native func GetCharacter_pseudo_piercingItem(index: Int32) -> ResRef;

  public final native func Vfx_impact_leaves_material() -> CName;

  public final native func Vfx_impact_wood_bamboo_poles_material() -> CName;

  public final native func Vfx_impact_plaster_material() -> CName;

  public final native func Vfx_impact_wood_crown_material() -> CName;

  public final native func Vfx_impact_tiles_material() -> CName;

  public final native func Vfx_impact_food_material() -> CName;

  public final native func Vfx_impact_meat_material() -> CName;

  public final native func Vfx_impact_brick_material() -> CName;

  public final native func Vfx_impact_glass_material() -> CName;

  public final native func Vfx_impact_camouflage_material() -> CName;

  public final native func Vfx_impact_paper_material() -> CName;

  public final native func Vfx_impact_water_material() -> CName;

  public final native func Vfx_impact_dirt_material() -> CName;

  public final native func Vfx_impact_furniture_leather_material() -> CName;

  public final native func Vfx_impact_ceramic_material() -> CName;

  public final native func Vfx_impact_character_armor_material() -> CName;

  public final native func Vfx_impact_character_metal_material() -> CName;

  public final native func Vfx_impact_asphalt_material() -> CName;

  public final native func Vfx_impact_character_vr_material() -> CName;

  public final native func Vfx_impact_metal_material() -> CName;

  public final native func Vfx_impact_upholstery_car_material() -> CName;

  public final native func Vfx_impact_flesh_material() -> CName;

  public final native func Vfx_impact_glass_dst_material() -> CName;

  public final native func Vfx_impact_fabrics_material() -> CName;

  public final native func Vfx_impact_carpet_material() -> CName;

  public final native func Vfx_impact_sand_material() -> CName;

  public final native func Vfx_impact_glass_electronics_material() -> CName;

  public final native func Vfx_impact_character_flesh_head_material() -> CName;

  public final native func Vfx_impact_plastic_road_material() -> CName;

  public final native func Vfx_impact_metal_transparent_material() -> CName;

  public final native func Vfx_impact_character_flesh_material() -> CName;

  public final native func Vfx_impact_cardboard_material() -> CName;

  public final native func Vfx_impact_glass_car_material() -> CName;

  public final native func Vfx_impact_wood_hedge_material() -> CName;

  public final native func Vfx_impact_metal_pipe_steam_material() -> CName;

  public final native func Vfx_impact_plastic_car_material() -> CName;

  public final native func Vfx_impact_concrete_material() -> CName;

  public final native func Vfx_impact_metal_hollow_material() -> CName;

  public final native func Vfx_impact_cyberware_flesh_material() -> CName;

  public final native func Vfx_impact_cyberware_metal_head_material() -> CName;

  public final native func Vfx_impact_metal_catwalk_material() -> CName;

  public final native func Vfx_impact_trash_material() -> CName;

  public final native func Vfx_impact_trash_bag_material() -> CName;

  public final native func Vfx_impact_leather_material() -> CName;

  public final native func Vfx_impact_glass_bulletproof_material() -> CName;

  public final native func Vfx_impact_plastic_electronics_material() -> CName;

  public final native func Vfx_impact_tire_car_material() -> CName;

  public final native func Vfx_impact_metal_semitransparent_material() -> CName;

  public final native func Vfx_impact_neon_material() -> CName;

  public final native func Vfx_impact_metal_road_material() -> CName;

  public final native func Vfx_impact_grass_material() -> CName;

  public final native func Vfx_impact_metal_pipe_water_material() -> CName;

  public final native func Vfx_impact_metal_car_material() -> CName;

  public final native func Vfx_impact_wood_tree_material() -> CName;

  public final native func Vfx_impact_furniture_upholstery_material() -> CName;

  public final native func Vfx_impact_meatbag_material() -> CName;

  public final native func Vfx_impact_glass_opaque_material() -> CName;

  public final native func Vfx_impact_metal_painted_material() -> CName;

  public final native func Vfx_impact_plexiglass_material() -> CName;

  public final native func Vfx_impact_vehicle_chassis_material() -> CName;

  public final native func Vfx_impact_leaves_semitransparent_material() -> CName;

  public final native func Vfx_impact_stone_material() -> CName;

  public final native func Vfx_impact_plastic_material() -> CName;

  public final native func Vfx_impact_glass_semitransparent_material() -> CName;

  public final native func Vfx_impact_rubber_material() -> CName;

  public final native func Vfx_impact_cyberware_metal_material() -> CName;

  public final native func Vfx_impact_linoleum_material() -> CName;

  public final native func Vfx_impact_character_cyberflesh_material() -> CName;

  public final native func Vfx_impact_wood_material() -> CName;

  public final native func Vfx_impact_mud_material() -> CName;

  public final native func Vfx_impact_concrete_water_puddles_material() -> CName;

  public final native func Vfx_hitscan_trail() -> ResRef;

  public final native func Vfx_hitscan_trail_thermal() -> ResRef;

  public final native func Vfx_hitscan_trail_electric() -> ResRef;

  public final native func Vfx_hitscan_trail_chemical() -> ResRef;

  public final native func Vfx_hitscan_trail_slowmo() -> ResRef;

  public final native func Vfx_hitscan_trail_ricochet() -> ResRef;

  public final native func Vfx_projectile_trail_name() -> CName;

  public final native func NPC_vfx_hitscan_trail() -> ResRef;

  public final native func NPC_vfx_hitscan_trail_thermal() -> ResRef;

  public final native func NPC_vfx_hitscan_trail_electric() -> ResRef;

  public final native func NPC_vfx_hitscan_trail_chemical() -> ResRef;

  public final native func Vfx_impact_damage_thermal() -> ResRef;

  public final native func Vfx_impact_damage_electric() -> ResRef;

  public final native func Vfx_impact_damage_chemical() -> ResRef;

  public final native func Vfx_impact_add() -> ResRef;

  public final native func Vfx_impact_add_names_material() -> CName;

  public final native func Vfx_ricochet() -> ResRef;

  public final native func Sfx_impact_context() -> CName;

  public final native func Vfx_ground_throw() -> ResRef;

  public final native func Vfx_impact_add_enable() -> Bool;
}

public native class WeaponVFXSet_Record extends TweakDBRecord {

  public final native func Actions(out outList: array<wref<WeaponVFXAction_Record>>) -> Void;

  public final native func GetActionsCount() -> Int32;

  public final native func GetActionsItem(index: Int32) -> wref<WeaponVFXAction_Record>;

  public final native func GetActionsItemHandle(index: Int32) -> wref<WeaponVFXAction_Record>;

  public final native func ActionsContains(item: wref<WeaponVFXAction_Record>) -> Bool;
}

public class AnimFeature_OwnerType extends AnimFeature {

  public edit let ownerEnum: Int32;
}

public native class TriggerMode_Record extends TweakDBRecord {

  public final native func Name() -> String;

  public final native func Type() -> gamedataTriggerMode;
}

public class ClearVisibilityInAnimSystemRequest extends ScriptableSystemRequest {

  public let entityID: EntityID;
}

public class ForcedVisibilityInAnimSystemData extends IScriptable {

  public let sourceName: CName;

  public let delayID: DelayID;

  public let forcedVisibleOnlyInFrustum: Bool;
}

public native class AnimationSystem extends IScriptable {

  public final native func SetForcedVisible(entityId: EntityID, value: Bool) -> Void;

  public final native func SetForcedVisibleOnlyInFrustum(entityId: EntityID, value: Bool) -> Void;

  public final native func EnterCombatMode(entityId: EntityID) -> Void;

  public final native func ExitCombatMode(entityId: EntityID) -> Void;
}

public class DelayedVisibilityInAnimSystemRequest extends ScriptableSystemRequest {

  public let data: ref<ForcedVisibilityInAnimSystemData>;

  public let isVisible: Bool;

  public let entityID: EntityID;
}

public class ToggleVisibilityInAnimSystemRequest extends ScriptableSystemRequest {

  public let entityID: EntityID;

  public let isVisible: Bool;

  public let sourceName: CName;

  public let transitionTime: Float;

  public let forcedVisibleOnlyInFrustum: Bool;
}

public static native func OperatorNotEqual(a: Float, b: Float) -> Bool;

public native class WeaponSetMaxChargeEvent extends Event {

  public native let maxCharge: Float;
}

public native class WeaponChangeTriggerModeEvent extends Event {

  public native let triggerMode: gamedataTriggerMode;
}

public static native func Cast(a: Uint32) -> Float;

public static native func Cast(a: Uint32) -> Int32;

public static native func OperatorLessEqual(a: Uint32, b: Uint32) -> Bool;

public class AnimFeature_MuzzleData extends AnimFeature {

  public edit let muzzleOffset: Vector4;
}

public native class TickableEvent extends Event {

  public native let state: gameTickableEventState;

  public final native func GetState() -> gameTickableEventState;

  public final native func GetProgress() -> Float;
}

public class FakeUpdateEvent extends TickableEvent {
}

public class OutlineRequestEvent extends Event {

  public let outlineRequest: ref<OutlineRequest>;

  public let flag: Bool;
}

public struct OutlineData {

  public let outlineType: EOutlineType;

  public let outlineStrength: Float;
}

public class SuppressOutlineEvent extends Event {

  public let requestToSuppress: ref<OutlineRequest>;
}

public class FadeOutOutlinesUpdate extends TickableEvent {
}

public native class PrereqState extends IScriptable {

  public final native func OnChanged(newState: Bool) -> Void;

  public final native func OnChangedRepeated(opt callOnlyOnStateFulfilled: Bool) -> Void;

  public final native const func GetPrereq() -> ref<IPrereq>;

  public final native const func GetContext() -> ref<IScriptable>;

  public final native const func IsFulfilled() -> Bool;
}

public class GameObjectRevealedRedPrereqState extends PrereqState {

  public let m_listener: ref<GameObjectListener>;
}

public class GameObjectRevealedGreenPrereqState extends PrereqState {

  public let m_listener: ref<GameObjectListener>;
}

public class RevealAccessPointPrereqState extends PrereqState {

  public let m_listener: ref<GameObjectListener>;
}

public native class StatPoolPrereq_Record extends IPrereq_Record {

  public final native func ComparisonType() -> CName;

  public final native func StatPoolType() -> CName;

  public final native func ValueToCheck() -> Float;

  public final native func SkipOnApply() -> Bool;

  public final native func ListenConstantly() -> Bool;

  public final native func ComparePercentage() -> Bool;
}

public class ForceFadeOutlineEventForWeapon extends Event {

  public let entityID: EntityID;
}

public class UpdateMeleeTrailEffectEvent extends Event {

  public let instigator: wref<GameObject>;
}

public native class WeaponVFXAction_Record extends TweakDBRecord {

  public final native func FxAction() -> wref<FxAction_Record>;

  public final native func FxActionHandle() -> ref<FxAction_Record>;

  public final native func FxActionType() -> wref<FxActionType_Record>;

  public final native func FxActionTypeHandle() -> ref<FxActionType_Record>;

  public final native func FxName() -> CName;
}

public native class FxAction_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataFxAction;
}

public class AmmoStateChangeEvent extends Event {

  public let weaponOwner: wref<GameObject>;
}

public class StartOverheatEffectEvent extends Event {
}

public class UpdateOverheatEvent extends Event {

  public let value: Float;
}

public final native class worldEffectBlackboard extends IScriptable {

  public final native func SetValue(parameterName: CName, clampedValue: Float) -> Void;
}

public final native class entSpawnEffectEvent extends Event {

  public native let blackboard: ref<worldEffectBlackboard>;

  public native let effectName: CName;

  public native let effectInstanceName: CName;

  public native let persistOnDetach: Bool;

  public native let breakAllLoops: Bool;

  public native let breakAllOnDestroy: Bool;
}

public class MeleeHitEvent extends Event {

  public let instigator: wref<GameObject>;

  public let target: wref<GameObject>;

  public let isStrongAttack: Bool;

  public let hitBlocked: Bool;
}

public struct SHitFlag {

  public replicated let flag: hitFlag;

  public replicated let source: CName;
}

public class ResetNPCFinishedDelayedRequest extends ScriptableSystemRequest {
}

public class ResetNPCDefeatedDelayedRequest extends ScriptableSystemRequest {
}

public class ResetNPCIncapacitatedDelayedRequest extends ScriptableSystemRequest {
}

public class ResetNPCDownedDelayedRequest extends ScriptableSystemRequest {
}

public class TakedownActionDataTrackingRequest extends PlayerScriptableSystemRequest {

  public let eventType: ETakedownActionType;
}

public class UpdateShardFailedDropsRequest extends ScriptableSystemRequest {

  public let resetCounter: Bool;

  public let newFailedAttempts: Float;
}

public native class StatusEffect extends StatusEffectBase {

  public final native func GetRecord() -> wref<StatusEffect_Record>;

  public final native func GetInitialApplicationSimTimestamp() -> EngineTime;

  public final native func GetLastApplicationSimTimestamp() -> EngineTime;

  public final native func GetRemainingDuration() -> Float;

  public final native func GetMaxStacks() -> Uint32;

  public final native func GetStackCount() -> Uint32;

  public final native func GetInstigatorStaticDataID() -> TweakDBID;

  public final native func GetInstigatorEntityID() -> EntityID;

  public final native func GetDirection() -> Vector4;
}

public native class StatusEffectType_Record extends TweakDBRecord {

  public final native func EnumName() -> String;

  public final native func EnumComment() -> String;

  public final native func Type() -> gamedataStatusEffectType;
}

public native class ContinuousAttackEffector_Record extends ContinuousEffector_Record {

  public final native func AttackRecord() -> wref<Attack_Record>;

  public final native func AttackRecordHandle() -> ref<Attack_Record>;
}

public native class StatusEffectAIData_Record extends TweakDBRecord {

  public final native func BehaviorEventFlag() -> wref<StatusEffectAIBehaviorFlag_Record>;

  public final native func BehaviorEventFlagHandle() -> ref<StatusEffectAIBehaviorFlag_Record>;

  public final native func BehaviorType() -> wref<StatusEffectAIBehaviorType_Record>;

  public final native func BehaviorTypeHandle() -> ref<StatusEffectAIBehaviorType_Record>;

  public final native func SensePreset() -> wref<SensePreset_Record>;

  public final native func SensePresetHandle() -> ref<SensePreset_Record>;

  public final native func Stimulis(out outList: array<wref<Stim_Record>>) -> Void;

  public final native func GetStimulisCount() -> Int32;

  public final native func GetStimulisItem(index: Int32) -> wref<Stim_Record>;

  public final native func GetStimulisItemHandle(index: Int32) -> wref<Stim_Record>;

  public final native func StimulisContains(item: wref<Stim_Record>) -> Bool;

  public final native func ActivationPrereqs(out outList: array<wref<IPrereq_Record>>) -> Void;

  public final native func GetActivationPrereqsCount() -> Int32;

  public final native func GetActivationPrereqsItem(index: Int32) -> wref<IPrereq_Record>;

  public final native func GetActivationPrereqsItemHandle(index: Int32) -> wref<IPrereq_Record>;

  public final native func ActivationPrereqsContains(item: wref<IPrereq_Record>) -> Bool;

  public final native func BehaviorSignalResendDelay(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetBehaviorSignalResendDelayCount() -> Int32;

  public final native func GetBehaviorSignalResendDelayItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetBehaviorSignalResendDelayItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func BehaviorSignalResendDelayContains(item: wref<StatModifier_Record>) -> Bool;

  public final native func BehaviourName() -> CName;

  public final native func Priority() -> Float;

  public final native func StimRangeMultiplier() -> Float;

  public final native func UpdateSenses() -> Bool;

  public final native func ShouldDelayStatusEffectApplication() -> Bool;

  public final native func ShouldProcessAIDataOnReapplication() -> Bool;
}

public static native func OperatorGreater(a: EngineTime, b: EngineTime) -> Bool;

public native class StatusEffectPlayerData_Record extends TweakDBRecord {

  public final native func StatusEffectVariation() -> wref<StatusEffectVariation_Record>;

  public final native func StatusEffectVariationHandle() -> ref<StatusEffectVariation_Record>;

  public final native func AirRecoveryAnimDuration() -> Float;

  public final native func ImpulseDistance() -> Float;

  public final native func Priority() -> Float;

  public final native func RecoveryAnimDuration() -> Float;

  public final native func StartupAnimDuration() -> Float;

  public final native func CameraShakeStrength() -> Float;

  public final native func StartupAnimInterruptPoint() -> Float;

  public final native func LandAnimDuration() -> Float;

  public final native func RotateToSource() -> Bool;

  public final native func DisableJump() -> Bool;

  public final native func BlockMovement() -> Bool;

  public final native func ForceUnequipWeapon() -> Bool;

  public final native func DisableCrouch() -> Bool;

  public final native func ForceSafeWeapon() -> Bool;

  public final native func DisableSprint() -> Bool;

  public final native func JamWeapon() -> Bool;

  public final native func CameraInputInterference() -> Bool;

  public final native func DisableDodge() -> Bool;

  public final native func ScaleImpulseDistance() -> Bool;
}

public native class StatusEffectVariation_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataStatusEffectVariation;
}

public static native func Cast(a: Float) -> Bool;

public static native func OperatorAssignSubtract(out a: Float, b: Float) -> Float;

public static native func OperatorGreater(a: Uint32, b: Uint32) -> Bool;

public native class IconsNameResolver extends IScriptable {

  public final static native func GetIconsNameResolver() -> ref<IconsNameResolver>;

  public final native func TranslateItemToIconName(tweak: TweakDBID, opt useMaleGender: Bool) -> CName;

  public final native func TranslateItemToIconTweak(tweak: TweakDBID, opt useMaleGender: Bool) -> TweakDBID;

  public final native func TranslateItemToIconRef(tweak: TweakDBID, opt useMaleGender: Bool) -> ref<inkIconReference>;

  public final native func ResolveIconCensorship(tweak: TweakDBID) -> TweakDBID;

  public final native func IsInDebugMode() -> Bool;
}

public static native func GetLocalizedTextByKey(hashKey: CName) -> String;

public static native func StrLen(const str: script_ref<String>) -> Int32;

public static native func OperatorDivide(a: Int32, b: Int32) -> Int32;

public static native func Cast(a: Int32) -> Uint32;

public class HackingRewardNotificationEvent extends Event {

  public let m_text: String;

  public let m_icons: array<String>;
}

public class SetDetectionMultiplier extends Event {

  public let multiplier: Float;
}

public native class SlotComponent extends IPlacedComponent {

  public final native func GetSlotTransform(slotName: CName, out worldTransformOut: WorldTransform) -> Bool;
}

public class AnimFeature_DistractionState extends AnimFeature {

  public edit let isOn: Bool;
}

public struct SToggleDeviceOperationData {

  public let operationName: CName;

  public let enable: Bool;
}

public class DeviceOperationTriggerData extends IScriptable {

  public inline const let operationsToExecute: array<ref<OperationExecutionData>>;
}

public class OperationExecutionData extends IScriptable {

  public let operationName: CName;

  public let delay: Float;

  public let resetDelay: Bool;

  public let delayID: DelayID;

  public let isDelayActive: Bool;
}

public class DelayedDeviceOperationTriggerEvent extends Event {

  public let triggerHandler: ref<DeviceOperationsTrigger>;

  public let namedOperation: ref<OperationExecutionData>;
}

public static native func IsClient() -> Bool;

public static native func IsMultiplayer() -> Bool;

public static native func IsServer() -> Bool;

public native class ChatterHelper extends IScriptable {

  public final static native func PlayVoiceOver(instigator: ref<GameObject>, voName: CName) -> Void;

  public final static native func PlayCpoServerSyncVoiceOver(instigator: ref<GameObject>, voName: CName) -> Void;

  public final static native func PlayCpoClientVoiceOver(instigator: ref<GameObject>, voName: CName) -> Void;

  public final static native func TryPlayReloadChatter(instigator: ref<GameObject>) -> Void;

  public final static native func TryPlayEnemyKilledChatter(instigator: ref<GameObject>) -> Void;

  public final static native func TryPlayEnemyDamagedChatter(instigator: ref<GameObject>) -> Void;

  public final static native func TryPlayScanStartedChatter(instigator: ref<GameObject>) -> Void;

  public final static native func TryPlayScanCompleteChatter(instigator: ref<GameObject>) -> Void;

  public final static native func TryPlayEnterCombatChatter(instigator: ref<GameObject>) -> Void;

  public final static native func TryPlayLeaveCombatChatter(instigator: ref<GameObject>) -> Void;
}

public final native class SoundPlayEvent extends Event {

  public native let soundName: CName;
}

public final native class SoundSwitchEvent extends Event {

  public native let switchName: CName;

  public native let switchValue: CName;
}

public final native class SoundParameterEvent extends Event {

  public native let parameterName: CName;

  public native let parameterValue: Float;
}

public final native class SoundPlayVo extends Event {

  public native let voContext: CName;

  public native let isQuest: Bool;

  public native let ignoreFrustumCheck: Bool;

  public native let ignoreDistanceCheck: Bool;

  public native let debugInitialContext: CName;

  public native let answeringEntityId: EntityID;
}

public abstract final native class IMountingFacility extends IGameSystem {

  public final native func GetMountingInfoSingleWithObjects(opt child: ref<GameObject>, opt parent: ref<GameObject>, opt slotId: MountingSlotId) -> MountingInfo;

  public final native func GetMountingInfoSingleWithIds(opt child: EntityID, opt parent: EntityID, opt slotId: MountingSlotId) -> MountingInfo;

  public final native func GetMountingInfoMultipleWithObjects(opt child: ref<GameObject>, opt parent: ref<GameObject>, opt slotId: MountingSlotId) -> array<MountingInfo>;

  public final native func GetMountingInfoMultipleWithIds(opt child: EntityID, opt parent: EntityID, opt slotId: MountingSlotId) -> array<MountingInfo>;

  public final native func Mount(mountEvent: ref<MountingRequest>) -> Void;

  public final native func Unmount(unmountEvent: ref<UnmountingRequest>) -> Void;

  public final static native func InfoHasParent(info: MountingInfo) -> Bool;

  public final static native func InfoHasChild(info: MountingInfo) -> Bool;

  public final static native func InfoIsComplete(info: MountingInfo) -> Bool;

  public final static native func SlotIsValid(slotId: MountingSlotId) -> Bool;

  public final static native func RelationshipGetOtherObject(relationship: MountingRelationship) -> wref<GameObject>;
}

public native struct MountingInfo {

  public native let childId: EntityID;

  public native let parentId: EntityID;

  public native let slotId: MountingSlotId;
}

public class FactOperationTriggerData extends DeviceOperationTriggerData {

  @attrib(category, "Trigger Data")
  public let comparisionType: EComparisonOperator;

  @attrib(category, "Trigger Data")
  public let factName: CName;

  @attrib(category, "Trigger Data")
  @default(FactOperationTriggerData, 1)
  public let factValue: Int32;

  public let callbackID: Uint32;
}

public class FocusModeOperationTriggerData extends DeviceOperationTriggerData {

  @attrib(category, "Trigger Data")
  public let operationType: ETriggerOperationType;

  @attrib(category, "Trigger Data")
  @default(FocusModeOperationTriggerData, true)
  public let isLookedAt: Bool;
}

public abstract final native class TargetingSystem extends ITargetingSystem {

  public final native func GetTargetParts(instigator: wref<GameObject>, query: TargetSearchQuery, out parts: array<TS_TargetPartInfo>) -> Bool;

  public final native func GetObjectClosestToCrosshair(instigator: wref<GameObject>, out angleDistance: EulerAngles, query: TargetSearchQuery) -> ref<GameObject>;

  public final native func GetComponentClosestToCrosshair(instigator: wref<GameObject>, out angleDistance: EulerAngles, query: TargetSearchQuery) -> ref<IPlacedComponent>;

  public final native func GetCrosshairData(instigator: wref<GameObject>, out crosshairPosition: Vector4, out crosshairForward: Vector4) -> Void;

  public final native func GetDefaultCrosshairData(instigator: wref<GameObject>, out crosshairPosition: Vector4, out crosshairForward: Vector4) -> Void;

  public final native func GetDefaultCrosshairPositionProvider(instigator: wref<GameObject>, opt offsetEntitySpace: Vector3) -> ref<IPositionProvider>;

  public final native func GetDefaultCrosshairOrientationProvider(instigator: wref<GameObject>, opt orientationEntitySpace: Quaternion) -> ref<IOrientationProvider>;

  public final native func GetLookAtObject(instigator: wref<GameObject>, opt withLOS: Bool, opt ignoreTranparent: Bool) -> ref<GameObject>;

  public final native func GetLookAtComponent(instigator: wref<GameObject>, opt withLOS: Bool, opt ignoreTranparent: Bool) -> wref<IComponent>;

  public final native func GetCurrentSpread(instigator: wref<GameObject>) -> Vector4;

  public final native func GetPuppetBlackboardUpdater() -> ref<PuppetBlackboardUpdater>;

  public final native func AimSnap(instigator: wref<GameObject>) -> Void;

  public final native func LookAt(instigator: wref<GameObject>, out params: AimRequest) -> Void;

  public final native func BreakAimSnap(instigator: wref<GameObject>) -> Void;

  public final native func BreakLookAt(instigator: wref<GameObject>) -> Void;

  public final native func OnAimStartBegin(instigator: wref<GameObject>) -> Void;

  public final native func OnAimStartEnd(instigator: wref<GameObject>) -> Void;

  public final native func OnAimStop(instigator: wref<GameObject>) -> Void;

  public final native func SetAimAssistConfig(owner: wref<GameObject>, presetId: TweakDBID) -> Void;

  public final native func GetAimAssistConfig(owner: wref<GameObject>) -> TweakDBID;

  public final native func ProcessLookAtFilter(instigator: wref<GameObject>, filter: ref<TargetFilter>) -> Void;

  public final native func RegisterLookAtFilter(instigator: wref<GameObject>, filter: ref<TargetFilter>) -> TargetFilterTicket;

  public final native func UnregisterLookAtFilter(instigator: wref<GameObject>, filterTicket: TargetFilterTicket) -> Void;

  public final native func AddIgnoredLookAtEntity(instigator: wref<GameObject>, ignoredEntityId: EntityID) -> Void;

  public final native func RemoveIgnoredLookAtEntity(instigator: wref<GameObject>, ignoredEntityId: EntityID) -> Void;

  public final native func AddIgnoredCollisionEntities(entity: wref<GameObject>) -> Void;

  public final native func RemoveIgnoredCollisionEntities(entity: wref<GameObject>) -> Void;

  public final native func SetIsMovingFast(instigator: wref<GameObject>, isFast: Bool) -> Void;

  public final native func IsVisibleTarget(instigator: wref<GameObject>, target: wref<GameObject>) -> Bool;

  public final native func GetTargetingSet(instigator: wref<GameObject>, object: wref<GameObject>) -> TargetingSet;

  public final native func GetBestComponentOnTargetObject(shootStartPosition: Vector4, shootStartForward: Vector4, target: wref<GameObject>, componentFilter: TargetComponentFilterType) -> wref<TargetingComponent>;

  public final native func IsAnyEnemyVisible(instigator: wref<GameObject>, opt distance: Float) -> Bool;

  public final native func IsAnyEnemyOrSensorVisible(instigator: wref<GameObject>, opt distance: Float) -> Bool;
}

public class SensesOperationTriggerData extends DeviceOperationTriggerData {

  @attrib(category, "Trigger Data")
  public let isActivatorPlayer: Bool;

  @attrib(category, "Trigger Data")
  public let isActivatorNPC: Bool;

  @attrib(category, "Trigger Data")
  public let attitudeGroup: CName;

  @attrib(category, "Trigger Data")
  public let operationType: ETriggerOperationType;
}

public class HitOperationTriggerData extends DeviceOperationTriggerData {

  @attrib(category, "Trigger Data")
  @default(HitOperationTriggerData, true)
  public let isAttackerPlayer: Bool;

  @attrib(category, "Trigger Data")
  public let isAttackerNPC: Bool;

  @attrib(category, "Trigger Data")
  @default(HitOperationTriggerData, true)
  public let bullets: Bool;

  @attrib(category, "Trigger Data")
  public let explosions: Bool;

  @attrib(category, "Trigger Data")
  public let melee: Bool;

  @attrib(rangeMax, "100.f")
  @attrib(category, "Trigger Data")
  @attrib(rangeMin, "0.f")
  @default(HitOperationTriggerData, 100.0f)
  public let healthPercentage: Float;
}

public class InteractionAreaOperationTriggerData extends DeviceOperationTriggerData {

  @attrib(category, "Trigger Data")
  public let isActivatorPlayer: Bool;

  @attrib(category, "Trigger Data")
  public let isActivatorNPC: Bool;

  @attrib(category, "Trigger Data")
  public let areaTag: CName;

  @attrib(category, "Trigger Data")
  public let operationType: gameinteractionsEInteractionEventType;
}

public class TriggerVolumeOperationTriggerData extends DeviceOperationTriggerData {

  @attrib(category, "Trigger Data")
  public let isActivatorPlayer: Bool;

  @attrib(category, "Trigger Data")
  public let isActivatorNPC: Bool;

  @attrib(category, "Trigger Data")
  @default(TriggerVolumeOperationTriggerData, true)
  public let canNPCBeDead: Bool;

  @attrib(category, "Trigger Data")
  public let componentName: CName;

  @attrib(category, "Trigger Data")
  public let operationType: ETriggerOperationType;
}

public class DeviceActionOperationTriggerData extends DeviceOperationTriggerData {

  @attrib(category, "Trigger Data")
  public inline let action: ref<ScriptableDeviceAction>;
}

public class CustomActionOperationTriggerData extends DeviceOperationTriggerData {

  @attrib(category, "Trigger Data")
  public let actionID: CName;
}

public class DoorStateOperationTriggerData extends DeviceOperationTriggerData {

  @attrib(category, "Trigger Data")
  public let state: EDoorStatus;
}

public class BaseStateOperationTriggerData extends DeviceOperationTriggerData {

  @attrib(category, "Trigger Data")
  public let state: EDeviceStatus;
}

public abstract native class gameTransformAnimationEvent extends Event {

  public native let animationName: CName;
}

public native class gameTransformAnimationPlayEvent extends gameTransformAnimationEvent {

  public native let timeScale: Float;

  public native let looping: Bool;

  public native let timesPlayed: Uint32;

  public native let useEntitySetup: Bool;
}

public class RestoreRevealStateEvent extends Event {
}

public native class TagObjectRequest extends ScriptableSystemRequest {

  public native let object: wref<GameObject>;
}

public native class RuntimeInfo extends IScriptable {

  public final native const func IsSingleplayer() -> Bool;

  public final native const func IsMultiplayer() -> Bool;

  public final native const func IsClient() -> Bool;

  public final native const func IsServer() -> Bool;
}

public class UnTagAllObjectRequest extends ScriptableSystemRequest {
}

public class TagStatusNotification extends HUDManagerRequest {

  public let isTagged: Bool;
}

public class UpdateNetworkVisualisationRequest extends ScriptableSystemRequest {
}

public struct LinkedFocusClueData {

  public persistent let clueGroupID: CName;

  public persistent let ownerID: EntityID;

  public persistent let clueIndex: Int32;

  public persistent let clueRecord: TweakDBID;

  public persistent let extendedClueRecords: array<ClueRecordData>;

  public persistent let isScanned: Bool;

  public persistent let wasInspected: Bool;

  public persistent let isEnabled: Bool;

  public persistent let psData: PSOwnerData;
}

public class TagLinkedCluekRequest extends ScriptableSystemRequest {

  public let tag: Bool;

  public let linkedCluekData: LinkedFocusClueData;
}

public class linkedClueUpdateEvent extends Event {

  public let linkedCluekData: LinkedFocusClueData;

  public let requesterID: EntityID;

  @default(linkedClueUpdateEvent, true)
  public let updatePS: Bool;
}

public class linkedClueTagEvent extends Event {

  public let tag: Bool;

  public let requesterID: EntityID;
}

public class RegisterLinkedCluekRequest extends ScriptableSystemRequest {

  public let linkedCluekData: LinkedFocusClueData;

  public let forceUpdate: Bool;
}

public class UnregisterLinkedCluekRequest extends ScriptableSystemRequest {

  public let linkedCluekData: LinkedFocusClueData;
}

public class UpdateLinkedClueskRequest extends ScriptableSystemRequest {

  public let linkedCluekData: LinkedFocusClueData;
}

public native struct ScanningTooltipElementDef {

  public native let recordID: TweakDBID;

  public native let timePct: Float;
}

public struct ClueRecordData {

  @attrib(customEditor, "TweakDBGroupInheritance;scanning.FocusClue;FocusClue")
  public persistent let clueRecord: TweakDBID;

  @attrib(rangeMax, "1.f")
  @attrib(rangeMin, "0.f")
  public let percentage: Float;

  public const let facts: array<SFactOperationData>;

  public persistent let wasInspected: Bool;
}

public native struct ListenerAction {

  public final static native func GetName(me: ListenerAction) -> CName;

  public final static native func GetType(me: ListenerAction) -> gameinputActionType;

  public final static native func GetValue(me: ListenerAction) -> Float;

  public final static native func GetKey(me: ListenerAction) -> array<Int32>;

  public final static native func IsAction(me: ListenerAction, name: CName) -> Bool;

  public final static native func IsButton(me: ListenerAction) -> Bool;

  public final static native func IsButtonJustPressed(me: ListenerAction) -> Bool;

  public final static native func IsButtonJustReleased(me: ListenerAction) -> Bool;

  public final static native func IsAxisChangeAction(me: ListenerAction) -> Bool;

  public final static native func IsRelativeChangeAction(me: ListenerAction) -> Bool;
}

public native class UnTagObjectRequest extends ScriptableSystemRequest {

  public native let object: wref<GameObject>;
}

public class RegisterInputListenerRequest extends ScriptableSystemRequest {

  public let object: wref<GameObject>;
}

public class UnRegisterInputListenerRequest extends ScriptableSystemRequest {

  public let object: wref<GameObject>;
}

public class RegisterToListListener extends ScriptableSystemRequest {

  public let object: wref<GameObject>;

  public let funcName: CName;
}

public native class PSChangedEvent extends Event {
}

public class SendSpiderbotToPerformActionEvent extends Event {

  public let executor: wref<GameObject>;
}

public final native class WorkspotGameSystem extends IWorkspotGameSystem {

  public final native func PlayInDeviceSimple(device: ref<GameObject>, actor: ref<GameObject>, allowCameraMov: Bool, opt actorDataCompName: CName, opt deviceDataCompName: CName, opt syncSlotName: CName, opt slideTime: Float, opt slideBehaviour: WorkspotSlidingBehaviour, opt callbackEventRecipient: ref<Entity>) -> Void;

  public final native func PlayInDevice(device: ref<GameObject>, actor: ref<GameObject>, opt workspotStateFlavourName: CName, opt actorDataCompName: CName, opt deviceDataCompName: CName, opt syncSlotName: CName, opt slideTime: Float, opt slideBehaviour: WorkspotSlidingBehaviour, opt callbackEventRecipient: ref<Entity>) -> Void;

  public final native func StopInDevice(actor: ref<GameObject>, opt posDelta: Vector4, opt orientDelta: Quaternion) -> Void;

  public final native func GetDeviceUser(deviceID: EntityID) -> ref<GameObject>;

  public final native func MountToVehicle(parent: ref<GameObject>, child: ref<GameObject>, slideTime: Float, animDelay: Float, workspotResourceContainer: CName, slotName: CName, opt syncronizedObjects: array<EntityID>, opt entrySlotName: CName, opt animVariables: array<CName>) -> Bool;

  public final native func SwitchSeatVehicle(parent: ref<GameObject>, child: ref<GameObject>, workspotResourceContainer: CName, slotName: CName, opt exitSlotName: CName, opt activateAnimVariables: array<CName>, opt deactivateAnimVariables: array<CName>) -> Void;

  public final native func UnmountFromVehicle(parent: ref<GameObject>, child: ref<GameObject>, opt instant: Bool, opt posDelta: Vector4, opt orientDelta: Quaternion, opt exitSlotName: CName) -> Void;

  public final native func IsInVehicleWorkspot(vehicle: ref<GameObject>, child: ref<GameObject>, slotName: CName) -> Bool;

  public final native func StopNpcInWorkspot(actor: ref<GameObject>) -> Void;

  public final native func IsActorInWorkspot(actor: ref<GameObject>) -> Bool;

  public final native func GetExtendedInfo(actor: ref<GameObject>) -> ref<ExtendedWorkspotInfo>;

  public final native func SendDebugCommand(mode: workWorkspotDebugMode, entId: String) -> Void;

  public final native func SendDebugCommandEnt(mode: workWorkspotDebugMode, obj: ref<GameObject>) -> Void;

  public final native func SendDebugCommandFunctionalTests(mode: workWorkspotDebugMode, obj: ref<GameObject>, redscript: ref<IScriptable>) -> Void;

  public final native func SendFastExitSignal(actor: ref<GameObject>, opt dirLS: Vector3, opt stayInWorkspotIfFailed: Bool, opt playSlowExitIfFailed: Bool, opt instant: Bool, opt tryBlendToWalk: Bool) -> Void;

  public final native func SendJumpCommandEnt(actor: ref<GameObject>, entryId: Int32, instant: Bool) -> Void;

  public final native func SendJumpToAnimEnt(actor: ref<GameObject>, animName: CName, instant: Bool) -> Void;

  public final native func SendJumpToTagCommandEnt(actor: ref<GameObject>, entryTag: CName, instant: Bool) -> Void;

  public final native func SendSlowExitSignal(actor: ref<GameObject>, opt animationName: CName, opt dontWaitForCurrentAnimationToFinish: Bool) -> Void;

  public final native func SendDynamicSyncBindSignal(actor: ref<GameObject>, master: ref<GameObject>) -> Void;

  public final native func SendDynamicSyncUnbindSignal(actor: ref<GameObject>) -> Void;

  public final native func SendPlaySignal(actor: ref<GameObject>) -> Void;

  public final native func SendAdjustAndPlaySignal(actor: ref<GameObject>, adjustTime: Float, playbackDelay: Float, adjustDelta: Transform) -> Void;

  public final native func SendForwardSignal(actor: ref<GameObject>) -> Void;

  public final native func SendReactionSignal(actor: ref<GameObject>, reactionName: CName) -> Bool;

  public final native func ResetPlaybackToStart(actor: ref<GameObject>) -> Void;

  public final native func HardResetPlaybackToStart(actor: ref<GameObject>) -> Void;

  public final native func GetIdOfExitAnim(actor: ref<GameObject>, animName: CName) -> Int32;

  public final native func SendEventToConnectedSpots(actor: ref<GameObject>, eventName: CName) -> Bool;

  public final native func IsReactionAvailable(actor: ref<GameObject>, reactionName: CName) -> Bool;

  public final native func HasExitNodes(actor: ref<GameObject>, fastExit: Bool, slowExit: Bool, opt performNavmeshChecks: Bool) -> Bool;

  public final native func PlayNpcInWorkspot(npc: ref<GameObject>, master: ref<GameObject>, referenceEntity: ref<GameObject>, actorDataCompName: CName, opt syncSlotName: CName, opt slideTime: Float, opt syncOffsetSourceCompName: CName) -> Void;
}

public struct UIInteractionSkillCheck {

  public let isValid: Bool;

  public let skillCheck: EDeviceChallengeSkill;

  public let skillName: String;

  public let requiredSkill: Int32;

  public let playerSkill: Int32;

  public let actionDisplayName: String;

  public let hasAdditionalRequirements: Bool;

  public let additionalReqOperator: ELogicOperator;

  public let additionalRequirements: array<ConditionData>;

  public let isPassed: Bool;

  public let ownerID: EntityID;
}

public class DelayedDeviceActionEvent extends Event {

  public let action: ref<ScriptableDeviceAction>;
}

public struct ExplosiveDeviceResourceDefinition {

  @attrib(customEditor, "TweakDBGroupInheritance;Attacks.DeviceAttack")
  public edit let damageType: TweakDBID;

  public let vfxResource: FxResource;

  public edit const let vfxEventNamesOnExplosion: array<CName>;

  public edit const let vfxResourceOnFirstHit: array<FxResource>;

  public edit let executionDelay: Float;

  public edit let additionalGameEffectType: EExplosiveAdditionalGameEffectType;

  public edit let dontHighlightOnLookat: Bool;
}

public abstract native class IVisualComponent extends IPlacedComponent {

  public final native func TemporaryHide(on: Bool) -> Void;
}

public native class MeshComponent extends IVisualComponent {
}

public class ChangeLightEvent extends Event {

  public let settings: ScriptLightSettings;

  public let time: Float;

  public let curve: CName;

  public let loop: Bool;
}

public struct ScriptLightSettings {

  public let strength: Float;

  public let color: Color;
}

public native class entCameraComponent extends IPlacedComponent {
}

public class ExplosiveDeviceDelayedEvent extends Event {

  public let arrayIndex: Int32;

  public let instigator: wref<GameObject>;
}

public native struct AttackInitContext {

  public native let record: ref<Attack_Record>;

  public native let instigator: wref<GameObject>;

  public native let source: wref<GameObject>;

  public native let weapon: wref<WeaponObject>;
}

public native class Attack_GameEffect extends IAttack {

  public final native func PrepareAttack(instigator: wref<GameObject>) -> ref<EffectInstance>;

  public final native func StartAttackContinous() -> Void;

  public final native func StopAttack() -> Bool;

  public final native func SetAttackPosition(pos: Vector4) -> Void;
}

public native struct Quaternion {

  public native let i: Float;

  public native let j: Float;

  public native let k: Float;

  public native let r: Float;

  public final static native func SetIdentity(quat: Quaternion) -> Void;

  public final static native func SetInverse(quat: Quaternion) -> Void;

  public final static native func GetXAxis(quat: Quaternion) -> Vector4;

  public final static native func GetYAxis(quat: Quaternion) -> Vector4;

  public final static native func GetZAxis(quat: Quaternion) -> Vector4;

  public final static native func GetForward(quat: Quaternion) -> Vector4;

  public final static native func GetRight(quat: Quaternion) -> Vector4;

  public final static native func GetUp(quat: Quaternion) -> Vector4;

  public final static native func ToMatrix(quat: Quaternion) -> Matrix;

  public final static native func ToEulerAngles(quat: Quaternion) -> EulerAngles;

  public final static native func GetAxes(quat: Quaternion, out forward: Vector4, out right: Vector4, out up: Vector4) -> Void;

  public final static native func Dot(a: Quaternion, b: Quaternion) -> Float;

  public final static native func Rand(min: Float, max: Float) -> Quaternion;

  public final static native func Transform(quat: Quaternion, v: Vector4) -> Vector4;

  public final static native func TransformInverse(quat: Quaternion, v: Vector4) -> Vector4;

  public final static native func Normalize(quat: Quaternion) -> Void;

  public final static native func Normalized(quat: Quaternion) -> Quaternion;

  public final static native func Magnitude(quat: Quaternion) -> Float;

  public final static native func MagnitudeSq(quat: Quaternion) -> Float;

  public final static native func MulInverse(q1: Quaternion, q2: Quaternion) -> Quaternion;

  public final static native func Conjugate(q: Quaternion) -> Quaternion;

  public final static native func SetShortestRotation(q: Quaternion, v1: Vector4, v2: Vector4) -> Void;

  public final static native func SetAxisAngle(out q: Quaternion, axis: Vector4, angle: Float) -> Void;

  public final static native func SetXRot(q: Quaternion, angle: Float) -> Void;

  public final static native func SetYRot(q: Quaternion, angle: Float) -> Void;

  public final static native func SetZRot(q: Quaternion, angle: Float) -> Void;

  public final static native func Lerp(q1: Quaternion, q2: Quaternion, t: Float) -> Quaternion;

  public final static native func Slerp(q1: Quaternion, q2: Quaternion, t: Float) -> Quaternion;

  public final static native func GetAngle(q: Quaternion) -> Float;

  public final static native func GetAxis(q: Quaternion) -> Vector4;

  public final static native func BuildFromDirectionVector(direction: Vector4, opt up: Vector4) -> Quaternion;
}

public native struct EulerAngles {

  public native let Roll: Float;

  public native let Pitch: Float;

  public native let Yaw: Float;

  public final static native func GetXAxis(rotation: EulerAngles) -> Vector4;

  public final static native func GetYAxis(rotation: EulerAngles) -> Vector4;

  public final static native func GetZAxis(rotation: EulerAngles) -> Vector4;

  public final static native func GetForward(rotation: EulerAngles) -> Vector4;

  public final static native func GetRight(rotation: EulerAngles) -> Vector4;

  public final static native func GetUp(rotation: EulerAngles) -> Vector4;

  public final static native func ToMatrix(rotation: EulerAngles) -> Matrix;

  public final static native func ToQuat(rotation: EulerAngles) -> Quaternion;

  public final static native func GetAxes(rotation: EulerAngles, out forward: Vector4, out right: Vector4, out up: Vector4) -> Void;

  public final static native func Dot(a: EulerAngles, b: EulerAngles) -> Float;

  public final static native func Rand(min: Float, max: Float) -> EulerAngles;

  public final static native func AlmostEqual(a: EulerAngles, b: EulerAngles, epsilon: Float) -> Bool;
}

public final native class SoundStopEvent extends Event {

  public native let soundName: CName;
}

public static native func Cast(a: GlobalNodeRef) -> EntityID;

public static native func ResolveNodeRefWithEntityID(id: NodeRef, context: EntityID) -> GlobalNodeRef;

public native struct stimInvestigateData {

  public native let investigationSpots: array<Vector4>;

  public native let investigateController: Bool;

  public native let controllerEntity: wref<Entity>;

  public native let mainDeviceEntity: wref<Entity>;

  public native let distrationPoint: Vector4;

  public native let attackInstigator: wref<Entity>;

  public native let attackInstigatorPosition: Vector4;

  public native let revealsInstigatorPosition: Bool;

  public native let illegalAction: Bool;

  public native let fearPhase: Int32;

  public native let skipReactionDelay: Bool;

  public native let skipInitialAnimation: Bool;

  public native let victimEntity: wref<Entity>;
}

public native struct GlobalNodeRef {

  public final static native func IsDefined(id: GlobalNodeRef) -> Bool;
}

public native struct NavigationFindPointResult {

  public native let status: worldNavigationRequestStatus;

  public native let point: Vector4;
}

public native struct QueryFilter {

  public final static native func ALL() -> QueryFilter;

  public final static native func ZERO() -> QueryFilter;

  public final static native func AddGroup(out filter: QueryFilter, group: CName) -> Void;
}

public static native func Cast(a: Uint64) -> Uint32;

public static native func OperatorOr(a: Uint64, b: Uint64) -> Uint64;

public static native func Cast(a: Uint32) -> Uint64;

public static native func OperatorBitNot(a: Uint64) -> Uint64;

public static native func OperatorAnd(a: Uint64, b: Uint64) -> Uint64;

public static native func OperatorNotEqual(a: Uint64, b: Uint64) -> Bool;

public final native class SpatialQueriesSystem extends gameISpatialQueriesSystem {

  public final native func GetPlayerObstacleSystem() -> ref<PlayerObstacleSystem>;

  public final native func GetGeometryDescriptionSystem() -> ref<GeometryDescriptionSystem>;

  public final native func Overlap(primitiveDimension: Vector4, position: Vector4, rotation: EulerAngles, opt collisionGroup: CName, out result: TraceResult) -> Bool;

  public final native func SyncRaycastByCollisionPreset(start: Vector4, end: Vector4, opt collisionPreset: CName, out result: TraceResult, opt staticOnly: Bool, opt dynamicOnly: Bool) -> Bool;

  public final native func SyncRaycastByCollisionGroup(start: Vector4, end: Vector4, opt collisionGroup: CName, out result: TraceResult, opt staticOnly: Bool, opt dynamicOnly: Bool) -> Bool;
}

public abstract final native class GeometryDescriptionSystem extends IScriptable {

  public final native func QueryExtents(query: ref<GeometryDescriptionQuery>) -> ref<GeometryDescriptionResult>;

  public final native func QueryAverageNormal(query: ref<AverageNormalQuery>) -> ref<AverageNormalResult>;
}

public native class GeometryDescriptionResult extends IScriptable {

  public native let leftHandData: HandIKDescriptionResult;

  public native let rightHandData: HandIKDescriptionResult;

  public native let collisionNormal: Vector4;

  public native let distanceVector: Vector4;

  public native let topPoint: Vector4;

  public native let topNormal: Vector4;

  public native let behindPoint: Vector4;

  public native let behindNormal: Vector4;

  public native let obstacleDepth: Float;

  public native let upExtent: Float;

  public native let downExtent: Float;

  public native let topExtent: Float;

  public native let obstacleDepthStatus: worldgeometryProbingStatus;

  public native let leftExtentStatus: worldgeometryProbingStatus;

  public native let rightExtentStatus: worldgeometryProbingStatus;

  public native let upExtentStatus: worldgeometryProbingStatus;

  public native let downExtentStatus: worldgeometryProbingStatus;

  public native let topTestStatus: worldgeometryProbingStatus;

  public native let behindTestStatus: worldgeometryProbingStatus;

  public native let queryStatus: worldgeometryDescriptionQueryStatus;
}

public static native func AbsF(a: Float) -> Float;

public class SetInvestigationPositionsArrayEvent extends Event {

  public let investigationPositionsArray: array<Vector4>;
}

public final native class SetScanningBlockedEvent extends Event {

  public native let isBlocked: Bool;
}

public final native class ItemBeingRemovedEvent extends Event {

  public native let itemID: ItemID;

  public native let itemData: ref<gameItemData>;

  public native let difference: Int32;

  public native let currentQuantity: Int32;
}

public final native struct LootChoiceActionWrapper {

  public native let removeItem: Bool;

  public native let itemId: ItemID;

  public native let action: CName;

  public final static native func IsValid(wrapper: LootChoiceActionWrapper) -> Bool;

  public final static native func IsIllegal(wrapper: LootChoiceActionWrapper) -> Bool;

  public final static native func IsHandledByCode(wrapper: LootChoiceActionWrapper) -> Bool;

  public final static native func Unwrap(choiceEvent: ref<InteractionChoiceEvent>) -> LootChoiceActionWrapper;
}

public native class ConsumableItem_Record extends Item_Record {

  public final native func ConsumableType() -> wref<ConsumableType_Record>;

  public final native func ConsumableTypeHandle() -> ref<ConsumableType_Record>;

  public final native func ConsumableBaseName() -> wref<ConsumableBaseName_Record>;

  public final native func ConsumableBaseNameHandle() -> ref<ConsumableBaseName_Record>;

  public final native func AtlasIcon() -> CName;

  public final native func RemovePoint() -> Float;

  public final native func ReturnBlendDuration() -> Float;

  public final native func CastPoint() -> Float;

  public final native func InitBlendDuration() -> Float;

  public final native func CycleDuration() -> Float;
}

public native class ConsumableType_Record extends TweakDBRecord {

  public final native func EnumName() -> CName;

  public final native func EnumComment() -> CName;

  public final native func Type() -> gamedataConsumableType;
}

public class InventoryItemDataWrapper extends IScriptable {

  public let ItemData: InventoryItemData;

  public let SortData: InventoryItemSortData;

  @default(InventoryItemDataWrapper, false)
  public let HasSortDataBuilt: Bool;
}

public native struct ItemModParams {

  public native let itemID: ItemID;

  public native let quantity: Int32;
}

public class GameplayEquipRequest extends PlayerScriptableSystemRequest {

  public let itemID: ItemID;

  @default(GameplayEquipRequest, -1)
  public let slotIndex: Int32;

  public let addToInventory: Bool;

  @default(GameplayEquipRequest, false)
  public let equipToCurrentActiveSlot: Bool;

  @default(GameplayEquipRequest, false)
  public let blockUpdateWeaponActiveSlots: Bool;

  @default(GameplayEquipRequest, false)
  public let forceEquipWeapon: Bool;
}

public class RemoveConsumableDelayedEvent extends Event {

  public let consumeAction: ref<ConsumeAction>;
}

public class AutocraftEndCycleRequest extends ScriptableSystemRequest {
}

public class AutocraftDeactivateRequest extends ScriptableSystemRequest {

  public let resetMemory: Bool;
}

public class RegisterItemUsedRequest extends ScriptableSystemRequest {

  public let itemUsed: ItemID;
}

public native class ConsumableBaseName_Record extends TweakDBRecord {

  public final native func EnumName() -> CName;

  public final native func EnumComment() -> CName;

  public final native func Type() -> gamedataConsumableBaseName;
}

public class LearnAction extends ConsumeAction {
}

public class DisassembleItemRequest extends PlayerScriptableSystemRequest {

  public let target: wref<GameObject>;

  public let itemID: ItemID;

  public let amount: Int32;
}

public final native class TelemetrySystem extends ITelemetrySystem {

  public final native func LogDamageDealt(damage: TelemetryDamageDealt) -> Void;

  public final native func LogPlayerInDangerousArea(dangerous: Bool) -> Void;

  public final native func LogNumberOfCombatants(numberOfCombatants: Int32) -> Void;

  public final native func LogEnemyDown(telemetryEnemyDown: TelemetryEnemyDown) -> Void;

  public final native func LogPlayerReachedCriticalHealth(healthIsCritical: Bool) -> Void;

  public final native func LogPlayerDeathEvent(evt: ref<gameDeathEvent>) -> Void;

  public final native func LogLevelGained(evt: TelemetryLevelGained) -> Void;

  public final native func LogDistrictChanged(districtName: String, isNew: Bool) -> Void;

  public final native func LogRewardGiven(rewardName: CName, rewardTDBID: TweakDBID, rewardMoney: Int32) -> Void;

  public final native func LogAttributeUpgraded(attributeType: gamedataStatType, lvl: Int32) -> Void;

  public final native func LogPerkUpgraded(perkUpgraded: gamedataPerkType, lvl: Int32) -> Void;

  public final native func LogPartInstalled(modifiedItem: TelemetryInventoryItem, itemPart: TelemetryInventoryItem, slotID: TweakDBID) -> Void;

  public final native func LogInventoryMenuClosed() -> Void;

  public final native func LogQuickHack(telemetryQuickHack: TelemetryQuickHack) -> Void;

  public final native func LogTakedown(takedownAction: CName, target: wref<GameObject>) -> Void;

  public final native func LogItemTransaction(buyer: wref<GameObject>, seller: wref<GameObject>, telemetryInventoryItem: TelemetryInventoryItem, pricePerItem: Uint32, itemQuantity: Uint32, totalPrice: Uint32) -> Void;

  public final native func LogVendorMenuState(vendorid: TweakDBID, isOpening: Bool) -> Void;

  public final native func LogSkillbookUsed(telemetryInventoryItem: TelemetryInventoryItem) -> Void;

  public final native func LogItemAcquired(itemTDBID: TweakDBID, meanOfAcquisition: String) -> Void;

  public final native func LogItemDrop(owner: wref<GameObject>, itemID: ItemID) -> Void;

  public final native func LogItemCrafting(telemetryInventoryItem: TelemetryInventoryItem, craftingAction: CName) -> Void;

  public final native func LogItemDisassembled(telemetryInventoryItem: TelemetryInventoryItem) -> Void;

  public final native func LogItemReward(owner: wref<GameObject>, itemID: ItemID) -> Void;

  public final native func LogDamageByVehicle(hitEvent: ref<gameHitEvent>) -> Void;

  public final native func LogXPReward(xpRecordID: TweakDBID, amount: Int32, type: gamedataProficiencyType) -> Void;

  public final native func LogDevPointsAddedFromReward(addDevPointEffectorTDBID: TweakDBID, amount: Int32, type: gamedataDevelopmentPointType) -> Void;

  public final native func OnSettingsSave() -> Void;

  public final native func LogBraindanceReset() -> Void;

  public final native func LogLastCheckpointLoaded() -> Void;
}

public static native func OperatorMultiply(a: Quaternion, b: Quaternion) -> Quaternion;

public final native struct DropInstruction {

  public native let itemID: ItemID;

  public native let quantity: Int32;

  public final static native func Create(itemID: ItemID, opt quantity: Int32) -> DropInstruction;
}

public final native class LootManager extends ILootManager {

  public final native func GenerateLoot(lootID: TweakDBID, out itemList: array<ItemModParams>) -> Void;

  public final native func SpawnItemDrop(obj: ref<GameObject>, itemID: ItemID, opt position: Vector4, opt rotation: Quaternion) -> Bool;

  public final native func SpawnItemDropOfManyItems(obj: ref<GameObject>, itemInstructions: array<DropInstruction>, opt dropItemName: CName, opt position: Vector4, opt rotation: Quaternion) -> Bool;

  public final native func SpawnThrowableItemDrop(obj: ref<GameObject>, itemID: ItemID, position: Vector4, rotation: Quaternion, params: ref<ParabolicTrajectoryParams>) -> Bool;

  public final native func GetDefaultDropItemName() -> CName;
}

public abstract native class gameprojectileTrajectoryParams extends IScriptable {
}

public abstract native class JournalEntry extends IScriptable {

  public final native const func GetId() -> String;

  public final native const func GetEditorName() -> String;
}

public abstract native class JournalContainerEntry extends JournalEntry {
}

public abstract native class JournalFileEntry extends JournalContainerEntry {
}

public abstract native class JournalQuestObjectiveBase extends JournalContainerEntry {

  public final native const func GetDescription() -> String;

  public final native const func HasCounter() -> Bool;

  public final native const func IsOptional() -> Bool;

  public final native const func GetItemID() -> TweakDBID;
}

public abstract native class JournalQuest extends JournalFileEntry {

  public final native const func GetTitle(journalManager: ref<IJournalManager>) -> String;

  public final native const func GetType() -> gameJournalQuestType;

  public final native const func GetRecommendedLevel() -> Int32;

  public final native const func GetRecommendedLevelID() -> TweakDBID;
}

public abstract native class JournalQuestObjective extends JournalQuestObjectiveBase {
}

public native struct JournalRequestStateFilter {

  public native let inactive: Bool;

  public native let active: Bool;

  public native let succeeded: Bool;

  public native let failed: Bool;
}

public native struct JournalRequestContext {

  public native let stateFilter: JournalRequestStateFilter;

  public final static native func CreatePlayerLevelBasedQuestRequestFilter(self: JournalRequestContext, gameInstance: GameInstance, percentMargin: Uint32) -> Void;

  public final static native func CreateQuestTypeRequestFilter(self: JournalRequestContext, gameInstance: GameInstance, includeMainQuests: Bool, includeSideQuests: Bool, includeStreetStories: Bool, includeContracts: Bool) -> Void;

  public final static native func CreateQuestDistanceRequestFilter(self: JournalRequestContext, gameInstance: GameInstance, distance: Float) -> Void;
}

public abstract native class JournalQuestCodexLink extends JournalEntry {

  public final native const func GetLinkPathHash() -> Uint32;
}

public abstract native class JournalContact extends JournalFileEntry {

  public final native const func GetLocalizedName(journalManager: ref<IJournalManager>) -> String;

  public final native const func IsKnown(journalManager: ref<IJournalManager>) -> Bool;

  public final native const func GetAvatarID(journalManager: ref<IJournalManager>) -> TweakDBID;

  public final native const func GetType() -> gameContactType;

  public final native const func ShouldUseFlatMessageLayout() -> Bool;
}

public class ContactData extends IScriptable {

  public let id: String;

  public let localizedName: String;

  public let avatarID: TweakDBID;

  public let questRelated: Bool;

  public let hasMessages: Bool;

  public let unreadMessegeCount: Int32;

  public let unreadMessages: array<Int32>;

  public let playerCanReply: Bool;

  public let playerIsLastSender: Bool;

  public let lastMesssagePreview: String;

  public let activeDataSync: wref<MessengerContactSyncData>;

  public let threadsCount: Int32;

  public let timeStamp: GameTime;

  public let hash: Int32;
}

public abstract native class JournalPhoneMessage extends JournalEntry {

  public final native const func GetText() -> String;

  public final native const func GetSender() -> gameMessageSender;

  public final native const func GetAttachmentPathHash() -> Uint32;

  public final native const func GetImageID() -> TweakDBID;
}

public abstract native class JournalPhoneChoiceEntry extends JournalEntry {

  public final native const func GetText() -> String;

  public final native const func IsQuestImportant() -> Bool;
}

public abstract native class JournalQuestMapPinBase extends JournalContainerEntry {

  public final native const func GetCaption() -> String;
}

public abstract native class JournalQuestDescription extends JournalEntry {

  public final native const func GetDescription() -> String;
}

public native class JournalOnscreen extends JournalEntry {

  public final native const func GetTitle() -> String;

  public final native const func GetDescription() -> String;

  public final native const func GetIconID() -> TweakDBID;
}

public class NotifyShardRead extends Event {

  public let entry: ref<JournalOnscreen>;

  public let title: String;

  public let text: String;

  public let isCrypted: Bool;

  public let itemID: ItemID;
}

public native class CrackAction_Record extends ItemAction_Record {

  public final native func Effector() -> wref<Effector_Record>;

  public final native func EffectorHandle() -> ref<Effector_Record>;
}

public native class EquipRequest extends PlayerScriptableSystemRequest {

  public native let itemID: ItemID;

  public native let slotIndex: Int32;

  public native let addToInventory: Bool;

  public native let equipToCurrentActiveSlot: Bool;
}

public class DownloadFundsAction extends BaseItemAction {
}

public native struct StatsObjectID {

  public final static native func IsDefined(id: StatsObjectID) -> Bool;

  public final static native func IsDynamic(id: StatsObjectID) -> Bool;

  public final static native func IsEntity(id: StatsObjectID) -> Bool;

  public final static native func ExtractEntityID(id: StatsObjectID) -> EntityID;
}

public class EvaluateLootQualityEvent extends Event {
}

public class StimRequest extends IScriptable {

  public let stimuli: ref<StimuliEvent>;

  public let hasExpirationDate: Bool;

  public let duration: Float;

  public let requestID: StimRequestID;
}

public static native func OperatorAssignAdd(out a: Uint32, b: Uint32) -> Uint32;

public class RecurrentStimuliEvent extends Event {

  public let requestID: StimRequestID;
}

public struct TargetingBehaviour {

  @default(TargetingBehaviour, ESensorDeviceWakeState.CLOSED)
  public let m_initialWakeState: ESensorDeviceWakeState;

  @default(TargetingBehaviour, true)
  public let m_canRotate: Bool;

  @default(TargetingBehaviour, 2f)
  public let m_lostTargetLookAtTime: Float;

  @default(TargetingBehaviour, 10f)
  public let m_lostTargetSearchTime: Float;
}

public struct DetectionParameters {

  @default(DetectionParameters, true)
  public let m_canDetectIntruders: Bool;

  @default(DetectionParameters, 2f)
  public let m_timeToActionAfterSpot: Float;

  @attrib(tooltip, "add rotation to upper body to override forward")
  @default(DetectionParameters, 0.0f)
  public let m_overrideRootRotation: Float;

  @attrib(tooltip, " > 0 - rotate from to | =0 dont rotate | -1 rotate 360 left | -2 rotate 360 right")
  @default(DetectionParameters, 90.f)
  public let m_maxRotationAngle: Float;

  @default(DetectionParameters, -15.f)
  public let m_pitchAngle: Float;

  @default(DetectionParameters, 5.f)
  public let m_rotationSpeed: Float;
}

public class SetQuestTargetWasSeen extends Event {

  public let wasSeen: Bool;
}

public class SetAnyTargetIsLocked extends Event {

  public let wasSeen: Bool;
}

public class NotifyParentsEvent extends Event {
}

public static native func GetFixedEntityIdsFromEntityReference(puppetRef: EntityReference, gameInstance: GameInstance, out outEntityIds: array<EntityID>) -> Void;

public class RequestQuestTakeControlInputLock extends ScriptableSystemRequest {

  public let isLocked: Bool;

  public let isChainForced: Bool;
}

public class RequestReleaseControl extends ScriptableSystemRequest {
}

public class ReactoToPreventionSystem extends Event {

  public let wakeUp: Bool;
}

public class UnregisterNetworkLinkBetweenTwoEntitiesRequest extends ScriptableSystemRequest {

  public let firstID: EntityID;

  public let secondID: EntityID;

  public let onlyRemoveWeakLink: Bool;
}

public class UnregisterNetworkLinksByIDRequest extends ScriptableSystemRequest {

  public let ID: EntityID;
}

public struct LinkedStatusEffect {

  public let netrunnerIDs: array<EntityID>;

  public let targetID: EntityID;

  public let statusEffectList: array<TweakDBID>;
}

public native class AttitudeGroup_Record extends TweakDBRecord {

  public final native func DefaultAttitude() -> String;

  public final native func AttitudeToSelf() -> String;

  public final native func Parent() -> wref<AttitudeGroup_Record>;

  public final native func ParentHandle() -> ref<AttitudeGroup_Record>;

  public final native func Name() -> CName;

  public final native func IsState() -> Bool;
}

public native class SenseVisibilityEvent extends Event {

  public native let target: wref<GameObject>;

  public native let isVisible: Bool;

  public native let shapeId: TweakDBID;

  public native let description: CName;
}

public class SensePresetChangeEvent extends SenseVisibilityEvent {

  public let presetID: TweakDBID;

  public let mainPreset: Bool;

  public let reset: Bool;
}

public native class DistrictPreventionData_Record extends TweakDBRecord {

  public final native func Heat4() -> wref<PreventionHeatData_Record>;

  public final native func Heat4Handle() -> ref<PreventionHeatData_Record>;

  public final native func Recon() -> wref<PreventionHeatData_Record>;

  public final native func ReconHandle() -> ref<PreventionHeatData_Record>;

  public final native func Heat2() -> wref<PreventionHeatData_Record>;

  public final native func Heat2Handle() -> ref<PreventionHeatData_Record>;

  public final native func Heat1() -> wref<PreventionHeatData_Record>;

  public final native func Heat1Handle() -> ref<PreventionHeatData_Record>;

  public final native func Heat3() -> wref<PreventionHeatData_Record>;

  public final native func Heat3Handle() -> ref<PreventionHeatData_Record>;

  public final native func InputLockOverrideThreshold() -> Int32;

  public final native func InputLockTime() -> Float;

  public final native func NonAggressiveReactionMultipler() -> Float;

  public final native func ExteriorSpawnDelay() -> Float;

  public final native func DeescalationZeroTime() -> Float;

  public final native func SafeDistance() -> Float;

  public final native func InteriorSpawnDelay() -> Float;

  public final native func BlinkThreshold() -> Float;

  public final native func DamagePercentThreshold() -> Float;

  public final native func SpawnOriginMaxDistance() -> Float;
}

public class UnlockPreventionInputRequest extends ScriptableSystemRequest {
}

public class PreventionDamageRequest extends ScriptableSystemRequest {

  public let isInternal: Bool;

  public let damagePercentValue: Float;

  public let targetID: EntityID;

  public let targetPosition: Vector4;

  public let isTargetAlive: Bool;

  public let isTargetPrevention: Bool;
}

public native class ScriptsDebugOverlaySystem extends gameIScriptsDebugOverlaySystem {

  public final native func CreateSink() -> SDOSink;
}

public native struct SDOSink {

  public final static native func SetRoot(sink: SDOSink, rootPath: String) -> Void;

  public final static native func SetKeyColor(sink: SDOSink, key: String, color: Color) -> Void;

  public final static native func PushName(sink: SDOSink, key: String, value: CName) -> Void;

  public final static native func PushString(sink: SDOSink, key: String, value: String) -> Void;

  public final static native func PushVector4(sink: SDOSink, key: String, value: Vector4) -> Void;

  public final static native func PushVector2(sink: SDOSink, key: String, value: Vector2) -> Void;

  public final static native func PushQuaternion(sink: SDOSink, key: String, value: Quaternion) -> Void;

  public final static native func PushFloat(sink: SDOSink, key: String, value: Float) -> Void;

  public final static native func PushInt32(sink: SDOSink, key: String, value: Int32) -> Void;

  public final static native func PushUint32(sink: SDOSink, key: String, value: Uint32) -> Void;

  public final static native func PushBool(sink: SDOSink, key: String, value: Bool) -> Void;

  public final static native func ClearKey(sink: SDOSink, key: String) -> Void;

  public final static native func RegisterListener_OnClicked(sink: SDOSink, system: wref<ScriptableSystem>, key: String) -> CName;

  public final static native func UnregisterListener_OnClicked(sink: SDOSink, system: wref<ScriptableSystem>, fullPath: CName) -> Void;
}

public class PreventionDelayedZeroRequest extends ScriptableSystemRequest {
}

public native class PreventionHeatData_Record extends TweakDBRecord {

  public final native func FallbackUnitData() -> wref<PreventionFallbackUnitData_Record>;

  public final native func FallbackUnitDataHandle() -> ref<PreventionFallbackUnitData_Record>;

  public final native func VehicleRecord() -> wref<Vehicle_Record>;

  public final native func VehicleRecordHandle() -> ref<Vehicle_Record>;

  public final native func UnitRecordsPool(out outList: array<wref<PreventionUnitPoolData_Record>>) -> Void;

  public final native func GetUnitRecordsPoolCount() -> Int32;

  public final native func GetUnitRecordsPoolItem(index: Int32) -> wref<PreventionUnitPoolData_Record>;

  public final native func GetUnitRecordsPoolItemHandle(index: Int32) -> wref<PreventionUnitPoolData_Record>;

  public final native func UnitRecordsPoolContains(item: wref<PreventionUnitPoolData_Record>) -> Bool;

  public final native func SpawnRange() -> Vector2;

  public final native func SpawnInterval() -> Float;

  public final native func UnitsCount() -> Int32;
}

public native class PreventionFallbackUnitData_Record extends TweakDBRecord {

  public final native func CharacterRecord() -> wref<Character_Record>;

  public final native func CharacterRecordHandle() -> ref<Character_Record>;

  public final native func MinSpawnRange() -> Float;

  public final native func UnitsCount() -> Int32;
}

public native class PreventionUnitPoolData_Record extends TweakDBRecord {

  public final native func CharacterRecord() -> wref<Character_Record>;

  public final native func CharacterRecordHandle() -> ref<Character_Record>;

  public final native func Weight() -> Float;
}

public native class DistrictEnteredEvent extends ScriptableSystemRequest {

  public edit native let entered: Bool;

  public edit native let sendNewLocationNotification: Bool;

  @attrib(customEditor, "TweakDBGroupInheritance;District")
  public edit native let district: TweakDBID;
}

public native class District_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func LocalizedName() -> String;

  public final native func EnumName() -> String;

  public final native func PreventionPreset() -> wref<DistrictPreventionData_Record>;

  public final native func PreventionPresetHandle() -> ref<DistrictPreventionData_Record>;

  public final native func ParentDistrict() -> wref<District_Record>;

  public final native func ParentDistrictHandle() -> ref<District_Record>;

  public final native func Gangs(out outList: array<wref<Affiliation_Record>>) -> Void;

  public final native func GetGangsCount() -> Int32;

  public final native func GetGangsItem(index: Int32) -> wref<Affiliation_Record>;

  public final native func GetGangsItemHandle(index: Int32) -> wref<Affiliation_Record>;

  public final native func GangsContains(item: wref<Affiliation_Record>) -> Bool;

  public final native func UiIcon() -> CName;

  public final native func UiState() -> CName;

  public final native func GunShotStimRange() -> Float;

  public final native func ExplosiveDeviceStimRangeMultiplier() -> Float;

  public final native func IsQuestDistrict() -> Bool;

  public final native func Type() -> gamedataDistrict;
}

public class PlayerEnteredNewDistrictEvent extends Event {

  public let gunshotRange: Float;

  public let explosionRange: Float;
}

public class RefreshDistrictRequest extends ScriptableSystemRequest {

  public let preventionPreset: wref<DistrictPreventionData_Record>;
}

public native class AttitudeSystem extends gameIAttitudeManager {

  public final native func GetAttitudeGroup(entityID: EntityID) -> CName;

  public final native func SetAttitudeGroupRelationPersistent(firstGroup: CName, secondGroup: CName, attitude: EAIAttitude) -> Void;

  public final native func SetAttitudeGroupRelationfromTweakPersistent(firstGroup: TweakDBID, secondGroup: TweakDBID, attitude: EAIAttitude) -> Void;

  public final native func SetAttitudeRelation(firstGroup: CName, secondGroup: CName, attitude: EAIAttitude) -> Void;

  public final native func SetAttitudeRelationFromTweak(firstGroup: TweakDBID, secondGroup: TweakDBID, attitude: EAIAttitude) -> Void;

  public final native func GetAttitudeRelation(firstGroup: CName, secondGroup: CName) -> EAIAttitude;

  public final native func GetAttitudeRelationFromTweak(firstGroup: TweakDBID, secondGroup: TweakDBID) -> EAIAttitude;
}

public class SPreventionAgentData extends IScriptable {

  public let ps: wref<PersistentState>;
}

public native class CompanionSystem extends ICompanionSystem {

  public final native func SpawnSubcharacter(recordID: TweakDBID, offset: Float, offsetDir: Vector3) -> Void;

  public final native func SpawnSubcharacterOnPosition(recordID: TweakDBID, pos: Vector3) -> Void;

  public final native func DespawnSubcharacter(recordID: TweakDBID) -> Void;

  public final native func DespawnAll() -> Void;

  public final native func GetSpawnedEntities(out entities: array<wref<Entity>>, opt recordID: TweakDBID) -> Void;
}

public native class FastTravelPoint_Record extends TweakDBRecord {

  public final native func Description() -> String;

  public final native func DisplayName() -> String;

  public final native func District() -> wref<District_Record>;

  public final native func DistrictHandle() -> ref<District_Record>;

  public final native func ShowOnWorldMap() -> Bool;

  public final native func ShowInWorld() -> Bool;
}

public struct FastTravelSystemLock {

  public persistent let lockReason: CName;

  public persistent let linkedStatusEffectID: TweakDBID;
}

public native struct MappinData extends IMappinData {

  public native let mappinType: TweakDBID;

  public native let variant: gamedataMappinVariant;

  public native let active: Bool;

  public native let debugCaption: String;

  public native let visibleThroughWalls: Bool;

  public native let scriptData: ref<MappinScriptData>;
}

public class FastTravelPointsUpdated extends Event {

  public let updateTrackingAlternative: Bool;
}

public class AutoSaveRequest extends ScriptableSystemRequest {
}

public final native class InventoryManager extends IInventoryManager {

  public final native func AddToSlot(slotIdx: Uint8, itemID: ItemID) -> Void;

  public final native func ClearSlot(slotIdx: Uint8) -> Void;

  public final native func AddEquipmentStateFlag(equipmentFlag: gameEEquipmentManagerState) -> Void;

  public final native func RemoveEquipmentStateFlag(equipmentFlag: gameEEquipmentManagerState) -> Void;

  public final native func HasEquipmentStateFlag(equipmentFlag: gameEEquipmentManagerState) -> Bool;

  public final native func CreateItemData(itemID: ItemID, owner: wref<GameObject>) -> ref<gameItemData>;
}

public class EquipmentSystemWeaponManipulationRequest extends PlayerScriptableSystemRequest {

  public let requestType: EquipmentManipulationAction;

  @default(EquipmentSystemWeaponManipulationRequest, gameEquipAnimationType.Default)
  public let equipAnimType: gameEquipAnimationType;

  @default(EquipmentSystemWeaponManipulationRequest, false)
  public let removeItemFromEquipSlot: Bool;
}

public native class inkMenuInstance_SpawnEvent extends Event {

  public final native func Init(eventName: CName, opt userData: ref<inkUserData>) -> Void;
}

public native class inkMenuInstance_SpawnAddressedEvent extends inkMenuInstance_SpawnEvent {

  public final native func Init(scenarioName: CName, eventName: CName, opt userData: ref<inkUserData>) -> Void;
}

public abstract native class PSMBaseEvent extends Event {

  public native let id: CName;
}

public abstract native class PSMPostponedParameterBase extends PSMBaseEvent {

  public native let aspect: gamestateMachineParameterAspect;
}

public native class PSMPostponedParameterBool extends PSMPostponedParameterBase {

  public native let value: Bool;
}

public abstract native class StatusEffectEvent extends Event {

  public native let staticData: ref<StatusEffect_Record>;

  public native let stackCount: Uint32;
}

public native class DPadUIData_Record extends TweakDBRecord {

  public final native func RestrictionTags() -> array<CName>;

  public final native func GetRestrictionTagsCount() -> Int32;

  public final native func GetRestrictionTagsItem(index: Int32) -> CName;

  public final native func RestrictionTagsContains(item: CName) -> Bool;
}

public final native class TeleportationFacility extends gameITeleportationFacility {

  public final native func Teleport(objectToTeleport: ref<GameObject>, position: Vector4, orientation: EulerAngles) -> Void;

  public final native func TeleportToNode(objectToTeleport: ref<GameObject>, nodeRef: NodeRef) -> Void;
}

public native class CameraComponent extends entCameraComponent {

  public native let fovOverrideWeight: Float;

  public native let fovOverrideValue: Float;

  public native let zoomOverrideWeight: Float;

  public native let zoomOverrideValue: Float;

  public native let zoomWeaponOverrideWeight: Float;

  public native let zoomWeaponOverrideValue: Float;

  public final native func Activate(opt blendTime: Float, opt shouldOverrideAudioListeners: Bool) -> Void;

  public final native func Deactivate(opt blendTime: Float, opt shouldOverrideAudioListeners: Bool) -> Void;

  public final native func SetZoom(zoom: Float) -> Void;

  public final native func SetFOV(fov: Float) -> Void;

  public final native func SetIsHighPriority(forced: Bool) -> Void;

  public final native func GetZoom() -> Float;

  public final native func GetFOV() -> Float;

  public final native func IsHighPriority() -> Bool;
}

public native class FPPCameraComponent extends CameraComponent {

  public final native func ResetPitch() -> Void;
}

public class RegisterFastTravelPointRequest extends ScriptableSystemRequest {

  public let pointData: ref<FastTravelPointData>;

  public let requesterID: EntityID;
}

public class UnregisterFastTravelPointRequest extends ScriptableSystemRequest {

  public let pointData: ref<FastTravelPointData>;

  public let requesterID: EntityID;
}

public class PerformFastTravelRequest extends ScriptableSystemRequest {

  public let pointData: ref<FastTravelPointData>;

  public let player: wref<GameObject>;
}

public class ToggleFastTravelAvailabilityOnMapRequest extends ScriptableSystemRequest {

  public let isEnabled: Bool;

  public let pointRecord: TweakDBID;
}

public native class gameAutoSaveSystem extends gameIAutoSaveSystem {

  public final native func RequestCheckpoint() -> Void;
}

public class RemoveAllFastTravelLocksRequest extends ScriptableSystemRequest {
}

public class FastTravelConsoleInstructionRequest extends ScriptableSystemRequest {

  public let instruction: EFastTravelSystemInstruction;

  public let magicFloat: Float;
}

public final native class SDOClickedRequest extends ScriptableSystemRequest {

  public native let fullPath: CName;

  public native let key: CName;
}

public class SecurityAreaResetRequest extends ScriptableSystemRequest {
}

public native class inkAnimProxy extends IScriptable {

  public final native func GetTime() -> Float;

  public final native func GetProgression() -> Float;

  public final native func IsValid() -> Bool;

  public final native func IsLoading() -> Bool;

  public final native func IsLoadingFailed() -> Bool;

  public final native func IsPlaying() -> Bool;

  public final native func IsPaused() -> Bool;

  public final native func IsFinished() -> Bool;

  public final native func Stop(opt silently: Bool) -> Void;

  public final native func GotoStartAndStop(opt silently: Bool) -> Void;

  public final native func GotoEndAndStop(opt silently: Bool) -> Void;

  public final native func Pause() -> Void;

  public final native func Resume() -> Void;

  public final native func Continue(playbackOptions: inkAnimOptions) -> Bool;

  public final native func GetTargets() -> array<wref<inkWidget>>;

  public final native func RegisterToCallback(eventType: inkanimEventType, object: ref<IScriptable>, functionName: CName) -> Void;

  public final native func UnregisterFromCallback(eventType: inkanimEventType, object: ref<IScriptable>, functionName: CName) -> Void;

  public final native func UnregisterFromAllCallbacks(eventType: inkanimEventType) -> Void;
}

public abstract native class inkAnimInterpolator extends IScriptable {

  public final native func GetMode() -> inkanimInterpolationMode;

  public final native func GetType() -> inkanimInterpolationType;

  public final native func GetDirection() -> inkanimInterpolationDirection;

  public final native func GetDuration() -> Float;

  public final native func GetStartDelay() -> Float;

  public final native func GetIsAdditive() -> Bool;

  public final native func SetMode(mode: inkanimInterpolationMode) -> Void;

  public final native func SetType(type: inkanimInterpolationType) -> Void;

  public final native func SetDirection(direction: inkanimInterpolationDirection) -> Void;

  public final native func SetDuration(duration: Float) -> Void;

  public final native func SetStartDelay(startDelay: Float) -> Void;

  public final native func SetIsAdditive(isAdditive: Bool) -> Void;

  public final native func GetUseRelativeDuration() -> Bool;

  public final native func SetUseRelativeDuration(useRelativeDuration: Bool) -> Void;
}

public native class inkAnimDef extends IScriptable {

  public final native func AddInterpolator(interpolator: ref<inkAnimInterpolator>) -> Void;

  public final native func AddEvent(evt: ref<inkAnimEvent>) -> Void;
}

public native class inkAnimTransparency extends inkAnimInterpolator {

  public final native func GetStartTransparency() -> Float;

  public final native func GetEndTransparency() -> Float;

  public final native func SetStartTransparency(startTransparency: Float) -> Void;

  public final native func SetEndTransparency(endTransparency: Float) -> Void;
}

public abstract native class inkLeafWidget extends inkWidget {
}

public native struct inkLeafRef extends inkWidgetRef {
}

public native class inkIconReference extends IScriptable {
}

public native class UIIconReference extends inkIconReference {

  public native let iconID: TweakDBID;
}

public native class inkImage extends inkLeafWidget {

  public final native func SetBrushTileType(tileType: inkBrushTileType) -> Void;

  public final native func SetBrushMirrorType(mirrorType: inkBrushMirrorType) -> Void;

  public final native func SetTexturePart(texturePart: CName) -> Bool;

  public final native func IsTexturePartExist(texturePart: CName) -> Bool;

  public final native func GetTexturePart() -> CName;

  public final native func SetAtlasResource(atlasResourcePath: ResRef) -> Void;

  public final native func SetActiveTextureType(activeTextureType: inkTextureType) -> Void;

  public final native func GetActiveTextureType() -> inkTextureType;

  public final native func GetContentHAlign() -> inkEHorizontalAlign;

  public final native func SetContentHAlign(contentHAlign: inkEHorizontalAlign) -> Void;

  public final native func GetContentVAlign() -> inkEVerticalAlign;

  public final native func SetContentVAlign(contentVAlign: inkEVerticalAlign) -> Void;

  public final native func RequestSetImage(iconRefernce: ref<inkIconReference>, opt callbackTarget: wref<IScriptable>, opt callbackName: CName) -> Void;
}

public native struct inkImageRef extends inkLeafRef {

  public final static native func SetBrushTileType(self: inkImageRef, tileType: inkBrushTileType) -> Void;

  public final static native func SetBrushMirrorType(self: inkImageRef, mirrorType: inkBrushMirrorType) -> Void;

  public final static native func SetTexturePart(self: inkImageRef, texturePart: CName) -> Bool;

  public final static native func IsTexturePartExist(self: inkImageRef, texturePart: CName) -> Bool;

  public final static native func GetTexturePart(self: inkImageRef) -> CName;

  public final static native func SetAtlasResource(self: inkImageRef, atlasResourcePath: ResRef) -> Void;

  public final static native func SetActiveTextureType(self: inkImageRef, activeTextureType: inkTextureType) -> Void;

  public final static native func GetActiveTextureType(self: inkImageRef) -> inkTextureType;

  public final static native func RequestSetImage(self: inkImageRef, iconRefernce: ref<inkIconReference>, opt callbackTarget: wref<IScriptable>, opt callbackName: CName) -> Void;
}

public native struct inkAnimOptions {

  public edit native let playReversed: Bool;

  public edit native let executionDelay: Float;

  public edit native let loopType: inkanimLoopType;

  public edit native let loopCounter: Uint32;

  public edit native let loopInfinite: Bool;

  public edit native let fromMarker: CName;

  public edit native let toMarker: CName;

  public edit native let oneSegment: Bool;

  public edit native let dependsOnTimeDilation: Bool;
}

public class WantedBarStartFlashEvent extends Event {
}

public class WantedBarEndFlashEvent extends Event {
}

public class WantedBarFlashAndHideEvent extends Event {
}

public class WantedBarFlashAndShowEvent extends Event {
}

public native class Vehicle_Record extends SpawnableObject_Record {

  public final native func Traffic_audio_resource() -> String;

  public final native func Player_audio_resource() -> String;

  public final native func VehPassL_ProceduralFPPCameraParams() -> wref<VehicleProceduralFPPCameraParams_Record>;

  public final native func VehPassL_ProceduralFPPCameraParamsHandle() -> ref<VehicleProceduralFPPCameraParams_Record>;

  public final native func Driving() -> wref<BaseDrivingParameters_Record>;

  public final native func DrivingHandle() -> ref<BaseDrivingParameters_Record>;

  public final native func Type() -> wref<VehicleType_Record>;

  public final native func TypeHandle() -> ref<VehicleType_Record>;

  public final native func TppCameraParams() -> wref<VehicleTPPCameraParams_Record>;

  public final native func TppCameraParamsHandle() -> ref<VehicleTPPCameraParams_Record>;

  public final native func VehDriver_ProceduralFPPCameraParams() -> wref<VehicleProceduralFPPCameraParams_Record>;

  public final native func VehDriver_ProceduralFPPCameraParamsHandle() -> ref<VehicleProceduralFPPCameraParams_Record>;

  public final native func FxCollision() -> wref<VehicleFxCollision_Record>;

  public final native func FxCollisionHandle() -> ref<VehicleFxCollision_Record>;

  public final native func VehDriveModelDataAI() -> wref<VehicleDriveModelData_Record>;

  public final native func VehDriveModelDataAIHandle() -> ref<VehicleDriveModelData_Record>;

  public final native func VehAirControlAI() -> wref<VehicleAirControl_Record>;

  public final native func VehAirControlAIHandle() -> ref<VehicleAirControl_Record>;

  public final native func VehPassR_ProceduralFPPCameraParams() -> wref<VehicleProceduralFPPCameraParams_Record>;

  public final native func VehPassR_ProceduralFPPCameraParamsHandle() -> ref<VehicleProceduralFPPCameraParams_Record>;

  public final native func VehPassCombatR_FPPCameraParams() -> wref<VehicleFPPCameraParams_Record>;

  public final native func VehPassCombatR_FPPCameraParamsHandle() -> ref<VehicleFPPCameraParams_Record>;

  public final native func VehDriver_FPPCameraParams() -> wref<VehicleFPPCameraParams_Record>;

  public final native func VehDriver_FPPCameraParamsHandle() -> ref<VehicleFPPCameraParams_Record>;

  public final native func VehPassCombatL_FPPCameraParams() -> wref<VehicleFPPCameraParams_Record>;

  public final native func VehPassCombatL_FPPCameraParamsHandle() -> ref<VehicleFPPCameraParams_Record>;

  public final native func Manufacturer() -> wref<VehicleManufacturer_Record>;

  public final native func ManufacturerHandle() -> ref<VehicleManufacturer_Record>;

  public final native func Destruction() -> wref<VehicleDestruction_Record>;

  public final native func DestructionHandle() -> ref<VehicleDestruction_Record>;

  public final native func VehEngineData() -> wref<VehicleEngineData_Record>;

  public final native func VehEngineDataHandle() -> ref<VehicleEngineData_Record>;

  public final native func VehDataPackage() -> wref<VehicleDataPackage_Record>;

  public final native func VehDataPackageHandle() -> ref<VehicleDataPackage_Record>;

  public final native func VehDriverCombat_ProceduralFPPCameraParams() -> wref<VehicleProceduralFPPCameraParams_Record>;

  public final native func VehDriverCombat_ProceduralFPPCameraParamsHandle() -> ref<VehicleProceduralFPPCameraParams_Record>;

  public final native func VehDefaultState() -> wref<VehicleDefaultState_Record>;

  public final native func VehDefaultStateHandle() -> ref<VehicleDefaultState_Record>;

  public final native func FxWheelsParticles() -> wref<VehicleFxWheelsParticles_Record>;

  public final native func FxWheelsParticlesHandle() -> ref<VehicleFxWheelsParticles_Record>;

  public final native func VehPassR_FPPCameraParams() -> wref<VehicleFPPCameraParams_Record>;

  public final native func VehPassR_FPPCameraParamsHandle() -> ref<VehicleFPPCameraParams_Record>;

  public final native func VehAirControl() -> wref<VehicleAirControl_Record>;

  public final native func VehAirControlHandle() -> ref<VehicleAirControl_Record>;

  public final native func CrowdMemberSettings() -> wref<CrowdSettingsPackageBase_Record>;

  public final native func CrowdMemberSettingsHandle() -> ref<CrowdSettingsPackageBase_Record>;

  public final native func VehDriverCombat_FPPCameraParams() -> wref<VehicleFPPCameraParams_Record>;

  public final native func VehDriverCombat_FPPCameraParamsHandle() -> ref<VehicleFPPCameraParams_Record>;

  public final native func VehPassCombatL_ProceduralFPPCameraParams() -> wref<VehicleProceduralFPPCameraParams_Record>;

  public final native func VehPassCombatL_ProceduralFPPCameraParamsHandle() -> ref<VehicleProceduralFPPCameraParams_Record>;

  public final native func VehBehaviorData() -> wref<VehicleBehaviorData_Record>;

  public final native func VehBehaviorDataHandle() -> ref<VehicleBehaviorData_Record>;

  public final native func VehWheelDimensionsSetup() -> wref<VehicleWheelDimensionsSetup_Record>;

  public final native func VehWheelDimensionsSetupHandle() -> ref<VehicleWheelDimensionsSetup_Record>;

  public final native func FxWheelsDecals() -> wref<VehicleFxWheelsDecals_Record>;

  public final native func FxWheelsDecalsHandle() -> ref<VehicleFxWheelsDecals_Record>;

  public final native func Affiliation() -> wref<Affiliation_Record>;

  public final native func AffiliationHandle() -> ref<Affiliation_Record>;

  public final native func VehDriveModelData() -> wref<VehicleDriveModelData_Record>;

  public final native func VehDriveModelDataHandle() -> ref<VehicleDriveModelData_Record>;

  public final native func CameraManagerParams() -> wref<VehicleCameraManager_Record>;

  public final native func CameraManagerParamsHandle() -> ref<VehicleCameraManager_Record>;

  public final native func Icon() -> wref<UIIcon_Record>;

  public final native func IconHandle() -> ref<UIIcon_Record>;

  public final native func VehPassL_FPPCameraParams() -> wref<VehicleFPPCameraParams_Record>;

  public final native func VehPassL_FPPCameraParamsHandle() -> ref<VehicleFPPCameraParams_Record>;

  public final native func VehPassCombatR_ProceduralFPPCameraParams() -> wref<VehicleProceduralFPPCameraParams_Record>;

  public final native func VehPassCombatR_ProceduralFPPCameraParamsHandle() -> ref<VehicleProceduralFPPCameraParams_Record>;

  public final native func Model() -> wref<VehicleModel_Record>;

  public final native func ModelHandle() -> ref<VehicleModel_Record>;

  public final native func VisualDestruction() -> wref<VehicleVisualDestruction_Record>;

  public final native func VisualDestructionHandle() -> ref<VehicleVisualDestruction_Record>;

  public final native func VehicleUIData() -> wref<VehicleUIData_Record>;

  public final native func VehicleUIDataHandle() -> ref<VehicleUIData_Record>;

  public final native func VehImpactTraffic() -> wref<VehicleImpactTraffic_Record>;

  public final native func VehImpactTrafficHandle() -> ref<VehicleImpactTraffic_Record>;

  public final native func InteriorDamageColor() -> array<Int32>;

  public final native func GetInteriorDamageColorCount() -> Int32;

  public final native func GetInteriorDamageColorItem(index: Int32) -> Int32;

  public final native func InteriorDamageColorContains(item: Int32) -> Bool;

  public final native func LeftBlinkerlightColor() -> array<Int32>;

  public final native func GetLeftBlinkerlightColorCount() -> Int32;

  public final native func GetLeftBlinkerlightColorItem(index: Int32) -> Int32;

  public final native func LeftBlinkerlightColorContains(item: Int32) -> Bool;

  public final native func HeadlightColor() -> array<Int32>;

  public final native func GetHeadlightColorCount() -> Int32;

  public final native func GetHeadlightColorItem(index: Int32) -> Int32;

  public final native func HeadlightColorContains(item: Int32) -> Bool;

  public final native func ReverselightColor() -> array<Int32>;

  public final native func GetReverselightColorCount() -> Int32;

  public final native func GetReverselightColorItem(index: Int32) -> Int32;

  public final native func ReverselightColorContains(item: Int32) -> Bool;

  public final native func RightBLinkerlightColor() -> array<Int32>;

  public final native func GetRightBLinkerlightColorCount() -> Int32;

  public final native func GetRightBLinkerlightColorItem(index: Int32) -> Int32;

  public final native func RightBLinkerlightColorContains(item: Int32) -> Bool;

  public final native func InteriorColor() -> array<Int32>;

  public final native func GetInteriorColorCount() -> Int32;

  public final native func GetInteriorColorItem(index: Int32) -> Int32;

  public final native func InteriorColorContains(item: Int32) -> Bool;

  public final native func AttachmentSlots(out outList: array<wref<AttachmentSlot_Record>>) -> Void;

  public final native func GetAttachmentSlotsCount() -> Int32;

  public final native func GetAttachmentSlotsItem(index: Int32) -> wref<AttachmentSlot_Record>;

  public final native func GetAttachmentSlotsItemHandle(index: Int32) -> wref<AttachmentSlot_Record>;

  public final native func AttachmentSlotsContains(item: wref<AttachmentSlot_Record>) -> Bool;

  public final native func BrakelightColor() -> array<Int32>;

  public final native func GetBrakelightColorCount() -> Int32;

  public final native func GetBrakelightColorItem(index: Int32) -> Int32;

  public final native func BrakelightColorContains(item: Int32) -> Bool;

  public final native func TppCameraPresets(out outList: array<wref<VehicleTPPCameraPresetParams_Record>>) -> Void;

  public final native func GetTppCameraPresetsCount() -> Int32;

  public final native func GetTppCameraPresetsItem(index: Int32) -> wref<VehicleTPPCameraPresetParams_Record>;

  public final native func GetTppCameraPresetsItemHandle(index: Int32) -> wref<VehicleTPPCameraPresetParams_Record>;

  public final native func TppCameraPresetsContains(item: wref<VehicleTPPCameraPresetParams_Record>) -> Bool;

  public final native func Weapons(out outList: array<wref<VehicleWeapon_Record>>) -> Void;

  public final native func GetWeaponsCount() -> Int32;

  public final native func GetWeaponsItem(index: Int32) -> wref<VehicleWeapon_Record>;

  public final native func GetWeaponsItemHandle(index: Int32) -> wref<VehicleWeapon_Record>;

  public final native func WeaponsContains(item: wref<VehicleWeapon_Record>) -> Bool;

  public final native func RandomPassengers(out outList: array<wref<RandomPassengerEntry_Record>>) -> Void;

  public final native func GetRandomPassengersCount() -> Int32;

  public final native func GetRandomPassengersItem(index: Int32) -> wref<RandomPassengerEntry_Record>;

  public final native func GetRandomPassengersItemHandle(index: Int32) -> wref<RandomPassengerEntry_Record>;

  public final native func RandomPassengersContains(item: wref<RandomPassengerEntry_Record>) -> Bool;

  public final native func QueryOnlyExceptions() -> array<CName>;

  public final native func GetQueryOnlyExceptionsCount() -> Int32;

  public final native func GetQueryOnlyExceptionsItem(index: Int32) -> CName;

  public final native func QueryOnlyExceptionsContains(item: CName) -> Bool;

  public final native func DisplayName() -> CName;

  public final native func WidgetStyleSheetPath() -> ResRef;

  public final native func ArchetypeName() -> CName;

  public final native func AudioResourceName() -> CName;

  public final native func DestroyedAppearance() -> CName;

  public final native func CurvesPath() -> ResRef;

  public final native func RightFrontCamberOffset() -> Vector3;

  public final native func UnmountOffsetPosition() -> Vector3;

  public final native func LeftFrontCamberOffset() -> Vector3;

  public final native func RightBackCamberOffset() -> Vector3;

  public final native func LeftBackCamberOffset() -> Vector3;

  public final native func RightBackCamber() -> Float;

  public final native func LeftBackCamber() -> Float;

  public final native func LeftFrontCamber() -> Float;

  public final native func RightFrontCamber() -> Float;

  public final native func EnableDestruction() -> Bool;
}

public native class VehicleDataPackage_Record extends TweakDBRecord {

  public final native func VehSeatSet() -> wref<VehicleSeatSet_Record>;

  public final native func VehSeatSetHandle() -> ref<VehicleSeatSet_Record>;

  public final native func AnimVars() -> array<CName>;

  public final native func GetAnimVarsCount() -> Int32;

  public final native func GetAnimVarsItem(index: Int32) -> CName;

  public final native func AnimVarsContains(item: CName) -> Bool;

  public final native func AdditionalAnimFeatures() -> array<CName>;

  public final native func GetAdditionalAnimFeaturesCount() -> Int32;

  public final native func GetAdditionalAnimFeaturesItem(index: Int32) -> CName;

  public final native func AdditionalAnimFeaturesContains(item: CName) -> Bool;

  public final native func BoneNames() -> array<CName>;

  public final native func GetBoneNamesCount() -> Int32;

  public final native func GetBoneNamesItem(index: Int32) -> CName;

  public final native func BoneNamesContains(item: CName) -> Bool;

  public final native func FppCameraOverride() -> CName;

  public final native func SeatingTemplateOverride() -> CName;

  public final native func FromCombat() -> Float;

  public final native func ParkingAngle() -> Float;

  public final native func SwitchSeats() -> Float;

  public final native func SpoilerSpeedToDeploy() -> Float;

  public final native func Stealing() -> Float;

  public final native func KnockOffForce() -> Float;

  public final native func ToCombat() -> Float;

  public final native func ExitDelay() -> Float;

  public final native func Normal_open() -> Float;

  public final native func SlideDuration() -> Float;

  public final native func SpeedToClose() -> Float;

  public final native func Entering() -> Float;

  public final native func SpoilerSpeedToRetract() -> Float;

  public final native func Stealing_open() -> Float;

  public final native func Open_close_duration() -> Float;

  public final native func Body_dump_close_trunk_delay() -> Float;

  public final native func HasSiren() -> Bool;

  public final native func CanStoreBody() -> Bool;

  public final native func BarnDoorsTailgate() -> Bool;

  public final native func HasTurboCharger() -> Bool;

  public final native func HasSpoiler() -> Bool;

  public final native func InteractiveTrunk() -> Bool;

  public final native func SlidingRearDoors() -> Bool;

  public final native func SupportsCombat() -> Bool;

  public final native func InteractiveHood() -> Bool;

  public final native func DisableSwitchSeats() -> Bool;
}

public native class VehicleSeatSet_Record extends TweakDBRecord {

  public final native func VehSeats(out outList: array<wref<VehicleSeat_Record>>) -> Void;

  public final native func GetVehSeatsCount() -> Int32;

  public final native func GetVehSeatsItem(index: Int32) -> wref<VehicleSeat_Record>;

  public final native func GetVehSeatsItemHandle(index: Int32) -> wref<VehicleSeat_Record>;

  public final native func VehSeatsContains(item: wref<VehicleSeat_Record>) -> Bool;
}

public native class VehicleSeat_Record extends TweakDBRecord {

  public final native func SeatName() -> CName;
}

public native struct MountingSlotId {

  public native let id: CName;
}

public class PreventionDelayedSpawnRequest extends ScriptableSystemRequest {

  public let heatStage: EPreventionHeatStage;
}

public static native func IsEntityInInteriorArea(entity: wref<Entity>) -> Bool;

public native class NavigationPath extends IScriptable {

  public native let path: array<Vector4>;

  public final native func CalculateLength() -> Float;
}

public static native func OperatorNeg(b: Vector4) -> Vector4;

public native class AICommand extends IScriptable {

  public native const let id: Uint32;

  public native const let state: AICommandState;

  public final native func Copy() -> ref<AICommand>;

  public final native func GetCategory() -> CName;

  public final native func SetCategory(value: CName) -> Void;
}

public native class AICombatRelatedCommand extends AICommand {

  public inline edit native let immediately: Bool;
}

public class AIInjectCombatThreatCommand extends AICombatRelatedCommand {

  public inline edit let targetNodeRef: NodeRef;

  public inline edit let targetPuppetRef: EntityReference;

  public inline edit let dontForceHostileAttitude: Bool;

  public inline edit let duration: Float;

  public inline edit let isPersistent: Bool;
}

public static native func CreateEntityReference(const nodeRefString: script_ref<String>, communityEntryNames: array<CName>) -> EntityReference;

public class RegisterUnitRequest extends ScriptableSystemRequest {

  public let unit: wref<ScriptedPuppet>;
}

public class RegisterVehicleRequest extends ScriptableSystemRequest {

  public let vehicle: wref<VehicleObject>;
}

public struct SHitNPC {

  public let entityID: EntityID;

  public let calls: Int32;
}

public final native class CommunitySystem extends ICommunitySystem {

  public final native func EnableDynamicCrowdNullArea(areaLocalBBox: Box, areaLocalToWorld: WorldTransform, savable: Bool, duration: Float) -> Uint64;

  public final native func DisableCrowdNullArea(areaId: Uint64) -> Void;
}

public class PreventionTickRequest extends ScriptableSystemRequest {
}

public class RequestWidgetUpdateEvent extends Event {

  public let requester: PersistentID;

  public let screenDefinition: ScreenDefinitionPackage;
}

public class RequestDeviceWidgetsUpdateEvent extends RequestWidgetUpdateEvent {

  public let requesters: array<PersistentID>;
}

public class HighlightConnectionsRequest extends ScriptableSystemRequest {

  public let shouldHighlight: Bool;

  public let isTriggeredByMasterDevice: Bool;

  public let highlightTargets: array<NodeRef>;

  public let requestingDevice: EntityID;
}

public class HighlightConnectionComponentEvent extends Event {

  public let IsHighlightON: Bool;
}

public static native func Cast(a: GlobalNodeID) -> EntityID;

public native struct GlobalNodeID {

  public final static native func IsDefined(id: GlobalNodeID) -> Bool;

  public final static native func GetRoot() -> GlobalNodeID;
}

public class NotifyHighlightedDevice extends Event {

  public let IsDeviceHighlighted: Bool;

  public let IsNotifiedByMasterDevice: Bool;
}

public native class SetAsQuestImportantEvent extends Event {

  public final native func GetFriendlyDescription() -> String;

  public final native func IsImportant() -> Bool;

  public final native func SetImportant(important: Bool) -> Void;

  public final native func PropagateToSlaves() -> Bool;
}

public class PerformedAction extends Event {

  public let m_action: ref<DeviceAction>;
}

public class ForwardAction extends Event {

  public let requester: PersistentID;

  public let actionToForward: ref<ScriptableDeviceAction>;
}

public struct SActionTypeForward {

  @default(SActionTypeForward, true)
  public let qHack: Bool;

  public let techie: Bool;

  public let master: Bool;
}

public struct ActionsSequence {

  public let sequenceInitiator: EntityID;

  public let maxActionsInSequence: Int32;

  public let actionsTriggeredCount: Int32;

  public let delayIDs: array<DelayID>;
}

public class SequencerLock extends Event {

  public let shouldLock: Bool;
}

public class SequenceCallback extends Event {

  public let persistentID: PersistentID;

  public let className: CName;

  public let actionToForward: ref<ScriptableDeviceAction>;
}

public class SetGameplayObjectiveStateRequest extends ScriptableSystemRequest {

  public let objectiveData: ref<GemplayObjectiveData>;

  public let objectiveState: gameJournalEntryState;
}

public class RegisterGameplayObjectiveRequest extends ScriptableSystemRequest {

  public let objectiveData: ref<GemplayObjectiveData>;
}

public native class MovingPlatform extends IPlacedComponent {

  public final native func Pause() -> Float;

  public final native func Unpause(time: Float) -> gamePlatformMovementState;
}

public native class OffMeshConnectionComponent extends IComponent {

  public final native func EnableForPlayer() -> Void;

  public final native func DisableForPlayer() -> Void;

  public final native func EnableOffMeshConnection() -> Void;

  public final native func DisableOffMeshConnection() -> Void;
}

public struct ScreenDefinitionPackage {

  public let screenDefinition: ref<DeviceUIDefinition_Record>;

  public let style: ref<WidgetStyle_Record>;
}

public struct SUIScreenDefinition {

  @attrib(customEditor, "TweakDBGroupInheritance;DeviceUIDefinition")
  public let screenDefinition: TweakDBID;

  @attrib(customEditor, "TweakDBGroupInheritance;WidgetStyle")
  public let style: TweakDBID;
}

public struct LiftSetup {

  @default(LiftSetup, 0)
  public persistent let m_startingFloorTerminal: Int32;

  @default(LiftSetup, 2.5f)
  public let m_liftSpeed: Float;

  @default(LiftSetup, 1.f)
  public edit let m_liftStartingDelay: Float;

  @default(LiftSetup, 4.f)
  public let m_liftTravelTimeOverride: Float;

  @default(LiftSetup, false)
  public let m_isLiftTravelTimeOverride: Bool;

  @default(LiftSetup, 2.f)
  public let m_emptyLiftSpeedMultiplier: Float;

  @default(LiftSetup, -1)
  public persistent let m_radioStationNumer: Int32;

  public let m_speakerDestroyedQuestFact: CName;

  public let m_speakerDestroyedVFX: CName;

  public let m_authorizationTextOverride: String;
}

public class RefreshFloorDataEvent extends Event {

  public let passToEntity: Bool;
}

public struct RadioStationsMap {

  @attrib(customEditor, "AudioEvent")
  public let soundEvent: CName;

  public let channelName: String;

  public let stationID: ERadioStationList;
}

public class ResolveActionData extends IScriptable {

  public let m_password: String;
}

public struct TerminalSetup {

  @attrib(rangeMax, "9")
  @attrib(rangeMin, "1")
  @default(TerminalSetup, 1)
  public let m_minClearance: Int32;

  @attrib(rangeMax, "10")
  @attrib(rangeMin, "5")
  @default(TerminalSetup, 10)
  public let m_maxClearance: Int32;

  @attrib(tooltip, "If on then ignores that slave device is secured and allows player to access other devices")
  @default(TerminalSetup, false)
  public persistent let m_ignoreSlaveAuthorizationModule: Bool;

  @default(TerminalSetup, true)
  public let m_shouldForceVirtualSystem: Bool;
}

public struct DeviceCounter {

  public let devices: array<ref<DeviceComponentPS>>;

  public let systemType: EVirtualSystem;
}

public class WidgetCustomData extends IScriptable {
}

public struct SDeviceWidgetPackage extends SWidgetPackage {

  public let deviceStatus: String;

  public let deviceState: EDeviceStatus;

  public let actionWidgets: array<SActionWidgetPackage>;
}

public class TerminalSystemCustomData extends WidgetCustomData {

  public let connectedDevices: Int32;
}

public struct SThumbnailWidgetPackage extends SWidgetPackage {

  public let thumbnailAction: ref<ThumbnailUI>;

  public let deviceStatus: String;
}

public class SecuritySystemUIPS extends SurveillanceSystemUIPS {
}

public struct DoorSetup {

  @default(DoorSetup, EDoorType.INTERACTIVE)
  public persistent let m_doorType: EDoorType;

  public persistent let m_doorTypeSideOne: EDoorType;

  @default(DoorSetup, EDoorType.NONE)
  public persistent let m_doorTypeSideTwo: EDoorType;

  public let m_skillCheckSide: EDoorSkillcheckSide;

  public let m_authorizationSide: EDoorSkillcheckSide;

  public let m_doorTriggerSide: EDoorTriggerSide;

  public edit persistent let m_isShutter: Bool;

  public persistent let m_initialDoorState: EDoorStatus;

  @attrib(unsavable, "true")
  public persistent let m_canPlayerToggleLockState: Bool;

  @attrib(unsavable, "true")
  public edit persistent let m_canPlayerToggleSealState: Bool;

  @default(DoorSetup, true)
  public persistent let m_automaticallyClosesItself: Bool;

  @default(DoorSetup, 1.0f)
  public let m_openingSpeed: Float;

  @default(DoorSetup, 1.0f)
  public let m_doorOpeningTime: Float;

  @default(DoorSetup, 5.0f)
  public let m_doorOpeningStimRange: Float;

  @attrib(category, "Payment")
  public persistent let m_canPayToUnlock: Bool;

  @attrib(category, "Payment")
  @attrib(customEditor, "TweakDBGroupInheritance;ActionPayment")
  public persistent let m_paymentRecordID: TweakDBID;

  @attrib(category, "Quest")
  public let m_exposeQuickHacksIfNotConnectedToAP: Bool;
}

public class LiftFloorSyncDataEvent extends Event {

  public let isHidden: Bool;

  public let isInactive: Bool;
}

public native class ActionRestrictionGroup_Record extends TweakDBRecord {

  public final native func InactiveReason() -> String;

  public final native func AllowedActionNames() -> array<String>;

  public final native func GetAllowedActionNamesCount() -> Int32;

  public final native func GetAllowedActionNamesItem(index: Int32) -> String;

  public final native func AllowedActionNamesContains(item: String) -> Bool;

  public final native func DisallowedActionNames() -> array<String>;

  public final native func GetDisallowedActionNamesCount() -> Int32;

  public final native func GetDisallowedActionNamesItem(index: Int32) -> String;

  public final native func DisallowedActionNamesContains(item: String) -> Bool;
}

public native class ItemCost_Record extends ObjectActionCost_Record {

  public final native func Item() -> wref<Item_Record>;

  public final native func ItemHandle() -> ref<Item_Record>;
}

public class ResolveSkillchecksEvent extends Event {
}

public struct SecuritySystemClearanceEntry {

  public persistent let user: EntityID;

  public persistent let level: ESecurityAccessLevel;
}

public class AddUserEvent extends Event {

  public let userEntry: SecuritySystemClearanceEntry;
}

public struct DoorPersistentData {

  public let m_doorType: EDoorType;

  public let m_canPlayerToggleLockState: Bool;

  public let m_canPlayerToggleSealState: Bool;

  public let m_initialStatus: EDoorStatus;

  public let m_keycardName: TweakDBID;

  public let m_passcode: CName;
}

public class TerminalSetState extends Event {

  public let state: gameinteractionsReactionState;
}

public class LiftDepartedEvent extends Event {

  public let floor: String;
}

public class RefreshFloorAuthorizationDataEvent extends Event {

  public let passToEntity: Bool;
}

public class LiftSetMovementStateEvent extends Event {

  public let movementState: gamePlatformMovementState;
}

public class SetIsPlayerInsideLiftEvent extends Event {

  public let value: Bool;
}

public final native class AnimFastForwardEvent extends Event {
}

public native class ArrivedAt extends Event {

  public native let destinationName: CName;

  public native let data: Int32;
}

public native class TeleportTo extends Event {

  public native let destinationNode: NodeRef;

  public native let rootEntityPosition: Vector4;
}

public class ElevatorDeviceBlackboardDef extends DeviceBaseBlackboardDef {

  public let CurrentFloor: BlackboardID_String;

  public let isPlayerScanned: BlackboardID_Bool;

  public let isPaused: BlackboardID_Bool;
}

public class LiftMovementLoadEvent extends Event {
}

public class DelayedUpdateDeviceStateEvent extends Event {
}

public class EvaluateGameplayRoleEvent extends Event {

  public let force: Bool;
}

public native class PSDeviceChangedEvent extends Event {

  public native let persistentID: PersistentID;

  public native let className: CName;
}

public native class AnimFeatureMarkUnstable extends AnimFeature {
}

public class AnimFeature_SimpleDevice extends AnimFeatureMarkUnstable {

  public edit let isOpen: Bool;

  public edit let isOpenLeft: Bool;

  public edit let isOpenRight: Bool;
}

public abstract native class IMovingPlatformMovement extends IScriptable {

  public final native func SetInitData(type: gameMovingPlatformMovementInitializationType, value: Float, startNode: NodeRef, endNode: NodeRef) -> Void;
}

public abstract native class IMovingPlatformMovementPointToPoint extends IMovingPlatformMovement {
}

public native class MoveTo extends Event {

  public native let movement: ref<IMovingPlatformMovement>;

  public native let destinationName: CName;

  public native let data: Int32;
}

public native class MovingPlatformMovementDynamic extends IMovingPlatformMovementPointToPoint {

  public native let curveName: CName;
}

public class LiftStartDelayEvent extends Event {

  public let targetFloor: Int32;
}

public class AdHocAnimationEvent extends Event {

  public let animationIndex: Int32;

  public let useBothHands: Bool;

  public let unequipWeapon: Bool;
}

public class LiftArrivedEvent extends Event {

  public let floor: String;
}

public class ScanPlayerDelayEvent extends Event {
}

public native struct EntityGameInterface {

  public final static native func Destroy(self: EntityGameInterface) -> Void;

  public final static native func IsValid(self: EntityGameInterface) -> Bool;

  public final static native func IsStatic(self: EntityGameInterface) -> Bool;

  public final static native func GetEntity(self: EntityGameInterface) -> ref<Entity>;

  public final static native func UnbindTransform(self: EntityGameInterface) -> Void;

  public final static native func BindToComponent(self: EntityGameInterface, target: EntityGameInterface, componentName: CName, opt slotName: CName, opt keepWorldTransform: Bool) -> Void;

  public final static native func ToggleSelectionEffect(self: EntityGameInterface, enable: Bool) -> Void;
}

public class RefreshPlayerAuthorizationEvent extends Event {
}

public class SecuritySystemSupport extends Event {

  public let supportGranted: Bool;
}

public class RemoveFromBlacklistEvent extends Event {

  public let entityIDToRemove: EntityID;
}

public static native func LerpF(alpha: Float, a: Float, b: Float, opt clamp: Bool) -> Float;

public struct SpawnOriginData {

  public let position: Vector4;

  public let direction: Vector4;

  public let playerPosition: Vector4;
}

public static native func OperatorMultiply(a: Float, b: Vector4) -> Vector4;

public class PointData extends IScriptable {

  public let position: Vector4;

  public let direction: Vector4;
}

public final native struct HandleWithValue {

  public native let value: Float;

  public native let handle: ref<IScriptable>;
}

public static native func SortHandleWithValueArray(arr: script_ref<array<HandleWithValue>>) -> Void;

public class PreventionDelayedSpawnUnitRequest extends ScriptableSystemRequest {

  public let recordID: TweakDBID;

  public let preventionLevel: Uint32;

  public let spawnTransform: WorldTransform;
}

public static native func OperatorAssignMultiply(out a: Vector4, b: Float) -> Vector4;

public static native func OperatorAssignDivide(out a: Float, b: Float) -> Float;

public native class NPCType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataNPCType;
}

public final native class MountAIEvent extends AIEvent {

  public native let data: ref<MountEventData>;
}

public class PreventionVisibilityRequest extends ScriptableSystemRequest {

  public let requester: wref<GameObject>;

  public let seePlayer: Bool;
}

public class PreventionVehicleStolenRequest extends ScriptableSystemRequest {

  public let requesterPosition: Vector4;

  public let vehicleAffiliation: gamedataAffiliation;
}

public class PreventionCombatStartedRequest extends ScriptableSystemRequest {

  public let requesterPosition: Vector4;

  public let requester: wref<GameObject>;
}

public class PreventionCrimeWitnessRequest extends ScriptableSystemRequest {

  public let criminalPosition: Vector4;
}

public class PreventionRegisterRequest extends ScriptableSystemRequest {

  public let requester: ref<PersistentState>;

  public let attitudeGroup: CName;

  public let register: Bool;
}

public class PreventionSecurityAreaRequest extends ScriptableSystemRequest {

  public let playerIsIn: Bool;

  public let areaID: PersistentID;
}

public class PreventionPoliceSecuritySystemRequest extends ScriptableSystemRequest {

  public let securitySystemID: PersistentID;
}

public native struct InteractionAttemptedChoice {

  public native let visualizerType: EVisualizerType;

  public native let choice: InteractionChoice;

  public native let choiceIdx: Int32;

  public native let isSuccess: Bool;
}

public class TogglePreventionSystem extends ScriptableSystemRequest {

  public edit let sourceName: CName;

  public edit let isActive: Bool;
}

public native class Affiliation_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func AnimWrappers() -> array<CName>;

  public final native func GetAnimWrappersCount() -> Int32;

  public final native func GetAnimWrappersItem(index: Int32) -> CName;

  public final native func AnimWrappersContains(item: CName) -> Bool;

  public final native func LocalizedName() -> CName;

  public final native func EnumName() -> CName;

  public final native func IconPath() -> CName;

  public final native func Type() -> gamedataAffiliation;
}

public class BountyResetRequest extends ScriptableSystemRequest {
}

public class PreventionConsoleInstructionRequest extends ScriptableSystemRequest {

  public let instruction: EPreventionSystemInstruction;
}

public native class TargetTrackerComponent extends GameComponent {

  public final native func RegisterListener(et: ref<Entity>, listener: ref<AIScriptsTargetTrackingListener>) -> Void;

  public final native func GetThreats(onlyVisible: Bool) -> array<TrackedLocation>;

  public final native func GetHostileThreats(onlyVisible: Bool) -> array<TrackedLocation>;

  public final native func GetTopHostileThreat(onlyVisible: Bool, out threat: TrackedLocation) -> Bool;

  public final native func ThreatFromEntity(et: ref<Entity>, out threat: TrackedLocation) -> Bool;

  public final native func HasHostileThreat(onlyVisible: Bool) -> Bool;

  public final native func AddThreat(et: ref<Entity>, isHostile: Bool, pos: Vector4, accuracy: Float, cooldown: Float, isPersistent: Bool) -> Uint32;

  public final native func AddThreatOnPosition(pos: Vector4, timeToLive: Float) -> Uint32;

  public final native func SetThreatPersistence(et: ref<Entity>, isPersistent: Bool, src: Uint32) -> Void;

  public final native func GetThreatPersistence(et: ref<Entity>) -> AIThreatPersistenceStatus;

  public final native func SetCurrentThreatsPersistence(isPersistent: Bool, src: Uint32) -> Void;

  public final native func SetThreatBaseMul(et: ref<Entity>, threatValue: Float) -> Void;

  public final native func ClearThreats() -> Void;

  public final native func SetThreatAccuracy(et: ref<Entity>, accuracy: Float) -> Void;

  public final native func SetThreatBeliefAccuracy(et: ref<Entity>, accuracy: Float) -> Void;

  public final native func RequestThreatBeliefAccuracyMinValue(et: ref<Entity>, reason: CName, minAccuracy: Float) -> Void;

  public final native func RemoveThreatBeliefAccuracyMinValue(et: ref<Entity>, reason: CName) -> Void;

  public final native func RemoveThreat(id: Uint32) -> Void;

  public final native func MapThreat(et: ref<Entity>) -> Uint32;

  public final native func ResetDroppingCooldown(et: ref<Entity>) -> Void;

  public final native func AddDroppingCooldown(et: ref<Entity>, value: Float) -> Void;

  public final native func GetDroppingCooldown(et: ref<Entity>) -> Float;

  public final native func GetCurrentPreset() -> TweakDBID;

  public final native func SetCurrentPreset(presetId: TweakDBID) -> Void;

  public final native func PushSquadSync(sqType: AISquadType) -> Void;

  public final native func PullSquadSync(sqType: AISquadType) -> Void;

  public final native func SetThreatPriorityDmgCurve(curveName: CName) -> Bool;

  public final native func SetThreatPriorityDistCurve(curveName: CName) -> Bool;

  public final native func SetThreatPriorityHisteresisCurve(curveName: CName) -> Bool;

  public final native func SetThreatPriorityAttackersCurve(curveName: CName) -> Bool;

  public final native func GetThreatPriorityModFromDmgCurve(timeSinceLastDmg: Float) -> Float;

  public final native func GetThreatPriorityModFromDistCurve(distanceFromThreat: Float) -> Float;

  public final native func GetThreatPriorityModFromHisteresisCurve(timeSinceTargetChange: Float) -> Float;

  public final native func GetThreatPriorityModFromAttackersCurve(attackers: Uint32) -> Float;

  public final native func CollectTrackers(onlyHostiles: Bool, onlyInContact: Bool) -> array<ref<Entity>>;

  public final native func IsPositionValid(pos: Vector4) -> Bool;

  public final native func GetThreatLastKnownPositionProvider(threat: wref<Entity>, opt offset: Vector3, opt failIfVisible: Bool, opt slotName: CName, opt failSafeProvider: ref<IPositionProvider>) -> ref<IPositionProvider>;

  public final native func GetThreatBeliefPositionProvider(threat: wref<Entity>, opt offset: Vector3, opt failIfVisible: Bool, opt slotName: CName, opt failSafeProvider: ref<IPositionProvider>) -> ref<IPositionProvider>;

  public final native func GetThreatSharedLastKnownPositionProvider(threat: wref<Entity>, opt offset: Vector3, opt failIfVisible: Bool, opt slotName: CName, opt failSafeProvider: ref<IPositionProvider>) -> ref<IPositionProvider>;

  public final native func GetThreatSharedBeliefPositionProvider(threat: wref<Entity>, opt offset: Vector3, opt failIfVisible: Bool, opt slotName: CName, opt failSafeProvider: ref<IPositionProvider>) -> ref<IPositionProvider>;
}

public abstract native class AIITargetTrackingListener extends IScriptable {
}

public native struct TrackedLocation {

  public native let location: LocationInformation;

  public native let lastKnown: LocationInformation;

  public native let sharedLocation: LocationInformation;

  public native let sharedLastKnown: LocationInformation;

  public native let entity: wref<Entity>;

  public native let speed: Vector4;

  public native let accuracy: Float;

  public native let sharedAccuracy: Float;

  public native let sharedTimeDelay: Float;

  public native let threat: Float;

  public native let visible: Bool;

  public native let invalidExpectation: Bool;

  public native let status: AITrackedStatusType;
}

public struct CameraQuestProperties {

  public let m_factOnFeedReceived: CName;

  public let m_questFactOnDetection: CName;

  public persistent let m_isInFollowMode: Bool;

  public persistent let m_followedTargetID: EntityID;
}

public struct CameraSetup {

  @default(CameraSetup, false)
  public let m_canStreamVideo: Bool;
}

public class VRoomFeed extends Event {

  public let On: Bool;
}

public class FeedEvent extends Event {

  public let On: Bool;

  public let virtualComponentName: CName;

  public let cameraID: EntityID;
}

public class BinkVideoEvent extends Event {

  public let path: ResRef;

  public let startingTime: Float;

  public let shouldPlay: Bool;
}

public class PSRefreshEvent extends Event {
}

public native class VisibleObjectComponent extends IPlacedComponent {

  public native let visibleObject: ref<VisibleObject>;

  public final native func GetDetectionMultiplier() -> Float;

  public final native func SetVisibleObjectTypeInvalid() -> Void;
}

public final native class TargetingComponent extends IPlacedComponent {
}

public class AnimFeature_SensorDevice extends AnimFeature {

  public let isCeiling: Bool;

  @default(AnimFeature_SensorDevice, true)
  public let isInitialized: Bool;

  public edit let isTurnedOn: Bool;

  public edit let isDestroyed: Bool;

  public edit let wasHit: Bool;

  public edit let state: Int32;

  public edit let wakeState: Int32;

  public edit let isControlled: Bool;

  public edit let overrideRootRotation: Float;

  public edit let pitchAngle: Float;

  public edit let maxRotationAngle: Float;

  public edit let rotationSpeed: Float;

  public edit let currentRotation: Vector4;
}

public final native class VirtualCameraComponent extends entCameraComponent {

  public final native func GetVirtualCameraName() -> CName;

  public final native func SetVirtualCameraName(newName: CName) -> Void;
}

public class FlickerEvent extends Event {

  public let strength: Float;

  public let duration: Float;

  public let offset: Float;
}

public class ToggleLightEvent extends Event {

  public let toggle: Bool;

  public let loop: Bool;
}

public class ToggleLightByNameEvent extends ToggleLightEvent {

  public let componentName: CName;
}

public native struct gameLightSettings {

  public native let strength: Float;

  public native let intensity: Float;

  public native let radius: Float;

  public native let color: Color;

  public native let innerAngle: Float;

  public native let outerAngle: Float;
}

public class ChangeLightByNameEvent extends ChangeLightEvent {

  public let componentName: CName;
}

public struct EditableGameLightSettings {

  public let componentName: CName;

  @attrib(rangeMax, "1.f")
  @attrib(category, "strength")
  @attrib(rangeMin, "0.f")
  public let strength: Float;

  @attrib(category, "strength")
  public let modifyStrength: Bool;

  @attrib(category, "intensity")
  public let intensity: Float;

  @attrib(category, "intensity")
  public let modifyIntensity: Bool;

  @attrib(category, "radius")
  public let radius: Float;

  @attrib(category, "radius")
  public let modifyRadius: Bool;

  @attrib(category, "color")
  public let color: Color;

  @attrib(category, "color")
  public let modifyColor: Bool;

  @attrib(rangeMax, "180.0f")
  @attrib(category, "angle")
  @attrib(rangeMin, "0.f")
  public let innerAngle: Float;

  @attrib(category, "angle")
  public let modifyInnerAngle: Bool;

  @attrib(rangeMax, "180.0f")
  @attrib(category, "angle")
  @attrib(rangeMin, "0.f")
  public let outerAngle: Float;

  @attrib(category, "angle")
  public let modifyOuterAngle: Bool;
}

public class AdvanceChangeLightEvent extends Event {

  public let settings: EditableGameLightSettings;

  public let time: Float;

  public let curve: CName;

  public let loop: Bool;
}

public class ChangeCurveEvent extends Event {

  public let time: Float;

  public let curve: CName;

  public let loop: Bool;
}

public native struct FragmentBuilder {

  public final static native func Construct(self: script_ref<FragmentBuilder>, debugDrawer: script_ref<DebugDrawer>) -> Void;

  public final static native func SetColor(self: script_ref<FragmentBuilder>, color: Color) -> Void;

  public final static native func PushLocalTransform(self: script_ref<FragmentBuilder>) -> Void;

  public final static native func PopLocalTransform(self: script_ref<FragmentBuilder>) -> Void;

  public final static native func BindTransform(self: script_ref<FragmentBuilder>, localToWorld: Matrix) -> Void;

  public final static native func AddArrow(self: script_ref<FragmentBuilder>, start: Vector4, end: Vector4) -> Void;

  public final static native func AddWireAngledRange(self: script_ref<FragmentBuilder>, matrix: Matrix, height: Float, range: Float, rangeAngle: Float, drawSides: Bool) -> Void;

  public final static native func Done(self: script_ref<FragmentBuilder>) -> Void;
}

public static native func OperatorAssignMultiply(out a: Matrix, b: Matrix) -> Matrix;

public native struct Matrix {

  public native let X: Vector4;

  public native let Y: Vector4;

  public native let Z: Vector4;

  public native let W: Vector4;

  public final static native func Identity() -> Matrix;

  public final static native func BuiltTranslation(move: Vector4) -> Matrix;

  public final static native func BuiltRotation(rot: EulerAngles) -> Matrix;

  public final static native func BuiltScale(scale: Vector4) -> Matrix;

  public final static native func BuiltPreScale(scale: Vector4) -> Matrix;

  public final static native func BuiltTRS(opt translation: Vector4, opt rotation: EulerAngles, opt scale: Vector4) -> Matrix;

  public final static native func BuiltRTS(opt rotation: EulerAngles, opt translation: Vector4, opt scale: Vector4) -> Matrix;

  public final static native func BuildFromDirectionVector(dirVec: Vector4, opt upVec: Vector4) -> Matrix;

  public final static native func GetTranslation(m: Matrix) -> Vector4;

  public final static native func GetRotation(m: Matrix) -> EulerAngles;

  public final static native func GetScale(m: Matrix) -> Vector4;

  public final static native func GetAxisX(m: Matrix) -> Vector4;

  public final static native func GetAxisY(m: Matrix) -> Vector4;

  public final static native func GetAxisZ(m: Matrix) -> Vector4;

  public final static native func GetDirectionVector(m: Matrix) -> Vector4;

  public final static native func GetInverted(m: Matrix) -> Matrix;

  public final static native func GetInvertedFull(m: Matrix) -> Matrix;

  public final static native func ToQuat(m: Matrix) -> Quaternion;

  public final static native func IsOk(m: Matrix) -> Bool;
}

public native struct DebugDrawer {

  public final static native func TestDebugFilterMask(const debugDrawer: script_ref<DebugDrawer>, debugFilterName: String) -> Bool;
}

public class ResolveSensorDeviceBehaviour extends Event {

  public let iteration: Int32;
}

public struct LedColors_SensorDevice {

  public let off: ScriptLightSettings;

  public let red: ScriptLightSettings;

  public let green: ScriptLightSettings;

  public let blue: ScriptLightSettings;

  public let yellow: ScriptLightSettings;

  public let white: ScriptLightSettings;
}

public native class VisibleObjectTypeEvent extends Event {

  public native let type: gamedataSenseObjectType;
}

public native class DeviceFX_Record extends TweakDBRecord {

  public final native func ScanGameEffectLength() -> Float;

  public final native func VisionConeEffectLength() -> Float;

  public final native func IdleEffectLength() -> Float;
}

public class CameraTagLimitData extends IScriptable {

  public let add: Bool;

  public let object: wref<SurveillanceCamera>;
}

public class CameraDeadBodyData extends IScriptable {

  public let dataType: EGameSessionDataType;

  public let ownerID: EntityID;

  public let bodyID: EntityID;
}

public class CameraTagLockEvent extends Event {

  public let isLocked: Bool;
}

public class DataEntryRequest extends ScriptableSystemRequest {

  public let dataType: EGameSessionDataType;

  public let data: Variant;
}

public class UpdateDebuggerRequest extends ScriptableSystemRequest {

  public let m_system: ref<SecuritySystemControllerPS>;

  public let m_time: Float;

  public let m_instructionAttached: Bool;

  public let m_inputAttached: Bool;

  public let m_callstack: CName;

  public let m_instruction: EReprimandInstructions;

  public let m_recentInput: ref<SecuritySystemInput>;
}

public final native class DebugVisualizerSystem extends gameIDebugVisualizerSystem {

  public final native func DrawRect(position: Vector4, size: Vector4, opt color: Color, opt lifetime: Float) -> Uint32;

  public final native func DrawLine(start: Vector4, end: Vector4, opt color: Color, opt lifetime: Float) -> Uint32;

  public final native func DrawLine3D(start: Vector4, end: Vector4, opt color: Color, opt lifetime: Float) -> Uint32;

  public final native func DrawText(position: Vector4, text: String, opt textAlignment: gameDebugViewETextAlignment, opt color: Color, opt lifetime: Float) -> Uint32;

  public final native func DrawText3D(position: Vector4, text: String, opt color: Color, opt lifetime: Float) -> Uint32;

  public final native func DrawWireBox(boxMin: Vector4, boxMax: Vector4, opt color: Color, opt lifetime: Float) -> Uint32;

  public final native func DrawWireSphere(position: Vector4, radius: Float, opt color: Color, opt lifetime: Float) -> Uint32;

  public final native func DrawArrow(start: Vector4, end: Vector4, opt color: Color, opt lifetime: Float) -> Uint32;

  public final native func ClearAll() -> Void;

  public final native func ClearLayer(layerId: Uint32) -> Void;

  public final native func SetPosition(layerId: Uint32, position: Vector4) -> Void;

  public final native func SetScale(layerId: Uint32, scale: Vector4) -> Void;
}

public class SysDebuggerEvent extends TickableEvent {
}

public class RealTimeUpdateRequest extends ScriptableSystemRequest {

  public let m_evt: ref<TickableEvent>;

  public let m_time: Float;
}

public struct AreaEntry {

  public persistent let user: EntityID;
}

public static native func OperatorGreater(a: Int64, b: Int64) -> Bool;

public struct ReprimandData {

  @attrib(unsavable, "true")
  public persistent let isActive: Bool;

  @attrib(unsavable, "true")
  public persistent let receiver: EntityID;

  @attrib(unsavable, "true")
  public persistent let receiverAttitudeGroup: CName;

  @attrib(unsavable, "true")
  public persistent let reprimandID: Int32;

  @attrib(unsavable, "true")
  public persistent let count: Int32;
}

public static native func TraceToString() -> String;

public static native func Cast(a: Uint64) -> Int32;

public struct BaseDeviceData {

  public let m_deviceState: EDeviceStatus;

  public let m_durabilityType: EDeviceDurabilityType;

  public let m_deviceName: String;

  public let m_debugName: CName;

  public let m_hackOwner: wref<GameObject>;
}

public struct DebuggerProperties {

  public let m_exclusiveMode: Bool;

  public let m_factActivated: CName;

  public let m_debugName: CName;

  public let m_layerIDs: array<Uint32>;
}

public class RevealNetworkGridEvent extends Event {

  public let shouldDraw: Bool;

  public let ownerEntityPosition: Vector4;

  public let fxDefault: FxResource;

  public let fxBreached: FxResource;

  @default(RevealNetworkGridEvent, true)
  public let revealSlave: Bool;

  @default(RevealNetworkGridEvent, true)
  public let revealMaster: Bool;
}

public class RevealDevicesGridEvent extends Event {

  public let shouldDraw: Bool;

  public let ownerEntityPosition: Vector4;

  public let fxDefault: FxResource;

  @default(RevealDevicesGridEvent, true)
  public let revealSlave: Bool;

  @default(RevealDevicesGridEvent, true)
  public let revealMaster: Bool;
}

public class SetCurrentGameplayRoleEvent extends Event {

  public let gameplayRole: EGameplayRole;
}

public class UnregisterListenerOnTargetHPEvent extends Event {

  public let listener: ref<TargetedObjectDeathListener>;

  public let isFromListenerEvent: Bool;
}

public abstract native class AnimTargetAddEvent extends Event {

  public native let bodyPart: CName;

  public final native func SetEntityTarget(targetEntity: wref<Entity>, slotTargetName: CName, targetOffsetEntity: Vector4) -> Void;

  public final native func SetEntityTargetFromPast(transformHistoryComponent: wref<TransformHistoryComponent>, timeDelay: Float, targetOffsetEntity: Vector4) -> Void;

  public final native func SetStaticTarget(staticTargetPositionWs: Vector4) -> Void;

  public final native func SetPositionProvider(provider: ref<IPositionProvider>) -> Void;
}

public native class LookAtAddEvent extends AnimTargetAddEvent {

  public native let request: LookAtRequest;

  public native let targetPositionProvider: ref<IPositionProvider>;

  public native let outLookAtRef: LookAtRef;

  public final native func SetStyle(style: animLookAtStyle) -> Void;

  public final native func SetOutTransitionStyle(outTransitionStyle: animLookAtStyle) -> Void;

  public final native func SetLimits(softLimitDegreesType: animLookAtLimitDegreesType, hardLimitDegreesType: animLookAtLimitDegreesType, hardLimitDistanceType: animLookAtLimitDistanceType, backLimitDegreesType: animLookAtLimitDegreesType) -> Void;

  public final native func SetAdditionalPartsArray(additionalParts: array<LookAtPartRequest>) -> Void;

  public final native func SetDebugInfo(debugInfo: String) -> Void;
}

public native struct LookAtRequest {

  public native let transitionSpeed: Float;

  public native let hasOutTransition: Bool;

  public native let outTransitionSpeed: Float;

  public native let followingSpeedFactorOverride: Float;

  public native let limits: LookAtLimits;

  public native let suppress: Float;

  public native let mode: Int32;

  public native let calculatePositionInParentSpace: Bool;

  public native let priority: Int32;

  public native let invalid: Bool;
}

public final native class DisableAimAssist extends Event {
}

public class ReprimandAgentDisconnectEvent extends Event {

  public let agentID: EntityID;
}

public class ForceReactivateHighlightsEvent extends Event {
}

public native struct LookAtLimits {

  public native let softLimitDegrees: Float;

  public native let hardLimitDegrees: Float;

  public native let hardLimitDistance: Float;

  public native let backLimitDegrees: Float;
}

public class TCSTakeOverControlActivate extends Event {

  public let IsQuickhack: Bool;
}

public struct PlayerControlDeviceData {

  public let m_currentYawModifier: Float;

  public let m_currentPitchModifier: Float;
}

public native class inkAnimSize extends inkAnimInterpolator {

  public final native func GetStartSize() -> Vector2;

  public final native func GetEndSize() -> Vector2;

  public final native func SetStartSize(startSize: Vector2) -> Void;

  public final native func SetEndSize(endSize: Vector2) -> Void;
}

public static native func IsStringNumber(const value: script_ref<String>) -> Bool;

public class BossCombatNotifier extends Event {

  public let bossEntity: wref<Entity>;

  public let combatEnded: Bool;
}

public native class ThreatDefeated extends AIEvent {

  public native let owner: wref<Entity>;

  public native let threat: wref<Entity>;

  public native let id: Uint32;

  public native let detected: Bool;
}

public native class ThreatUnconscious extends AIEvent {

  public native let owner: wref<Entity>;

  public native let threat: wref<Entity>;

  public native let id: Uint32;

  public native let detected: Bool;
}

public native class ThreatDeath extends AIEvent {

  public native let owner: wref<Entity>;

  public native let threat: wref<Entity>;

  public native let id: Uint32;

  public native let detected: Bool;
}

public native class ThreatRemoved extends AIEvent {

  public native let owner: wref<Entity>;

  public native let threat: wref<Entity>;

  public native let isHostile: Bool;

  public native let isEnemy: Bool;
}

public native class ThreatInvalid extends AIEvent {

  public native let owner: wref<Entity>;

  public native let threat: wref<Entity>;

  public native let isHostile: Bool;

  public native let isEnemy: Bool;
}

public native class gameTargetHitEvent extends gameHitEvent {
}

public native struct LocationInformation {

  public native let position: Vector4;

  public native let direction: Vector4;
}

public native class AreaShapeComponent extends IPlacedComponent {
}

public native class TriggerComponent extends AreaShapeComponent {

  public final native func GetNumberOverlappingActivators() -> Int32;

  public final native func GetOverlappingEntities() -> array<ref<Entity>>;

  public final native func IsEntityOverlapping(entity: ref<Entity>) -> Bool;

  public final native func RegisterSafeArea() -> Void;
}

public class AnimFeature_SecurityTurretData extends AnimFeature {

  public edit let Shoot: Bool;

  public edit let isRippedOff: Bool;

  public edit let ripOffSide: Bool;

  public edit let isOverriden: Bool;
}

public native class DeviceReplicatedState extends IScriptable {
}

public class SecurityTurretReplicatedState extends DeviceReplicatedState {

  public let m_isOn: Bool;

  public let m_isShooting: Bool;

  public let m_isDead: Bool;

  public let m_health: Float;
}

public class PendingSecuritySystemDisable extends Event {

  public let isPending: Bool;
}

public class SecurityTurretOffline extends Event {
}

public class GrabReferenceToWeaponEvent extends Event {
}

public abstract native class IVelocityProvider extends IScriptable {
}

public native class MoveComponentVelocityProvider extends IVelocityProvider {

  public final static native func CreateMoveComponentVelocityProvider(puppet: wref<gamePuppet>) -> ref<IVelocityProvider>;
}

public abstract native class IPositionProvider extends IScriptable {

  public final native func CalculatePosition(out outPos: Vector4) -> Bool;

  public final native func SetWorldOffset(worldOffset: Vector4) -> Void;

  public final native func GetWorldOffset() -> Vector4;

  public final static native func CreateStaticPositionProvider(position: WorldPosition) -> ref<IPositionProvider>;

  public final static native func CreateEntityPositionProvider(entity: ref<Entity>, opt localOffset: Vector3) -> ref<IPositionProvider>;

  public final static native func CreateEntityHistoryPositionProvider(transformHistoryComp: wref<TransformHistoryComponent>, timeDelay: Float, opt localOffset: Vector3) -> ref<IPositionProvider>;

  public final static native func CreateSlotPositionProvider(entity: ref<Entity>, slotName: CName, opt localOffset: Vector3) -> ref<IPositionProvider>;

  public final static native func CreatePlacedComponentPositionProvider(entity: ref<IPlacedComponent>, opt localOffset: Vector3) -> ref<IPositionProvider>;

  public final static native func CreateCollisionPredictionPositionProvider(targetPosProvider: ref<IPositionProvider>, ownerPosProvider: ref<IPositionProvider>, targetVelocityProvider: ref<IVelocityProvider>, ownerVelocity: Float) -> ref<IPositionProvider>;
}

public native struct AIActiveCommandList {

  public final static native func Size(list: script_ref<AIActiveCommandList>) -> Int32;

  public final static native func Add(list: script_ref<AIActiveCommandList>, command: ref<AICommand>) -> Void;

  public final static native func Remove(list: script_ref<AIActiveCommandList>, commandName: CName) -> Void;

  public final static native func TrackActionCommand(list: script_ref<AIActiveCommandList>, commandName: CName) -> Void;

  public final static native func ClearActionCommand(list: script_ref<AIActiveCommandList>, commandName: CName) -> Void;

  public final static native func IsActionCommandByName(list: script_ref<AIActiveCommandList>, commandName: CName) -> Bool;

  public final static native func IsActionCommandById(list: script_ref<AIActiveCommandList>, commandId: Uint32) -> Bool;

  public final static native func Contains(list: script_ref<AIActiveCommandList>, command: CName) -> Bool;

  public final static native func ContainsById(list: script_ref<AIActiveCommandList>, commandId: Uint32) -> Bool;

  public final static native func GetId(list: script_ref<AIActiveCommandList>, command: CName, out id: Uint32) -> Bool;
}

public native class TransformHistoryComponent extends IComponent {

  public final native func GetInterpolatedPositionFromHistory(delay: Float) -> Vector4;

  public final native func GetVelocity(period: Float) -> Vector4;
}

public native class gameBoolSignalTable extends IScriptable {

  public final native func GetOrCreateSignal(signalName: CName) -> Uint16;

  public final native func GetOrCreateTagSignal(signalName: CName) -> Uint16;

  public final native func Set(signalId: Uint16, value: Bool) -> Bool;

  public final native func SetWithData(signalId: Uint16, data: ref<SignalUserData>) -> Bool;

  public final native func SetByName(signalName: CName, value: Bool) -> Bool;

  public final native func SetTimed(signalId: Uint16, duration: Float) -> Bool;

  public final native func GetCurrentValue(signalId: Uint16) -> Bool;

  public final native func GetCurrentData(signalId: Uint16) -> ref<SignalUserData>;
}

public class SetThreatsPersistenceRequest extends AIEvent {

  public let et: wref<Entity>;

  public let isPersistent: Bool;
}

public native class AnimFeature_EquipUnequipItem extends AnimFeature {

  public native let stateTransitionDuration: Float;

  public native let itemState: Int32;

  public native let itemType: Int32;

  public native let firstEquip: Bool;
}

public final native class entBreakEffectLoopEvent extends Event {

  public native let effectName: CName;
}

public final native class entKillEffectEvent extends Event {

  public native let effectName: CName;

  public native let breakAllLoops: Bool;
}

public native class SubCharacter_Record extends Character_Record {

  public final native func EnumComment() -> String;

  public final native func StartingEquippedItems(out outList: array<wref<Item_Record>>) -> Void;

  public final native func GetStartingEquippedItemsCount() -> Int32;

  public final native func GetStartingEquippedItemsItem(index: Int32) -> wref<Item_Record>;

  public final native func GetStartingEquippedItemsItemHandle(index: Int32) -> wref<Item_Record>;

  public final native func StartingEquippedItemsContains(item: wref<Item_Record>) -> Bool;

  public final native func ReferenceName() -> CName;

  public final native func EnumName() -> CName;

  public final native func IsPrevention() -> Bool;

  public final native func Type() -> gamedataSubCharacter;
}

public struct SSubCharacter {

  public persistent let persistentID: PersistentID;

  public persistent let subCharType: gamedataSubCharacter;

  public persistent let equipmentData: ref<EquipmentSystemPlayerData>;
}

public native struct SSlotInfo {

  public native persistent let areaType: gamedataEquipmentArea;

  public native persistent let equipSlot: TweakDBID;

  public native persistent let visualTag: CName;
}

public native struct gameSaveLock {

  public native let reason: gameSaveLockReason;
}

public native struct SSlotActiveItems {

  public native persistent let rightHandItem: ItemID;

  public native persistent let leftHandItem: ItemID;
}

public native struct SLastUsedWeapon {

  public native persistent let lastUsedWeapon: ItemID;

  public native persistent let lastUsedRanged: ItemID;

  public native persistent let lastUsedMelee: ItemID;

  public native persistent let lastUsedHeavy: ItemID;
}

public static native func OperatorNotEqual(a: ItemID, b: ItemID) -> Bool;

public class EquipmentInitData extends IScriptable {

  public let eqManipulationVarName: CName;
}

public native class PSMAddOnDemandStateMachine extends Event {

  public native let stateMachineName: CName;

  public native let instanceData: StateMachineInstanceData;

  public native let tryHotSwap: Bool;

  public native let owner: wref<GameObject>;
}

public native class PSMPostponedParameterScriptable extends PSMPostponedParameterBase {

  public native let value: ref<IScriptable>;
}

public class EquipmentManipulationRequest extends IScriptable {

  public let requestType: EquipmentManipulationRequestType;

  public let requestSlot: EquipmentManipulationRequestSlot;

  @default(EquipmentManipulationRequest, gameEquipAnimationType.Default)
  public let equipAnim: gameEquipAnimationType;
}

public native struct StateMachineInstanceData {

  public native let referenceName: CName;

  public native let priority: Uint32;

  public native let initData: ref<IScriptable>;
}

public class ResetItemAppearanceEvent extends Event {

  public let itemID: ItemID;
}

public native struct SVisualTagProcessing {

  public native persistent let areaType: gamedataEquipmentArea;

  public native persistent let showItem: Bool;
}

public struct SPaperdollEquipData {

  public let equipArea: SEquipArea;

  public let slotIndex: Int32;

  public let placementSlot: TweakDBID;

  public let equipped: Bool;
}

public abstract native class gameuiICharacterCustomizationSystem extends IGameSystem {

  public final native func IsTransgenderAllowed() -> Bool;

  public final native func IsNudityAllowed() -> Bool;

  public final native func InitializeState() -> Bool;

  public final native func FinalizeState() -> Bool;

  public final native func ClearState() -> Bool;

  public final native func GetState() -> ref<gameuiICharacterCustomizationState>;

  public final native func GetHeadOptions(opt presetName: CName) -> array<ref<CharacterCustomizationOption>>;

  public final native func GetBodyOptions(opt presetName: CName) -> array<ref<CharacterCustomizationOption>>;

  public final native func GetArmsOptions(opt presetName: CName) -> array<ref<CharacterCustomizationOption>>;

  public final native func GetUnitedOptions(head: Bool, body: Bool, arms: Bool, opt headPreset: CName, opt bodyPreset: CName, opt armsPreset: CName) -> array<ref<CharacterCustomizationOption>>;

  public final native func RandomizeOptions() -> Void;

  public final native func ApplyUIPreset(presetName: CName) -> Void;

  public final native func ApplyChangeToOption(const option: ref<CharacterCustomizationOption>, newValue: Uint32) -> Void;

  public final native func TriggerVoiceToneSample() -> Void;

  public final native func HasCharacterCustomizationComponent(entity: ref<Entity>) -> Bool;
}

public abstract native class gameuiICharacterCustomizationState extends IScriptable {

  public final native func IsBodyGenderMale() -> Bool;

  public final native func SetIsBodyGenderMale(isMale: Bool) -> Void;

  public final native func IsBrainGenderMale() -> Bool;

  public final native func SetIsBrainGenderMale(isMale: Bool) -> Void;

  public final native func GetLifePath() -> TweakDBID;

  public final native func SetLifePath(lifepath: TweakDBID) -> Void;

  public final native func GetAttributePointsAvailable() -> Uint32;

  public final native func SetAttributePointsAvailable(value: Uint32) -> Void;

  public final native func GetAttribute(type: gamedataStatType) -> Uint32;

  public final native func SetAttribute(type: gamedataStatType, value: Uint32) -> Void;

  public final native func GetAttributes() -> array<CharacterCustomizationAttribute>;

  public final native func HasOption(groupName: CName, optionName: CName, isFPP: Bool) -> Bool;

  public final native func HasTag(tag: CName) -> Bool;
}

public final native class AudioNotifyItemUnequippedEvent extends Event {

  public native let itemName: CName;
}

public native class EquipmentMovementSound_Record extends TweakDBRecord {

  public final native func AudioMovementName() -> CName;

  public final native func Priority() -> Float;
}

public static native func OperatorGreater(a: EngineTime, b: Float) -> Bool;

public class NPCRoleChangeEvent extends Event {

  public let m_newRole: ref<AIRole>;
}

public class AutocraftActivateRequest extends ScriptableSystemRequest {
}

public static native func LogWarning(const text: script_ref<String>) -> Void;

public class AddSubCharacterRequest extends ScriptableSystemRequest {

  public let subCharObject: wref<ScriptedPuppet>;
}

public class RemoveSubCharacterRequest extends ScriptableSystemRequest {

  public let subCharType: gamedataSubCharacter;
}

public class SubCharEquipRequest extends EquipRequest {

  public let subCharType: gamedataSubCharacter;
}

public class UnequipRequest extends PlayerScriptableSystemRequest {

  public let areaType: gamedataEquipmentArea;

  @default(UnequipRequest, -1)
  public let slotIndex: Int32;
}

public class SubCharUnequipRequest extends UnequipRequest {

  public let subCharType: gamedataSubCharacter;
}

public class SpawnUniqueSubCharacterRequest extends ScriptableSystemRequest {

  public let subCharacterID: TweakDBID;

  @default(SpawnSubCharacterRequest, 3f)
  @default(SpawnUniqueSubCharacterRequest, 3f)
  public let desiredDistance: Float;
}

public class SpawnUniquePursuitSubCharacterRequest extends ScriptableSystemRequest {

  public let subCharacterID: TweakDBID;

  public let position: Vector4;
}

public class DespawnUniqueSubCharacterRequest extends ScriptableSystemRequest {

  public let subCharacterID: TweakDBID;
}

public class SmartDespawnRequest extends Event {
}

public class CancelSmartDespawnRequest extends Event {
}

public final native class RestrictMovementAreaManager extends IRestrictMovementAreaManager {

  public final native func HasAssignedRestrictMovementArea(npcEntityID: EntityID) -> Bool;

  public final native func AssignRestrictMovementArea(npcEntityID: EntityID, restrictMovementArea: NodeRef) -> Bool;

  public final native func IsPointInRestrictMovementArea(npcEntityID: EntityID, point: Vector4, opt onlyActualArea: Bool) -> Bool;

  public final native func IsPointInPursuitZone(npcEntityID: EntityID, point: Vector4) -> Bool;

  public final native func FindPointInRestrictMovementArea(npcEntityID: EntityID, referencePoint: Vector4, out restrictMovementAreaPoint: Vector4) -> Bool;

  public final native func GetAllPuppetsInRestrictMovementArea(area: RestrictMovementArea) -> array<EntityID>;
}

public static native func ReportFailure(const message: script_ref<String>) -> Bool;

public native class AIActionCooldown_Record extends TweakDBRecord {

  public final native func ActivationCondition(out outList: array<wref<AIActionCondition_Record>>) -> Void;

  public final native func GetActivationConditionCount() -> Int32;

  public final native func GetActivationConditionItem(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func GetActivationConditionItemHandle(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func ActivationConditionContains(item: wref<AIActionCondition_Record>) -> Bool;

  public final native func Name() -> CName;

  public final native func Duration() -> Float;
}

public abstract native class ICooldownSystem extends IGameSystem {

  public final native func DoesCooldownExist(id: Int32) -> Bool;

  public final native func GetCIDByOwnerAndName(owner: wref<Entity>, cdName: CName) -> Int32;

  public final native func GetCIDByRecord(owner: wref<Entity>, record: TweakDBID) -> Int32;

  public final native func GetCIDByItemID(itemId: ItemID) -> Int32;

  public final native func Register(request: script_ref<RegisterNewCooldownRequest>) -> Int32;

  public final native func RegisterAbility(request: script_ref<RegisterNewAbilityCooldownRequest>) -> Int32;

  public final native func RegisterFromRecord(request: script_ref<RegisterCooldownFromRecordRequest>) -> Int32;

  public final native func Remove(id: Int32) -> Bool;
}

public native class AIAction_Record extends AINode_Record {

  public final native func AnimData() -> wref<AIActionAnimData_Record>;

  public final native func AnimDataHandle() -> ref<AIActionAnimData_Record>;

  public final native func Recovery() -> wref<AIActionPhase_Record>;

  public final native func RecoveryHandle() -> ref<AIActionPhase_Record>;

  public final native func Startup() -> wref<AIActionPhase_Record>;

  public final native func StartupHandle() -> ref<AIActionPhase_Record>;

  public final native func Ability() -> wref<GameplayAbility_Record>;

  public final native func AbilityHandle() -> ref<GameplayAbility_Record>;

  public final native func Loop() -> wref<AIActionPhase_Record>;

  public final native func LoopHandle() -> ref<AIActionPhase_Record>;

  public final native func Lookats(out outList: array<wref<AIActionLookAtData_Record>>) -> Void;

  public final native func GetLookatsCount() -> Int32;

  public final native func GetLookatsItem(index: Int32) -> wref<AIActionLookAtData_Record>;

  public final native func GetLookatsItemHandle(index: Int32) -> wref<AIActionLookAtData_Record>;

  public final native func LookatsContains(item: wref<AIActionLookAtData_Record>) -> Bool;

  public final native func LoopSubActions(out outList: array<wref<AISubAction_Record>>) -> Void;

  public final native func GetLoopSubActionsCount() -> Int32;

  public final native func GetLoopSubActionsItem(index: Int32) -> wref<AISubAction_Record>;

  public final native func GetLoopSubActionsItemHandle(index: Int32) -> wref<AISubAction_Record>;

  public final native func LoopSubActionsContains(item: wref<AISubAction_Record>) -> Bool;

  public final native func StartupSubActions(out outList: array<wref<AISubAction_Record>>) -> Void;

  public final native func GetStartupSubActionsCount() -> Int32;

  public final native func GetStartupSubActionsItem(index: Int32) -> wref<AISubAction_Record>;

  public final native func GetStartupSubActionsItemHandle(index: Int32) -> wref<AISubAction_Record>;

  public final native func StartupSubActionsContains(item: wref<AISubAction_Record>) -> Bool;

  public final native func StartupEndConditions(out outList: array<wref<AIActionCondition_Record>>) -> Void;

  public final native func GetStartupEndConditionsCount() -> Int32;

  public final native func GetStartupEndConditionsItem(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func GetStartupEndConditionsItemHandle(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func StartupEndConditionsContains(item: wref<AIActionCondition_Record>) -> Bool;

  public final native func RecoverySubActions(out outList: array<wref<AISubAction_Record>>) -> Void;

  public final native func GetRecoverySubActionsCount() -> Int32;

  public final native func GetRecoverySubActionsItem(index: Int32) -> wref<AISubAction_Record>;

  public final native func GetRecoverySubActionsItemHandle(index: Int32) -> wref<AISubAction_Record>;

  public final native func RecoverySubActionsContains(item: wref<AISubAction_Record>) -> Bool;

  public final native func SubActions(out outList: array<wref<AISubAction_Record>>) -> Void;

  public final native func GetSubActionsCount() -> Int32;

  public final native func GetSubActionsItem(index: Int32) -> wref<AISubAction_Record>;

  public final native func GetSubActionsItemHandle(index: Int32) -> wref<AISubAction_Record>;

  public final native func SubActionsContains(item: wref<AISubAction_Record>) -> Bool;

  public final native func RecoveryEndConditions(out outList: array<wref<AIActionCondition_Record>>) -> Void;

  public final native func GetRecoveryEndConditionsCount() -> Int32;

  public final native func GetRecoveryEndConditionsItem(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func GetRecoveryEndConditionsItemHandle(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func RecoveryEndConditionsContains(item: wref<AIActionCondition_Record>) -> Bool;

  public final native func Cooldowns(out outList: array<wref<AIActionCooldown_Record>>) -> Void;

  public final native func GetCooldownsCount() -> Int32;

  public final native func GetCooldownsItem(index: Int32) -> wref<AIActionCooldown_Record>;

  public final native func GetCooldownsItemHandle(index: Int32) -> wref<AIActionCooldown_Record>;

  public final native func CooldownsContains(item: wref<AIActionCooldown_Record>) -> Bool;

  public final native func AnimationWrapperOverrides() -> array<CName>;

  public final native func GetAnimationWrapperOverridesCount() -> Int32;

  public final native func GetAnimationWrapperOverridesItem(index: Int32) -> CName;

  public final native func AnimationWrapperOverridesContains(item: CName) -> Bool;

  public final native func Tickets(out outList: array<wref<AITicketType_Record>>) -> Void;

  public final native func GetTicketsCount() -> Int32;

  public final native func GetTicketsItem(index: Int32) -> wref<AITicketType_Record>;

  public final native func GetTicketsItemHandle(index: Int32) -> wref<AITicketType_Record>;

  public final native func TicketsContains(item: wref<AITicketType_Record>) -> Bool;

  public final native func LoopEndConditions(out outList: array<wref<AIActionCondition_Record>>) -> Void;

  public final native func GetLoopEndConditionsCount() -> Int32;

  public final native func GetLoopEndConditionsItem(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func GetLoopEndConditionsItemHandle(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func LoopEndConditionsContains(item: wref<AIActionCondition_Record>) -> Bool;

  public final native func InitCooldowns(out outList: array<wref<AIActionCooldown_Record>>) -> Void;

  public final native func GetInitCooldownsCount() -> Int32;

  public final native func GetInitCooldownsItem(index: Int32) -> wref<AIActionCooldown_Record>;

  public final native func GetInitCooldownsItemHandle(index: Int32) -> wref<AIActionCooldown_Record>;

  public final native func InitCooldownsContains(item: wref<AIActionCooldown_Record>) -> Bool;

  public final native func Commands() -> array<CName>;

  public final native func GetCommandsCount() -> Int32;

  public final native func GetCommandsItem(index: Int32) -> CName;

  public final native func CommandsContains(item: CName) -> Bool;

  public final native func AllowBlendDuration() -> Float;

  public final native func AllowBlendPercCap() -> Float;

  public final native func TicketAcknowledgeTimeout() -> Float;

  public final native func FailIfAnimationNotStreamedIn() -> Bool;

  public final native func SubActionsCanCompleteAction() -> Bool;

  public final native func DisableAction() -> Bool;

  public final native func WaitForAnimationToLoad() -> Bool;

  public final native func DisableActionInMultiplayer() -> Bool;

  public final native func CompleteWithFailure() -> Bool;

  public final native func RevokingTicketCompletesAction() -> Bool;
}

public native class AIActionAnimData_Record extends TweakDBRecord {

  public final native func Direction() -> wref<AIActionAnimDirection_Record>;

  public final native func DirectionHandle() -> ref<AIActionAnimDirection_Record>;

  public final native func AnimSlot() -> wref<AIActionAnimSlot_Record>;

  public final native func AnimSlotHandle() -> ref<AIActionAnimSlot_Record>;

  public final native func AnimVariationSubAction() -> wref<AISubAction_Record>;

  public final native func AnimVariationSubActionHandle() -> ref<AISubAction_Record>;

  public final native func AnimFeature() -> CName;

  public final native func AnimVariation() -> Int32;

  public final native func WeaponOverride() -> Int32;

  public final native func MarginToPlayer() -> Float;

  public final native func RagdollOnDeath() -> Bool;

  public final native func UpdateMovePolicy() -> Bool;
}

public native class AIActionAnimSlot_Record extends TweakDBRecord {

  public final native func StartupSlide() -> wref<AIActionSlideData_Record>;

  public final native func StartupSlideHandle() -> ref<AIActionSlideData_Record>;

  public final native func LoopSlide() -> wref<AIActionSlideData_Record>;

  public final native func LoopSlideHandle() -> ref<AIActionSlideData_Record>;

  public final native func RecoverySlide() -> wref<AIActionSlideData_Record>;

  public final native func RecoverySlideHandle() -> ref<AIActionSlideData_Record>;

  public final native func UsePoseMatching() -> Bool;

  public final native func UseRootMotion() -> Bool;

  public final native func ResetRagdollOnStart() -> Bool;

  public final native func UseDynamicObjectsCheck() -> Bool;
}

public native class AIActionPhase_Record extends TweakDBRecord {

  public final native func ChangeNPCState() -> wref<AIActionChangeNPCState_Record>;

  public final native func ChangeNPCStateHandle() -> ref<AIActionChangeNPCState_Record>;

  public final native func DynamicDuration() -> wref<AISubAction_Record>;

  public final native func DynamicDurationHandle() -> ref<AISubAction_Record>;

  public final native func MovePolicy() -> wref<MovementPolicy_Record>;

  public final native func MovePolicyHandle() -> ref<MovementPolicy_Record>;

  public final native func NotRepeatPhaseCondition(out outList: array<wref<AIActionCondition_Record>>) -> Void;

  public final native func GetNotRepeatPhaseConditionCount() -> Int32;

  public final native func GetNotRepeatPhaseConditionItem(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func GetNotRepeatPhaseConditionItemHandle(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func NotRepeatPhaseConditionContains(item: wref<AIActionCondition_Record>) -> Bool;

  public final native func ToNextPhaseCondition(out outList: array<wref<AIActionCondition_Record>>) -> Void;

  public final native func GetToNextPhaseConditionCount() -> Int32;

  public final native func GetToNextPhaseConditionItem(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func GetToNextPhaseConditionItemHandle(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func ToNextPhaseConditionContains(item: wref<AIActionCondition_Record>) -> Bool;

  public final native func Repeat() -> Int32;

  public final native func Duration() -> Float;

  public final native func AnimationDuration() -> Float;

  public final native func ToNextPhaseConditionCheckInterval() -> Float;

  public final native func ConditionSuccessDuration() -> Float;

  public final native func UseDurationFromAnimSlot() -> Bool;

  public final native func CompleteActionWithFailureOnCondition() -> Bool;
}

public native class AIActionCondition_Record extends TweakDBRecord {

  public final native func BlockCount() -> wref<AIBlockCountCond_Record>;

  public final native func BlockCountHandle() -> ref<AIBlockCountCond_Record>;

  public final native func Target() -> wref<AITargetCond_Record>;

  public final native func TargetHandle() -> ref<AITargetCond_Record>;

  public final native func FriendlyFire() -> wref<AIFriendlyFireCond_Record>;

  public final native func FriendlyFireHandle() -> ref<AIFriendlyFireCond_Record>;

  public final native func PreviousAttack() -> wref<AIPreviousAttackCond_Record>;

  public final native func PreviousAttackHandle() -> ref<AIPreviousAttackCond_Record>;

  public final native func CanThrow() -> wref<AIThrowCond_Record>;

  public final native func CanThrowHandle() -> ref<AIThrowCond_Record>;

  public final native func Condition() -> wref<AIActionSubCondition_Record>;

  public final native func ConditionHandle() -> ref<AIActionSubCondition_Record>;

  public final native func OptimalDistance() -> wref<AIOptimalDistanceCond_Record>;

  public final native func OptimalDistanceHandle() -> ref<AIOptimalDistanceCond_Record>;

  public final native func DodgeCount() -> wref<AIDodgeCountCond_Record>;

  public final native func DodgeCountHandle() -> ref<AIDodgeCountCond_Record>;

  public final native func WeaponLockedOnTarget() -> wref<AIWeaponLockedOnTargetCond_Record>;

  public final native func WeaponLockedOnTargetHandle() -> ref<AIWeaponLockedOnTargetCond_Record>;

  public final native func Cover() -> wref<AICoverCond_Record>;

  public final native func CoverHandle() -> ref<AICoverCond_Record>;

  public final native func GoToCover() -> wref<AIGoToCoverCond_Record>;

  public final native func GoToCoverHandle() -> ref<AIGoToCoverCond_Record>;

  public final native func ValidCover() -> wref<AIValidCoversCond_Record>;

  public final native func ValidCoverHandle() -> ref<AIValidCoversCond_Record>;

  public final native func Hit() -> wref<AIHitCond_Record>;

  public final native func HitHandle() -> ref<AIHitCond_Record>;

  public final native func Workspot() -> wref<AIWorkspotCond_Record>;

  public final native func WorkspotHandle() -> ref<AIWorkspotCond_Record>;

  public final native func Security() -> wref<AISecurityCond_Record>;

  public final native func SecurityHandle() -> ref<AISecurityCond_Record>;

  public final native func Weapon() -> wref<AIHasWeapon_Record>;

  public final native func WeaponHandle() -> ref<AIHasWeapon_Record>;

  public final native func NpcType() -> wref<AINPCTypeCond_Record>;

  public final native func NpcTypeHandle() -> ref<AINPCTypeCond_Record>;

  public final native func Lookat(out outList: array<wref<AILookAtCond_Record>>) -> Void;

  public final native func GetLookatCount() -> Int32;

  public final native func GetLookatItem(index: Int32) -> wref<AILookAtCond_Record>;

  public final native func GetLookatItemHandle(index: Int32) -> wref<AILookAtCond_Record>;

  public final native func LookatContains(item: wref<AILookAtCond_Record>) -> Bool;

  public final native func WeakSpotAND(out outList: array<wref<AIWeakSpotCond_Record>>) -> Void;

  public final native func GetWeakSpotANDCount() -> Int32;

  public final native func GetWeakSpotANDItem(index: Int32) -> wref<AIWeakSpotCond_Record>;

  public final native func GetWeakSpotANDItemHandle(index: Int32) -> wref<AIWeakSpotCond_Record>;

  public final native func WeakSpotANDContains(item: wref<AIWeakSpotCond_Record>) -> Bool;

  public final native func CommandAND(out outList: array<wref<AICommandCond_Record>>) -> Void;

  public final native func GetCommandANDCount() -> Int32;

  public final native func GetCommandANDItem(index: Int32) -> wref<AICommandCond_Record>;

  public final native func GetCommandANDItemHandle(index: Int32) -> wref<AICommandCond_Record>;

  public final native func CommandANDContains(item: wref<AICommandCond_Record>) -> Bool;

  public final native func SlotOR(out outList: array<wref<AISlotCond_Record>>) -> Void;

  public final native func GetSlotORCount() -> Int32;

  public final native func GetSlotORItem(index: Int32) -> wref<AISlotCond_Record>;

  public final native func GetSlotORItemHandle(index: Int32) -> wref<AISlotCond_Record>;

  public final native func SlotORContains(item: wref<AISlotCond_Record>) -> Bool;

  public final native func SpatialAND(out outList: array<wref<AISpatialCond_Record>>) -> Void;

  public final native func GetSpatialANDCount() -> Int32;

  public final native func GetSpatialANDItem(index: Int32) -> wref<AISpatialCond_Record>;

  public final native func GetSpatialANDItemHandle(index: Int32) -> wref<AISpatialCond_Record>;

  public final native func SpatialANDContains(item: wref<AISpatialCond_Record>) -> Bool;

  public final native func SignalAND(out outList: array<wref<AISignalCond_Record>>) -> Void;

  public final native func GetSignalANDCount() -> Int32;

  public final native func GetSignalANDItem(index: Int32) -> wref<AISignalCond_Record>;

  public final native func GetSignalANDItemHandle(index: Int32) -> wref<AISignalCond_Record>;

  public final native func SignalANDContains(item: wref<AISignalCond_Record>) -> Bool;

  public final native func Reaction(out outList: array<wref<AIReactionCond_Record>>) -> Void;

  public final native func GetReactionCount() -> Int32;

  public final native func GetReactionItem(index: Int32) -> wref<AIReactionCond_Record>;

  public final native func GetReactionItemHandle(index: Int32) -> wref<AIReactionCond_Record>;

  public final native func ReactionContains(item: wref<AIReactionCond_Record>) -> Bool;

  public final native func StatPoolOR(out outList: array<wref<AIStatPoolCond_Record>>) -> Void;

  public final native func GetStatPoolORCount() -> Int32;

  public final native func GetStatPoolORItem(index: Int32) -> wref<AIStatPoolCond_Record>;

  public final native func GetStatPoolORItemHandle(index: Int32) -> wref<AIStatPoolCond_Record>;

  public final native func StatPoolORContains(item: wref<AIStatPoolCond_Record>) -> Bool;

  public final native func StatusEffectOR(out outList: array<wref<AIStatusEffectCond_Record>>) -> Void;

  public final native func GetStatusEffectORCount() -> Int32;

  public final native func GetStatusEffectORItem(index: Int32) -> wref<AIStatusEffectCond_Record>;

  public final native func GetStatusEffectORItemHandle(index: Int32) -> wref<AIStatusEffectCond_Record>;

  public final native func StatusEffectORContains(item: wref<AIStatusEffectCond_Record>) -> Bool;

  public final native func CalculateLineOfSightVector(out outList: array<wref<AICalculateLineOfSightVector_Record>>) -> Void;

  public final native func GetCalculateLineOfSightVectorCount() -> Int32;

  public final native func GetCalculateLineOfSightVectorItem(index: Int32) -> wref<AICalculateLineOfSightVector_Record>;

  public final native func GetCalculateLineOfSightVectorItemHandle(index: Int32) -> wref<AICalculateLineOfSightVector_Record>;

  public final native func CalculateLineOfSightVectorContains(item: wref<AICalculateLineOfSightVector_Record>) -> Bool;

  public final native func StatPoolAND(out outList: array<wref<AIStatPoolCond_Record>>) -> Void;

  public final native func GetStatPoolANDCount() -> Int32;

  public final native func GetStatPoolANDItem(index: Int32) -> wref<AIStatPoolCond_Record>;

  public final native func GetStatPoolANDItemHandle(index: Int32) -> wref<AIStatPoolCond_Record>;

  public final native func StatPoolANDContains(item: wref<AIStatPoolCond_Record>) -> Bool;

  public final native func SquadAND(out outList: array<wref<AISquadCond_Record>>) -> Void;

  public final native func GetSquadANDCount() -> Int32;

  public final native func GetSquadANDItem(index: Int32) -> wref<AISquadCond_Record>;

  public final native func GetSquadANDItemHandle(index: Int32) -> wref<AISquadCond_Record>;

  public final native func SquadANDContains(item: wref<AISquadCond_Record>) -> Bool;

  public final native func InventoryOR(out outList: array<wref<AIItemCond_Record>>) -> Void;

  public final native func GetInventoryORCount() -> Int32;

  public final native func GetInventoryORItem(index: Int32) -> wref<AIItemCond_Record>;

  public final native func GetInventoryORItemHandle(index: Int32) -> wref<AIItemCond_Record>;

  public final native func InventoryORContains(item: wref<AIItemCond_Record>) -> Bool;

  public final native func InventoryAND(out outList: array<wref<AIItemCond_Record>>) -> Void;

  public final native func GetInventoryANDCount() -> Int32;

  public final native func GetInventoryANDItem(index: Int32) -> wref<AIItemCond_Record>;

  public final native func GetInventoryANDItemHandle(index: Int32) -> wref<AIItemCond_Record>;

  public final native func InventoryANDContains(item: wref<AIItemCond_Record>) -> Bool;

  public final native func InTacticPosition(out outList: array<wref<AIInTacticPositionCond_Record>>) -> Void;

  public final native func GetInTacticPositionCount() -> Int32;

  public final native func GetInTacticPositionItem(index: Int32) -> wref<AIInTacticPositionCond_Record>;

  public final native func GetInTacticPositionItemHandle(index: Int32) -> wref<AIInTacticPositionCond_Record>;

  public final native func InTacticPositionContains(item: wref<AIInTacticPositionCond_Record>) -> Bool;

  public final native func WeakSpotOR(out outList: array<wref<AIWeakSpotCond_Record>>) -> Void;

  public final native func GetWeakSpotORCount() -> Int32;

  public final native func GetWeakSpotORItem(index: Int32) -> wref<AIWeakSpotCond_Record>;

  public final native func GetWeakSpotORItemHandle(index: Int32) -> wref<AIWeakSpotCond_Record>;

  public final native func WeakSpotORContains(item: wref<AIWeakSpotCond_Record>) -> Bool;

  public final native func CalculatePath(out outList: array<wref<AICalculatePathCond_Record>>) -> Void;

  public final native func GetCalculatePathCount() -> Int32;

  public final native func GetCalculatePathItem(index: Int32) -> wref<AICalculatePathCond_Record>;

  public final native func GetCalculatePathItemHandle(index: Int32) -> wref<AICalculatePathCond_Record>;

  public final native func CalculatePathContains(item: wref<AICalculatePathCond_Record>) -> Bool;

  public final native func AmmoCountAND(out outList: array<wref<AIAmmoCountCond_Record>>) -> Void;

  public final native func GetAmmoCountANDCount() -> Int32;

  public final native func GetAmmoCountANDItem(index: Int32) -> wref<AIAmmoCountCond_Record>;

  public final native func GetAmmoCountANDItemHandle(index: Int32) -> wref<AIAmmoCountCond_Record>;

  public final native func AmmoCountANDContains(item: wref<AIAmmoCountCond_Record>) -> Bool;

  public final native func CommandOR(out outList: array<wref<AICommandCond_Record>>) -> Void;

  public final native func GetCommandORCount() -> Int32;

  public final native func GetCommandORItem(index: Int32) -> wref<AICommandCond_Record>;

  public final native func GetCommandORItemHandle(index: Int32) -> wref<AICommandCond_Record>;

  public final native func CommandORContains(item: wref<AICommandCond_Record>) -> Bool;

  public final native func SquadOR(out outList: array<wref<AISquadCond_Record>>) -> Void;

  public final native func GetSquadORCount() -> Int32;

  public final native func GetSquadORItem(index: Int32) -> wref<AISquadCond_Record>;

  public final native func GetSquadORItemHandle(index: Int32) -> wref<AISquadCond_Record>;

  public final native func SquadORContains(item: wref<AISquadCond_Record>) -> Bool;

  public final native func SlotAND(out outList: array<wref<AISlotCond_Record>>) -> Void;

  public final native func GetSlotANDCount() -> Int32;

  public final native func GetSlotANDItem(index: Int32) -> wref<AISlotCond_Record>;

  public final native func GetSlotANDItemHandle(index: Int32) -> wref<AISlotCond_Record>;

  public final native func SlotANDContains(item: wref<AISlotCond_Record>) -> Bool;

  public final native func RestrictedMovementArea(out outList: array<wref<AIRestrictedMovementAreaCond_Record>>) -> Void;

  public final native func GetRestrictedMovementAreaCount() -> Int32;

  public final native func GetRestrictedMovementAreaItem(index: Int32) -> wref<AIRestrictedMovementAreaCond_Record>;

  public final native func GetRestrictedMovementAreaItemHandle(index: Int32) -> wref<AIRestrictedMovementAreaCond_Record>;

  public final native func RestrictedMovementAreaContains(item: wref<AIRestrictedMovementAreaCond_Record>) -> Bool;

  public final native func AmmoCountOR(out outList: array<wref<AIAmmoCountCond_Record>>) -> Void;

  public final native func GetAmmoCountORCount() -> Int32;

  public final native func GetAmmoCountORItem(index: Int32) -> wref<AIAmmoCountCond_Record>;

  public final native func GetAmmoCountORItemHandle(index: Int32) -> wref<AIAmmoCountCond_Record>;

  public final native func AmmoCountORContains(item: wref<AIAmmoCountCond_Record>) -> Bool;

  public final native func MovementOR(out outList: array<wref<AIMovementCond_Record>>) -> Void;

  public final native func GetMovementORCount() -> Int32;

  public final native func GetMovementORItem(index: Int32) -> wref<AIMovementCond_Record>;

  public final native func GetMovementORItemHandle(index: Int32) -> wref<AIMovementCond_Record>;

  public final native func MovementORContains(item: wref<AIMovementCond_Record>) -> Bool;

  public final native func Cooldown(out outList: array<wref<AICooldownCond_Record>>) -> Void;

  public final native func GetCooldownCount() -> Int32;

  public final native func GetCooldownItem(index: Int32) -> wref<AICooldownCond_Record>;

  public final native func GetCooldownItemHandle(index: Int32) -> wref<AICooldownCond_Record>;

  public final native func CooldownContains(item: wref<AICooldownCond_Record>) -> Bool;

  public final native func SignalOR(out outList: array<wref<AISignalCond_Record>>) -> Void;

  public final native func GetSignalORCount() -> Int32;

  public final native func GetSignalORItem(index: Int32) -> wref<AISignalCond_Record>;

  public final native func GetSignalORItemHandle(index: Int32) -> wref<AISignalCond_Record>;

  public final native func SignalORContains(item: wref<AISignalCond_Record>) -> Bool;

  public final native func VehicleOR(out outList: array<wref<AIVehicleCond_Record>>) -> Void;

  public final native func GetVehicleORCount() -> Int32;

  public final native func GetVehicleORItem(index: Int32) -> wref<AIVehicleCond_Record>;

  public final native func GetVehicleORItemHandle(index: Int32) -> wref<AIVehicleCond_Record>;

  public final native func VehicleORContains(item: wref<AIVehicleCond_Record>) -> Bool;

  public final native func SpatialOR(out outList: array<wref<AISpatialCond_Record>>) -> Void;

  public final native func GetSpatialORCount() -> Int32;

  public final native func GetSpatialORItem(index: Int32) -> wref<AISpatialCond_Record>;

  public final native func GetSpatialORItemHandle(index: Int32) -> wref<AISpatialCond_Record>;

  public final native func SpatialORContains(item: wref<AISpatialCond_Record>) -> Bool;

  public final native func MovementAND(out outList: array<wref<AIMovementCond_Record>>) -> Void;

  public final native func GetMovementANDCount() -> Int32;

  public final native func GetMovementANDItem(index: Int32) -> wref<AIMovementCond_Record>;

  public final native func GetMovementANDItemHandle(index: Int32) -> wref<AIMovementCond_Record>;

  public final native func MovementANDContains(item: wref<AIMovementCond_Record>) -> Bool;

  public final native func StatusEffectAND(out outList: array<wref<AIStatusEffectCond_Record>>) -> Void;

  public final native func GetStatusEffectANDCount() -> Int32;

  public final native func GetStatusEffectANDItem(index: Int32) -> wref<AIStatusEffectCond_Record>;

  public final native func GetStatusEffectANDItemHandle(index: Int32) -> wref<AIStatusEffectCond_Record>;

  public final native func StatusEffectANDContains(item: wref<AIStatusEffectCond_Record>) -> Bool;

  public final native func VehicleAND(out outList: array<wref<AIVehicleCond_Record>>) -> Void;

  public final native func GetVehicleANDCount() -> Int32;

  public final native func GetVehicleANDItem(index: Int32) -> wref<AIVehicleCond_Record>;

  public final native func GetVehicleANDItemHandle(index: Int32) -> wref<AIVehicleCond_Record>;

  public final native func VehicleANDContains(item: wref<AIVehicleCond_Record>) -> Bool;

  public final native func Ability(out outList: array<wref<AIAbilityCond_Record>>) -> Void;

  public final native func GetAbilityCount() -> Int32;

  public final native func GetAbilityItem(index: Int32) -> wref<AIAbilityCond_Record>;

  public final native func GetAbilityItemHandle(index: Int32) -> wref<AIAbilityCond_Record>;

  public final native func AbilityContains(item: wref<AIAbilityCond_Record>) -> Bool;

  public final native func State(out outList: array<wref<AIStateCond_Record>>) -> Void;

  public final native func GetStateCount() -> Int32;

  public final native func GetStateItem(index: Int32) -> wref<AIStateCond_Record>;

  public final native func GetStateItemHandle(index: Int32) -> wref<AIStateCond_Record>;

  public final native func StateContains(item: wref<AIStateCond_Record>) -> Bool;

  public final native func Tresspassing(out outList: array<wref<AITresspassingCond_Record>>) -> Void;

  public final native func GetTresspassingCount() -> Int32;

  public final native func GetTresspassingItem(index: Int32) -> wref<AITresspassingCond_Record>;

  public final native func GetTresspassingItemHandle(index: Int32) -> wref<AITresspassingCond_Record>;

  public final native func TresspassingContains(item: wref<AITresspassingCond_Record>) -> Bool;
}

public native class AIActionTarget_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func TrackingMode() -> wref<TrackingMode_Record>;

  public final native func TrackingModeHandle() -> ref<TrackingMode_Record>;

  public final native func BehaviorArgumentName() -> CName;

  public final native func EnumName() -> CName;

  public final native func TargetSlot() -> CName;

  public final native func IsObject() -> Bool;

  public final native func IsCoverID() -> Bool;

  public final native func IsPosition() -> Bool;

  public final native func Type() -> gamedataAIActionTarget;
}

public static native func Cast(a: Int32) -> Uint64;

public abstract native class AITweakActionSystem extends IGameSystem {

  public final native func EvaluateActionCondition(ctx: script_ref<ScriptExecutionContext>, record: ref<AIActionCondition_Record>) -> Bool;

  public final native func EvaluateActionTargetObject(ctx: script_ref<ScriptExecutionContext>, recordId: TweakDBID, out object: ref<GameObject>) -> Bool;

  public final native func EvaluateActionTargetAll(ctx: script_ref<ScriptExecutionContext>, recordId: TweakDBID, predictionTime: Float, out object: ref<GameObject>, out position: Vector4, out coverId: Uint64) -> Bool;

  public final native func IsTweakCompositeAlternativesLimitEnabled(ctx: script_ref<ScriptExecutionContext>, playerInCombat: Bool) -> Bool;

  public final native func GetTweakCompositeAlternativesLimit(ctx: script_ref<ScriptExecutionContext>) -> Uint32;
}

public native class TrackingMode_Record extends TweakDBRecord {

  public final native func EnumName() -> String;

  public final native func EnumComment() -> String;

  public final native func Type() -> gamedataTrackingMode;
}

public static native func OperatorAssignAdd(out a: Vector4, b: Vector4) -> Vector4;

public static native func OperatorGreater(a: Uint64, b: Uint64) -> Bool;

public struct HitHistoryItem {

  public let instigator: wref<GameObject>;

  public let hitTime: Float;

  public let isMelee: Bool;
}

public static native func OperatorGreaterEqual(a: Uint32, b: Uint32) -> Bool;

public native class SensorObjectComponent extends IPlacedComponent {

  public final native func SetSensorObjectType(objectType: gamedataSenseObjectType) -> Bool;

  public final native func GetTimeSinceLastEntityVisible(entityID: EntityID) -> Float;

  public final native func SetMainTrackedObject(target: wref<GameObject>) -> Bool;

  public final native func SetMainTrackedObjectTraceZOffset(traceType: AdditionalTraceType, zOffset: Float) -> Bool;

  public final native func GetDistToTraceEndFromPosToMainTrackedObject(traceType: AdditionalTraceType) -> Float;

  public final native func SetForcedSensesTracing(targetObjectType: gamedataSenseObjectType, attitudeToTarget: EAIAttitude) -> Bool;

  public final native func RemoveForcedSensesTracing(targetObjectType: gamedataSenseObjectType, attitudeToTarget: EAIAttitude) -> Bool;

  public final native func SetTickDistanceOverride(overrideDistance: Float) -> Bool;

  public final native func SetHasPierceableWapon(hasTechWeapon: Bool) -> Bool;
}

public native class AISlotCond_Record extends AIItemCond_Record {

  public final native func RequestedTriggerModes() -> wref<TriggerMode_Record>;

  public final native func RequestedTriggerModesHandle() -> ref<TriggerMode_Record>;

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func Slot() -> wref<AttachmentSlot_Record>;

  public final native func SlotHandle() -> ref<AttachmentSlot_Record>;

  public final native func CheckIfEmptySlotIsSpawningItem() -> Int32;
}

public native class NPCEquipmentItemPool_Record extends NPCEquipmentGroupEntry_Record {

  public final native func Pool(out outList: array<wref<NPCEquipmentItemsPoolEntry_Record>>) -> Void;

  public final native func GetPoolCount() -> Int32;

  public final native func GetPoolItem(index: Int32) -> wref<NPCEquipmentItemsPoolEntry_Record>;

  public final native func GetPoolItemHandle(index: Int32) -> wref<NPCEquipmentItemsPoolEntry_Record>;

  public final native func PoolContains(item: wref<NPCEquipmentItemsPoolEntry_Record>) -> Bool;
}

public native class NPCEquipmentItemsPoolEntry_Record extends TweakDBRecord {

  public final native func Items(out outList: array<wref<NPCEquipmentItem_Record>>) -> Void;

  public final native func GetItemsCount() -> Int32;

  public final native func GetItemsItem(index: Int32) -> wref<NPCEquipmentItem_Record>;

  public final native func GetItemsItemHandle(index: Int32) -> wref<NPCEquipmentItem_Record>;

  public final native func ItemsContains(item: wref<NPCEquipmentItem_Record>) -> Bool;

  public final native func MinLevel() -> Int32;

  public final native func Weight() -> Float;
}

public static native func OperatorSubtract(a: Uint64, b: Uint64) -> Uint64;

public static native func Cast(a: Float) -> Uint64;

public static native func PowF(a: Float, x: Float) -> Float;

public static native func OperatorXor(a: Uint32, b: Uint32) -> Uint32;

public native class NPCEquipmentGroup_Record extends TweakDBRecord {

  public final native func EquipmentItems(out outList: array<wref<NPCEquipmentGroupEntry_Record>>) -> Void;

  public final native func GetEquipmentItemsCount() -> Int32;

  public final native func GetEquipmentItemsItem(index: Int32) -> wref<NPCEquipmentGroupEntry_Record>;

  public final native func GetEquipmentItemsItemHandle(index: Int32) -> wref<NPCEquipmentGroupEntry_Record>;

  public final native func EquipmentItemsContains(item: wref<NPCEquipmentGroupEntry_Record>) -> Bool;
}

public native class NPCEquipmentItem_Record extends NPCEquipmentGroupEntry_Record {

  public final native func OnBodySlot() -> wref<AttachmentSlot_Record>;

  public final native func OnBodySlotHandle() -> ref<AttachmentSlot_Record>;

  public final native func Item() -> wref<Item_Record>;

  public final native func ItemHandle() -> ref<Item_Record>;

  public final native func EquipSlot() -> wref<AttachmentSlot_Record>;

  public final native func EquipSlotHandle() -> ref<AttachmentSlot_Record>;

  public final native func EquipCondition(out outList: array<wref<AIActionCondition_Record>>) -> Void;

  public final native func GetEquipConditionCount() -> Int32;

  public final native func GetEquipConditionItem(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func GetEquipConditionItemHandle(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func EquipConditionContains(item: wref<AIActionCondition_Record>) -> Bool;

  public final native func UnequipCondition(out outList: array<wref<AIActionCondition_Record>>) -> Void;

  public final native func GetUnequipConditionCount() -> Int32;

  public final native func GetUnequipConditionItem(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func GetUnequipConditionItemHandle(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func UnequipConditionContains(item: wref<AIActionCondition_Record>) -> Bool;
}

public struct NPCItemToEquip {

  public let itemID: ItemID;

  public let slotID: TweakDBID;

  public let bodySlotID: TweakDBID;
}

public native class AIAbilityCond_Record extends AIActionSubCondition_Record {

  public final native func Abilities(out outList: array<wref<GameplayAbility_Record>>) -> Void;

  public final native func GetAbilitiesCount() -> Int32;

  public final native func GetAbilitiesItem(index: Int32) -> wref<GameplayAbility_Record>;

  public final native func GetAbilitiesItemHandle(index: Int32) -> wref<GameplayAbility_Record>;

  public final native func AbilitiesContains(item: wref<GameplayAbility_Record>) -> Bool;
}

public native class AIStatusEffectCond_Record extends AIActionSubCondition_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func StatusEffect() -> wref<StatusEffect_Record>;

  public final native func StatusEffectHandle() -> ref<StatusEffect_Record>;

  public final native func StatusEffectType() -> wref<StatusEffectType_Record>;

  public final native func StatusEffectTypeHandle() -> ref<StatusEffectType_Record>;

  public final native func GameplayTag() -> CName;
}

public native class AISignalCond_Record extends AIActionSubCondition_Record {

  public final native func Name() -> CName;
}

public native class AISpatialCond_Record extends AIActionSubCondition_Record {

  public final native func TargetOpt() -> wref<AIActionTarget_Record>;

  public final native func TargetOptHandle() -> ref<AIActionTarget_Record>;

  public final native func Source() -> wref<AIActionTarget_Record>;

  public final native func SourceHandle() -> ref<AIActionTarget_Record>;

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func SpatialHintMults() -> Vector3;

  public final native func ZDiff() -> Vector2;

  public final native func ConeAngle() -> Vector2;

  public final native func Distance() -> Vector2;

  public final native func AngleDirection() -> Int32;

  public final native func PredictionTime() -> Float;

  public final native func UseTargetPOV() -> Bool;
}

public native struct CombatSpaceHelper {

  public final static native func GetDistanceMultiplier(owner: ref<GameObject>, multipliers: Vector3) -> Float;
}

public static native func OperatorEqual(a: Uint64, b: Uint64) -> Bool;

public native class AIMovementCond_Record extends AIActionSubCondition_Record {

  public final native func Destination() -> wref<AIActionTarget_Record>;

  public final native func DestinationHandle() -> ref<AIActionTarget_Record>;

  public final native func MovementType() -> CName;

  public final native func OffMeshLinkType() -> CName;

  public final native func SpatialHintMults() -> Vector3;

  public final native func Slope() -> Vector2;

  public final native func DistanceToDestination() -> Vector2;

  public final native func ConstrainedByRestrictedArea() -> Int32;

  public final native func LineOfSightFailed() -> Int32;

  public final native func IsUsingOffMeshLink() -> Int32;

  public final native func IsPauseByDynamicCollision() -> Int32;

  public final native func IsMoving() -> Int32;

  public final native func IsEvaluated() -> Int32;

  public final native func PathFindingFailed() -> Int32;

  public final native func IsDestinationCalculated() -> Int32;

  public final native func IsDestinationChanged() -> Int32;
}

public native class MovePoliciesComponent extends IComponent {

  public final native func AddPolicies(object: ref<MovePolicies>) -> Void;

  public final native func PopPolicies(object: ref<MovePolicies>) -> Void;

  public final native func GetTopPolicies() -> ref<MovePolicies>;

  public final native func GetDestination() -> Vector4;

  public final native func GetDistanceToDestination() -> Float;

  public final native func GetDistanceToDestinationFrom(destination: Vector4) -> Float;

  public final native func GetClosestPointToPath(point: Vector4) -> Vector4;

  public final native func GetInclineAngle() -> Float;

  public final native func ChangeMovementType(movementType: moveMovementType) -> Bool;

  public final native func IsPathfindingFailed() -> Bool;

  public final native func IsConstrainedByRestrictedArea() -> Bool;

  public final native func HasLineOfSightFailed() -> Bool;

  public final native func IsInIdle() -> Bool;

  public final native func IsTopPolicyEvaluated() -> Bool;

  public final native func IsPausedByDynamicCollision() -> Bool;

  public final native func IsDestinationCalculated() -> Bool;

  public final native func IsDestinationChanged() -> Bool;

  public final native func IsOnOffMeshLink() -> Bool;

  public final native func GetOffMeshLinkType(out type: worldOffMeshConnectionType) -> Bool;

  public final native func GetExplorationOffMeshLinkType() -> moveExplorationType;

  public final native func IsOnStairs() -> Bool;
}

public native class MovePolicies extends IScriptable {

  public final native func SetDestinationPosition(position: Vector4) -> Void;

  public final native func SetInvalidDestinationPosition() -> Void;

  public final native func SetDestinationObject(object: ref<GameObject>) -> Void;

  public final native func SetDestinationCover(cover: Uint64) -> Void;

  public final native func SetStrafingTarget(object: ref<GameObject>) -> Void;

  public final native func SetStrafingPosition(position: Vector4) -> Void;

  public final native func SetDestinationOrientation(oreiantation: Quaternion) -> Void;

  public final native func SetDistancePolicy(distance: Float, tolerance: Float) -> Void;

  public final native func SetMaxZDiff(zDiff: Float) -> Void;

  public final native func SetMinDistancePolicy(minDistance: Float) -> Void;

  public final native func SetStrafingPredictionTime(strafingPredictionTime: Float, strafingPredictionVelocityMax: Float) -> Void;

  public final native func SetDynamicTargetUpdateTimer(updateTimer: Float, distance: Float) -> Void;

  public final native func SetStrafingRotationOffset(angle: Float) -> Void;

  public final native func SetCirclingPolicy(direction: moveCirclingDirection) -> Void;

  public final native func SetMovementType(movementType: moveMovementType) -> Void;

  public final native func SetStopOnObstacle(stopOnObstacle: Bool) -> Void;

  public final native func SetAvoidObstacleWithinTolerance(avoidWiyhinTolerance: Bool) -> Void;

  public final native func SetKeepLineOfSight(los: moveLineOfSight) -> Void;

  public final native func SetGetOutOfWay(getOutOfWay: Bool) -> Void;

  public final native func SetUseLineOfSitePrecheck(precheck: Bool) -> Void;

  public final native func SetUseFollowSlots(use: Bool) -> Void;

  public final native func SetUseSymmetricAnglesScores(use: Bool) -> Void;

  public final native func SetSquadInfo(squadIndex: Uint32, squadSize: Uint32) -> Void;

  public final native func SetCollisionAvoidancePolicy(avoidance: Bool, reservation: Bool) -> Void;

  public final native func SetInRestrictedArea(inRestrictedArea: Bool) -> Void;

  public final native func SetAvoidSafeArea(inRestrictedArea: Bool) -> Void;

  public final native func SetAvoidThreat(avoidThreat: Bool) -> Void;

  public final native func SetUseStartStop(useStart: Bool, useStop: Bool) -> Void;

  public final native func SetIgnoreNavigation(ignore: Bool) -> Void;

  public final native func SetUseOffMeshAllowedTags(useOffMeshBlockedTags: Bool) -> Void;

  public final native func AddAllowedTag(tag: CName) -> Void;

  public final native func SetUseOffMeshBlockedTags(useOffMeshAllowedTags: Bool) -> Void;

  public final native func AddBlockedTag(tag: CName) -> Void;

  public final native func GetMovementType() -> moveMovementType;

  public final native func SetIdleTurnsDeadZoneAngle(angle: Float) -> Void;

  public final native func GetIdleTurnsDeadZoneAngle() -> Float;

  public final native func SetPositionProvider(provider: ref<IPositionProvider>) -> Void;

  public final native func SetStrafingPositionProvider(provider: ref<IPositionProvider>) -> Void;

  public final native func SetCalculateStartTangent(calculateTangent: Bool) -> Void;

  public final native func SetDebugName(debugName: CName) -> Void;

  public final native func SetTweakDBID(id: TweakDBID) -> Void;

  public final native func SetMaxPathLengthToDirectDistanceRatioCurve(curveName: CName) -> Void;

  public final native func GetMaxPathLengthToDirectDistanceRatioCurve() -> CName;

  public final native func SetMaxPathLength(length: Float) -> Void;

  public final native func GetMaxPathLength() -> Float;

  public final native func SetLocalTargetOffset(position: Vector4) -> Void;

  public final static native func GetInvalidPos() -> Vector4;

  public final native func SetCostModCircle(costModCircle: ref<NavigationCostModCircle>) -> Void;
}

public native class AICommandCond_Record extends AIActionSubCondition_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func HasCommands() -> array<CName>;

  public final native func GetHasCommandsCount() -> Int32;

  public final native func GetHasCommandsItem(index: Int32) -> CName;

  public final native func HasCommandsContains(item: CName) -> Bool;

  public final native func HasNewOrOverridenCommands() -> array<CName>;

  public final native func GetHasNewOrOverridenCommandsCount() -> Int32;

  public final native func GetHasNewOrOverridenCommandsItem(index: Int32) -> CName;

  public final native func HasNewOrOverridenCommandsContains(item: CName) -> Bool;
}

public native class AISquadCond_Record extends AIActionSubCondition_Record {

  public final native func HasTickets(out outList: array<wref<AITicketType_Record>>) -> Void;

  public final native func GetHasTicketsCount() -> Int32;

  public final native func GetHasTicketsItem(index: Int32) -> wref<AITicketType_Record>;

  public final native func GetHasTicketsItemHandle(index: Int32) -> wref<AITicketType_Record>;

  public final native func HasTicketsContains(item: wref<AITicketType_Record>) -> Bool;

  public final native func TicketsConditionCheck(out outList: array<wref<AITicketType_Record>>) -> Void;

  public final native func GetTicketsConditionCheckCount() -> Int32;

  public final native func GetTicketsConditionCheckItem(index: Int32) -> wref<AITicketType_Record>;

  public final native func GetTicketsConditionCheckItemHandle(index: Int32) -> wref<AITicketType_Record>;

  public final native func TicketsConditionCheckContains(item: wref<AITicketType_Record>) -> Bool;
}

public native class AISquadAvoidLastFilter_Record extends AITicketFilter_Record {
}

public native class AISquadFilterByAICondition_Record extends AITicketFilter_Record {

  public final native func Condition() -> wref<AIActionCondition_Record>;

  public final native func ConditionHandle() -> ref<AIActionCondition_Record>;
}

public native class AISquadInSectorFilter_Record extends AITicketFilter_Record {

  public final native func Sectors(out outList: array<wref<AISectorType_Record>>) -> Void;

  public final native func GetSectorsCount() -> Int32;

  public final native func GetSectorsItem(index: Int32) -> wref<AISectorType_Record>;

  public final native func GetSectorsItemHandle(index: Int32) -> wref<AISectorType_Record>;

  public final native func SectorsContains(item: wref<AISectorType_Record>) -> Bool;
}

public native class AITacticTicket_Record extends AITicket_Record {

  public final native func Sectors(out outList: array<wref<AISectorType_Record>>) -> Void;

  public final native func GetSectorsCount() -> Int32;

  public final native func GetSectorsItem(index: Int32) -> wref<AISectorType_Record>;

  public final native func GetSectorsItemHandle(index: Int32) -> wref<AISectorType_Record>;

  public final native func SectorsContains(item: wref<AISectorType_Record>) -> Bool;

  public final native func TacticTimeout() -> Float;

  public final native func OffensiveTactic() -> Bool;
}

public native class AISectorType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;
}

public native class CombatAlley extends IScriptable {

  public final native func GetSector(pos: Vector4) -> AICombatSectorType;

  public final native func GetDistanceFromSector(sector: AICombatSectorType, pos: Vector4) -> Float;

  public final native func GetFurtherstMemberFromSector(sector: AICombatSectorType) -> ref<Entity>;

  public final native func GetClosestMemberFromSector(sector: AICombatSectorType) -> ref<Entity>;

  public final native func GetReferencePoint() -> Vector4;

  public final native func GetTargetPoint() -> Vector4;
}

public native class AISquadJustSelfFilter_Record extends AITicketFilter_Record {
}

public native class AISquadSpatialForOwnTarget_Record extends AITicketFilter_Record {

  public final native func Spatial() -> wref<AISpatialCond_Record>;

  public final native func SpatialHandle() -> ref<AISpatialCond_Record>;
}

public native class AISquadFilterOwnTargetSpotted_Record extends AITicketFilter_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;
}

public native class AISquadItemTypePriorityFilter_Record extends AISquadItemPriorityFilter_Record {

  public final native func Types(out outList: array<wref<ItemType_Record>>) -> Void;

  public final native func GetTypesCount() -> Int32;

  public final native func GetTypesItem(index: Int32) -> wref<ItemType_Record>;

  public final native func GetTypesItemHandle(index: Int32) -> wref<ItemType_Record>;

  public final native func TypesContains(item: wref<ItemType_Record>) -> Bool;
}

public native class AISquadItemCategoryPriorityFilter_Record extends AISquadItemPriorityFilter_Record {

  public final native func Categories(out outList: array<wref<ItemCategory_Record>>) -> Void;

  public final native func GetCategoriesCount() -> Int32;

  public final native func GetCategoriesItem(index: Int32) -> wref<ItemCategory_Record>;

  public final native func GetCategoriesItemHandle(index: Int32) -> wref<ItemCategory_Record>;

  public final native func CategoriesContains(item: wref<ItemCategory_Record>) -> Bool;
}

public native class AISquadORCondition_Record extends AITicketCheck_Record {

  public final native func OR(out outList: array<wref<AITicketCheck_Record>>) -> Void;

  public final native func GetORCount() -> Int32;

  public final native func GetORItem(index: Int32) -> wref<AITicketCheck_Record>;

  public final native func GetORItemHandle(index: Int32) -> wref<AITicketCheck_Record>;

  public final native func ORContains(item: wref<AITicketCheck_Record>) -> Bool;
}

public native class AISquadANDCondition_Record extends AITicketCheck_Record {

  public final native func AND(out outList: array<wref<AITicketCheck_Record>>) -> Void;

  public final native func GetANDCount() -> Int32;

  public final native func GetANDItem(index: Int32) -> wref<AITicketCheck_Record>;

  public final native func GetANDItemHandle(index: Int32) -> wref<AITicketCheck_Record>;

  public final native func ANDContains(item: wref<AITicketCheck_Record>) -> Bool;
}

public native class AISquadMembersAmountCheck_Record extends AITicketCheck_Record {

  public final native func MaxAmount() -> Int32;

  public final native func MinAmount() -> Int32;

  public final native func CountSelf() -> Bool;
}

public native class AISquadContainsSelfCheck_Record extends AITicketCheck_Record {
}

public native class AIStatPoolCond_Record extends AIActionSubCondition_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func StatPool() -> wref<StatPool_Record>;

  public final native func StatPoolHandle() -> ref<StatPool_Record>;

  public final native func Percentage() -> Vector2;

  public final native func IsIncreasing() -> Int32;
}

public native class AIAmmoCountCond_Record extends AIActionSubCondition_Record {

  public final native func WeaponSlot() -> wref<AttachmentSlot_Record>;

  public final native func WeaponSlotHandle() -> ref<AttachmentSlot_Record>;

  public final native func Percentage() -> Vector2;

  public final native func Max() -> Int32;

  public final native func Min() -> Int32;
}

public static native func OperatorLess(a: Uint32, b: Uint32) -> Bool;

public abstract native class WeakspotComponent extends IComponent {

  public final native const func GetWeakspots(out outWeakspots: array<wref<WeakspotObject>>) -> Void;
}

public native class AIWeakSpotCond_Record extends AIActionSubCondition_Record {

  public final native func Weakspot() -> wref<Weakspot_Record>;

  public final native func WeakspotHandle() -> ref<Weakspot_Record>;

  public final native func IncludeDestroyed() -> Bool;
}

public native class WeakspotObject extends GameObject {

  public final native const func GetRecord() -> wref<Weakspot_Record>;

  public final native func SetReplicationInstigator(instigator: wref<GameObject>) -> Void;

  public final native const func GetReplicationInstigator() -> wref<GameObject>;
}

public native class AIVehicleCond_Record extends AIActionSubCondition_Record {

  public final native func Vehicle() -> wref<AIActionTarget_Record>;

  public final native func VehicleHandle() -> ref<AIActionTarget_Record>;

  public final native func HasTags() -> array<CName>;

  public final native func GetHasTagsCount() -> Int32;

  public final native func GetHasTagsItem(index: Int32) -> CName;

  public final native func HasTagsContains(item: CName) -> Bool;

  public final native func FreeSlots(out outList: array<wref<VehicleSeat_Record>>) -> Void;

  public final native func GetFreeSlotsCount() -> Int32;

  public final native func GetFreeSlotsItem(index: Int32) -> wref<VehicleSeat_Record>;

  public final native func GetFreeSlotsItemHandle(index: Int32) -> wref<VehicleSeat_Record>;

  public final native func FreeSlotsContains(item: wref<VehicleSeat_Record>) -> Bool;

  public final native func ActivePassangers() -> Vector2;

  public final native func CurrentSpeed() -> Vector2;

  public final native func DriverCheck() -> Int32;
}

public native class AITresspassingCond_Record extends AIActionSubCondition_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func CheckSafeArea() -> Bool;
}

public final native class SafeAreaManager extends ISafeAreaManager {

  public final native func IsPointInSafeArea(point: Vector4) -> Bool;
}

public native class AIRestrictedMovementAreaCond_Record extends AIActionSubCondition_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;
}

public native class AICalculatePathCond_Record extends AIActionSubCondition_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func AllowedOffMeshTags() -> array<CName>;

  public final native func GetAllowedOffMeshTagsCount() -> Int32;

  public final native func GetAllowedOffMeshTagsItem(index: Int32) -> CName;

  public final native func AllowedOffMeshTagsContains(item: CName) -> Bool;

  public final native func StartPositionOffset() -> Vector3;

  public final native func DirectionAngle() -> Float;

  public final native func Distance() -> Float;

  public final native func Tolerance() -> Float;

  public final native func CheckStraightPath() -> Bool;

  public final native func CheckDynamicObstacle() -> Bool;
}

public native struct AIPositionSpec {

  public native let entity: wref<Entity>;

  public native let worldPosition: WorldPosition;

  public final static native func IsEmpty(position: AIPositionSpec) -> Bool;

  public final static native func IsEntity(position: AIPositionSpec) -> Bool;

  public final static native func IsWorldPosition(position: AIPositionSpec) -> Bool;

  public final static native func GetEntity(position: AIPositionSpec) -> ref<Entity>;

  public final static native func GetWorldPosition(position: AIPositionSpec) -> Vector4;

  public final static native func SetEntity(aiPositionSpec: AIPositionSpec, entity: wref<Entity>) -> Void;

  public final static native func SetWorldPosition(aiPositionSpec: script_ref<AIPositionSpec>, position: WorldPosition) -> Void;
}

public native struct AINavigationSystemQuery {

  public native let source: AIPositionSpec;

  public native let target: AIPositionSpec;

  public native let allowedTags: array<CName>;

  public native let blockedTags: array<CName>;
}

public native struct AINavigationSystemResult {

  public native let hasFailed: Bool;

  public native let hasPath: Bool;

  public native let hasClosestPointOnNavmesh: Bool;

  public native let hasClosestReachablePoint: Bool;

  public native let lastSourcePosition: WorldPosition;

  public native let lastTargetPosition: WorldPosition;

  public native let closestPointOnNavmesh: WorldPosition;

  public native let closestReachablePoint: WorldPosition;
}

public native class InfluenceComponent extends IPlacedComponent {

  public final native func IsLineEmpty(startPoint: Vector4, endPoint: Vector4, opt ignoredObject: ref<GameObject>) -> gameinfluenceTestLineResult;

  public final native func IsPositionEmpty(startPoint: Vector4, opt ignoredObject: ref<GameObject>) -> gameinfluenceCollisionTestOutcome;

  public final native func SetReservationRadius(radius: Float) -> Void;
}

public native class NavigationFindWallResult extends IScriptable {

  public native let hitPosition: Vector4;

  public native let isHit: Bool;

  public native let status: worldNavigationRequestStatus;
}

public native class AICalculateLineOfSightVector_Record extends AIActionSubCondition_Record {

  public final native func StartPosition() -> wref<AIActionTarget_Record>;

  public final native func StartPositionHandle() -> ref<AIActionTarget_Record>;

  public final native func EndPosition() -> wref<AIActionTarget_Record>;

  public final native func EndPositionHandle() -> ref<AIActionTarget_Record>;

  public final native func StartPositionOffset() -> Vector3;

  public final native func EndPositionOffset() -> Vector3;

  public final native func IgnoreTransparentSurfaces() -> Bool;
}

public final native class SenseManager extends ISenseManager {

  public final native func IsPositionVisible(start: Vector4, end: Vector4) -> Bool;

  public final native func IsObjectVisible(source: EntityID, target: EntityID) -> Bool;
}

public native class AIReactionCond_Record extends AIActionSubCondition_Record {

  public final native func Preset() -> wref<ReactionPreset_Record>;

  public final native func PresetHandle() -> ref<ReactionPreset_Record>;

  public final native func ThresholdValue() -> wref<StatPool_Record>;

  public final native func ThresholdValueHandle() -> ref<StatPool_Record>;

  public final native func StimType(out outList: array<wref<StimType_Record>>) -> Void;

  public final native func GetStimTypeCount() -> Int32;

  public final native func GetStimTypeItem(index: Int32) -> wref<StimType_Record>;

  public final native func GetStimTypeItemHandle(index: Int32) -> wref<StimType_Record>;

  public final native func StimTypeContains(item: wref<StimType_Record>) -> Bool;

  public final native func ReactionBehaviorName() -> CName;

  public final native func ValidStimPosition() -> Bool;

  public final native func InvestigateController() -> Bool;
}

public class AIReactionData extends IScriptable {

  public let reactionPriority: Int32;

  public let reactionBehaviorName: gamedataOutput;

  public let reactionBehaviorAIPriority: Float;

  public let reactionCooldown: Float;

  public let stimTarget: wref<GameObject>;

  public let stimSource: Vector4;

  public let stimType: gamedataStimType;

  public let stimPriority: gamedataStimPriority;

  public let stimRecord: ref<Stim_Record>;

  public let stimInvestigateData: stimInvestigateData;

  public let stimEventData: StimEventData;

  public let initAnimInWorkspot: Bool;

  public let validTillTimeStamp: Float;

  public let recentReactionTimeStamp: Float;

  public let escalateProvoke: Bool;
}

public native class StimType_Record extends TweakDBRecord {

  public final native func Comment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataStimType;
}

public native class AILookAtCond_Record extends AIActionSubCondition_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func RightArmLookAtActive() -> Int32;
}

public native class AIStateCond_Record extends AIActionSubCondition_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func InStates() -> array<CName>;

  public final native func GetInStatesCount() -> Int32;

  public final native func GetInStatesItem(index: Int32) -> CName;

  public final native func InStatesContains(item: CName) -> Bool;

  public final native func CheckAllTypes() -> Bool;
}

public struct AIActionNPCStates {

  public let highLevelStates: array<gamedataNPCHighLevelState>;

  public let upperBodyStates: array<gamedataNPCUpperBodyState>;

  public let stanceStates: array<gamedataNPCStanceState>;

  public let behaviorStates: array<gamedataNPCBehaviorState>;

  public let defenseMode: array<gamedataDefenseMode>;

  public let locomotionMode: array<gamedataLocomotionMode>;
}

public struct AIActionPlayerStates {

  public let locomotionStates: array<gamePSMLocomotionStates>;

  public let upperBodyStates: array<gamePSMUpperBodyStates>;

  public let meleeStates: array<gamePSMMelee>;

  public let zoneStates: array<gamePSMZones>;

  public let bodyCarryStates: array<gamePSMBodyCarrying>;

  public let combatStates: array<gamePSMCombat>;
}

public struct AIActionTargetStates {

  public let npcStates: AIActionNPCStates;

  public let playerStates: AIActionPlayerStates;
}

public native class AIIsOnNavmeshCond_Record extends AIActionSubCondition_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func Radius() -> Float;
}

public native class AIExtendTargetCirclingCond_Record extends AIActionSubCondition_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func DestinationTarget() -> wref<AIActionTarget_Record>;

  public final native func DestinationTargetHandle() -> ref<AIActionTarget_Record>;

  public final native func SpreadIncreaseAngle() -> Float;
}

public native class AIPreviousAttackCond_Record extends AIActionSubCondition_Record {

  public final native func PreviousAttackName() -> array<CName>;

  public final native func GetPreviousAttackNameCount() -> Int32;

  public final native func GetPreviousAttackNameItem(index: Int32) -> CName;

  public final native func PreviousAttackNameContains(item: CName) -> Bool;

  public final native func TimeWindow() -> Float;
}

public abstract class AIRelatedComponents extends ScriptableComponent {
}

public abstract class AIMandatoryComponents extends AIRelatedComponents {
}

public native class AnimFeature_HitReactionsData extends AnimFeature {

  public native let hitDirection: Int32;

  public native let hitIntensity: Int32;

  public native let hitType: Int32;

  public native let hitBodyPart: Int32;

  public native let npcMovementSpeed: Int32;

  public native let npcMovementDirection: Int32;

  public native let stance: Int32;

  public native let animVariation: Int32;

  public native let hitSource: Int32;

  public native let useInitialRotation: Bool;

  public native let hitDirectionWs: Vector4;

  public native let angleToAttack: Float;

  public native let initialRotationDuration: Float;
}

public native class Attack_Melee_Record extends Attack_GameEffect_Record {

  public final native func AttackSubtype() -> wref<AttackSubtype_Record>;

  public final native func AttackSubtypeHandle() -> ref<AttackSubtype_Record>;

  public final native func AttackDirection() -> wref<AttackDirection_Record>;

  public final native func AttackDirectionHandle() -> ref<AttackDirection_Record>;

  public final native func StaminaCost(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetStaminaCostCount() -> Int32;

  public final native func GetStaminaCostItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetStaminaCostItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func StaminaCostContains(item: wref<StatModifier_Record>) -> Bool;

  public final native func BlockCostFactor() -> Float;
}

public native class AttackSubtype_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataAttackSubtype;
}

public native class CacheData extends IScriptable {

  public let targetImmortalityMode: gameGodModeType;

  public let TEMP_ImmortalityCached: Bool;

  public let logFlags: Int64;
}

public static native func OperatorSubtract(a: Int64, b: Int64) -> Int64;

public static native func OperatorMultiply(a: Int64, b: Int64) -> Int64;

public static native func Cast(a: Int64) -> Bool;

public static native func OperatorAnd(a: Int64, b: Int64) -> Int64;

public static native func GetGameInstance() -> GameInstance;

public native struct HitRepresentationQueryResult {

  public native let hitShapes: array<HitShapeData>;
}

public native class HitShapeUserData extends IScriptable {
}

public final native class ToggleHitShapeEvent extends Event {

  public native let enable: Bool;

  public native let hitShapeName: CName;

  public native let hierarchical: Bool;
}

public native struct HitShapeData {

  public native let result: HitShapeResult;

  public native let userData: ref<HitShapeUserData>;

  public native let physicsMaterial: CName;

  public native let hitShapeName: CName;
}

public native struct DialogChoiceHubs {

  public native let choiceHubs: array<ListChoiceHubData>;
}

public class ProcessVendettaAchievementEvent extends Event {

  public let deathInstigator: wref<GameObject>;
}

public class QueueCombatExperience extends PlayerScriptableSystemRequest {

  public let m_amount: Float;

  public let m_experienceType: gamedataProficiencyType;

  public let m_entity: EntityID;
}

public struct SDamageDealt {

  public let type: gamedataDamageType;

  public let value: Float;

  public let affectedStatPool: gamedataStatPoolType;
}

public class RemoveStatusEffectListenerEvent extends Event {

  public let listener: ref<StatusEffectTriggerListener>;
}

public class AddStatusEffectListenerEvent extends Event {

  public let listener: ref<StatusEffectTriggerListener>;
}

public native class WeaponGrenade extends ItemObject {

  protected native let deliveryMethod: gamedataGrenadeDeliveryMethodType;

  protected native let lastHitNormal: Vector4;

  public final native func OnExplosion() -> Void;
}

public native class Grenade_Record extends Gadget_Record {

  public final native func DetonationSound() -> String;

  public final native func DetonationStimType() -> wref<StimType_Record>;

  public final native func DetonationStimTypeHandle() -> ref<StimType_Record>;

  public final native func NpcHitReactionAttack() -> wref<Attack_Record>;

  public final native func NpcHitReactionAttackHandle() -> ref<Attack_Record>;

  public final native func Attack() -> wref<Attack_Record>;

  public final native func AttackHandle() -> ref<Attack_Record>;

  public final native func AdditionalAttack() -> wref<Attack_Record>;

  public final native func AdditionalAttackHandle() -> ref<Attack_Record>;

  public final native func DeliveryMethod() -> wref<GrenadeDeliveryMethod_Record>;

  public final native func DeliveryMethodHandle() -> ref<GrenadeDeliveryMethod_Record>;

  public final native func EnemyAttack() -> wref<Attack_Record>;

  public final native func EnemyAttackHandle() -> ref<Attack_Record>;

  public final native func RotationAxesX() -> array<Float>;

  public final native func GetRotationAxesXCount() -> Int32;

  public final native func GetRotationAxesXItem(index: Int32) -> Float;

  public final native func RotationAxesXContains(item: Float) -> Bool;

  public final native func RotationAxesY() -> array<Float>;

  public final native func GetRotationAxesYCount() -> Int32;

  public final native func GetRotationAxesYItem(index: Int32) -> Float;

  public final native func RotationAxesYContains(item: Float) -> Bool;

  public final native func RotationAxesZ() -> array<Float>;

  public final native func GetRotationAxesZCount() -> Int32;

  public final native func GetRotationAxesZItem(index: Int32) -> Float;

  public final native func RotationAxesZContains(item: Float) -> Bool;

  public final native func RotationAxesSpeeds() -> array<Float>;

  public final native func GetRotationAxesSpeedsCount() -> Int32;

  public final native func GetRotationAxesSpeedsItem(index: Int32) -> Float;

  public final native func RotationAxesSpeedsContains(item: Float) -> Bool;

  public final native func Seed() -> Int32;

  public final native func AttackRadius() -> Float;

  public final native func AttackDuration() -> Float;

  public final native func RandomRotationAxes() -> Int32;

  public final native func RotationSpeedMin() -> Float;

  public final native func RotationSpeedMax() -> Float;

  public final native func DetonationStimRadius() -> Float;

  public final native func ShootCollisionEnableDelay() -> Float;

  public final native func ReleaseOnDetonation() -> Bool;

  public final native func RemoveMeshOnDetonation() -> Bool;

  public final native func UseSeed() -> Bool;
}

public native struct RegisterNewCooldownRequest {

  public native let owner: wref<Entity>;

  public native let ownerItemId: ItemID;

  public native let ownerRecord: TweakDBID;

  public native let cooldownName: CName;

  public native let duration: Float;

  public native let type: gamedataStatType;

  public native let modifiable: Bool;
}

public class gameRagdollHitEvent extends gameHitEvent {

  public let impactForce: Float;

  public let speedDelta: Float;

  public let heightDelta: Float;
}

public native class gameVehicleHitEvent extends gameHitEvent {

  public native let vehicleVelocity: Vector4;

  public native let preyVelocity: Vector4;
}

public native class ProjectileComponent extends IPlacedComponent {

  public final native func AddParabolic(params: ref<ParabolicTrajectoryParams>) -> Void;

  public final native func AddFollow(params: ref<FollowTrajectoryParams>) -> Void;

  public final native func AddFollowCurve(params: ref<FollowCurveTrajectoryParams>) -> Void;

  public final native func AddAccelerateTowards(params: ref<AccelerateTowardsTrajectoryParams>) -> Void;

  public final native func AddLinear(params: ref<LinearTrajectoryParams>) -> Void;

  public final native func Slide(params: ref<SlideTrajectoryParams>) -> Void;

  public final native func SetEnergyLossFactor(energyLossFactor: Float, puppetEnergyLossFactor: Float) -> Void;

  public final native func GetPrintVelocity() -> Vector4;

  public final native func SetWasTrajectoryStopped(wasStopped: Bool) -> Void;

  public final native func AddIgnoredEntity(entityID: EntityID) -> Void;

  public final native func RemoveIgnoredEntity(entityID: EntityID) -> Void;

  public final native func ClearIgnoredEntities() -> Void;

  public final native func SetExplosionVisualRadius(explosionRadius: Float) -> Void;

  public final native func ClearTrajectories() -> Void;

  public final native func IsTrajectoryEmpty() -> Bool;

  public final native func SetDesiredTransform(transform: Transform) -> Void;

  public final native func SetOnCollisionAction(action: gameprojectileOnCollisionAction) -> Void;

  public final native func GetGameEffectInstance() -> ref<EffectInstance>;

  public final native func SpawnTrailVFX() -> Void;

  public final native func GetTrailVFXName() -> CName;

  public final native func ToggleAxisRotation(enabled: Bool) -> Void;

  public final native func AddAxisRotation(axis: Vector4, value: Float) -> Void;

  public final native func SetCollisionEvaluator(collisionEvaluator: ref<gameprojectileScriptCollisionEvaluator>) -> Void;

  public final native func LogDebugVariable(key: CName, value: String) -> Void;

  public final native func LockOrientation(enable: Bool) -> Void;

  public final native func SetSpiral(params: ref<SpiralControllerParams>) -> Void;
}

public native class gameprojectileCollisionEvaluator extends IScriptable {
}

public native class SimpleColliderComponent extends IPlacedComponent {

  public final native func Resize(size: Vector4, index: Uint32) -> Void;

  public final native func GetSize(index: Uint32) -> Vector4;
}

public struct FxResourceMapData {

  public let key: CName;

  public let resource: FxResource;
}

public class AnimFeature_Throwable extends AnimFeature {

  public edit let state: Int32;
}

public native class gameprojectileSetUpEvent extends Event {

  public native let weapon: wref<GameObject>;

  public native let owner: wref<GameObject>;

  public native let trajectoryParams: ref<gameprojectileTrajectoryParams>;

  public native let lerpMultiplier: Float;
}

public native class GrenadeDeliveryMethodType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataGrenadeDeliveryMethodType;
}

public native class HomingGDM_Record extends GrenadeDeliveryMethod_Record {

  public final native func FlyUpParameters() -> wref<AccelerateTowardsParameters_Record>;

  public final native func FlyUpParametersHandle() -> ref<AccelerateTowardsParameters_Record>;

  public final native func FlyToTargetParameters() -> wref<AccelerateTowardsParameters_Record>;

  public final native func FlyToTargetParametersHandle() -> ref<AccelerateTowardsParameters_Record>;

  public final native func FreezeDelay() -> Float;

  public final native func FreezeDuration() -> Float;

  public final native func LockOnDelay() -> Float;

  public final native func FreezeDelayAfterBounce() -> Float;

  public final native func LockOnFailDetonationDelay() -> Float;

  public final native func LockOnAltitude() -> Float;
}

public native class gameprojectileShootEvent extends gameprojectileSetUpEvent {

  public native let localToWorld: Matrix;

  public native let startPoint: Vector4;

  public native let startVelocity: Vector4;

  public native let weaponVelocity: Vector4;

  public native let params: gameprojectileWeaponParams;
}

public native struct NewMappinID {

  public native let value: Uint64;
}

public class GrenadeMappinData extends MappinScriptData {

  public let m_grenadeType: EGrenadeType;

  public let m_iconID: TweakDBID;
}

public class CuttingGrenadeSpawnBlinkEffectEvent extends Event {
}

public class GrenadeDetonateRequestEvent extends Event {
}

public final native class gameprojectileHitEvent extends Event {

  public native let hitInstances: array<gameprojectileHitInstance>;
}

public native struct gameprojectileHitInstance {

  public native let traceResult: TraceResult;

  public native let position: Vector4;

  public native let projectilePosition: Vector4;

  public native let projectileSourcePosition: Vector4;

  public native let forward: Vector4;

  public native let velocity: Vector4;

  public native let hitObject: wref<Entity>;

  public native let hitWeakspot: wref<WeakspotObject>;

  public native let hitRepresentationResult: HitRepresentationQueryResult;

  public native let numRicochetBounces: Int32;
}

public native struct TraceResult {

  public native let position: Vector3;

  public native let normal: Vector3;

  public native let material: CName;

  public final static native func IsValid(self: TraceResult) -> Bool;
}

public class GrenadeStopDrillingRequestEvent extends Event {
}

public static native func OperatorDivide(a: Vector4, b: Float) -> Vector4;

public class BroadcastEvent extends Event {

  public let broadcastType: EBroadcasteingType;

  public let shouldOverride: Bool;

  public let lifetime: Float;

  public let stimType: gamedataStimType;

  public let stimData: stimInvestigateData;

  public let radius: Float;

  public let propagationChange: Bool;

  public let directTarget: wref<Entity>;

  public let delay: Float;
}

public final native class gameprojectileTickEvent extends Event {

  public native let deltaTime: Float;

  public native let position: Vector4;
}

public class GrenadeSetTargetTrackerStateEvent extends Event {

  public let state: Bool;
}

public native class AccelerateTowardsTrajectoryParams extends gameprojectileTrajectoryParams {

  public edit native let accelerationSpeed: Float;

  public edit native let maxSpeed: Float;

  public edit native let decelerateTowardsTargetPositionDistance: Float;

  public edit native let maxRotationSpeed: Float;

  public edit native let minRotationSpeed: Float;

  public edit native let diffForMaxRotation: Float;

  public edit native let target: wref<GameObject>;

  public edit native let targetComponent: wref<IPlacedComponent>;

  public edit native let targetPosition: Vector4;

  public edit native let targetOffset: Vector4;

  public edit native let accuracy: Float;
}

public static native func OperatorMultiply(a: Vector4, b: Vector4) -> Vector4;

public native class AccelerateTowardsParameters_Record extends TweakDBRecord {

  public final native func MaxSpeed() -> Float;

  public final native func MaxRotationSpeed() -> Float;

  public final native func DecelerateTowardsTargetPositionDistance() -> Float;

  public final native func DiffForMaxRotation() -> Float;

  public final native func AccelerationSpeed() -> Float;

  public final native func MinRotationSpeed() -> Float;

  public final native func Accuracy() -> Float;
}

public struct GrenadePotentialHomingTarget {

  public let entity: wref<ScriptedPuppet>;

  public let targetSlot: CName;
}

public class GrenadeTriggerSmartTrajectoryEvent extends Event {
}

public native class ParabolicTrajectoryParams extends gameprojectileTrajectoryParams {

  public final static native func GetAccelTargetAngleParabolicParams(accel: Vector4, target: Vector4, angle: Float, opt zVelocityClamp: Float) -> ref<ParabolicTrajectoryParams>;

  public final static native func GetAccelVelParabolicParams(accel: Vector4, vel: Float, opt zVelocityClamp: Float) -> ref<ParabolicTrajectoryParams>;

  public final static native func GetVelTargetParabolicParams(target: Vector4, vel: Float, opt zVelocityClamp: Float) -> ref<ParabolicTrajectoryParams>;
}

public class CuttingGrenadeAddAxisRotationEvent extends Event {
}

public class CuttingGrenadeStopAttackEvent extends Event {
}

public class GrenadeDespawnRequestEvent extends Event {
}

public class SpawnLaserAttackEvent extends Event {

  public let attackRecord: ref<Attack_Record>;

  public let range: Float;

  public let duration: Float;

  public let index: Int32;

  public let playSlotAnimation: Bool;
}

public class AnimFeature_CombatGadget extends AnimFeature {

  public edit let isQuickthrow: Bool;

  public edit let isChargedThrow: Bool;

  public edit let isDetonated: Bool;
}

public class GrenadeAnimFeatureChangeEvent extends Event {

  public let newState: Int32;
}

public class GrenadeReleaseRequestEvent extends Event {
}

public struct CuttingGrenadePotentialTarget {

  public let entity: wref<ScriptedPuppet>;

  public let hits: Int32;
}

public class GrenadeTrackerTargetAcquiredEvent extends Event {

  public let target: wref<ScriptedPuppet>;

  public let targetSlot: CName;
}

public class GrenadeTrackerTargetLostEvent extends Event {

  public let target: wref<ScriptedPuppet>;
}

public final native class gameTargetDamageEvent extends gameTargetHitEvent {

  public native let damage: Float;
}

public final native class gameDamageReceivedEvent extends Event {

  public native let hitEvent: ref<gameHitEvent>;

  public native let totalDamageReceived: Float;
}

public struct SHitStatusEffect {

  public let stacks: Float;

  public let id: TweakDBID;
}

public static native func Cast(a: Float) -> Uint32;

public native class StatusEffectAttackData_Record extends TweakDBRecord {

  public final native func StatusEffect() -> wref<StatusEffect_Record>;

  public final native func StatusEffectHandle() -> ref<StatusEffect_Record>;

  public final native func ResistPool() -> wref<StatPool_Record>;

  public final native func ResistPoolHandle() -> ref<StatPool_Record>;

  public final native func StacksToApply() -> Float;

  public final native func ApplyImmediately() -> Bool;
}

public struct previewTargetStruct {

  public let currentlyTrackedTarget: wref<GameObject>;

  public let currentBodyPart: EHitReactionZone;
}

public native class HitDebugData extends IScriptable {

  public native let sourceHitPosition: Vector4;

  public native let targetHitPosition: Vector4;

  public native let instigator: wref<GameObject>;

  public native let source: wref<GameObject>;

  public native let target: wref<GameObject>;

  public native let instigatorName: CName;

  public native let sourceName: CName;

  public native let targetName: CName;

  public native let sourceAttackDebugData: AttackDebugData;

  public native let sourceWeaponName: CName;

  public native let sourceAttackName: CName;

  public native let calculatedDamages: array<ref<DamageDebugData>>;

  public native let appliedDamages: array<ref<DamageDebugData>>;

  public native let hitType: CName;

  public native let hitFlags: CName;
}

public native class DamageDebugData extends IScriptable {

  public native let statPoolType: gamedataStatPoolType;

  public native let damageType: gamedataDamageType;

  public native let value: Float;
}

public native class ServerHitData extends IScriptable {

  public native let damageInfos: array<DamageInfo>;

  public native let instigator: wref<GameObject>;
}

public native struct DamageInfo {

  public native let hitPosition: Vector4;

  public native let damageValue: Float;

  public native let damageType: gamedataDamageType;

  public native let hitType: gameuiHitType;

  public native let entityHit: wref<GameObject>;

  public native let instigator: wref<GameObject>;

  public native let userData: ref<DamageInfoUserData>;
}

public native class DamageInfoUserData extends IScriptable {

  public replicated let flags: array<SHitFlag>;

  public replicated let hitShapeType: EHitShapeType;
}

public native struct HitShapeResult {

  public native let hitPositionEnter: Vector4;

  public native let hitPositionExit: Vector4;

  public native let enterDistanceFromOriginSq: Float;
}

public native struct KillInfo {

  public native let killerEntity: wref<GameObject>;

  public native let victimEntity: wref<GameObject>;

  public native let killType: gameKillType;
}

public native class ServerKillData extends IScriptable {

  public native let killInfo: KillInfo;
}

public abstract native class IDamageSystemListener extends IScriptable {
}

public class ResetFrameDamage extends Event {
}

public class WoundedInstigated extends Event {

  public let bodyPart: EHitReactionZone;
}

public class DismembermentInstigated extends Event {

  public let bodyPart: EHitReactionZone;
}

public native class ActionHitReactionScriptProxy extends CActionScriptProxy {

  public final native func Setup(hitReactionsData: ref<AnimFeature_HitReactionsData>, opt fastForward: Bool) -> Bool;
}

public class HitReactionCumulativeDamageUpdate extends Event {

  public let m_prevUpdateTime: Float;
}

public class HitReactionRequest extends Event {

  public let hitEvent: ref<gameHitEvent>;
}

public class ForcedHitReactionEvent extends Event {

  public let hitIntensity: Int32;

  public let hitSource: Int32;

  public let hitType: Int32;

  public let hitBodyPart: Int32;

  public let hitNpcMovementSpeed: Int32;

  public let hitDirection: Int32;

  public let hitNpcMovementDirection: Int32;
}

public class NPCRevealedPrereqState extends PrereqState {

  public let m_listener: ref<PuppetListener>;
}

public class NPCHitReactionTypePrereqState extends PrereqState {

  public let m_listener: ref<PuppetListener>;
}

public class AddOrRemoveListenerEvent extends Event {

  public let listener: ref<PuppetListener>;

  public let add: Bool;
}

public class NPCHitSourcePrereqState extends PrereqState {

  public let m_listener: ref<PuppetListener>;
}

public class NPCTrackingPlayerPrereqState extends PrereqState {

  public let m_listener: ref<PuppetListener>;
}

public class ForcedDeathEvent extends Event {

  public let hitIntensity: Int32;

  public let hitSource: Int32;

  public let hitType: Int32;

  public let hitBodyPart: Int32;

  public let hitNpcMovementSpeed: Int32;

  public let hitDirection: Int32;

  public let hitNpcMovementDirection: Int32;

  public let forceRagdoll: Bool;
}

public class LastHitDataEvent extends Event {

  public let hitReactionBehaviorData: ref<HitReactionBehaviorData>;
}

public class NewHitDataEvent extends Event {

  public let hitIntensity: Int32;

  public let hitSource: Int32;

  public let hitType: Int32;

  public let hitBodyPart: Int32;

  public let hitNpcMovementSpeed: Int32;

  public let hitDirection: Int32;

  public let hitNpcMovementDirection: Int32;

  public let stance: Int32;

  public let animVariation: Int32;
}

public struct ScriptHitData {

  public let animVariation: Int32;

  public let attackDirection: Int32;

  public let hitBodyPart: Int32;
}

public native class AttackDirection_Record extends TweakDBRecord {

  public final native func Direction() -> wref<MeleeAttackDirection_Record>;

  public final native func DirectionHandle() -> ref<MeleeAttackDirection_Record>;

  public final native func StartPosition() -> Vector3;

  public final native func EndPosition() -> Vector3;
}

public native class MeleeAttackDirection_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataMeleeAttackDirection;
}

public class DismembermentDebrisEvent extends Event {

  public let m_resourcePath: String;

  public let m_strength: Float;
}

public class DismembermentEvent extends Event {

  public let m_bodyPart: gameDismBodyPart;

  public let m_woundType: gameDismWoundType;

  public let m_strength: Float;

  public let m_isCritical: Bool;

  public let m_debrisPath: String;

  public let m_debrisStrength: Float;
}

public final native class DismembermentAudioEvent extends Event {

  public native let bodyPart: entAudioDismembermentPart;

  public native let position: Vector4;
}

public class DismembermentExplosionEvent extends Event {

  public let m_epicentrum: Vector4;

  public let m_strength: Float;
}

public final native class RagdollActivationRequestEvent extends Event {

  public native let data: RagdollActivationRequestData;

  public final native func DebugSetSourceName(debugSourceName: CName) -> Void;
}

public final native struct RagdollActivationRequestData {

  public native let filterDataOverride: CName;

  public native let type: entragdollActivationRequestType;

  public native let applyPowerPose: Bool;

  public native let applyMomentum: Bool;
}

public final native class RagdollApplyImpulseEvent extends Event {

  public native let worldImpulsePos: Vector4;

  public native let worldImpulseValue: Vector4;

  public native let influenceRadius: Float;
}

public class RequestDismembermentEvent extends AIEvent {

  public let bodyPart: gameDismBodyPart;

  public let dismembermentType: gameDismWoundType;

  public let hitPosition: Vector4;

  public let isCritical: Bool;
}

public static native func RandDifferent(lastValue: Int32, range: Int32) -> Int32;

public native class AINetStateComponent extends ScriptableComponent {

  public final native func GetReplicatedHighLevelState() -> Int32;

  public final native func SetReplicatedHighLevelState(newState: Int32) -> Bool;

  public final native func GetReplicatedUpperBodyState() -> Int32;

  public final native func SetReplicatedUpperBodyState(newState: Int32) -> Bool;

  public final native func GetReplicatedStanceState() -> Int32;

  public final native func SetReplicatedStanceState(newState: Int32) -> Bool;

  public final native func GetReplicatedHitReactionModeState() -> Int32;

  public final native func SetReplicatedHitReactionModeState(newState: Int32) -> Bool;

  public final native func GetReplicatedBehaviorState() -> Int32;

  public final native func SetReplicatedBehaviorState(newState: Int32) -> Bool;

  public final native func GetReplicatedPhaseState() -> Int32;

  public final native func SetReplicatedPhaseState(newState: Int32) -> Bool;

  public final native func GetReplicatedDefenseMode() -> Int32;

  public final native func SetReplicatedDefenseMode(newState: Int32) -> Bool;

  public final native func GetReplicatedLocomotionMode() -> Int32;

  public final native func SetReplicatedLocomotionMode(newState: Int32) -> Bool;
}

public native class SignalUserData extends IScriptable {

  public final native func HasTag(tag: CName) -> Bool;
}

public native class TaggedSignalUserData extends SignalUserData {

  public native let tags: array<CName>;

  public final native func AddTag(tag: CName) -> Void;
}

public class NPCStateChangeSignal extends TaggedSignalUserData {

  public let m_highLevelState: gamedataNPCHighLevelState;

  public let m_highLevelStateValid: Bool;

  public let m_upperBodyState: gamedataNPCUpperBodyState;

  public let m_upperBodyStateValid: Bool;

  public let m_stanceState: gamedataNPCStanceState;

  public let m_stanceStateValid: Bool;

  public let m_hitReactionModeState: EHitReactionMode;

  public let m_hitReactionModeStateValid: Bool;

  public let m_defenseMode: gamedataDefenseMode;

  public let m_defenseModeValid: Bool;

  public let m_locomotionMode: gamedataLocomotionMode;

  public let m_locomotionModeValid: Bool;

  public let m_behaviorState: gamedataNPCBehaviorState;

  public let m_behaviorStateValid: Bool;

  public let m_phaseState: ENPCPhaseState;

  public let m_phaseStateValid: Bool;
}

public final native class gameHighLevelStateDataEvent extends Event {

  public native let currentHighLevelState: gamedataNPCHighLevelState;

  public native let currentNPCEntityID: EntityID;
}

public native class AnimFeature_NPCState extends AnimFeature {

  public edit native let state: Int32;
}

public struct DroppedThreatData {

  public let threat: wref<Entity>;

  public let position: Vector4;

  public let timeStamp: Float;
}

public class PullSquadSyncRequest extends AIEvent {

  public let squadType: AISquadType;
}

public class NotifySecuritySystemCombatEvent extends Event {
}

public native class StanceStateChangeEvent extends Event {

  public native let state: gamedataNPCStanceState;
}

public class VehicleExternalWindowRequestEvent extends Event {

  public let slotName: CName;

  public let shouldOpen: Bool;

  public let speed: CName;
}

public class ClearHitStimEvent extends Event {
}

public native class AIBlockCountCond_Record extends AIActionSubCondition_Record {

  public final native func OwnerAttackParriedCount() -> Int32;

  public final native func MaxParryCount() -> Int32;

  public final native func MaxBlockCount() -> Int32;

  public final native func OwnerAttackBlockedCount() -> Int32;

  public final native func MinParryCount() -> Int32;

  public final native func MinBlockCount() -> Int32;
}

public native class AIOptimalDistanceCond_Record extends AIActionSubCondition_Record {

  public final native func Source() -> wref<AIActionTarget_Record>;

  public final native func SourceHandle() -> ref<AIActionTarget_Record>;

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func CheckRings(out outList: array<wref<AIRingType_Record>>) -> Void;

  public final native func GetCheckRingsCount() -> Int32;

  public final native func GetCheckRingsItem(index: Int32) -> wref<AIRingType_Record>;

  public final native func GetCheckRingsItemHandle(index: Int32) -> wref<AIRingType_Record>;

  public final native func CheckRingsContains(item: wref<AIRingType_Record>) -> Bool;

  public final native func PredictionTime() -> Float;

  public final native func DistanceMult() -> Float;

  public final native func ToleranceOffset() -> Float;

  public final native func DistanceOffset() -> Float;

  public final native func ToleranceMult() -> Float;

  public final native func FailWhenCloserThanCurrentRing() -> Bool;

  public final native func FailWhenFurtherThantCurrentRing() -> Bool;
}

public native class AIRingType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Distance() -> Float;

  public final native func Tolerance() -> Float;

  public final native func Type() -> gamedataAIRingType;
}

public native class AIDodgeCountCond_Record extends AIActionSubCondition_Record {

  public final native func MinDodgeCount() -> Int32;

  public final native func MaxDodgeCount() -> Int32;

  public final native func OwnerAttackDodgedCount() -> Int32;
}

public native class AIIsInActiveCameraCond_Record extends AIActionSubCondition_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func Height() -> Float;

  public final native func Radius() -> Float;
}

public native class CameraSystem extends ICameraSystem {

  public final native func PrepareBlendCamera() -> Void;

  public final native func AbandonBlendCamera() -> Void;

  public final native func GetActiveCameraWorldTransform(transform: Transform) -> Bool;

  public final native func GetActiveCameraData() -> CameraData;

  public final native func GetActiveCameraFOV() -> Float;

  public final native func GetAspectRatio() -> Float;

  public final native func GetActiveCameraRight() -> Vector4;

  public final native func GetActiveCameraForward() -> Vector4;

  public final native func GetActiveCameraUp() -> Vector4;

  public final native func ProjectPoint(worldSpacePoint: Vector4) -> Vector4;

  public final native func UnprojectPoint(screenSpacePoint: Vector2) -> Vector4;
}

public native class AIThrowCond_Record extends AIActionSubCondition_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func WeaponSlot() -> wref<AttachmentSlot_Record>;

  public final native func WeaponSlotHandle() -> ref<AttachmentSlot_Record>;

  public final native func PredictionTime() -> Float;

  public final native func ThrowAngle() -> Float;

  public final native func ClearLOSDistanceTolerance() -> Float;
}

public native class CollisionEvaluatorParams extends IScriptable {

  public native let target: wref<GameObject>;

  public native let isPiercableSurface: Bool;

  public native let angle: Float;

  public native let numBounces: Uint32;

  public native let position: Vector4;

  public native let projectilePenetration: CName;

  public native let isTechPiercing: Bool;
}

public native class FxPackage extends IFxPackage {

  public final native func GetVfxGroundThrow() -> FxResource;
}

public class StartGrenadeThrowQueryEvent extends Event {

  public let queryParams: gameGrenadeThrowQueryParams;
}

public native struct gameGrenadeThrowQueryParams {

  public edit native let requester: wref<GameObject>;

  public edit native let target: wref<GameObject>;

  public edit native let targetPositionProvider: ref<IPositionProvider>;

  public edit native let minRadius: Float;

  public edit native let maxRadius: Float;

  public edit native let friendlyAvoidanceRadius: Float;

  public edit native let throwAngleDegrees: Float;

  public edit native let gravitySimulation: Float;

  public edit native let minTargetAngleDegrees: Float;

  public edit native let maxTargetAngleDegrees: Float;
}

public abstract native class gameICombatQueriesSystem extends IGameSystem {

  public final native func StartGrenadeThrowQuery(queryParams: gameGrenadeThrowQueryParams) -> Int32;

  public final native func StopGrenadeThrowQuery(requester: ref<GameObject>, queryId: Int32) -> Void;

  public final native func StopGrenadeThrowQueries(requester: ref<GameObject>) -> Void;

  public final native func StopAllGrenadeThrowQueries() -> Void;

  public final native func CheckGrenadeThrowQuery(requester: ref<GameObject>, refQueryId: Int32, outTargetPosition: Vector4, outThrowAngleDegrees: Float, outStartPos: gameGrenadeThrowStartType) -> Bool;
}

public native struct gameAvailableExposureMethodResult {

  public native let distanceToTarget: Float;

  public native let method: AICoverExposureMethod;
}

public abstract native class IFriendlyFireSystem extends IGameSystem {

  public final native func StartChecking(params: ref<FriendlyFireParams>) -> Uint32;

  public final native func StopChecking(id: Uint32) -> Bool;

  public final native func Check(id: Uint32) -> Bool;

  public final native func UpdateCurrentTargetComponent(id: Uint32, currentTarget: wref<TargetingComponent>) -> Void;

  public final native func UpdateCurrentTargetObject(id: Uint32, currentTarget: wref<GameObject>) -> Void;

  public final native func SetFFApplyAttitude(id: Uint32, FFApplyAttitude: Uint32) -> Void;
}

public native class AIWeaponLockedOnTargetCond_Record extends AIActionSubCondition_Record {

  public final native func WeaponSlot() -> wref<AttachmentSlot_Record>;

  public final native func WeaponSlotHandle() -> ref<AttachmentSlot_Record>;
}

public native class AICoverCond_Record extends AIActionSubCondition_Record {

  public final native func Cover() -> wref<AIActionTarget_Record>;

  public final native func CoverHandle() -> ref<AIActionTarget_Record>;

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func DesiredCover() -> wref<AIActionTarget_Record>;

  public final native func DesiredCoverHandle() -> ref<AIActionTarget_Record>;

  public final native func Owner() -> wref<AIActionTarget_Record>;

  public final native func OwnerHandle() -> ref<AIActionTarget_Record>;

  public final native func CheckChosenExposureMethod() -> array<CName>;

  public final native func GetCheckChosenExposureMethodCount() -> Int32;

  public final native func GetCheckChosenExposureMethodItem(index: Int32) -> CName;

  public final native func CheckChosenExposureMethodContains(item: CName) -> Bool;

  public final native func CoverExposureMethods() -> array<CName>;

  public final native func GetCoverExposureMethodsCount() -> Int32;

  public final native func GetCoverExposureMethodsItem(index: Int32) -> CName;

  public final native func CoverExposureMethodsContains(item: CName) -> Bool;

  public final native func MaxCoverToTargetAngle() -> Float;

  public final native func IsOwnerCrouching() -> Int32;

  public final native func HasAnyLastAvailableExposureMethods() -> Int32;

  public final native func IsProtectingHorizontallyAgainstTarget() -> Int32;

  public final native func DesiredCoverChanged() -> Int32;

  public final native func PredictionTime() -> Float;

  public final native func IsOwnerExposed() -> Int32;

  public final native func MinCoverHealth() -> Float;

  public final native func CoverType() -> Int32;

  public final native func CheckIfCoverTransitionRequired() -> Bool;
}

public static native func OperatorNotEqual(a: Uint32, b: Uint32) -> Bool;

public native class AIGoToCoverCond_Record extends AIActionSubCondition_Record {

  public final native func Cover() -> wref<AIActionTarget_Record>;

  public final native func CoverHandle() -> ref<AIActionTarget_Record>;

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func DesiredCover() -> wref<AIActionTarget_Record>;

  public final native func DesiredCoverHandle() -> ref<AIActionTarget_Record>;

  public final native func IsCoverSelected() -> Int32;

  public final native func DesiredCoverChanged() -> Int32;

  public final native func IsEnteringOrLeavingCover() -> Int32;
}

public native class AIValidCoversCond_Record extends AIActionSubCondition_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func LimitToRings(out outList: array<wref<AIRingType_Record>>) -> Void;

  public final native func GetLimitToRingsCount() -> Int32;

  public final native func GetLimitToRingsItem(index: Int32) -> wref<AIRingType_Record>;

  public final native func GetLimitToRingsItemHandle(index: Int32) -> wref<AIRingType_Record>;

  public final native func LimitToRingsContains(item: wref<AIRingType_Record>) -> Bool;

  public final native func CoversWithLOS() -> Int32;

  public final native func CheckCurrentlyActiveRing() -> Bool;
}

public final native class MultiSelectCovers extends IScriptable {

  public native let selectedCovers: array<Uint64>;

  public native let coverRingTypes: array<gamedataAIRingType>;

  public native let coversUseLOS: array<Bool>;

  public native let sourcePresetName: array<CName>;
}

public native class AIHitCond_Record extends AIActionSubCondition_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func AttackTag() -> CName;

  public final native func MinHitSeverity() -> Int32;

  public final native func MaxHitSeverity() -> Int32;

  public final native func TargetHitCount() -> Int32;

  public final native func HitTimeout() -> Float;

  public final native func CumulatedDamageThreshold() -> Int32;
}

public native class AITargetCond_Record extends AIActionSubCondition_Record {

  public final native func IsCombatTargetVisibleFrom() -> wref<AIAdditionalTraceType_Record>;

  public final native func IsCombatTargetVisibleFromHandle() -> ref<AIAdditionalTraceType_Record>;

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func MinAccuracyValue() -> Float;

  public final native func MinDetectionValue() -> Float;

  public final native func IsVisible() -> Int32;

  public final native func InvalidExpectation() -> Int32;

  public final native func MinAccuracySharedValue() -> Float;

  public final native func IsAlive() -> Int32;

  public final native func MaxVisibilityToTargetDistance() -> Float;

  public final native func IsActive() -> Int32;

  public final native func IsMoving() -> Int32;

  public final native func Attitude() -> Int32;
}

public native class AIAdditionalTraceType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataAIAdditionalTraceType;
}

public native class AVObject extends VehicleObject {
}

public native class AIWorkspotCond_Record extends AIActionSubCondition_Record {

  public final native func WorkspotObj() -> wref<AIActionTarget_Record>;

  public final native func WorkspotObjHandle() -> ref<AIActionTarget_Record>;

  public final native func IsInWorkspot() -> Int32;
}

public static native func ResolveNodeRef(id: NodeRef, context: GlobalNodeRef) -> GlobalNodeRef;

public static native func Cast(a: GlobalNodeID) -> GlobalNodeRef;

public native class AISecurityCond_Record extends AIActionSubCondition_Record {

  public final native func AreaType() -> wref<AIActionSecurityAreaType_Record>;

  public final native func AreaTypeHandle() -> ref<AIActionSecurityAreaType_Record>;

  public final native func IsConnected() -> Int32;
}

public native class AIActionSecurityAreaType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataAIActionSecurityAreaType;
}

public class NPCBreachEvent extends Event {

  public let state: HackingMinigameState;
}

public class ExecutePuppetActionEvent extends Event {

  public let actionID: TweakDBID;

  public let action: ref<PuppetAction>;
}

public class AcquireDeviceLink extends Event {
}

public native class AIHasWeapon_Record extends AIActionSubCondition_Record {

  public final native func ItemType(out outList: array<wref<ItemType_Record>>) -> Void;

  public final native func GetItemTypeCount() -> Int32;

  public final native func GetItemTypeItem(index: Int32) -> wref<ItemType_Record>;

  public final native func GetItemTypeItemHandle(index: Int32) -> wref<ItemType_Record>;

  public final native func ItemTypeContains(item: wref<ItemType_Record>) -> Bool;

  public final native func ItemCategory(out outList: array<wref<ItemCategory_Record>>) -> Void;

  public final native func GetItemCategoryCount() -> Int32;

  public final native func GetItemCategoryItem(index: Int32) -> wref<ItemCategory_Record>;

  public final native func GetItemCategoryItemHandle(index: Int32) -> wref<ItemCategory_Record>;

  public final native func ItemCategoryContains(item: wref<ItemCategory_Record>) -> Bool;

  public final native func ItemTag() -> CName;
}

public native class AINPCTypeCond_Record extends AIActionSubCondition_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func AllowedNPCTypes(out outList: array<wref<NPCType_Record>>) -> Void;

  public final native func GetAllowedNPCTypesCount() -> Int32;

  public final native func GetAllowedNPCTypesItem(index: Int32) -> wref<NPCType_Record>;

  public final native func GetAllowedNPCTypesItemHandle(index: Int32) -> wref<NPCType_Record>;

  public final native func AllowedNPCTypesContains(item: wref<NPCType_Record>) -> Bool;

  public final native func IsFollower() -> Int32;
}

public native class AIVelocityCond_Record extends AIActionSubCondition_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func Range() -> Vector2;

  public final native func TimePeriod() -> Float;
}

public native class AIVelocityDotCond_Record extends AIActionSubCondition_Record {

  public final native func VelocityTarget() -> wref<AIActionTarget_Record>;

  public final native func VelocityTargetHandle() -> ref<AIActionTarget_Record>;

  public final native func PositionTarget() -> wref<AIActionTarget_Record>;

  public final native func PositionTargetHandle() -> ref<AIActionTarget_Record>;

  public final native func DotRange() -> Vector2;

  public final native func TimePeriod() -> Float;
}

public native class AIVelocitiesDotCond_Record extends AIActionSubCondition_Record {

  public final native func FirstTarget() -> wref<AIActionTarget_Record>;

  public final native func FirstTargetHandle() -> ref<AIActionTarget_Record>;

  public final native func SecondTarget() -> wref<AIActionTarget_Record>;

  public final native func SecondTargetHandle() -> ref<AIActionTarget_Record>;

  public final native func DotRange() -> Vector2;

  public final native func FirstTimePeriod() -> Float;

  public final native func SecondTimePeriod() -> Float;
}

public native class MovementPolicy_Record extends TweakDBRecord {

  public final native func Ring() -> wref<AIRingType_Record>;

  public final native func RingHandle() -> ref<AIRingType_Record>;

  public final native func StrafingTarget() -> wref<AIActionTarget_Record>;

  public final native func StrafingTargetHandle() -> ref<AIActionTarget_Record>;

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func DestinationOrientationPosition() -> wref<AIActionTarget_Record>;

  public final native func DestinationOrientationPositionHandle() -> ref<AIActionTarget_Record>;

  public final native func BlockedTags(out outList: array<wref<MovementPolicyTagList_Record>>) -> Void;

  public final native func GetBlockedTagsCount() -> Int32;

  public final native func GetBlockedTagsItem(index: Int32) -> wref<MovementPolicyTagList_Record>;

  public final native func GetBlockedTagsItemHandle(index: Int32) -> wref<MovementPolicyTagList_Record>;

  public final native func BlockedTagsContains(item: wref<MovementPolicyTagList_Record>) -> Bool;

  public final native func AllowedTags(out outList: array<wref<MovementPolicyTagList_Record>>) -> Void;

  public final native func GetAllowedTagsCount() -> Int32;

  public final native func GetAllowedTagsItem(index: Int32) -> wref<MovementPolicyTagList_Record>;

  public final native func GetAllowedTagsItemHandle(index: Int32) -> wref<MovementPolicyTagList_Record>;

  public final native func AllowedTagsContains(item: wref<MovementPolicyTagList_Record>) -> Bool;

  public final native func KeepLineOfSight() -> CName;

  public final native func CirclingDirection() -> CName;

  public final native func MovementType() -> CName;

  public final native func MaxPathLengthToDirectDistanceRatioCurve() -> CName;

  public final native func DebugName() -> CName;

  public final native func SpatialHintMults() -> Vector3;

  public final native func Tolerance() -> Float;

  public final native func StrafingPredictionTime() -> Float;

  public final native func Distance() -> Float;

  public final native func ZDiff() -> Float;

  public final native func AvoidThreatRange() -> Float;

  public final native func RingToleranceMult() -> Float;

  public final native func RingToleranceOffset() -> Float;

  public final native func AvoidThreatCost() -> Float;

  public final native func RingDistanceOffset() -> Float;

  public final native func StrafingRotationOffset() -> Float;

  public final native func StrafingPredictionVelocityMax() -> Float;

  public final native func RingDistanceMult() -> Float;

  public final native func DynamicTargetUpdateTimer() -> Float;

  public final native func DynamicTargetUpdateDistance() -> Float;

  public final native func MinDistance() -> Float;

  public final native func DeadAngle() -> Float;

  public final native func MaxPathLength() -> Float;

  public final native func DontUseStop() -> Bool;

  public final native func IgnoreNavigation() -> Bool;

  public final native func UseOffMeshBlockedTags() -> Bool;

  public final native func IgnoreCollisionAvoidance() -> Bool;

  public final native func SymmetricAnglesScores() -> Bool;

  public final native func DontUseStart() -> Bool;

  public final native func IgnoreSpotReservation() -> Bool;

  public final native func IgnoreRestrictedMovementArea() -> Bool;

  public final native func UseOffMeshAllowedTags() -> Bool;

  public final native func IgnoreLoSPrecheck() -> Bool;

  public final native func AvoidSafeArea() -> Bool;

  public final native func UseFollowSlots() -> Bool;

  public final native func AvoidThreat() -> Bool;

  public final native func CalculateStartTangent() -> Bool;

  public final native func AvoidObstacleWithinTolerance() -> Bool;

  public final native func StopOnObstacle() -> Bool;

  public final native func GetOutOfWay() -> Bool;
}

public class PreloadAnimationsEvent extends Event {

  public let m_streamingContextName: CName;

  public let m_highPriority: Bool;
}

public class SetWeaponOwnerEvent extends Event {
}

public native struct gameprojectileWeaponParams {

  public native let targetPosition: Vector4;

  public native let smartGunSpreadOnHitPlane: Vector3;

  public native let charge: Float;

  public native let trackedTargetComponent: wref<IPlacedComponent>;

  public native let smartGunAccuracy: Float;

  public native let smartGunIsProjectileGuided: Bool;

  public native let hitPlaneOffset: Vector4;

  public native let shootingOffset: Float;

  public native let ignoreWeaponOwnerCollision: Bool;

  public native let ricochetData: gameRicochetData;

  public native let range: Float;

  public final static native func AddObjectToIgnoreCollisionWith(self: gameprojectileWeaponParams, entityID: EntityID) -> Void;
}

public struct TimeBetweenHitsParameters {

  public let baseCoefficient: Float;

  public let baseSourceCoefficient: Float;

  public let difficultyLevelCoefficient: Float;

  public let groupCoefficient: Float;

  public let distanceCoefficient: Float;

  public let visibilityCoefficient: Float;

  public let playersCountCoefficient: Float;

  public let coefficientMultiplier: Float;

  public let accuracyCoefficient: Float;
}

public native class RangedAttackPackage_Record extends TweakDBRecord {

  public final native func DefaultFire() -> wref<RangedAttack_Record>;

  public final native func DefaultFireHandle() -> ref<RangedAttack_Record>;

  public final native func ChargeFire() -> wref<RangedAttack_Record>;

  public final native func ChargeFireHandle() -> ref<RangedAttack_Record>;
}

public native class RangedAttack_Record extends TweakDBRecord {

  public final native func PlayerAttack() -> wref<Attack_Record>;

  public final native func PlayerAttackHandle() -> ref<Attack_Record>;

  public final native func NPCAttack() -> wref<Attack_Record>;

  public final native func NPCAttackHandle() -> ref<Attack_Record>;

  public final native func PlayerTimeDilated() -> wref<Attack_Projectile_Record>;

  public final native func PlayerTimeDilatedHandle() -> ref<Attack_Projectile_Record>;

  public final native func NPCTimeDilated() -> wref<Attack_Projectile_Record>;

  public final native func NPCTimeDilatedHandle() -> ref<Attack_Projectile_Record>;
}

public class ToggleVisibilityInAnimSystemEvent extends Event {

  public let isVisible: Bool;

  public let sourceName: CName;

  public let transitionTime: Float;
}

public static native func Cast(a: Int32) -> Uint16;

public static native func Cast(a: Int32) -> Uint8;

public native class AIAttackAttemptEvent extends Event {

  public native let instigator: wref<GameObject>;

  public native let target: wref<GameObject>;

  public native let isWindUp: Bool;

  public native let continuousMode: gameEContinuousMode;

  public native let minimumOpacity: Float;
}

public native class AIPattern_Record extends TweakDBRecord {

  public final native func ActivationConditions(out outList: array<wref<AIActionCondition_Record>>) -> Void;

  public final native func GetActivationConditionsCount() -> Int32;

  public final native func GetActivationConditionsItem(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func GetActivationConditionsItemHandle(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func ActivationConditionsContains(item: wref<AIActionCondition_Record>) -> Bool;

  public final native func Delays(out outList: array<wref<AIPatternDelay_Record>>) -> Void;

  public final native func GetDelaysCount() -> Int32;

  public final native func GetDelaysItem(index: Int32) -> wref<AIPatternDelay_Record>;

  public final native func GetDelaysItemHandle(index: Int32) -> wref<AIPatternDelay_Record>;

  public final native func DelaysContains(item: wref<AIPatternDelay_Record>) -> Bool;

  public final native func PatternSize() -> Int32;
}

public native class AIPatternDelay_Record extends TweakDBRecord {

  public final native func ShotNumber() -> Int32;

  public final native func Delay() -> Float;
}

public native class AIPatternsPackage_Record extends TweakDBRecord {

  public final native func ActivationConditions(out outList: array<wref<AIActionCondition_Record>>) -> Void;

  public final native func GetActivationConditionsCount() -> Int32;

  public final native func GetActivationConditionsItem(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func GetActivationConditionsItemHandle(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func ActivationConditionsContains(item: wref<AIActionCondition_Record>) -> Bool;

  public final native func Patterns(out outList: array<wref<AIPattern_Record>>) -> Void;

  public final native func GetPatternsCount() -> Int32;

  public final native func GetPatternsItem(index: Int32) -> wref<AIPattern_Record>;

  public final native func GetPatternsItemHandle(index: Int32) -> wref<AIPattern_Record>;

  public final native func PatternsContains(item: wref<AIPattern_Record>) -> Bool;
}

public class TurretShootingIntervalEvent extends Event {
}

public native class TankObject extends VehicleObject {
}

public class TurretBurstShootingDelayEvent extends Event {
}

public class AutoKillDelayEvent extends Event {
}

public class ScavengeTargetConfirmEvent extends Event {

  public let target: wref<GameObject>;
}

public class DisassembleTargetRequest extends Event {

  public let requester: wref<GameObject>;
}

public class TargetScavengedEvent extends Event {

  public let target: wref<GameObject>;
}

public static native func OperatorLess(a: Uint64, b: Uint64) -> Bool;

public static native func OperatorSubtract(a: EngineTime, b: EngineTime) -> EngineTime;

public class DamageInflictedEvent extends Event {
}

public native class LookAtPreset_Record extends TweakDBRecord {

  public final native func LookAtParts(out outList: array<wref<LookAtPart_Record>>) -> Void;

  public final native func GetLookAtPartsCount() -> Int32;

  public final native func GetLookAtPartsItem(index: Int32) -> wref<LookAtPart_Record>;

  public final native func GetLookAtPartsItemHandle(index: Int32) -> wref<LookAtPart_Record>;

  public final native func LookAtPartsContains(item: wref<LookAtPart_Record>) -> Bool;

  public final native func BodyPart() -> CName;

  public final native func SoftLimitDegrees() -> Float;

  public final native func TransitionSpeed() -> Float;

  public final native func Priority() -> Int32;

  public final native func Suppress() -> Float;

  public final native func BackLimitDegrees() -> Float;

  public final native func Mode() -> Int32;

  public final native func HardLimitDistance() -> Float;

  public final native func HardLimitDegrees() -> Float;

  public final native func FollowingSpeedFactorOverride() -> Float;

  public final native func OutTransitionSpeed() -> Float;

  public final native func CalculatePositionInParentSpace() -> Bool;

  public final native func HasOutTransition() -> Bool;

  public final native func AttachLeftHandtoRightHand() -> Bool;

  public final native func AttachRightHandtoLeftHand() -> Bool;
}

public native struct InputHintData {

  public edit native let action: CName;

  public edit native let source: CName;

  public edit native let groupId: CName;

  public edit native let localizedLabel: String;

  public edit native let queuePriority: Int32;

  public edit native let sortingPriority: Int32;

  public edit native let tutorialAction: CName;

  public edit native let tutorialActionCount: Int32;

  public edit native let holdIndicationType: inkInputHintHoldIndicationType;

  public edit native let enableHoldAnimation: Bool;
}

public native class UpdateInputHintEvent extends Event {

  public edit native let data: InputHintData;

  public edit native let show: Bool;

  public edit native let targetHintContainer: CName;
}

public class TurnOnVisibilitySenseComponent extends Event {
}

public struct ThreatPersistanceMemory {

  public let threats: array<wref<Entity>>;

  public let isPersistent: array<Bool>;
}

public native class HostLeftSquad extends AIEvent {

  public native let squadInterface: wref<SquadScriptInterface>;
}

public class OnSquadmateDied extends Event {

  public let squad: CName;

  public let squadmate: wref<Entity>;

  public let killer: wref<Entity>;
}

public native class HostileThreatDetected extends AIEvent {

  public native let owner: wref<Entity>;

  public native let threat: wref<Entity>;

  public native let status: Bool;
}

public class PlayerHostileThreatDetected extends HostileThreatDetected {
}

public native class NewThreat extends AIEvent {

  public native let owner: wref<Entity>;

  public native let threat: wref<Entity>;

  public native let isHostile: Bool;

  public native let isEnemy: Bool;
}

public native class EnemyThreatDetected extends AIEvent {

  public native let owner: wref<Entity>;

  public native let threat: wref<Entity>;

  public native let status: Bool;
}

public static native func IsSingleplayer() -> Bool;

public native class Rule_Record extends TweakDBRecord {

  public final native func Stimulus() -> wref<StimType_Record>;

  public final native func StimulusHandle() -> ref<StimType_Record>;

  public final native func Output() -> wref<Output_Record>;

  public final native func OutputHandle() -> ref<Output_Record>;

  public final native func WorkspotOutput() -> CName;

  public final native func Cooldown() -> Float;
}

public struct ReactionOutput {

  public let reactionBehavior: gamedataOutput;

  public let reactionPriority: Int32;

  public let AIbehaviorPriority: Float;

  public let reactionCooldown: Float;

  public let startedInWorkspot: Bool;

  public let workspotReaction: Bool;

  public let workspotReactionType: CName;
}

public native class Output_Record extends TweakDBRecord {

  public final native func OutputName() -> String;

  public final native func Priority() -> Int32;

  public final native func AIPriority() -> Float;

  public final native func Type() -> gamedataOutput;
}

public class DetectionRiseEvent extends SenseVisibilityEvent {
}

public class OnBeingNoticed extends Event {

  public let objectThatNoticed: wref<GameObject>;
}

public class TargetAssessmentRequest extends ScriptableDeviceAction {

  public let targetToAssess: wref<GameObject>;
}

public native class SenseEnabledEvent extends Event {

  public native let isEnabled: Bool;
}

public class ReevaluateDetectionOverwriteEvent extends Event {

  public let target: wref<Entity>;
}

public native class OnRemoveDetection extends Event {

  public native let target: wref<GameObject>;
}

public abstract native class AttitudeChangedEvent extends Event {

  public native let attitude: EAIAttitude;

  public native let otherAgent: wref<AttitudeAgent>;
}

public native class SuspiciousObjectEvent extends Event {

  public native let target: wref<GameObject>;

  public native let description: CName;
}

public native class HACK_UseSensePresetEvent extends Event {

  public native let sensePreset: TweakDBID;
}

public struct CameraRotationData {

  public let m_pitch: Float;

  public let m_maxPitch: Float;

  public let m_minPitch: Float;

  public let m_yaw: Float;

  public let m_maxYaw: Float;

  public let m_minYaw: Float;
}

public class SetJammedEvent extends Event {

  public let newJammedState: Bool;

  public let instigator: wref<WeaponObject>;
}

public class DisableAreaIndicatorEvent extends Event {
}

public class TargetLockedEvent extends Event {
}

public native class SensePreset_Record extends TweakDBRecord {

  public final native func Shapes(out outList: array<wref<SenseShape_Record>>) -> Void;

  public final native func GetShapesCount() -> Int32;

  public final native func GetShapesItem(index: Int32) -> wref<SenseShape_Record>;

  public final native func GetShapesItemHandle(index: Int32) -> wref<SenseShape_Record>;

  public final native func ShapesContains(item: wref<SenseShape_Record>) -> Bool;

  public final native func Curves(out outList: array<wref<DetectionCurve_Record>>) -> Void;

  public final native func GetCurvesCount() -> Int32;

  public final native func GetCurvesItem(index: Int32) -> wref<DetectionCurve_Record>;

  public final native func GetCurvesItemHandle(index: Int32) -> wref<DetectionCurve_Record>;

  public final native func CurvesContains(item: wref<DetectionCurve_Record>) -> Bool;

  public final native func MaterialCurves(out outList: array<wref<DetectionCurve_Record>>) -> Void;

  public final native func GetMaterialCurvesCount() -> Int32;

  public final native func GetMaterialCurvesItem(index: Int32) -> wref<DetectionCurve_Record>;

  public final native func GetMaterialCurvesItemHandle(index: Int32) -> wref<DetectionCurve_Record>;

  public final native func MaterialCurvesContains(item: wref<DetectionCurve_Record>) -> Bool;

  public final native func DayNightCurve() -> CName;

  public final native func DetectionDropFactor() -> Float;

  public final native func DetectionDifficultyModifierNormal() -> Float;

  public final native func DetectionCoolDownTime() -> Float;

  public final native func DetectionDifficultyModifierEasy() -> Float;

  public final native func DetectionDifficultyModifierHard() -> Float;

  public final native func DetectionPartCoolDownTime() -> Float;

  public final native func DetectionFactor() -> Float;

  public final native func DetectionDifficultyModifierVeryHard() -> Float;

  public final native func UseZCorrection() -> Bool;

  public final native func IgnorePhysicsTest() -> Bool;
}

public native class OnDetectedEvent extends SenseVisibilityEvent {
}

public class LostTargetDelayFalsePositivesDelay extends Event {

  public let target: wref<GameObject>;
}

public abstract native class ISenseShape extends IScriptable {

  public final native func GetType() -> senseEShapeType;
}

public native class SenseCone extends ISenseShape {

  public native let position1: Vector4;

  public native let position2: Vector4;

  public native let radius1: Float;

  public native let radius2: Float;
}

public class SecuritySystemForceAttitudeChange extends ScriptableDeviceAction {

  public let newAttitude: CName;
}

public class TCSInputXYAxisEvent extends Event {

  public let isAnyInput: Bool;
}

public class NetworkLinkQuickhackEvent extends Event {

  public let netrunnerID: EntityID;

  public let proxyID: EntityID;

  public let targetID: EntityID;

  public let from: EntityID;

  public let to: EntityID;
}

public class NPCKillDelayEvent extends Event {

  public let target: wref<GameObject>;

  public let isLethalTakedown: Bool;

  public let disableKillReward: Bool;
}

public class ExplosiveDeviceHideDeviceEvent extends Event {
}

public class SwapMeshDelayedEvent extends Event {
}

public final native class gameDeathEvent extends Event {

  public native let instigator: wref<GameObject>;
}

public class MinigameFailEvent extends Event {
}

public static native func GetFixedEntityIdsFromSpawnerEntityID(entityID: EntityID, communityEntryNames: array<CName>, gameInstance: GameInstance, out outEntityIds: array<EntityID>) -> Void;

public final native class EntitySpawnerEventsBroadcaster extends IEntitySpawnerEventsBroadcaster {

  public final native func RegisterSpawnerEventPSListener(spawnerOrCommunityId: EntityID, communityEntryName: CName, psListenerPersistentId: PersistentID, psListenerClassName: CName) -> Uint32;

  public final native func UnregisterSpawnerEventPSListener(registerId: Uint32) -> Void;
}

public native class gameEntitySpawnerEvent extends Event {

  public native let spawnedEntityId: EntityID;

  public native let eventType: gameEntitySpawnerEventType;
}

public class DrawNetworkSquadEvent extends Event {

  public let shouldDraw: Bool;

  public let memberID: PersistentID;

  public let fxResource: FxResource;

  public let isPing: Bool;

  public let revealMaster: Bool;

  public let revealSlave: Bool;

  public let memberOnly: Bool;

  public let duration: Float;
}

public class Validate extends Event {
}

public class NetworkAreaActivationEvent extends Event {

  public let enable: Bool;
}

public class ControlledDeviceData extends WidgetCustomData {

  public let m_isActive: Bool;
}

public struct ConnectedClassTypes {

  public let surveillanceCamera: Bool;

  public let securityTurret: Bool;

  public let puppet: Bool;
}

public class ManageAreaComponent extends Event {

  public let enable: Bool;
}

public class SecurityAreaTypeChangedNotification extends Event {

  public let previousType: ESecurityAreaType;

  public let currentType: ESecurityAreaType;

  public let area: wref<SecurityAreaControllerPS>;
}

public struct EventsFilters {

  @attrib(toolitp, "DETERMINES UNDER WHAT CIRCUMSTANCES THIS AREA IS ALLOWED TO RECEIVE EVENTS FROM ANOTHER AREAS AND WHICH DID NOT ORIGINATE INSIDE THIS AREA. ALLOW_COMBAT_ONLY EXPLANATION: Only events where SecuritySystem states that it's in COMBAT are accepted. Others are discarded.")
  @default(EventsFilters, EFilterType.ALLOW_ALL)
  public let incomingEventsFilter: EFilterType;

  @attrib(tooltip, "DETERMINES UNDER WHAT CIRCUMSTANCES THIS AREA IS ALLOWED TO SHARE EVENTS THAT ORIGINATED IN THIS AREA, WITH OTHER AREAS THAT ARE PART OF THE SAME SECURITY SYSTEM. ALLOW_COMBAT_ONLY EXPLANATION: All events that would not change SecuritySystemState to COMBAT are IGNORED.")
  @default(EventsFilters, EFilterType.ALLOW_ALL)
  public let outgoingEventsFilter: EFilterType;
}

public class Transition extends Event {

  public let listenerID: Uint32;
}

public class RegisterTimeListeners extends Event {
}

public struct RevealPlayerSettings {

  public edit let revealPlayer: ERevealPlayerType;

  @attrib(tooltip, "If true - player will be revealed to NPCs even if he is already outside of SecuritySystem perimeter")
  public edit let revealPlayerOutsideSecurityPerimeter: Bool;
}

public class QuestModifyFilters extends Event {

  public edit let incomingFilters: EQuestFilterType;

  public edit let outgoingFilters: EQuestFilterType;
}

public struct OnDisableAreaData {

  public let agent: PersistentID;

  public let remainingAreas: array<ref<SecurityAreaControllerPS>>;
}

public struct SecuritySystemOutputData {

  public let link: DeviceLink;

  public let breachOrigin: EBreachOrigin;

  public let delayDuration: Float;
}

public class MadnessDebuff extends Event {

  public let object: wref<GameObject>;
}

public class BlacklistPeriodEnded extends Event {

  public let entityID: EntityID;
}

public native struct DelayID {
}

public class SuppressSecuritySystemReaction extends Event {

  public let enableProtection: Bool;

  public let protectedEntityID: EntityID;

  public let entered: Bool;

  public let hasEntityWithdrawn: Bool;
}

public class DeescalationEvent extends Event {

  public let originalNotification: ref<SecuritySystemInput>;
}

public class ModifyOverlappedSecurityAreas extends Event {

  public let isEntering: Bool;

  public let zoneID: PersistentID;
}

public struct InterestingFacts {

  public let m_zone: CName;
}

public static native func OperatorGreater(a: Uint8, b: Uint8) -> Bool;

public static native func OperatorAssignSubtract(out a: Uint8, b: Uint8) -> Uint8;

public class ProcessRelevantDevicesForNetworkGridEvent extends ProcessDevicesEvent {

  public let ignoreRevealed: Bool;

  public let finalizeRegistrationAsMaster: Bool;

  public let breachedResource: FxResource;

  public let defaultResource: FxResource;

  public let isPing: Bool;

  public let lifetime: Float;

  public let revealSlave: Bool;

  public let revealMaster: Bool;
}

public class SecuritySystemDisabled extends Event {
}

public struct SecurityGateDetectionProperties {

  @attrib(tooltip, "Checks if puppet has any item that falls into gamedataItemCategory.Weapon category")
  @default(SecurityGateDetectionProperties, true)
  public let performWeaponCheck: Bool;

  @attrib(tooltip, "Checks if puppet has any item that falls into gamedataItemCategory.Cyberware category")
  @default(SecurityGateDetectionProperties, false)
  public let performCyberwareCheck: Bool;

  @attrib(tooltip, "Define whether security gate should perform scan if puppet enters from particular side or any side")
  public let scannerEntranceType: ESecurityGateEntranceType;

  @default(SecurityGateDetectionProperties, true)
  public let performCheckOnPlayerOnly: Bool;
}

public struct TrespasserEntry {

  public let trespasser: wref<GameObject>;

  public let isScanned: Bool;

  public let isInsideA: Bool;

  public let isInsideB: Bool;

  public let isInsideScanner: Bool;

  public let areaStack: array<CName>;
}

public struct SecurityGateResponseProperties {

  @attrib(tooltip, "How security gate should react to tresspassing. Reprimand / Combat work only with Security System connected to this Gate")
  @default(SecurityGateResponseProperties, ESecurityGateResponseType.SEC_SYS_REPRIMAND)
  public let securityGateResponseType: ESecurityGateResponseType;

  @attrib(tooltip, "What access should be given to the user if he passes scanner succesfully")
  @default(SecurityGateResponseProperties, ESecurityAccessLevel.ESL_3)
  public let securityLevelAccessGranted: ESecurityAccessLevel;
}

public class SecurityGateResponse extends Event {

  public let scanSuccessful: Bool;
}

public class SecurityGateForceUnlock extends Event {

  public let entranceAllowedFor: EntityID;

  public let shouldUnlock: Bool;
}

public class InitiateScanner extends Event {

  public let trespasserEntryIndex: Int32;
}

public class RevokeAuthorization extends Event {

  public let user: EntityID;

  public let level: ESecurityAccessLevel;
}

public struct AgentDistanceToTarget {

  public let distance: Float;

  public let index: Int32;
}

public class NotifiedSecSysAboutCombat extends Event {
}

public class AutomaticDeescalationEvent extends Event {

  public let originalNotification: ref<SecuritySystemInput>;
}

public class WakeUpFromRestartEvent extends Event {
}

public class SecuritySystemEnabled extends Event {
}

public class ActionForceResetDevice extends ActionBool {

  @default(ActionForceResetDevice, 30)
  public let m_restartDuration: Int32;
}

public abstract class QuestSecuritySystemInput extends Event {

  @attrib(tooltip, "GLOBAL = All NPCs in Security System + SpecificNPCs. SPECIFIC_AGENTS_ONLY = Only NPCs who you specified in NotifySpecificNPCs")
  public edit let notificationScope: SecurityEventScopeSettings;

  @attrib(tooltip, "This npc will react to this event. They don't have to be part of Security System")
  public edit const let notifySpecificNPCs: array<NPCReference>;

  public edit let revealPlayerSettings: RevealPlayerSettings;
}

public class AreaEffectVisualisationRequest extends Event {

  public let areaEffectID: CName;

  public let show: Bool;
}

public class RefreshPowerOnSlavesEvent extends ProcessDevicesEvent {
}

public class ForceUpdateDefaultHighlightEvent extends Event {
}

public struct VehicleActionsContext {

  public let requestorID: EntityID;

  public let requestType: gamedeviceRequestType;

  public let interactionLayerTag: CName;

  public let processInitiatorObject: wref<GameObject>;

  public let eventType: gameinteractionsEInteractionEventType;
}

public struct TemporaryDoorState {

  public let door: EVehicleDoor;

  public let interactionState: VehicleDoorInteractionState;
}

public class VehicleBodyDisposalPerformedEvent extends Event {
}

public native class WheeledObject extends VehicleObject {

  public final native func ToggleBrokenTire(tireID: Uint32, toggle: Bool) -> Bool;
}

public native class CarObject extends WheeledObject {
}

public native class VehicleFinishedMountingEvent extends Event {

  public native let slotID: CName;

  public native let isMounting: Bool;

  public native let character: wref<GameObject>;
}

public class VehicleStartedUnmountingEvent extends Event {

  public let slotID: CName;

  public let isMounting: Bool;

  public let character: wref<GameObject>;
}

public native class vehicleChangeWindowStateEvent extends Event {

  public native let door: EVehicleDoor;

  public native let state: EQuestVehicleWindowState;
}

public native class vehicleToggleDoorWrapperEvent extends Event {

  public native let door: EVehicleDoor;

  public native let action: EQuestVehicleDoorState;
}

public class VehicleSeatReservationEvent extends Event {

  public let slotID: CName;

  public let reserve: Bool;
}

public class ForwardVehicleQuestEnableUIEvent extends Event {

  public let mode: vehicleQuestUIEnable;
}

public class ForwardVehicleQuestUIEffectEvent extends Event {

  public let glitch: Bool;

  public let panamVehicleStartup: Bool;

  public let panamScreenType1: Bool;

  public let panamScreenType2: Bool;

  public let panamScreenType3: Bool;

  public let panamScreenType4: Bool;
}

public class ForwardVehicleRaceUIEvent extends Event {

  public let mode: vehicleRaceUI;

  public let maxPosition: Int32;

  public let maxCheckpoints: Int32;
}

public native class CrowdMemberComponent extends IComponent {

  public final native func ChangeFearStage(stage: gameFearStage, opt playInitAniation: Bool) -> Bool;

  public final native func ChangeMoveType(name: CName) -> Bool;

  public final native func IsInCrowd() -> Bool;

  public final native func SetThreatLastKnownPosition(position: Vector4) -> Void;

  public final native func TryChangeMovementDirection() -> Void;

  public final native func TryStopTrafficMovement() -> Void;

  public final native func GetMovementDirection() -> Vector4;

  public final native func CheckEmptyPath(distance: Float) -> Bool;

  public final native func CheckIsMoving() -> Bool;

  public final native func AllowWorkspotsUsage(allowUsage: Bool) -> Void;

  public final native func OnCrowdReaction(stimType: gamedataStimType) -> Void;
}

public class CrowdMemberBaseComponent extends CrowdMemberComponent {
}

public native class MountingEvent extends Event {

  public native let request: ref<MountingRequest>;

  public native let relationship: MountingRelationship;
}

public native class MountingRequest extends IScriptable {

  public native let lowLevelMountingInfo: MountingInfo;

  public native let preservePositionAfterMounting: Bool;

  public native let mountData: ref<MountEventData>;
}

public native class MountEventOptions extends IScriptable {

  public let entityID: EntityID;

  public let alive: Bool;

  public let occupiedByNeutral: Bool;

  public native let silentUnmount: Bool;
}

public native class UnmountingEvent extends Event {

  public native let request: ref<UnmountingRequest>;

  public native let relationship: MountingRelationship;
}

public native class UnmountingRequest extends IScriptable {

  public native let lowLevelMountingInfo: MountingInfo;

  public native let mountData: ref<MountEventData>;
}

public native class VehicleManufacturer_Record extends TweakDBRecord {

  public final native func EnumName() -> String;

  public final native func EnumComment() -> String;

  public final native func Type() -> gamedataVehicleManufacturer;
}

public native class VehicleUIData_Record extends TweakDBRecord {

  public final native func DriveLayout() -> String;

  public final native func ProductionYear() -> String;

  public final native func Info() -> String;

  public final native func Mass() -> Float;

  public final native func Horsepower() -> Float;
}

public native class BikeObject extends WheeledObject {

  public final native func IsTiltControlEnabled() -> Bool;

  public final native func EnableTiltControl(enable: Bool) -> Void;

  public final native func GetCustomTargetTilt() -> Float;

  public final native func SetCustomTargetTilt(targetTilt: Float) -> Void;
}

public class CrowdSettingsEvent extends Event {

  public let movementType: CName;

  public let resetFear: Bool;
}

public class HandleReactionEvent extends Event {

  public let fearPhase: Int32;

  public let stimEvent: ref<StimuliEvent>;

  public let eventResent: Bool;
}

public class DelayedCrowdReactionEvent extends Event {

  public let stimEvent: ref<StimuliEvent>;

  public let vehicleFearPhase: Int32;
}

public native class VehicleFlippedOverEvent extends Event {

  public native let isFlippedOver: Bool;
}

public class VehicleDamageStageTurnOffEvent extends Event {
}

public native class VehicleDefaultState_Record extends TweakDBRecord {

  public final native func Seat_back_right() -> wref<SeatState_Record>;

  public final native func Seat_back_rightHandle() -> ref<SeatState_Record>;

  public final native func Seat_front_left() -> wref<SeatState_Record>;

  public final native func Seat_front_leftHandle() -> ref<SeatState_Record>;

  public final native func Seat_front_right() -> wref<SeatState_Record>;

  public final native func Seat_front_rightHandle() -> ref<SeatState_Record>;

  public final native func Seat_back_left() -> wref<SeatState_Record>;

  public final native func Seat_back_leftHandle() -> ref<SeatState_Record>;

  public final native func Trunk() -> wref<SeatState_Record>;

  public final native func TrunkHandle() -> ref<SeatState_Record>;

  public final native func Hood() -> wref<SeatState_Record>;

  public final native func HoodHandle() -> ref<SeatState_Record>;

  public final native func DisableAllInteractions() -> Bool;

  public final native func QuestLockAll() -> Bool;

  public final native func SpawnDestroyed() -> Bool;

  public final native func CloseAll() -> Bool;

  public final native func SirenLight() -> Bool;

  public final native func OpenAll() -> Bool;

  public final native func SirenSounds() -> Bool;

  public final native func Thrusters() -> Bool;

  public final native func LockAll() -> Bool;
}

public native class SeatState_Record extends TweakDBRecord {

  public final native func ForceOpen() -> Bool;

  public final native func ForceClose() -> Bool;

  public final native func EnableInteraction() -> Bool;

  public final native func ForceUnlock() -> Bool;

  public final native func DisableInteraction() -> Bool;

  public final native func ForceLock() -> Bool;

  public final native func QuestLock() -> Bool;
}

public class VehicleSirenDelayEvent extends Event {

  public let lights: Bool;

  public let sounds: Bool;
}

public native class InteractionMultipleSetEnableEvent extends Event {

  public final native func PushBack(enable: Bool, layer: CName, opt linkedLayers: CName) -> Void;
}

public class AnimFeature_PartData extends AnimFeatureMarkUnstable {

  public edit let state: Int32;

  public edit let duration: Float;
}

public native class VehicleParkedEvent extends Event {

  public native let park: Bool;
}

public class VehicleLightSetupEvent extends Event {
}

public class AnimFeature_VehicleState extends AnimFeatureMarkUnstable {

  public edit let tppEnabled: Bool;
}

public class VehicleCrystalDomeOnDelayEvent extends Event {
}

public native class VehicleCameraManager extends IScriptable {

  public final native func IsTPPActive() -> Bool;

  public final native func GetActivePerspective() -> vehicleCameraPerspective;
}

public class VehicleCrystalDomeMeshVisibilityDelayEvent extends Event {
}

public class VehicleCrystalDomeOffDelayEvent extends Event {
}

public class AnimFeature_CamberData extends AnimFeatureMarkUnstable {

  public edit let rightFrontCamber: Float;

  public edit let leftFrontCamber: Float;

  public edit let rightBackCamber: Float;

  public edit let leftBackCamber: Float;

  public edit let rightFrontCamberOffset: Vector4;

  public edit let leftFrontCamberOffset: Vector4;

  public edit let rightBackCamberOffset: Vector4;

  public edit let leftBackCamberOffset: Vector4;
}

public native class VehicleVisualDestruction_Record extends TweakDBRecord {

  public final native func Left() -> Float;

  public final native func BackRight() -> Float;

  public final native func FrontLeft() -> Float;

  public final native func BackLeft() -> Float;

  public final native func Front() -> Float;

  public final native func Right() -> Float;

  public final native func Back() -> Float;

  public final native func FrontRight() -> Float;

  public final native func Roof() -> Float;

  public final native func SetVisualDestruction() -> Bool;
}

public native class VehicleType_Record extends TweakDBRecord {

  public final native func EnumName() -> String;

  public final native func EnumComment() -> String;

  public final native func Type() -> gamedataVehicleType;
}

public class AnimFeature_VehicleNPCData extends AnimFeature {

  public edit let isDriver: Bool;

  public edit let side: Int32;
}

public native class ConfigVarListener extends IScriptable {

  public native func OnVarModified(groupPath: CName, varName: CName, varType: ConfigVarType, reason: ConfigChangeReason) -> Void;

  public final native func Register(groupPath: CName) -> Bool;
}

public native class UserSettings extends IScriptable {

  public final native func HasGroup(groupPath: CName) -> Bool;

  public final native func HasVar(groupPath: CName, varName: CName) -> Bool;

  public final native func GetRootGroup() -> ref<ConfigGroup>;

  public final native func GetGroup(groupPath: CName) -> ref<ConfigGroup>;

  public final native func GetVar(groupPath: CName, varName: CName) -> ref<ConfigVar>;

  public final native func NeedsConfirmation() -> Bool;

  public final native func ConfirmChanges() -> Void;

  public final native func RejectChanges() -> Void;

  public final native func NeedsRestartToApply() -> Bool;

  public final native func RejectRestartToApply() -> Void;

  public final native func NeedsLoadLastCheckpoint() -> Bool;

  public final native func RejectLoadLastCheckpointChanges() -> Void;

  public final native func WasModifiedSinceLastSave() -> Bool;

  public final native func RequestNeedsRestartDialog() -> Void;

  public final native func RequestConfirmationDialog() -> Void;

  public final native func RequestLoadLastCheckpointDialog() -> Void;

  public final native func RequestRestoreDefaultDialog(isPreGame: Bool, onlyVisible: Bool, opt groupPath: CName) -> Void;

  public final native func RestoreVarToDefault(groupPath: CName, varName: CName) -> Void;

  public final native func GetUserSettingsLoadStatus() -> UserSettingsLoadStatus;

  public final native func GetMenuIndex() -> Int32;

  public final native func SetMenuIndex(index: Int32) -> Void;
}

public native class ConfigVar extends IScriptable {

  public final native func GetName() -> CName;

  public final native func GetGroupPath() -> CName;

  public final native func GetGroup() -> ref<ConfigGroup>;

  public final native func GetDisplayName() -> CName;

  public final native func GetDisplayNameKey(index: Int32) -> CName;

  public final native func GetDisplayNameKeysSize() -> Int32;

  public final native func GetDescription() -> CName;

  public final native func GetType() -> ConfigVarType;

  public final native func GetUpdatePolicy() -> ConfigVarUpdatePolicy;

  public final native func IsInPreGame() -> Bool;

  public final native func IsInGame() -> Bool;

  public final native func IsVisible() -> Bool;

  public final native func IsDisabled() -> Bool;

  public final native func IsPlatformSpecific() -> Bool;

  public final native func IsDynamic() -> Bool;

  public final native func IsDynamicInitialized() -> Bool;

  public final native func ListHasDisplayValues() -> Bool;

  public final native func GetOrder() -> Int32;

  public final native func WasModifiedSinceLastSave() -> Bool;

  public final native func HasRequestedValue() -> Bool;

  public final native func RestoreDefault() -> Bool;

  public final native func SetVisible(isVisible: Bool) -> Void;
}

public native class ConfigGroup extends IScriptable {

  public final native func GetParentPath() -> CName;

  public final native func GetPath() -> CName;

  public final native func GetName() -> CName;

  public final native func GetDisplayName() -> CName;

  public final native func GetGroups(isPreGame: Bool) -> array<ref<ConfigGroup>>;

  public final native func GetOrder() -> Int32;

  public final native func GetVar(varName: CName) -> ref<ConfigVar>;

  public final native func GetVars(isPreGame: Bool) -> array<ref<ConfigVar>>;

  public final native func HasGroups() -> Bool;

  public final native func HasVars(isPreGame: Bool) -> Bool;

  public final native func IsEmpty(isPreGame: Bool) -> Bool;

  public final native func HasVar(varName: CName) -> Bool;
}

public native class ConfigVarListFloat extends ConfigVar {

  public final native func GetValueFor(index: Int32) -> Float;

  public final native func GetValue() -> Float;

  public final native func GetDefaultValue() -> Float;

  public final native func GetValues() -> array<Float>;

  public final native func GetIndexFor(value: Float) -> Int32;

  public final native func GetIndex() -> Int32;

  public final native func GetDefaultIndex() -> Int32;

  public final native func SetIndex(index: Int32) -> Void;

  public final native func GetDisplayValue(index: Int32) -> CName;
}

public native class ConfigVarListString extends ConfigVar {

  public final native func GetValueFor(index: Int32) -> String;

  public final native func GetValue() -> String;

  public final native func GetDefaultValue() -> String;

  public final native func GetValues() -> array<String>;

  public final native func GetIndexFor(value: String) -> Int32;

  public final native func GetIndex() -> Int32;

  public final native func GetDefaultIndex() -> Int32;

  public final native func SetIndex(index: Int32) -> Void;

  public final native func GetDisplayValue(index: Int32) -> CName;
}

public class MinutePassedEvent extends Event {
}

public static native func StrReplace(const str: script_ref<String>, const match: script_ref<String>, const with: script_ref<String>) -> String;

public static native func StrChar(i: Int32) -> String;

public class AnimFeature_VehicleSteeringLimit extends AnimFeatureMarkUnstable {

  public edit let state: Int32;
}

public final native class RagdollDisableEvent extends Event {
}

public class AnimFeature_NPCVehicleAdditionalFeatures extends AnimFeatureMarkUnstable {

  public edit let state: Bool;
}

public native class vehicleController extends GameComponent {

  public final native func SetLightColor(lightType: vehicleELightType, color: Color, opt inTime: Float) -> Void;

  public final native func ResetLightColor(lightType: vehicleELightType, opt inTime: Float) -> Void;

  public final native func SetLightStrength(lightType: vehicleELightType, strength: Float, opt inTime: Float) -> Void;

  public final native func ResetLightStrength(lightType: vehicleELightType, opt inTime: Float) -> Void;

  public final native func SetLightParameters(lightType: vehicleELightType, strength: Float, color: Color, opt inTime: Float) -> Void;

  public final native func ResetLightParameters(lightType: vehicleELightType, opt inTime: Float) -> Void;

  public final native func ToggleLights(on: Bool, opt lightType: vehicleELightType, opt inTime: Float, opt lerpCurve: CName, opt loop: Bool) -> Void;
}

public native class VehicleStartedMountingEvent extends Event {

  public native let slotID: CName;

  public native let isMounting: Bool;

  public native let character: wref<GameObject>;

  public native let instant: Bool;
}

public native struct gameinteractionsActiveLayerData {

  public native let activator: wref<GameObject>;

  public native let linkedLayersName: CName;

  public native let layerName: CName;
}

public class KnockOverBikeEvent extends Event {

  public let forceKnockdown: Bool;

  public let applyDirectionalForce: Bool;
}

public native class VehicleWaterEvent extends Event {

  public native let isInWater: Bool;
}

public native class VehicleDestruction_Record extends TweakDBRecord {

  public final native func DetachableParts(out outList: array<wref<VehicleDetachablePart_Record>>) -> Void;

  public final native func GetDetachablePartsCount() -> Int32;

  public final native func GetDetachablePartsItem(index: Int32) -> wref<VehicleDetachablePart_Record>;

  public final native func GetDetachablePartsItemHandle(index: Int32) -> wref<VehicleDetachablePart_Record>;

  public final native func DetachablePartsContains(item: wref<VehicleDetachablePart_Record>) -> Bool;

  public final native func Glass(out outList: array<wref<VehicleDestructibleGlass_Record>>) -> Void;

  public final native func GetGlassCount() -> Int32;

  public final native func GetGlassItem(index: Int32) -> wref<VehicleDestructibleGlass_Record>;

  public final native func GetGlassItemHandle(index: Int32) -> wref<VehicleDestructibleGlass_Record>;

  public final native func GlassContains(item: wref<VehicleDestructibleGlass_Record>) -> Bool;

  public final native func Wheels(out outList: array<wref<VehicleDestructibleWheel_Record>>) -> Void;

  public final native func GetWheelsCount() -> Int32;

  public final native func GetWheelsItem(index: Int32) -> wref<VehicleDestructibleWheel_Record>;

  public final native func GetWheelsItemHandle(index: Int32) -> wref<VehicleDestructibleWheel_Record>;

  public final native func WheelsContains(item: wref<VehicleDestructibleWheel_Record>) -> Bool;

  public final native func Lights(out outList: array<wref<VehicleDestructibleLight_Record>>) -> Void;

  public final native func GetLightsCount() -> Int32;

  public final native func GetLightsItem(index: Int32) -> wref<VehicleDestructibleLight_Record>;

  public final native func GetLightsItemHandle(index: Int32) -> wref<VehicleDestructibleLight_Record>;

  public final native func LightsContains(item: wref<VehicleDestructibleLight_Record>) -> Bool;

  public final native func DeformableParts(out outList: array<wref<VehicleDeformablePart_Record>>) -> Void;

  public final native func GetDeformablePartsCount() -> Int32;

  public final native func GetDeformablePartsItem(index: Int32) -> wref<VehicleDeformablePart_Record>;

  public final native func GetDeformablePartsItemHandle(index: Int32) -> wref<VehicleDeformablePart_Record>;

  public final native func DeformablePartsContains(item: wref<VehicleDeformablePart_Record>) -> Bool;

  public final native func PointDampers(out outList: array<wref<VehicleDestructionPointDamper_Record>>) -> Void;

  public final native func GetPointDampersCount() -> Int32;

  public final native func GetPointDampersItem(index: Int32) -> wref<VehicleDestructionPointDamper_Record>;

  public final native func GetPointDampersItemHandle(index: Int32) -> wref<VehicleDestructionPointDamper_Record>;

  public final native func PointDampersContains(item: wref<VehicleDestructionPointDamper_Record>) -> Bool;

  public final native func DetachedPartExplosionEffect() -> ResRef;

  public final native func GridDimensions() -> Vector3;

  public final native func GridLocalOffset() -> Vector3;

  public final native func VehicleDimensions() -> Vector3;

  public final native func DamageExponent() -> Float;

  public final native func VelocityValueMinDamage() -> Float;

  public final native func DamageThreshold() -> Float;

  public final native func OnHitVelocity() -> Float;

  public final native func ForcePropagationFalloff() -> Float;

  public final native func VelocityValueMaxDamage() -> Float;

  public final native func EnableOnHit() -> Bool;
}

public native class VehicleGlassDestructionEvent extends Event {

  public native let glassName: CName;
}

public native class VehicleDestructibleGlass_Record extends TweakDBRecord {

  public final native func GridCells() -> array<Int32>;

  public final native func GetGridCellsCount() -> Int32;

  public final native func GetGridCellsItem(index: Int32) -> Int32;

  public final native func GridCellsContains(item: Int32) -> Bool;

  public final native func Component() -> CName;

  public final native func Effect() -> CName;

  public final native func Broken() -> CName;

  public final native func Threshold() -> Float;

  public final native func IsWindshield() -> Bool;
}

public class ReevaluateOxygenEvent extends Event {
}

public native class InteractionActivationEvent extends InteractionBaseEvent {

  public native let eventType: gameinteractionsEInteractionEventType;

  public final native const func IsInputLayerEvent() -> Bool;
}

public native class InteractionChoiceEvent extends InteractionBaseEvent {

  public native let choice: InteractionChoice;

  public native let actionType: gameinputActionType;
}

public native class StealVehicleEvent extends Event {
}

public class DisableAlarmEvent extends Event {
}

public native class vehicleChangeStateEvent extends Event {

  public native let state: vehicleEState;
}

public class VehicleExternalDoorRequestEvent extends Event {

  public let slotName: CName;

  public let autoClose: Bool;

  public let autoCloseTime: Float;
}

public class ToggleDoorInteractionEvent extends Event {
}

public class DumpBodyWorkspotDelayEvent extends Event {
}

public class VehicleDumpBodyCloseTrunkEvent extends Event {
}

public class PickupBodyWorkspotDelayEvent extends Event {
}

public class StorageUserData extends IScriptable {

  public let storageObject: wref<GameObject>;
}

public native class SummonStartedEvent extends Event {

  public native let state: vehicleSummonState;
}

public native class SummonFinishedEvent extends Event {

  public native let state: vehicleSummonState;
}

public native class VehicleGridDestructionEvent extends Event {

  public native let state: array<Float; 16>;

  public native let rawChange: array<Float; 16>;

  public native let desiredChange: array<Float; 16>;
}

public native class VehicleOnPartDetachedEvent extends Event {

  public native let partName: CName;
}

public class VehicleHornOffDelayEvent extends Event {
}

public class VehicleHornProbsEvent extends Event {

  public let honkMinTime: Float;

  public let honkMaxTime: Float;

  public let probability: Float;
}

public final native class FactChangedEvent extends Event {

  public final native const func GetFactName() -> CName;
}

public class VehicleForwardRaceCheckpointFactEvent extends Event {
}

public class VehicleRaceClockUpdateEvent extends TickableEvent {
}

public class VehicleForwardRaceClockUpdateEvent extends Event {
}

public class SetIgnoreAutoDoorCloseEvent extends Event {

  public let set: Bool;
}

public native class ActionAnimationScriptProxy extends CActionScriptProxy {

  public final native func Setup(animFeatureName: CName, animFeature: ref<AnimFeature_AIAction>, useRootMotion: Bool, usePoseMatching: Bool, resetRagdollOnStart: Bool, motionDynamicObjectsCheck: Bool, updadeMovePolicy: Bool, slideParams: ActionAnimationSlideParams, targetObject: wref<GameObject>, marginToPlayer: Float, opt tagetPositionProvider: ref<IPositionProvider>) -> Bool;

  public final native func ForceLaunch(animFeatureName: CName, animFeature: ref<AnimFeature_AIAction>, useRootMotion: Bool, usePoseMatching: Bool, resetRagdollOnStart: Bool, motionDynamicObjectsCheck: Bool, slideParams: ActionAnimationSlideParams, targetObject: wref<GameObject>, marginToPlayer: Float, opt tagetPositionProvider: ref<IPositionProvider>) -> Void;

  public final native func Terminate() -> Void;

  public final native func GetPhaseDuration(animFeatureName: CName, animFeature: ref<AnimFeature_AIAction>) -> Float;
}

public native class FriendlyFireParams extends IScriptable {

  public final native func SetShooter(attitude: wref<AttitudeAgent>, slotName: CName, attachmentName: CName) -> Void;

  public final native func SetGeometry(spread: Float, maxRange: Float) -> Void;

  public final native func SetCurrentTargetComponent(currentTarget: wref<TargetingComponent>) -> Void;

  public final native func SetCurrentTargetObject(currentTarget: wref<GameObject>) -> Void;

  public final native func SetFFApplyAttitude(FFApplyAttitude: EAIAttitude) -> Void;
}

public static native func OperatorAssignSubtract(out a: Vector4, b: Vector4) -> Vector4;

public abstract native class ILoSFinderSystem extends IGameSystem {

  public final native func StartChecking(params: ref<LoSFinderParams>) -> Uint32;

  public final native func StopChecking(id: Uint32) -> Bool;

  public final native func UpdateParams(id: Uint32, params: ref<LoSFinderParams>) -> Bool;

  public final native func GetLoSPosition(id: Uint32, position: script_ref<Vector3>) -> Bool;

  public final native func GetLoSMode(id: Uint32) -> gameLoSMode;
}

public native class LoSFinderParams extends IScriptable {

  public final native func SetSeeker(seeker: wref<GameObject>) -> Void;

  public final native func SetTarget(target: wref<VisibleObject>) -> Void;

  public final native func SetMode(mode: gameLoSMode) -> Void;

  public final native func SetOverrideCheckHeight(height: Float) -> Void;

  public final native func SetTracesAmountMultiplier(multiplier: Uint32) -> Void;
}

public class CombatGadgetDataDef extends BlackboardDefinition {

  public let throwUnequip: BlackboardID_Bool;

  public let lastThrowAngle: BlackboardID_Float;

  public let lastThrowPosition: BlackboardID_Vector4;

  public let lastThrowStartType: BlackboardID_Variant;
}

public class SetScriptExecutionContextEvent extends Event {

  public let scriptExecutionContext: ScriptExecutionContext;
}

public abstract native class BehaviorDelegate extends BehaviorBlackboard {

  public final native func GetParent() -> ref<BehaviorDelegate>;
}

public native class ScriptBehaviorDelegate extends BehaviorDelegate {
}

public native class AIActionSelector_Record extends AINode_Record {

  public final native func DefaultAction() -> wref<AIAction_Record>;

  public final native func DefaultActionHandle() -> ref<AIAction_Record>;

  public final native func Actions(out outList: array<wref<AIAction_Record>>) -> Void;

  public final native func GetActionsCount() -> Int32;

  public final native func GetActionsItem(index: Int32) -> wref<AIAction_Record>;

  public final native func GetActionsItemHandle(index: Int32) -> wref<AIAction_Record>;

  public final native func ActionsContains(item: wref<AIAction_Record>) -> Bool;

  public final native func DisableActionsLimit() -> Bool;

  public final native func FailOnNodeActivationConditionFailure() -> Bool;
}

public native class AIActionSequence_Record extends AINode_Record {

  public final native func Actions(out outList: array<wref<AIAction_Record>>) -> Void;

  public final native func GetActionsCount() -> Int32;

  public final native func GetActionsItem(index: Int32) -> wref<AIAction_Record>;

  public final native func GetActionsItemHandle(index: Int32) -> wref<AIAction_Record>;

  public final native func ActionsContains(item: wref<AIAction_Record>) -> Bool;

  public final native func HasMemory() -> Bool;

  public final native func DisableActionsLimit() -> Bool;

  public final native func FailOnNodeActivationConditionFailure() -> Bool;
}

public native class AIActionSmartComposite_Record extends AIRecord_Record {

  public final native func Type() -> wref<AISmartCompositeType_Record>;

  public final native func TypeHandle() -> ref<AISmartCompositeType_Record>;

  public final native func GracefulInterruptionCondition(out outList: array<wref<AIActionCondition_Record>>) -> Void;

  public final native func GetGracefulInterruptionConditionCount() -> Int32;

  public final native func GetGracefulInterruptionConditionItem(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func GetGracefulInterruptionConditionItemHandle(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func GracefulInterruptionConditionContains(item: wref<AIActionCondition_Record>) -> Bool;

  public final native func Nodes(out outList: array<wref<AINode_Record>>) -> Void;

  public final native func GetNodesCount() -> Int32;

  public final native func GetNodesItem(index: Int32) -> wref<AINode_Record>;

  public final native func GetNodesItemHandle(index: Int32) -> wref<AINode_Record>;

  public final native func NodesContains(item: wref<AINode_Record>) -> Bool;

  public final native func GracefulInterruptionConditionCheckInterval() -> Float;

  public final native func Repeat() -> Int32;

  public final native func ConditionSuccessDuration() -> Float;

  public final native func FailOnNodeActivationConditionFailure() -> Bool;

  public final native func DisableActionsLimit() -> Bool;
}

public native class AISmartCompositeType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func HasMemory() -> Bool;

  public final native func IncrementIteratorOnDeactivation() -> Bool;

  public final native func RandomizeIteratorOnReset() -> Bool;

  public final native func Type() -> gamedataAISmartCompositeType;
}

public class TimeDilationParameters extends IScriptable {

  public let reason: CName;

  @default(TimeDilationParameters, 0.01f)
  public let timeDilation: Float;

  @default(TimeDilationParameters, 0.01f)
  public let playerTimeDilation: Float;

  @default(TimeDilationParameters, 9999.0f)
  public let duration: Float;

  public let easeInCurve: CName;

  public let easeOutCurve: CName;
}

public class AIMeleeAttackCommand extends AICombatRelatedCommand {

  public inline edit let targetOverrideNodeRef: NodeRef;

  public inline edit let targetOverridePuppetRef: EntityReference;

  public inline edit let duration: Float;
}

public class AIForceShootCommand extends AICombatRelatedCommand {

  public inline edit let targetOverrideNodeRef: NodeRef;

  public inline edit let targetOverridePuppetRef: EntityReference;

  public inline edit let duration: Float;
}

public class CommandSignal extends TaggedSignalUserData {

  public let track: Bool;

  public let commandClassNames: array<CName>;
}

public final native class AnimParamsEvent extends Event {

  public final native func GetParameterValue(paramName: CName, value: script_ref<Float>) -> Bool;

  public final native func PushParameterValue(paramName: CName, value: Float) -> Void;
}

public static native func GetLookAtStatus(status: animLookAtStatus, currentStatus: Float) -> Bool;

public static native func OperatorModulo(a: Uint32, b: Uint32) -> Uint32;

public static native func OperatorAdd(a: Uint32, b: Uint32) -> Uint32;

public static native func OperatorAnd(a: Uint32, b: Uint32) -> Uint32;

public static native func OperatorOr(a: Uint32, b: Uint32) -> Uint32;

public static native func OperatorBitNot(a: Uint32) -> Uint32;

public class CoverCommandParams extends IScriptable {

  public edit const let exposureMethods: array<AICoverExposureMethod>;
}

public native class AISubActionCover_Record extends AISubAction_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func InsideCoverReselectionCooldown() -> wref<AIActionCooldown_Record>;

  public final native func InsideCoverReselectionCooldownHandle() -> ref<AIActionCooldown_Record>;

  public final native func ExposureMethodPriority(out outList: array<wref<AIExposureMethodType_Record>>) -> Void;

  public final native func GetExposureMethodPriorityCount() -> Int32;

  public final native func GetExposureMethodPriorityItem(index: Int32) -> wref<AIExposureMethodType_Record>;

  public final native func GetExposureMethodPriorityItemHandle(index: Int32) -> wref<AIExposureMethodType_Record>;

  public final native func ExposureMethodPriorityContains(item: wref<AIExposureMethodType_Record>) -> Bool;

  public final native func CoverExposureMethods() -> array<CName>;

  public final native func GetCoverExposureMethodsCount() -> Int32;

  public final native func GetCoverExposureMethodsItem(index: Int32) -> CName;

  public final native func CoverExposureMethodsContains(item: CName) -> Bool;

  public final native func CommandCoverConditions(out outList: array<wref<AIActionCondition_Record>>) -> Void;

  public final native func GetCommandCoverConditionsCount() -> Int32;

  public final native func GetCommandCoverConditionsItem(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func GetCommandCoverConditionsItemHandle(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func CommandCoverConditionsContains(item: wref<AIActionCondition_Record>) -> Bool;

  public final native func PrioritizeBlindFireAfterHit() -> Float;

  public final native func SetDesiredCover() -> Int32;

  public final native func DelayExposedInCoverReset() -> Float;

  public final native func ClearLOSDistanceTolerance() -> Float;

  public final native func ExposedInCover() -> Int32;

  public final native func UseGrenadeThrowMethods() -> Bool;

  public final native func SetCurrentCover() -> Bool;

  public final native func SetCoverExposureAnim() -> Bool;

  public final native func SetInitialCoverData() -> Bool;

  public final native func UseLastAvailableExposureMethodsIfNoneAvailable() -> Bool;
}

public native class AIExposureMethodType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func Priority() -> array<Int32>;

  public final native func GetPriorityCount() -> Int32;

  public final native func GetPriorityItem(index: Int32) -> Int32;

  public final native func PriorityContains(item: Int32) -> Bool;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataAIExposureMethodType;
}

public class SquadActionSignal extends TaggedSignalUserData {

  public let squadActionName: CName;

  public let squadVerb: EAISquadVerb;
}

public native class StatusEffectComponent extends GameComponent {
}

public final native class WorkspotResourceComponent extends IPlacedComponent {

  public edit let shouldCrouch: Bool;
}

public final native class LocalizationStringComponent extends IComponent {

  public final native func GetString(key: CName) -> LocalizationString;

  public final native func GetString_DemoOnly(key: CName) -> String;
}

public class PuppetForceVisionAppearanceData extends IScriptable {

  @default(PuppetForceVisionAppearanceData, EFocusForcedHighlightType.INVALID)
  public let m_highlightType: EFocusForcedHighlightType;

  public let m_outlineType: EFocusOutlineType;

  public let m_stimRecord: wref<Stim_Record>;

  @default(PuppetForceVisionAppearanceData, 0.5f)
  public let m_transitionTime: Float;

  @default(PuppetForceVisionAppearanceData, EPriority.VeryHigh)
  public let m_priority: EPriority;

  public let m_targets: array<wref<ScriptedPuppet>>;

  public let m_highlightedTargets: array<wref<ScriptedPuppet>>;

  public let m_investigationSlots: Int32;

  public let m_sourceHighlighted: Bool;

  public let m_effectName: String;
}

public class AddForceHighlightTargetEvent extends Event {

  public let targetID: EntityID;

  public let effecName: CName;
}

public class QHackWheelItemChangedEvent extends Event {

  public let commandData: ref<QuickhackData>;

  public let currentEmpty: Bool;
}

public struct LedColors {

  public let off: ScriptLightSettings;

  public let red: ScriptLightSettings;

  public let green: ScriptLightSettings;
}

public class ChangeHalfLights extends Event {

  public let m_isAuthorization: Bool;
}

public final native class ColliderComponent extends IPlacedComponent {

  public final native func CreatePhysicalBodyInterface(opt bodyIndex: Uint32) -> ref<PhysicalBodyInterface>;
}

public class AnimFeatureDoor extends AnimFeature {

  public edit let m_progress: Float;

  public edit let m_openingSpeed: Float;

  public edit let m_openingType: Int32;

  public edit let m_doorSide: Int32;
}

public class SetBusyEvent extends Event {
}

public final native class gameTransformAnimationSkipEvent extends gameTransformAnimationEvent {

  public native let time: Float;

  public native let skipToEnd: Bool;

  public native let forcePlay: Bool;
}

public final native class gameTransformAnimationResetEvent extends gameTransformAnimationPlayEvent {
}

public class OccluderEnableEvent extends Event {
}

public class DoorReplicatedState extends DeviceReplicatedState {

  public let m_isOpen: Bool;

  public let m_wasImmediateChange: Bool;
}

public class RefreshInteractionTaskData extends ScriptTaskData {

  public let requestType: gamedeviceRequestType;

  public let executor: wref<GameObject>;
}

public class AuthorisationNotificationEvent extends Event {

  public let type: gameuiAuthorisationNotificationType;
}

public native class AIApproachingAreaEvent extends AIEvent {

  public native let isApproachCancellation: Bool;

  public native let areaComponent: wref<AreaShapeComponent>;

  public native let responseTarget: wref<Entity>;
}

public class DoorTriggerDelayedEvent extends Event {

  public let activator: wref<GameObject>;
}

public native class AIApproachingAreaResponseEvent extends Event {

  public native let sender: wref<Entity>;

  public native let areaComponent: wref<AreaShapeComponent>;

  public native let isPassingThrough: Bool;
}

public final native class PlayInDeviceCallbackEvent extends Event {

  public native let wasPlayInDeviceSuccessful: Bool;
}

public struct PlayerQuickhackData {

  public let actionRecord: wref<ObjectAction_Record>;

  public let quality: Int32;
}

public class RegisterDebuggerCanditateEvent extends Event {

  public let m_device: wref<Device>;
}

public class ResolveQuickHackRadialRequest extends HUDManagerRequest {
}

public class DelayedUIRefreshEvent extends Event {
}

public native class InteractionResetChoicesEvent extends Event {

  public native let layer: CName;
}

public class EMPEnded extends Event {
}

public class EMPHitEvent extends Event {

  @default(EMPHitEvent, 15.0f)
  public let lifetime: Float;
}

public class SetUICameraZoomEvent extends Event {

  public let hasUICameraZoom: Bool;
}

public native class DeviceStartPlayerCameraControlEvent extends Event {

  public native let playerController: wref<GameObject>;

  public native let initialRotation: Vector4;

  public native let minYaw: Float;

  public native let maxYaw: Float;

  public native let minPitch: Float;

  public native let maxPitch: Float;
}

public static native func OperatorEqual(a: DelayID, b: DelayID) -> Bool;

public class TCSUpdate extends ScriptableSystemRequest {
}

public class FillTakeOverChainBBoardEvent extends Event {

  public let requesterID: PersistentID;
}

public native class ActivateTPPRepresentationEvent extends Event {
}

public native class DeactivateTPPRepresentationEvent extends Event {
}

public class TCSInputXAxisEvent extends Event {

  public let value: Float;
}

public class TCSInputYAxisEvent extends Event {

  public let value: Float;
}

public class TCSInputDeviceAttack extends Event {

  public let value: Bool;
}

public native struct ListenerActionConsumer {

  public final static native func Consume(me: ListenerActionConsumer) -> Void;

  public final static native func ConsumeSingleAction(me: ListenerActionConsumer) -> Void;

  public final static native func DontSendReleaseEvent(me: ListenerActionConsumer) -> Void;

  public final static native func AxisWaitForZero(me: ListenerActionConsumer) -> Void;
}

public native class DeleteInputHintBySourceEvent extends Event {

  public edit native let source: CName;

  public edit native let targetHintContainer: CName;
}

public struct SpiderbotScavengeOptions {

  public persistent let m_scavengableBySpiderbot: Bool;
}

public class SetIsSpiderbotInteractionOrderedEvent extends Event {

  public let value: Bool;
}

public class AddActiveContextEvent extends Event {

  public let context: gamedeviceRequestType;
}

public class RemoveActiveContextEvent extends Event {

  public let context: gamedeviceRequestType;
}

public struct SecurityAlarmSetup {

  public let useSound: Bool;

  @attrib(customEditor, "AudioEvent")
  public let alarmSound: CName;
}

public class UpdateDropPointEvent extends Event {

  public let isEnabled: Bool;
}

public class RegisterDropPointMappinRequest extends ScriptableSystemRequest {

  public let ownerID: EntityID;

  public let position: Vector4;

  public let trackingAlternativeMappinID: NewMappinID;
}

public class UnregisterDropPointMappinRequest extends ScriptableSystemRequest {

  public let ownerID: EntityID;

  public let position: Vector4;
}

public native class WeatherSystem extends IScriptable {

  public final native func RegisterWeatherListener(callback: ref<WeatherScriptListener>) -> Uint32;

  public final native func UnregisterWeatherListener(callbackId: Uint32) -> Void;

  public final native const func GetRainMoisture() -> Float;

  public final native const func GetRainPuddles() -> Float;

  public final native const func GetRainIntensity() -> Float;

  public final native const func GetRainIntensityType() -> worldRainIntensity;
}

public struct ForcedStateData {

  public persistent let state: ECLSForcedState;

  public persistent let sourceName: CName;

  public persistent let priority: EPriority;

  @default(ForcedStateData, true)
  public persistent let savable: Bool;
}

public class DeviceTimetableEvent extends Event {

  public let state: EDeviceStatus;

  public let requesterID: EntityID;

  public let restorePower: Bool;
}

public struct FuseData {

  public persistent let psOwnerData: PSOwnerData;

  public persistent let timeTable: array<SDeviceTimetableEntry>;

  public persistent let lights: Int32;
}

public struct SSimpleGameTime {

  @attrib(rangeMax, "23")
  @attrib(rangeMin, "0")
  public persistent let hours: Int32;

  @attrib(rangeMax, "60")
  @attrib(rangeMin, "0")
  public persistent let minutes: Int32;

  @attrib(rangeMax, "60")
  @attrib(rangeMin, "0")
  public persistent let seconds: Int32;
}

public struct SDeviceTimetableEntry {

  public persistent let time: SSimpleGameTime;

  public persistent let state: EDeviceStatus;

  public let entryID: Uint32;
}

public static native func OperatorLess(a: GameTime, b: GameTime) -> Bool;

public static native func OperatorAdd(a: GameTime, b: GameTime) -> GameTime;

public static native func OperatorSubtract(a: GameTime, b: GameTime) -> GameTime;

public class TimeTableCallbackRequest extends ScriptableSystemRequest {

  public let m_callBackID: Uint32;
}

public struct RecipientData {

  public persistent let fuseID: Int32;

  public persistent let entryID: Int32;
}

public static native func OperatorAssignAdd(out a: GameTime, b: GameTime) -> GameTime;

public static native func OperatorEqual(a: GameTime, b: GameTime) -> Bool;

public class NotifyRecipientsRequest extends ScriptableSystemRequest {

  public let recipients: array<RecipientData>;

  public let time: GameTime;
}

public class RegisterTimetableRequest extends ScriptableSystemRequest {

  public let requesterData: PSOwnerData;

  public let timeTable: array<SDeviceTimetableEntry>;

  public let lights: Int32;
}

public class RevealDevicesGridOnEntityEvent extends Event {

  public let shouldDraw: Bool;
}

public class PingNetworkGridEvent extends Event {

  public let ownerEntityPosition: Vector4;

  public let fxResource: FxResource;

  @default(PingNetworkGridEvent, -1.0f)
  public let lifetime: Float;

  public let pingType: EPingType;

  @default(PingNetworkGridEvent, false)
  public let revealSlave: Bool;

  @default(PingNetworkGridEvent, true)
  public let revealMaster: Bool;

  public let ignoreRevealed: Bool;
}

public class RequestDeviceWidgetUpdateEvent extends RequestWidgetUpdateEvent {
}

public class ForwardPingToSquadEvent extends Event {
}

public class FailedActionEvent extends Event {

  public let action: ref<DeviceAction>;

  public let whoFailed: PersistentID;
}

public struct ComputerSetup extends TerminalSetup {

  @attrib(category, "Menus")
  public let m_startingMenu: EComputerMenuType;

  @attrib(category, "Menus")
  @default(ComputerSetup, true)
  public persistent let m_mailsMenu: Bool;

  @attrib(category, "Menus")
  @default(ComputerSetup, true)
  public persistent let m_filesMenu: Bool;

  @attrib(category, "Menus")
  @default(ComputerSetup, true)
  public persistent let m_systemMenu: Bool;

  @attrib(category, "Menus")
  @default(ComputerSetup, true)
  public persistent let m_internetMenu: Bool;

  @attrib(category, "Menus")
  @default(ComputerSetup, false)
  public persistent let m_newsFeedMenu: Bool;

  @attrib(category, "Documents")
  public persistent const let m_mailsStructure: array<GenericDataContent>;

  @attrib(category, "Documents")
  public persistent const let m_filesStructure: array<GenericDataContent>;

  @attrib(category, "Newsfeed")
  public const let m_newsFeed: array<SNewsFeedElementData>;

  @attrib(category, "Newsfeed")
  @default(ComputerSetup, 5.0)
  public let m_newsFeedInterval: Float;

  @attrib(category, "Internet")
  public let m_internetSubnet: SInternetData;

  @attrib(category, "Animations")
  @default(ComputerSetup, EComputerAnimationState.None)
  public persistent let m_animationState: EComputerAnimationState;
}

public struct ComputerQuickHackData {

  @attrib(customEditor, "TweakDBGroupInheritance;Interactions.InteractionChoice;Interactions.MountChoice")
  public let alternativeName: TweakDBID;

  public let factName: CName;

  public let factValue: Int32;

  public let operationType: EMathOperationType;
}

public struct SNewsFeedElementData {

  public const let banners: array<SsimpleBanerData>;

  public let currentBanner: Int32;
}

public class RequestDocumentWidgetUpdateEvent extends RequestWidgetUpdateEvent {

  public let documentType: EDocumentType;

  public let documentAdress: SDocumentAdress;
}

public class RequestDocumentThumbnailWidgetsUpdateEvent extends RequestWidgetUpdateEvent {

  public let documentType: EDocumentType;
}

public struct SBannerWidgetPackage extends SWidgetPackage {

  public let title: String;

  public let description: String;

  public let content: ResRef;
}

public struct SsimpleBanerData {

  public let title: String;

  public let description: String;

  public let content: ResRef;
}

public class ComputerDeviceBlackboardDef extends MasterDeviceBaseBlackboardDef {

  public let MailThumbnailWidgetsData: BlackboardID_Variant;

  public let FileThumbnailWidgetsData: BlackboardID_Variant;

  public let MailWidgetsData: BlackboardID_Variant;

  public let FileWidgetsData: BlackboardID_Variant;

  public let MenuButtonWidgetsData: BlackboardID_Variant;

  public let MainMenuButtonWidgetsData: BlackboardID_Variant;

  public let BannerWidgetsData: BlackboardID_Variant;
}

public native struct GenericDataContent {

  public native let name: String;

  public native persistent let content: array<DataElement>;
}

public struct SDocumentAdress {

  @default(SDocumentAdress, -1)
  public edit let folderID: Int32;

  @default(SDocumentAdress, -1)
  public edit let documentID: Int32;
}

public native struct DataElement {

  public native let journalPath: ref<gameJournalPath>;

  public native let documentName: CName;

  public native let owner: String;

  public native let date: String;

  public native let title: String;

  public native let content: String;

  public native let videoPath: ResRef;

  public native let questInfo: QuestInfo;

  public native persistent let isEncrypted: Bool;

  public native persistent let wasRead: Bool;

  public native persistent let isEnabled: Bool;
}

public native class gameJournalPath extends IScriptable {

  public final native const func GetHash() -> Uint32;

  public final native const func IsValid() -> Bool;
}

public native class JournalFile extends JournalEntry {

  public final native const func GetTitle() -> String;

  public final native const func GetContent() -> String;

  public final native const func GetVideoResourcePath() -> ResRef;

  public final native const func GetImageTweak() -> TweakDBID;
}

public struct SDocumentWidgetPackage extends SWidgetPackage {

  public let owner: String;

  public let date: String;

  public let title: String;

  public let content: String;

  public let image: TweakDBID;

  public let videoPath: ResRef;

  public let isEncrypted: Bool;

  public let questInfo: QuestInfo;

  public let wasRead: Bool;

  public let documentType: EDocumentType;
}

public native class JournalEmail extends JournalEntry {

  public final native const func GetSender() -> String;

  public final native const func GetAddressee() -> String;

  public final native const func GetTitle() -> String;

  public final native const func GetContent() -> String;

  public final native const func GetVideoResourcePath() -> ResRef;

  public final native const func GetImageTweak() -> TweakDBID;
}

public struct SDocumentThumbnailWidgetPackage extends SWidgetPackage {

  public let folderName: String;

  public let documentAdress: SDocumentAdress;

  public let documentType: EDocumentType;

  public let questInfo: QuestInfo;

  public let wasRead: Bool;

  public let isOpened: Bool;
}

public struct SComputerMenuButtonWidgetPackage extends SWidgetPackage {

  public let counter: Int32;
}

public native struct ComputerUIData {

  public native persistent let mails: array<GenericDataContent>;

  public native persistent let files: array<GenericDataContent>;
}

public struct DeviceConnectionScannerData {

  public let connectionType: String;

  public let icon: CName;

  public let amount: Int32;
}

public struct BaseResaveData {

  public let m_baseDeviceData: BaseDeviceData;

  public let m_tweakDBRecord: TweakDBID;
}

public static native func DumpClassHierarchy(baseClass: CName) -> Bool;

public class ActionCooldownEvent extends Event {

  public let storageID: CooldownStorageID;
}

public struct CooldownPackageDelayIDs {

  public let packageID: CooldownStorageID;

  public let delayIDs: array<DelayID>;
}

public class SetRevealedInNetwork extends Event {

  public let wasRevealed: Bool;
}

public class MarkBackdoorAsRevealedRequest extends ScriptableSystemRequest {

  public let device: ref<SharedGameplayPS>;
}

public class UnregisterNetworkLinksByIdAndTypeRequest extends ScriptableSystemRequest {

  public let ID: EntityID;

  public let type: ELinkType;
}

public class DeactivateLinksRequest extends ScriptableSystemRequest {

  public let linksIDs: array<Int32>;

  public let instant: Bool;
}

public class ActivateLinksRequest extends ScriptableSystemRequest {

  public let linksIDs: array<Int32>;
}

public class EvaluateVisionModeRequest extends ScriptableSystemRequest {

  public let mode: gameVisionModeType;
}

public class UnregisterAllNetworkLinksRequest extends ScriptableSystemRequest {
}

public class RegisterPingNetworkLinkRequest extends ScriptableSystemRequest {

  public let linksData: array<SNetworkLinkData>;
}

public class StartPingingNetworkRequest extends ScriptableSystemRequest {

  public let source: wref<GameObject>;

  public let fxResource: FxResource;

  @default(StartPingingNetworkRequest, 2.0f)
  public let duration: Float;

  public let pingType: EPingType;

  public let fakeLinkType: ELinkType;

  public let revealNetworkAtEnd: Bool;

  public let virtualNetworkShapeID: TweakDBID;
}

public class StopPingingNetworkRequest extends ScriptableSystemRequest {

  public let source: wref<GameObject>;

  public let pingData: ref<PingCachedData>;
}

public native class VirtualNetwork_Record extends TweakDBRecord {

  public final native func Paths(out outList: array<wref<VirtualNetworkPath_Record>>) -> Void;

  public final native func GetPathsCount() -> Int32;

  public final native func GetPathsItem(index: Int32) -> wref<VirtualNetworkPath_Record>;

  public final native func GetPathsItemHandle(index: Int32) -> wref<VirtualNetworkPath_Record>;

  public final native func PathsContains(item: wref<VirtualNetworkPath_Record>) -> Bool;

  public final native func SegmentMarker() -> Vector3;

  public final native func Scale() -> Float;

  public final native func OffsetMultiplier() -> Float;

  public final native func MinDistanceToOther() -> Float;
}

public native class VirtualNetworkPath_Record extends TweakDBRecord {

  public final native func Points() -> array<Vector3>;

  public final native func GetPointsCount() -> Int32;

  public final native func GetPointsItem(index: Int32) -> Vector3;

  public final native func PointsContains(item: Vector3) -> Bool;
}

public static native func OperatorMultiply(a: Quaternion, b: Vector4) -> Vector4;

public class RevealNetworkGridNetworkRequest extends Event {
}

public static native func Rad2Deg(rad: Float) -> Float;

public class AddPingedSquadRequest extends ScriptableSystemRequest {

  public let squadName: CName;
}

public class RemovePingedSquadRequest extends ScriptableSystemRequest {

  public let squadName: CName;
}

public class AccessBreachListener extends QuickHackUploadListener {
}

public static native func AcosF(a: Float) -> Float;

public class SendInstructionRequest extends ScriptableSystemRequest {

  public let jobs: array<HUDJob>;
}

public class LockQHackInput extends ScriptableSystemRequest {

  public let isLocked: Bool;
}

public class ClueStatusNotification extends HUDManagerRequest {

  public let isClue: Bool;

  public let clueGroupID: CName;
}

public class PlayerTargetChangedRequest extends ScriptableSystemRequest {

  public let playerTarget: EntityID;
}

public class LookedAtEvent extends Event {

  public let isLookedAt: Bool;
}

public class QuickHackPanelStateEvent extends Event {

  public let isOpened: Bool;
}

public final native struct AimRequest {

  public native let duration: Float;

  public native let adjustPitch: Bool;

  public native let adjustYaw: Bool;

  public native let endOnTargetReached: Bool;

  public native let endOnCameraInputApplied: Bool;

  public native let endOnTimeExceeded: Bool;

  public native let endOnAimingStopped: Bool;

  public native let cameraInputMagToBreak: Float;

  public native let precision: Float;

  public native let maxDuration: Float;

  public native let easeIn: Bool;

  public native let easeOut: Bool;

  public native let checkRange: Bool;

  public native let lookAtTarget: Vector4;

  public native let processAsInput: Bool;

  public native let bodyPartsTracking: Bool;

  public native let bptMaxDot: Float;

  public native let bptMaxSwitches: Float;

  public native let bptMinInputMag: Float;

  public native let bptMinResetInputMag: Float;
}

public class QuickHackSetDescriptionVisibilityRequest extends ScriptableSystemRequest {

  public let visible: Bool;
}

public native struct TargetSearchQuery {

  public native let testedSet: TargetingSet;

  public native let searchFilter: TargetSearchFilter;

  public native let includeSecondaryTargets: Bool;

  public native let ignoreInstigator: Bool;

  public native let maxDistance: Float;

  public native let queryTarget: EntityID;

  public final static native func SetComponentFilter(self: TargetSearchQuery, componentFilter: TargetComponentFilterType) -> Void;
}

public static native func TSF_And(tsf1: TargetSearchFilter, tsf2: TargetSearchFilter, opt tsf3: TargetSearchFilter, opt tsf4: TargetSearchFilter) -> TargetSearchFilter;

public static native func TSF_All(mask: TSFMV) -> TargetSearchFilter;

public static native func TSF_Not(mask: TSFMV) -> TargetSearchFilter;

public static native func TSF_Any(mask: TSFMV) -> TargetSearchFilter;

public static native func OperatorOr(a: TSFMV, b: TSFMV) -> TSFMV;

public final native struct TS_TargetPartInfo {

  public final static native func GetComponent(self: TS_TargetPartInfo) -> wref<TargetingComponent>;

  public final static native func GetPlayerAngleDistance(self: TS_TargetPartInfo) -> EulerAngles;
}

public class PulseFinishedRequest extends ScriptableSystemRequest {
}

public class NemaplateChangedRequest extends ScriptableSystemRequest {

  public let playerTarget: EntityID;
}

public class ScannerTargetChangedRequest extends ScriptableSystemRequest {

  public let scannerTarget: EntityID;
}

public class IterateModulesRequest extends ScriptableSystemRequest {

  public let remainingJobs: array<HUDJob>;
}

public native struct LootData {

  public native let isActive: Bool;

  public native let isListOpen: Bool;

  public native let e3hack_isWeapon: Bool;

  public native let currentIndex: Int32;

  public native let title: String;

  public native let choices: array<InteractionChoiceData>;

  public native let itemIDs: array<ItemID>;

  public native let ownerId: EntityID;

  public native let isLocked: Bool;
}

public native class FocusClueStateChangeEvent extends Event {

  public native let clueIndex: Int32;

  public native let isEnabled: Bool;
}

public final native class ScanningLookAtEvent extends Event {

  public native let ownerID: EntityID;

  public native let state: Bool;
}

public final native class enteventsSetVisibility extends Event {

  public native let visible: Bool;

  public native let source: entVisibilityParamSource;
}

public native class ScanningEvent extends Event {

  public native let state: gameScanningState;
}

public class ClueLockNotification extends HUDManagerRequest {

  public let isLocked: Bool;
}

public final native class SetExclusiveFocusClueEntityEvent extends Event {

  public native let isSetExclusive: Bool;
}

public class StoreMiniGameProgramEvent extends Event {

  public let program: MinigameProgramData;

  public let add: Bool;
}

public native struct MinigameProgramData {

  public native persistent let actionID: TweakDBID;

  public native persistent let programName: CName;
}

public final native class PhysicalMeshComponent extends MeshComponent {

  public final native func CreatePhysicalBodyInterface(opt bodyIndex: Int32) -> ref<PhysicalBodyInterface>;

  public final native func ToggleCollision(enabled: Bool) -> Void;
}

public struct DistractionSetup {

  @default(DistractionSetup, 10.f)
  public let m_StimuliRange: Float;

  public let m_disableOnActivation: Bool;

  @attrib(category, "AvailableInteractions")
  @default(DistractionSetup, false)
  public let m_hasSimpleInteraction: Bool;

  @attrib(category, "AvailableInteractions")
  @default(DistractionSetup, false)
  public let m_hasSpiderbotInteraction: Bool;

  @attrib(category, "AvailableInteractions")
  @default(DistractionSetup, false)
  public let m_hasQuickHack: Bool;

  @attrib(category, "AvailableInteractions")
  @default(DistractionSetup, false)
  public let m_hasComputerInteraction: Bool;

  @attrib(category, "InteractionNamesSetup")
  @attrib(customEditor, "TweakDBGroupInheritance;Interactions.InteractionChoice;Interactions.MountChoice")
  public let m_alternativeInteractionName: TweakDBID;

  @attrib(category, "InteractionNamesSetup")
  @attrib(customEditor, "TweakDBGroupInheritance;Interactions.InteractionChoice;Interactions.MountChoice")
  public let m_alternativeSpiderbotInteractionName: TweakDBID;

  @attrib(category, "InteractionNamesSetup")
  @attrib(customEditor, "TweakDBGroupInheritance;Interactions.InteractionChoice;Interactions.MountChoice")
  public let m_alternativeQuickHackName: TweakDBID;

  public inline let m_skillChecks: ref<EngDemoContainer>;

  public inline const let explosionDefinition: array<ExplosiveDeviceResourceDefinition>;
}

public struct DisposalDeviceSetup {

  @default(DisposalDeviceSetup, 1)
  public persistent let m_numberOfUses: Int32;

  @default(DisposalDeviceSetup, true)
  public let m_isBodyRequired: Bool;

  @attrib(category, "InteractionNamesSetup")
  @attrib(customEditor, "TweakDBGroupInheritance;Interactions.InteractionChoice;Interactions.MountChoice")
  public let m_actionName: TweakDBID;

  @attrib(category, "InteractionNamesSetup")
  @attrib(customEditor, "TweakDBGroupInheritance;Interactions.InteractionChoice;Interactions.MountChoice")
  public let m_takedownActionName: TweakDBID;

  @attrib(category, "InteractionNamesSetup")
  @attrib(customEditor, "TweakDBGroupInheritance;Interactions.InteractionChoice;Interactions.MountChoice")
  public let m_nonlethalTakedownActionName: TweakDBID;
}

public class TimerEvent extends Event {
}

public class Record1DamageInHistoryEvent extends Event {

  public let source: wref<GameObject>;
}

public class HidePuppetDelayEvent extends Event {

  public let m_target: wref<NPCPuppet>;
}

public class AnimFeature_AerialTakedown extends AnimFeature {

  public edit let state: Int32;
}

public class RagdollToggleDelayEvent extends Event {

  public let target: wref<GameObject>;

  public let enable: Bool;

  public let force: Bool;

  public let leaveRagdollEnabled: Bool;
}

public class ChangeRewardSettingsEvent extends Event {

  public let forceDefeatReward: Bool;

  public let disableKillReward: Bool;
}

public native class PhysicalBodyInterface extends IScriptable {

  public final native func GetBodyIndex() -> Int32;

  public final native func IsSimulated() -> Bool;

  public final native func IsKinematic() -> Bool;

  public final native func IsQueryable() -> Bool;

  public final native func ToggleKinematic(flag: Bool) -> Void;

  public final native func SetTransform(pos: Transform) -> Void;

  public final native func GetTransform() -> Transform;

  public final native func AddLinearImpulse(impulse: Vector4, originInCOM: Bool, opt offset: Vector4) -> Void;

  public final native func SetIsQueryable(enable: Bool) -> Void;

  public final native func SetIsKinematic(enable: Bool) -> Void;
}

public static native func OperatorAssignMultiply(out a: Int32, b: Int32) -> Int32;

public abstract native class SceneSystem extends ISceneSystem {

  public final native func GetScriptInterface() -> ref<SceneSystemInterface>;

  public final native func GetPeerIdDialogChoiceFactName() -> String;
}

public abstract native class SceneSystemInterface extends IScriptable {

  public final native func IsFastForwardingAllowed(ffMode: scnFastForwardMode) -> Bool;

  public final native func IsFastForwardingActive(ffMode: scnFastForwardMode) -> Bool;

  public final native func FastForwardingActivate(ffMode: scnFastForwardMode) -> Void;

  public final native func FastForwardingDeactivate() -> Void;

  public final native func IsRewindableSectionActive() -> Bool;

  public final native func GetRewindableSectionProgress() -> Float;

  public final native func GetRewindableSectionTimeInSec() -> Float;

  public final native func GetRewindableSectionDurationInSec() -> Float;

  public final native func GetRewindableSectionPlayDirection() -> scnPlayDirection;

  public final native func SetRewindableSectionPlayDirection(direction: scnPlayDirection) -> Void;

  public final native func GetRewindableSectionPlaySpeed() -> scnPlaySpeed;

  public final native func SetRewindableSectionPlaySpeed(speed: scnPlaySpeed) -> Void;

  public final native func GetRewindableSectionSpeedModifier() -> Float;

  public final native func IsRewindableSectionPaused() -> Bool;

  public final native func ResetRewindableSection(resetSpeed: Float, postResetPlayDirection: scnPlayDirection, postResetPlaySpeed: scnPlaySpeed) -> Void;

  public final native func IsRewindableSectionResetting() -> Bool;

  public final native func JumpRewindableSection(resetSpeed: Float, jumpTime: Float, postResetPlayDirection: scnPlayDirection, postResetPlaySpeed: scnPlaySpeed) -> Bool;

  public final native func SetSceneSystemCameraControlEnabled(enabled: Bool, opt blendTime: Float) -> Void;

  public final native func GetSceneSystemCameraControlEnabled() -> Bool;

  public final native func GetSceneSystemCameraLastCameraPosition() -> WorldPosition;

  public final native func GetSceneSystemCameraLastCameraOrientation() -> Quaternion;

  public final native func AreEntitiesInDialogue(firstEntity: EntityID, secondEntity: EntityID) -> Bool;

  public final native func IsEntityInDialogue(entity: EntityID) -> Bool;

  public final native func IsEntityInScene(entity: EntityID) -> Bool;
}

public class GameplayRoleMappinData extends MappinScriptData {

  @default(GameplayRoleMappinData, EMappinVisualState.Default)
  public let m_mappinVisualState: EMappinVisualState;

  public let m_isTagged: Bool;

  public let m_isQuest: Bool;

  public let m_isIconic: Bool;

  public let m_isScanningCluesBlocked: Bool;

  public let m_isCurrentTarget: Bool;

  public let m_visibleThroughWalls: Bool;

  public let m_hasOffscreenArrow: Bool;

  public let m_range: Float;

  public let m_duration: Float;

  @default(GameplayRoleMappinData, EProgressBarType.UPLOAD)
  public let m_progressBarType: EProgressBarType;

  @default(GameplayRoleMappinData, EProgressBarContext.QuickHack)
  public let m_progressBarContext: EProgressBarContext;

  public let m_gameplayRole: EGameplayRole;

  @default(GameplayRoleMappinData, braindanceVisionMode.Default)
  public let m_braindanceLayer: braindanceVisionMode;

  public let m_quality: gamedataQuality;

  public let m_slotName: CName;

  public let m_textureID: TweakDBID;

  @default(GameplayRoleMappinData, true)
  public let m_showOnMiniMap: Bool;
}

public class GameplayRoleChangeNotification extends Event {

  public let newRole: EGameplayRole;

  public let oldRole: EGameplayRole;
}

public native class ChoiceCaptionIconPart_Record extends ChoiceCaptionPart_Record {

  public final native func Comment() -> String;

  public final native func TexturePartID() -> wref<UIIcon_Record>;

  public final native func TexturePartIDHandle() -> ref<UIIcon_Record>;

  public final native func MappinVariant() -> wref<MappinVariant_Record>;

  public final native func MappinVariantHandle() -> ref<MappinVariant_Record>;

  public final native func EnumName() -> CName;
}

public class ShowSingleMappinEvent extends Event {

  public let index: Int32;
}

public class HideSingleMappinEvent extends Event {

  public let index: Int32;
}

public native class gameDeviceVisibilityChangedEvent extends Event {

  public native let isVisible: Uint32;
}

public final native class SetScanningTimeEvent extends Event {

  public native let time: Float;
}

public class QuickSlotCommandUsed extends Event {

  public let action: ref<DeviceAction>;
}

public class CancelDeviceUpdateEvent extends Event {
}

public class DeviceUpdateEvent extends TickableEvent {
}

public native class inkCanvas extends inkCompoundWidget {
}

public class UIUnstreamedEvent extends Event {
}

public native class DeviceUIDefinition_Record extends TweakDBRecord {

  public final native func ComputerScreenType() -> wref<ComputerScreenType_Record>;

  public final native func ComputerScreenTypeHandle() -> ref<ComputerScreenType_Record>;

  public final native func TerminalScreenType() -> wref<TerminalScreenType_Record>;

  public final native func TerminalScreenTypeHandle() -> ref<TerminalScreenType_Record>;
}

public native class inkButtonController extends inkLogicController {

  @default(ComputerDocumentThumbnailWidgetController, true)
  @default(ComputerMenuButtonController, true)
  @default(DeviceThumbnailWidgetControllerBase, true)
  public native let selectable: Bool;

  public final native func GetState() -> inkEButtonState;

  public final native func GetEnabled() -> Bool;

  public final native func SetEnabled(enabled: Bool) -> Void;

  public final native func GetHoldProgress() -> Float;

  public final native func CanHold() -> Bool;

  public final native func SetCanHold(canHold: Bool) -> Void;

  public final native func GetSelected() -> Bool;

  public final native func SetSelected(selected: Bool) -> Void;

  public final native func SetSelectable(selectable: Bool) -> Void;
}

public native class inkEvent extends Event {

  public final native const func IsCanceled() -> Bool;

  public final native const func Cancel() -> Void;

  public final native const func IsHandled() -> Bool;

  public final native const func Handle() -> Void;

  public final native const func GetCurrentTarget() -> wref<inkWidget>;

  public final native const func GetTarget() -> wref<inkWidget>;

  public final native const func GetDebugString() -> String;
}

public native class inkInputEvent extends inkEvent {

  public final native const func IsAction(actionName: CName) -> Bool;

  public final native const func GetActionName() -> ref<inkActionName>;

  public final native const func GetHoldProgress() -> Float;

  public final native const func IsConsumed() -> Bool;

  public final native const func Consume() -> Void;

  public final native const func IsShiftDown() -> Bool;

  public final native const func IsLeftShiftDown() -> Bool;

  public final native const func IsRightShiftDown() -> Bool;

  public final native const func IsControlDown() -> Bool;

  public final native const func IsLeftControlDown() -> Bool;

  public final native const func IsRightControlDown() -> Bool;

  public final native const func IsAltDown() -> Bool;

  public final native const func IsLeftAltDown() -> Bool;

  public final native const func IsRightAltDown() -> Bool;

  public final native const func IsCommandDown() -> Bool;

  public final native const func IsLeftCommandDown() -> Bool;

  public final native const func IsRightCommandDown() -> Bool;

  public final native const func IsCapsLocked() -> Bool;
}

public struct SWidgetAnimationData {

  public let m_animationName: CName;

  public let m_playbackOptions: inkAnimOptions;

  public let m_lockWhenActive: Bool;

  public let m_animProxy: ref<inkAnimProxy>;

  @attrib(category, "Callbacks")
  public let m_onFinish: CName;

  @attrib(category, "Callbacks")
  public let m_onStart: CName;

  @attrib(category, "Callbacks")
  public let m_onPasue: CName;

  @attrib(category, "Callbacks")
  public let m_onResume: CName;

  @attrib(category, "Callbacks")
  public let m_onStartLoop: CName;

  @attrib(category, "Callbacks")
  public let m_onEndLoop: CName;
}

public class PlaybackOptionsUpdateData extends IScriptable {

  public let m_playbackOptions: inkAnimOptions;
}

public struct SSoundData {

  @default(SSoundData, Button)
  public edit let widgetAudioName: CName;

  public edit let onPressKey: CName;

  public edit let onReleaseKey: CName;

  public edit let onHoverOverKey: CName;

  public edit let onHoverOutKey: CName;
}

public class UIRefreshedEvent extends Event {
}

public struct GlitchData {

  public let intensity: Float;

  public let state: EGlitchState;
}

public class UIActionEvent extends Event {

  public let action: ref<DeviceAction>;

  public let executor: wref<GameObject>;
}

public struct SBreadcrumbElementData {

  public let elementName: String;

  public let elementID: Int32;
}

public class RequestActionWidgetsUpdateEvent extends RequestWidgetUpdateEvent {
}

public class RequestUIRefreshEvent extends Event {

  public let requester: PersistentID;

  public let context: CName;
}

public class RequestBreadCrumbBarUpdateEvent extends Event {

  public let requester: PersistentID;

  public let breadCrumbData: SBreadCrumbUpdateData;
}

public class ChangeJuryrigTrapState extends Event {

  public let newState: EJuryrigTrapState;
}

public native class animAnimFeature_IK extends AnimFeature {

  public edit native let point: Vector4;

  public edit native let normal: Vector4;

  public edit native let weight: Float;
}

public class AnimFeature_WorkspotIK extends AnimFeature {

  public edit let rightHandPosition: Vector4;

  public edit let leftHandPosition: Vector4;

  public edit let cameraPosition: Vector4;

  public edit let rightHandRotation: Quaternion;

  public edit let leftHandRotation: Quaternion;

  public edit let cameraRotation: Quaternion;

  public edit let shouldCrouch: Bool;

  public edit let isInteractingWithDevice: Bool;
}

public class RepeatPersonalLinkAnimFeaturesHACK extends Event {

  public let activator: wref<GameObject>;
}

public class UnregisterFromZoomBlackboardEvent extends Event {
}

public class MissingWorkspotComponentFailsafeEvent extends Event {

  public let playerEntityID: EntityID;
}

public struct Vulnerability {

  public let vulnerabilityName: CName;

  public let icon: CName;

  public let isActive: Bool;
}

public final native class entAppearanceEvent extends Event {

  public native let appearanceName: CName;
}

public struct SGenericDeviceActionsData {

  public persistent let toggleON: SDeviceActionBoolData;

  public persistent let togglePower: SDeviceActionBoolData;
}

public struct GenericDeviceActionsData {

  public persistent let m_stateActionsOverrides: SGenericDeviceActionsData;

  public persistent let m_customActions: SCustomDeviceActionsData;
}

public struct SCustomDeviceActionsData {

  public persistent const let actions: array<SDeviceActionCustomData>;
}

public class ToggleCustomActionEvent extends Event {

  public let actionID: CName;

  public let enabled: Bool;
}

public class SpiderbotOrderDeviceEvent extends Event {

  public let target: wref<GameObject>;

  public let overrideMovementTarget: wref<GameObject>;
}

public struct SBaseDeviceOperationData {

  public let delay: Float;

  public let resetDelay: Bool;

  public let executeOnce: Bool;

  @default(SBaseDeviceOperationData, true)
  public let isEnabled: Bool;

  public const let transformAnimations: array<STransformAnimationData>;

  public const let VFXs: array<SVFXOperationData>;

  public const let SFXs: array<SSFXOperationData>;

  public const let facts: array<SFactOperationData>;

  public const let components: array<SComponentOperationData>;

  public const let stims: array<SStimOperationData>;

  public const let statusEffects: array<SStatusEffectOperationData>;

  public const let damages: array<SDamageOperationData>;

  public const let items: array<SInventoryOperationData>;

  public let teleport: STeleportOperationData;

  public let meshesAppearence: CName;

  public let playerWorkspot: SWorkspotData;

  public let disableDevice: Bool;

  public const let toggleOperations: array<SToggleOperationData>;

  public let id: Int32;

  public let delayID: DelayID;

  public let isDelayActive: Bool;
}

public class DelayedOperationEvent extends Event {

  public let operationHandler: ref<DeviceOperations>;

  public let operation: SBaseDeviceOperationData;
}

public class ToggleOperationEvent extends Event {

  public let enable: Bool;

  public let index: Int32;

  public let type: EOperationClassType;
}

public struct SVFXOperationData {

  public let vfxName: CName;

  public let vfxResource: FxResource;

  public let shouldPersist: Bool;

  @attrib(rangeMax, "1.f")
  @attrib(rangeMin, "0.f")
  public let size: Float;

  public let nodeRef: NodeRef;

  public let operationType: EEffectOperationType;
}

public struct SVfxInstanceData {

  public let fx: ref<FxInstance>;

  public let id: CName;
}

public struct SSFXOperationData {

  @attrib(customEditor, "AudioEvent")
  public let sfxName: CName;

  public let operationType: EEffectOperationType;
}

public struct SFactOperationData {

  public let factName: CName;

  public let factValue: Int32;

  public let operationType: EMathOperationType;
}

public struct SComponentOperationData {

  public let componentName: CName;

  public let operationType: EComponentOperation;
}

public struct STransformAnimationData {

  public let animationName: CName;

  public let operationType: ETransformAnimationOperationType;

  public let playData: STransformAnimationPlayEventData;

  public let skipData: STransformAnimationSkipEventData;
}

public struct STransformAnimationPlayEventData {

  @default(STransformAnimationPlayEventData, 1)
  public let timeScale: Float;

  public let looping: Bool;

  @default(STransformAnimationPlayEventData, 1)
  public let timesPlayed: Uint32;
}

public final native class gameTransformAnimationPauseEvent extends gameTransformAnimationEvent {
}

public struct STransformAnimationSkipEventData {

  public let time: Float;

  public let skipToEnd: Bool;
}

public struct SWorkspotData {

  public let componentName: CName;

  public let freeCamera: Bool;

  public let operationType: EWorkspotOperationType;
}

public struct SStimOperationData {

  @default(SStimOperationData, DeviceStimType.Distract)
  public let stimType: DeviceStimType;

  @default(SStimOperationData, 3f)
  public let lifeTime: Float;

  @default(SStimOperationData, 5.f)
  public let radius: Float;

  public let operationType: EEffectOperationType;

  public let nodeRef: NodeRef;
}

public struct SStatusEffectOperationData {

  @default(SStatusEffectOperationData, 1.f)
  public let range: Float;

  public let duration: Float;

  public let offset: Vector4;

  public let effect: StatusEffectTDBPicker;
}

public native struct StatusEffectTDBPicker {

  public native let statusEffect: TweakDBID;
}

public struct SDamageOperationData {

  @default(SDamageOperationData, -1.f)
  public let range: Float;

  public let offset: Vector4;

  @attrib(customEditor, "TweakDBGroupInheritance;Attacks.DeviceAttack")
  public let damageType: TweakDBID;
}

public struct SInventoryOperationData {

  @attrib(category, "Trigger Data")
  @attrib(customEditor, "TweakDBGroupInheritance;Item")
  public let itemName: TweakDBID;

  @attrib(category, "Trigger Data")
  public let quantity: Int32;

  public let operationType: EItemOperationType;
}

public struct STeleportOperationData {

  public let nodeRef: NodeRef;
}

public struct SToggleOperationData {

  public let index: Int32;

  public let enable: Bool;

  public let classType: EOperationClassType;
}

public class UpdateWillingInvestigators extends Event {

  public let investigator: EntityID;
}

public native class AccessPointMiniGameStatus extends Event {

  public native let minigameState: HackingMinigameState;
}

public class ToggleComponentsEvent extends Event {

  public let componentsData: array<SComponentOperationData>;
}

public native class BinkComponent extends IVisualComponent {

  public final native func SetVideoPlayerName(videoPlayerName: CName) -> Void;

  public final native func SetVideoPath(videoPath: ResRef) -> Void;

  public final native func SetIsLooped(loopVideo: Bool) -> Void;

  public final native func ForceVideoFrameRate(forceVideoFrameRate: Bool) -> Void;

  public final native func Play() -> Void;

  public final native func Stop() -> Void;

  public final native func Pause(pauseVideo: Bool) -> Void;

  public final native func IsPaused() -> Void;

  public final native func SkipFrames(numberOfFrames: Int32) -> Void;

  public final native func SkipFramePercentage(percentage: Int32) -> Void;

  public final native func GetVideoSummary() -> BinkVideoSummary;
}

public struct SBinkperationData {

  public let componentName: CName;

  public let binkPath: ResRef;

  public let loop: Bool;

  public let operationType: EBinkOperationType;
}

public class PlayBinkEvent extends Event {

  public let data: SBinkperationData;
}

public class CommunicationEvent extends Event {

  public let name: CName;

  public let sender: EntityID;
}

public native struct NPCstubData {

  public native let spawnerID: EntityID;

  public native let entryID: CName;
}

public native class ReactionSystem extends IReactionSystem {

  public final native func RegisterTrafficRunner(runner: ref<GameObject>) -> Bool;

  public final native func UnregisterTrafficRunner(runner: ref<GameObject>) -> Bool;

  public final native func RegisterCommunityRunner(runner: ref<GameObject>) -> Bool;

  public final native func UnregisterCommunityRunner(runner: ref<GameObject>) -> Bool;

  public final native func RegisterReaction(reaction: CName) -> AIReactionCountOutcome;

  public final native func UnregisterReaction(reaction: CName) -> AIReactionCountOutcome;

  public final native func AddFearSource(runner: ref<GameObject>) -> Void;
}

public class ResetLookatReactionEvent extends Event {
}

public class DelayStimEvent extends Event {

  public let stimEvent: ref<StimuliEvent>;
}

public struct StimEventData {

  public let source: wref<GameObject>;

  public let stimType: gamedataStimType;
}

public native class StimPriority_Record extends TweakDBRecord {

  public final native func Comment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataStimPriority;
}

public struct StimParams {

  public let reactionOutput: ReactionOutput;

  public let stimData: StimEventData;
}

public class CleanEnvironmentalHazardEvent extends Event {

  public let stimEvent: ref<StimuliEvent>;
}

public class SecuritySystemOutputTaskData extends ScriptTaskData {

  public let cachedEvt: ref<SecuritySystemOutput>;
}

public class IgnoreListEvent extends Event {

  public let bodyID: EntityID;

  public let removeEvent: Bool;
}

public class ReprimandEscalationEvent extends Event {

  public let startReprimand: Bool;

  public let startDeescalate: Bool;
}

public class ReactionBehaviorStatus extends Event {

  public let status: AIbehaviorUpdateOutcome;

  public let reactionData: ref<AIReactionData>;
}

public class EndLookatEvent extends Event {

  public let repeat: Bool;
}

public class AnimFeature_FacialReaction extends AnimFeature {

  public edit let category: Int32;

  public edit let idle: Int32;
}

public struct LookAtData {

  public let idle: Int32;

  public let category: Int32;

  public let personality: gamedataStatType;
}

public class StimThresholdEvent extends Event {

  public let reset: Bool;

  public let timeThreshold: Float;
}

public class StealthStimThresholdEvent extends Event {

  public let reset: Bool;

  public let timeThreshold: Float;
}

public class ResetReactionEvent extends Event {

  public let data: ref<AIReactionData>;
}

public class BodyInvestigatedEvent extends Event {
}

public class ResetFacialEvent extends Event {
}

public class ExitWorkspotSequenceEvent extends Event {
}

public class AnimFeature_CrowdRunningAway extends AnimFeature {

  public edit let isRunningAwayFromPlayersCar: Bool;
}

public class TriggerDelayedReactionEvent extends DelayedCrowdReactionEvent {

  public let initAnim: Bool;

  public let behavior: gamedataOutput;
}

public class RegisterFleeingNPC extends ScriptableSystemRequest {

  public let runner: wref<Entity>;

  public let timestamp: Float;
}

public class UnregisterFleeingNPC extends ScriptableSystemRequest {

  public let runner: wref<Entity>;
}

public class RegisterPoliceCaller extends ScriptableSystemRequest {

  public let caller: wref<Entity>;

  public let crimePosition: Vector4;
}

public class UnregisterPoliceCaller extends ScriptableSystemRequest {
}

public class StalkEvent extends Event {
}

public class DisturbingComfortZone extends Event {
}

public class CheckComfortZoneEvent extends Event {
}

public static native func GetLookAtLimitDistanceValue(limitType: animLookAtLimitDistanceType) -> Float;

public native struct LookAtPartRequest {

  public native let partName: CName;

  public native let weight: Float;

  public native let suppress: Float;

  public native let mode: Int32;
}

public class RepeatLookatEvent extends Event {

  public let target: wref<Entity>;
}

public class AddInvestigatorEvent extends Event {

  public let investigator: EntityID;
}

public class SetBodyPositionEvent extends Event {

  public let bodyPosition: Vector4;

  public let bodyPositionID: EntityID;

  public let pickedUp: Bool;
}

public native class PresetMapper_Record extends TweakDBRecord {

  public final native func MappingName() -> String;

  public final native func Preset() -> wref<ReactionPreset_Record>;

  public final native func PresetHandle() -> ref<ReactionPreset_Record>;
}

public native class VisibleObject extends IScriptable {

  public native let description: CName;

  public native let visibilityDistance: Float;
}

public native class VisibleObjectDetectionMultEvent extends Event {

  public native let multiplier: Float;
}

public final native class SetAggressiveMask extends Event {
}

public abstract native class ReactionChangeRequestEvent extends Event {

  public native let reactionPresetRecord: ref<ReactionPreset_Record>;
}

public final native class CrosswalkEvent extends Event {

  public native let trafficLightColor: worldTrafficLightColor;

  public native let oldTrafficLightColor: worldTrafficLightColor;

  public native let totalDistance: Float;

  public native let distanceLeft: Float;
}

public final native class BumpEvent extends Event {

  public native let sourceLocation: gameinteractionsBumpLocation;

  public native let side: gameinteractionsBumpSide;

  public native let direction: Vector4;

  public native let sourcePosition: Vector4;

  public native let sourceSquaredDistance: Float;

  public native let sourceSpeed: Float;

  public native let sourceRadius: Float;

  public native let isMounted: Bool;
}

public native class PlayerProximityStartEvent extends Event {

  public native let profile: CName;
}

public class ProximityLookatEvent extends Event {
}

public class SwapPresetEvent extends Event {

  public let mappingName: String;
}

public class DistrurbComfortZoneAggressiveEvent extends Event {
}

public native class AISignalHandlerComponent extends IComponent {

  public final native func AddSignal(signal: script_ref<AIGateSignal>, opt keepActive: Bool) -> Uint32;

  public final native func RemoveSignal(id: Uint32) -> Bool;

  public final native func ConsumeSignal(tag: CName) -> Void;

  public final native func IsHighestPriority(tag: CName, out signalId: Uint32) -> Bool;

  public final native func GetSignal(signalId: Uint32, out signal: AIGateSignal) -> Bool;

  public final native func HasSignalWithTag(tag: CName) -> Bool;

  public final native func GetHighestPrioritySignal(out signal: AIGateSignal, out signalId: Uint32) -> Bool;

  public final static native func Get(entity: ref<Entity>) -> ref<AISignalHandlerComponent>;
}

public native class ObjectSelectionComponent extends IComponent {

  public final native func SetRadius(radius: Float) -> Void;

  public final native func SetCurrentCoverDebugPresetNumber(presetNumber: Int32) -> Void;

  public final native func GetCurrentCoverDebugPresetNumber() -> Int32;

  public final native func IsCoverPositiveScored(coverId: Uint64, opt ring: gamedataAIRingType) -> Bool;

  public final native func PauseCoversProcessing(setPause: Bool) -> Void;

  public final native func IsCoversProcessingPaused() -> Bool;
}

public struct CombatTarget {

  public let m_puppet: wref<ScriptedPuppet>;

  public let m_hasTime: Bool;

  public let m_highlightTime: Float;
}

public class RemoveTargetFromHighlightEvent extends Event {

  public let m_target: wref<ScriptedPuppet>;
}

public class ToggleChargeHighlightEvent extends Event {

  public let m_active: Bool;
}

public native class HudEnhancer_Record extends TweakDBRecord {

  public final native func Distance() -> Float;
}

public class ReevaluatePresetEvent extends Event {
}

public class AnimFeature_ProceduralLean extends AnimFeature {

  @default(AnimFeature_ProceduralLean, 5.0f)
  public edit let angle_threshold: Float;

  @default(AnimFeature_ProceduralLean, 50.0f)
  public edit let max_turn_angle: Float;

  @default(AnimFeature_ProceduralLean, 0.1f)
  public edit let hips_shift_side: Float;

  @default(AnimFeature_ProceduralLean, -0.01f)
  public edit let hips_shift_down: Float;

  @default(AnimFeature_ProceduralLean, -8.0f)
  public edit let hips_tilt: Float;

  @default(AnimFeature_ProceduralLean, -5.0f)
  public edit let hips_turn: Float;

  @default(AnimFeature_ProceduralLean, -5.0f)
  public edit let spine_tilt: Float;

  @default(AnimFeature_ProceduralLean, -12.0f)
  public edit let spine_turn: Float;

  @default(AnimFeature_ProceduralLean, 10.0f)
  public edit let arms_counter_turn: Float;

  @default(AnimFeature_ProceduralLean, 1.0f)
  public edit let transform_multiplyer: Float;

  @default(AnimFeature_ProceduralLean, 100.0f)
  public edit let damp_value_walk: Float;

  @default(AnimFeature_ProceduralLean, 100.0f)
  public edit let damp_value_sprint: Float;
}

public final native class gamePotentialDeathEvent extends Event {

  public native let instigator: wref<GameObject>;
}

public class SetBountyAwardedEvent extends Event {

  public let awarded: Bool;
}

public struct Bounty {

  public let m_transgressions: array<TweakDBID>;

  public let m_bountySetter: TweakDBID;

  public let m_moneyAmount: Int32;

  public let m_streetCredAmount: Int32;

  public let m_awarded: Bool;

  public let m_wantedStars: Int32;
}

public class SetBountyObjectEvent extends Event {

  public let bounty: Bounty;
}

public native class BountyDrawTable_Record extends TweakDBRecord {

  public final native func BountyChoices(out outList: array<wref<Bounty_Record>>) -> Void;

  public final native func GetBountyChoicesCount() -> Int32;

  public final native func GetBountyChoicesItem(index: Int32) -> wref<Bounty_Record>;

  public final native func GetBountyChoicesItemHandle(index: Int32) -> wref<Bounty_Record>;

  public final native func BountyChoicesContains(item: wref<Bounty_Record>) -> Bool;
}

public native class Bounty_Record extends TweakDBRecord {

  public final native func BountySetter() -> wref<Affiliation_Record>;

  public final native func BountySetterHandle() -> ref<Affiliation_Record>;

  public final native func Reward() -> wref<RewardBase_Record>;

  public final native func RewardHandle() -> ref<RewardBase_Record>;

  public final native func Transgressions(out outList: array<wref<Transgression_Record>>) -> Void;

  public final native func GetTransgressionsCount() -> Int32;

  public final native func GetTransgressionsItem(index: Int32) -> wref<Transgression_Record>;

  public final native func GetTransgressionsItemHandle(index: Int32) -> wref<Transgression_Record>;

  public final native func TransgressionsContains(item: wref<Transgression_Record>) -> Bool;

  public final native func DrawWeight() -> Float;

  public final native func WantedStars() -> Int32;
}

public native class RewardBase_Record extends TweakDBRecord {

  public final native func Name() -> String;

  public final native func Recipes(out outList: array<wref<Item_Record>>) -> Void;

  public final native func GetRecipesCount() -> Int32;

  public final native func GetRecipesItem(index: Int32) -> wref<Item_Record>;

  public final native func GetRecipesItemHandle(index: Int32) -> wref<Item_Record>;

  public final native func RecipesContains(item: wref<Item_Record>) -> Bool;

  public final native func StatModifiers(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetStatModifiersCount() -> Int32;

  public final native func GetStatModifiersItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetStatModifiersItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func StatModifiersContains(item: wref<StatModifier_Record>) -> Bool;

  public final native func CurrencyPackage(out outList: array<wref<CurrencyReward_Record>>) -> Void;

  public final native func GetCurrencyPackageCount() -> Int32;

  public final native func GetCurrencyPackageItem(index: Int32) -> wref<CurrencyReward_Record>;

  public final native func GetCurrencyPackageItemHandle(index: Int32) -> wref<CurrencyReward_Record>;

  public final native func CurrencyPackageContains(item: wref<CurrencyReward_Record>) -> Bool;

  public final native func Experience(out outList: array<wref<XPPoints_Record>>) -> Void;

  public final native func GetExperienceCount() -> Int32;

  public final native func GetExperienceItem(index: Int32) -> wref<XPPoints_Record>;

  public final native func GetExperienceItemHandle(index: Int32) -> wref<XPPoints_Record>;

  public final native func ExperienceContains(item: wref<XPPoints_Record>) -> Bool;

  public final native func Items(out outList: array<wref<InventoryItem_Record>>) -> Void;

  public final native func GetItemsCount() -> Int32;

  public final native func GetItemsItem(index: Int32) -> wref<InventoryItem_Record>;

  public final native func GetItemsItemHandle(index: Int32) -> wref<InventoryItem_Record>;

  public final native func ItemsContains(item: wref<InventoryItem_Record>) -> Bool;

  public final native func Achievement(out outList: array<wref<Achievement_Record>>) -> Void;

  public final native func GetAchievementCount() -> Int32;

  public final native func GetAchievementItem(index: Int32) -> wref<Achievement_Record>;

  public final native func GetAchievementItemHandle(index: Int32) -> wref<Achievement_Record>;

  public final native func AchievementContains(item: wref<Achievement_Record>) -> Bool;

  public final native func PhotoModeItem(out outList: array<wref<PhotoModeItem_Record>>) -> Void;

  public final native func GetPhotoModeItemCount() -> Int32;

  public final native func GetPhotoModeItemItem(index: Int32) -> wref<PhotoModeItem_Record>;

  public final native func GetPhotoModeItemItemHandle(index: Int32) -> wref<PhotoModeItem_Record>;

  public final native func PhotoModeItemContains(item: wref<PhotoModeItem_Record>) -> Bool;
}

public native class XPPoints_Record extends TweakDBRecord {

  public final native func Type() -> wref<Proficiency_Record>;

  public final native func TypeHandle() -> ref<Proficiency_Record>;

  public final native func QuantityModifiers(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetQuantityModifiersCount() -> Int32;

  public final native func GetQuantityModifiersItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetQuantityModifiersItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func QuantityModifiersContains(item: wref<StatModifier_Record>) -> Bool;
}

public native class CurrencyReward_Record extends TweakDBRecord {

  public final native func Currency() -> wref<Item_Record>;

  public final native func CurrencyHandle() -> ref<Item_Record>;

  public final native func QuantityModifiers(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetQuantityModifiersCount() -> Int32;

  public final native func GetQuantityModifiersItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetQuantityModifiersItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func QuantityModifiersContains(item: wref<StatModifier_Record>) -> Bool;
}

public native class Transgression_Record extends TweakDBRecord {

  public final native func LocalizedDescription() -> String;

  public final native func DrawWeight() -> Float;

  public final native func Severity() -> Float;
}

public static native func Clamp(v: Int32, min: Int32, max: Int32) -> Int32;

public class ExperiencePointsEvent extends Event {

  public let amount: Int32;

  public let type: gamedataProficiencyType;

  public let isDebug: Bool;
}

public class BountyCompletionEvent extends Event {

  public let streetCredAwarded: Int32;

  public let moneyAwarded: Int32;
}

public native class PlayerDetectionChangedEvent extends Event {

  public native let oldDetectionValue: Float;

  public native let newDetectionValue: Float;
}

public native class gameEntityStubComponentPS extends GameComponentPS {

  public final native const func GetSpawnerID() -> EntityID;

  public final native const func GetOwnerCommunityEntryName() -> CName;

  public final static native func GetPSComponentName() -> CName;
}

public final native class ItemAddedToSlot extends Event {

  public final native func GetSlotID() -> TweakDBID;

  public final native func GetPrevItemID() -> ItemID;

  public final native func GetItemID() -> ItemID;
}

public class CacheItemEquippedToHandsEvent extends Event {

  public let m_itemID: ItemID;

  public let m_slot: EHandEquipSlot;
}

public struct DEBUG_VisualRecord {

  public let layerIDs: array<Uint32>;

  public let puppet: wref<ScriptedPuppet>;

  public let infiniteDuration: Bool;

  public let showDuration: Float;
}

public static native func StrUpper(const str: script_ref<String>) -> String;

public static native func UseProfiler() -> Bool;

public final native class ItemRemovedFromSlot extends Event {

  public final native func GetSlotID() -> TweakDBID;

  public final native func GetItemID() -> ItemID;
}

public class OnBeingTarget extends Event {

  public let objectThatTargets: wref<GameObject>;

  public let noLongerTarget: Bool;
}

public class ForcedRagdollDeathSignal extends TaggedSignalUserData {

  public let m_value: Bool;
}

public native class ApplyStatusEffectEvent extends StatusEffectEvent {

  public native let isNewApplication: Bool;

  public native let isAppliedOnSpawn: Bool;

  public native let instigatorEntityID: EntityID;
}

public final native class DefeatedEvent extends Event {
}

public native struct CachedBoolValue {

  public final static native func SetDirty(cachedValue: script_ref<CachedBoolValue>) -> Void;

  public final static native func GetIfNotDirty(cachedValue: script_ref<CachedBoolValue>, out value: Bool) -> Bool;

  public final static native func Set(cachedValue: script_ref<CachedBoolValue>, value: Bool) -> Void;
}

public final native class AndroidTurnOff extends Event {
}

public final native class AndroidTurnOn extends Event {
}

public class NameplateVisibleEvent extends Event {

  public let isNameplateVisible: Bool;

  public let entityID: EntityID;
}

public native struct AIGateSignal {

  public native let flags: AISignalFlags;

  public native let priority: Float;

  public native let lifeTime: Float;

  public final static native func IsEmpty(self: script_ref<AIGateSignal>) -> Bool;

  public final static native func GetTagCount(self: script_ref<AIGateSignal>) -> Uint32;

  public final static native func GetTag(self: script_ref<AIGateSignal>, index: Uint32) -> CName;

  public final static native func HasTag(self: script_ref<AIGateSignal>, tag: CName) -> Bool;

  public final static native func AddTag(self: script_ref<AIGateSignal>, tag: CName) -> Void;

  public final static native func HasAllTagsOf(self: script_ref<AIGateSignal>, other: script_ref<AIGateSignal>) -> Bool;

  public final static native func HasFlag(self: script_ref<AIGateSignal>, flag: AISignalFlags) -> Bool;

  public final static native func AddFlag(self: script_ref<AIGateSignal>, flag: AISignalFlags) -> Void;
}

public final native class StartTakedownEvent extends Event {

  public native let slideTime: Float;

  public native let target: wref<GameObject>;

  public let actionName: CName;
}

public class DelayedStatusEffectApplicationEvent extends Event {

  public let statusEffectEvent: ref<ApplyStatusEffectEvent>;
}

public final native class UncontrolledMovementStartEvent extends Event {

  public native let ragdollNoGroundThreshold: Float;

  public native let ragdollOnCollision: Bool;

  public final native func DebugSetSourceName(debugSourceName: CName) -> Void;
}

public native class StatusEffectAIBehaviorFlag_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataStatusEffectAIBehaviorFlag;
}

public class StatusEffectSignalEvent extends Event {

  public let statusEffectID: TweakDBID;

  public let priority: Float;

  public let tags: array<CName>;

  public let flags: array<EAIGateSignalFlags>;

  public let repeatSignalDelay: Float;
}

public class CheckUncontrolledMovementStatusEffectEvent extends Event {
}

public class HackPlayerEvent extends Event {

  public let netrunnerID: EntityID;

  public let targetID: EntityID;

  public let objectRecord: wref<ObjectAction_Record>;

  @default(HackPlayerEvent, true)
  public let showDirectionalIndicator: Bool;

  public let revealPositionAction: Bool;
}

public final native class ResurrectEvent extends Event {
}

public native class RemoveStatusEffect extends StatusEffectEvent {

  public native let isFinalRemoval: Bool;
}

public static native func OperatorAssignSubtract(out a: Uint32, b: Uint32) -> Uint32;

public class DeadBodyEvent extends Event {
}

public final native class UncontrolledMovementEndEvent extends Event {
}

public class CacheStatusEffectAnimEvent extends Event {

  public let removeCachedStatusEffect: Bool;
}

public class RemoveAllStatusEffectOfTypeEvent extends Event {

  public let statusEffectType: gamedataStatusEffectType;
}

public native class StatusEffectFX_Record extends TweakDBRecord {

  public final native func Name() -> CName;

  public final native func ShouldReapply() -> Bool;
}

public class CacheStatusEffectFXEvent extends Event {

  public let vfxToCache: array<wref<StatusEffectFX_Record>>;

  public let sfxToCache: array<wref<StatusEffectFX_Record>>;
}

public native class SpawnableObjectPriority_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataSpawnableObjectPriority;
}

public class CheckPuppetRagdollStateEvent extends Event {
}

public final native class AnimVisibilityChangedEvent extends Event {

  public native let isVisible: Bool;
}

public class AnimFeature_RagdollState extends AnimFeature {

  public edit let isActive: Bool;

  public edit let hipsPolePitch: Float;

  public edit let speed: Float;
}

public final native class RagdollNotifyEnabledEvent extends Event {

  public native let instigator: EntityID;
}

public class CheckDeadPuppetDisposedEvent extends Event {
}

public final native class RagdollImpactEvent extends Event {

  public native let otherEntity: wref<Entity>;

  public native let triggeredSimulation: Bool;

  public native let impactPoints: array<RagdollImpactPointData>;
}

public native struct RagdollImpactPointData {

  public native let worldPosition: WorldPosition;

  public native let worldNormal: Vector4;

  public native let forceMagnitude: Float;

  public native let impulseMagnitude: Float;

  public native let ragdollProxyActorIndex: Uint32;

  public native let maxForceMagnitude: Float;

  public native let maxImpulseMagnitude: Float;

  public native let velocityChange: Float;
}

public struct RagdollDamagePollData {

  public let worldPosition: WorldPosition;

  public let worldNormal: Vector4;

  public let maxForceMagnitude: Float;

  public let maxImpulseMagnitude: Float;

  public let maxVelocityChange: Float;

  public let maxZDiff: Float;
}

public class StartRagdollDamageEvent extends Event {
}

public static native func OperatorAssignMultiply(out a: Quaternion, b: Quaternion) -> Quaternion;

public final native class AnimatedRagdollNotifyEnabledEvent extends Event {

  public native let instigator: EntityID;
}

public native class AISubActionForceHitReaction_Record extends AISubAction_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func PauseCondition(out outList: array<wref<AIActionCondition_Record>>) -> Void;

  public final native func GetPauseConditionCount() -> Int32;

  public final native func GetPauseConditionItem(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func GetPauseConditionItemHandle(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func PauseConditionContains(item: wref<AIActionCondition_Record>) -> Bool;

  public final native func HitBodyPart() -> Int32;

  public final native func HitIntensity() -> Int32;

  public final native func HitSource() -> Int32;

  public final native func HitDirection() -> Int32;

  public final native func Stance() -> Int32;

  public final native func AnimVariation() -> Int32;

  public final native func Delay() -> Float;

  public final native func HitType() -> Int32;

  public final native func PauseConditionCheckInterval() -> Float;
}

public native class StimuliData extends IScriptable {
}

public class NPCAfterDeathOrDefeatEvent extends Event {
}

public class FinisherEffectorActionOn extends Event {

  public let instigator: wref<GameObject>;
}

public class TerminateReactionLookatEvent extends Event {
}

public class LootPickupDelayEvent extends Event {

  public let m_enableLootInteraction: Bool;
}

public native struct SquadOrder {

  public native let squadAction: CName;

  public native let state: Uint32;

  public native let id: Uint32;
}

public class DestroyLink extends Event {
}

public class UnblockHealingConsumableDrop extends ScriptableSystemRequest {
}

public class UnblockAmmoDrop extends ScriptableSystemRequest {
}

public class BlockAmmoDrop extends ScriptableSystemRequest {
}

public class BlockHealingConsumableDrop extends ScriptableSystemRequest {
}

public class HandleRagdollOnDeathEvent extends Event {

  public let handleUncontrolledMovement: Bool;
}

public native class ScannerModuleVisibilityPreset_Record extends TweakDBRecord {

  public final native func ShoulShowName() -> Bool;

  public final native func ShouldShowLevel() -> Bool;

  public final native func ShouldShowBounty() -> Bool;

  public final native func ShouldShowFaction() -> Bool;

  public final native func ShouldShowWeaponData() -> Bool;

  public final native func ShouldShowSquadInfo() -> Bool;

  public final native func ShouldShowRarity() -> Bool;

  public final native func ShouldShowHealth() -> Bool;

  public final native func ShouldShowAttitude() -> Bool;

  public final native func ShouldShowVulnerabilities() -> Bool;

  public final native func ShouldShowResistances() -> Bool;

  public final native func ShouldShowQuestClues() -> Bool;

  public final native func ShouldShowNetworkStatus() -> Bool;
}

public native class ArchetypeType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func LocalizedName() -> CName;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataArchetypeType;
}

public struct ScannerStatDetails {

  public let statType: gamedataStatType;

  public let value: Float;

  public let baseValue: Float;
}

public struct scannerDataStructure {

  public let entityName: String;

  public let quickHackName: String;

  public let quickHackDesc: String;

  public let questEntries: array<scannerQuestEntry>;

  @default(scannerDataStructure, false)
  public let empty: Bool;
}

public struct GameObjectScanStats {

  public let scannerData: scannerDataStructure;
}

public class TestNPCOutsideNavmeshEvent extends Event {

  public let activator: wref<GameObject>;

  public let target: wref<GameObject>;

  public let enable: Bool;
}

public class DelayedGameEffectEvent extends Event {

  public let m_activator: wref<GameObject>;

  public let m_target: wref<GameObject>;

  public let m_effectName: CName;

  public let m_effectTag: CName;

  public let m_statusEffect: String;
}

public final native class gameDeathParamsEvent extends Event {

  public native let noAnimation: Bool;

  public native let noRagdoll: Bool;
}

public final native class gameDeathDirectionEvent extends Event {

  public native let direction: gameeventsDeathDirection;
}

public class NPCThrowingGrenadeEvent extends Event {

  public let target: wref<GameObject>;
}

public native class EnteredSplineEvent extends Event {

  public native let useDoors: Bool;
}

public class AIThreatCalculationEvent extends Event {

  public let set: Bool;

  public let temporaryThreatCalculationType: EAIThreatCalculationType;
}

public native struct SItemStackRequirementData {

  public native let statType: gamedataStatType;

  public native let requiredValue: Float;
}

public class UIVendorItemsSoldEvent extends Event {

  public let requestID: Int32;

  public let itemsID: array<ItemID>;

  public let quantity: array<Int32>;

  public let piecesPrice: array<Int32>;
}

public struct SItemTransaction {

  public let itemStack: SItemStack;

  public let pricePerItem: Int32;
}

public class UIMenuNotificationEvent extends Event {

  public let m_notificationType: UIMenuNotificationType;

  public let m_additionalInfo: Variant;
}

public native struct TelemetryInventoryItem {

  public native let friendlyName: String;

  public native let localizedName: String;

  public native let itemID: ItemID;

  public native let quality: Int32;

  public native let itemType: gamedataItemType;

  public native let iconic: Bool;

  public native let itemLevel: Int32;

  public native let isSilenced: Bool;
}

public class UIVendorItemsBoughtEvent extends Event {

  public let requestID: Int32;

  public let itemsID: array<ItemID>;

  public let quantity: array<Int32>;
}

public class VendingMachineFinishedEvent extends Event {

  public let itemID: ItemID;

  public let isFree: Bool;

  public let isReady: Bool;
}

public struct VendingMachineSetup {

  @default(VendingMachineSetup, 0.1f)
  public let m_timeToCompletePurchase: Float;
}

public struct VendingMachineSFX {

  @attrib(customEditor, "AudioEvent")
  @default(VendingMachineSFX, amb_int_custom_megabuilding_01_adverts_interactive_nicola_01_select_q110)
  public let m_glitchingStart: CName;

  @attrib(customEditor, "AudioEvent")
  @default(VendingMachineSFX, amb_int_custom_megabuilding_01_adverts_interactive_nicola_01_select_q110_stop)
  public let m_glitchingStop: CName;
}

public class VendingMachineDeviceBlackboardDef extends DeviceBaseBlackboardDef {

  public let ActionStatus: BlackboardID_Variant;

  public let SoldOut: BlackboardID_Bool;
}

public class DispenseRequest extends MarketSystemRequest {

  public let position: Vector4;

  public let itemID: ItemID;

  public let shouldPay: Bool;
}

public class TransactionRequest extends MarketSystemRequest {

  public let requestID: Int32;

  public let items: array<TransactionRequestData>;
}

public class VendorBoughtItemEvent extends Event {

  public let items: array<ItemID>;
}

public struct TransactionRequestData {

  public let itemID: ItemID;

  @default(TransactionRequestData, 1)
  public let quantity: Int32;

  @default(TransactionRequestData, 0.0f)
  public let powerLevel: Float;
}

public class BuyRequest extends TransactionRequest {
}

public struct JunkItemRecord {

  @attrib(customEditor, "TweakDBGroupInheritance;Items.BaseDestroyedJunk")
  public edit let m_junkItemID: TweakDBID;
}

public class DelayHackedEvent extends Event {

  public let itemID: ItemID;
}

public class StopShortGlitchEvent extends Event {
}

public native class VendorPanelData extends IScriptable {

  public native let assetsLibrary: String;

  public native let rootItemName: CName;

  public native let data: VendorData;
}

public native struct VendorData {

  public native let vendorId: String;

  public native let entityID: EntityID;

  public native let isActive: Bool;
}

public native class AttachmentSlot_Record extends TweakDBRecord {

  public final native func EntitySlotName() -> String;

  public final native func LocalizedName() -> String;

  public final native func TagsForActiveItemCycling() -> array<CName>;

  public final native func GetTagsForActiveItemCyclingCount() -> Int32;

  public final native func GetTagsForActiveItemCyclingItem(index: Int32) -> CName;

  public final native func TagsForActiveItemCyclingContains(item: CName) -> Bool;

  public final native func CustomOffset() -> Vector3;
}

public native class SlotItemPartListElement_Record extends TweakDBRecord {

  public final native func OptionalProbabilityCurveName() -> String;

  public final native func Slot() -> wref<AttachmentSlot_Record>;

  public final native func SlotHandle() -> ref<AttachmentSlot_Record>;

  public final native func ItemPartList(out outList: array<wref<ItemPartListElement_Record>>) -> Void;

  public final native func GetItemPartListCount() -> Int32;

  public final native func GetItemPartListItem(index: Int32) -> wref<ItemPartListElement_Record>;

  public final native func GetItemPartListItemHandle(index: Int32) -> wref<ItemPartListElement_Record>;

  public final native func ItemPartListContains(item: wref<ItemPartListElement_Record>) -> Bool;
}

public native class ItemPartListElement_Record extends TweakDBRecord {

  public final native func Item() -> wref<Item_Record>;

  public final native func ItemHandle() -> ref<Item_Record>;

  public final native func Weight() -> Float;
}

public static native func UnicodeStringCompare(const str: script_ref<String>, const str2: script_ref<String>) -> Int32;

public static native func UnicodeStringLessThan(const str: script_ref<String>, const str2: script_ref<String>) -> Bool;

public static native func UnicodeStringLessThanEqual(const str: script_ref<String>, const str2: script_ref<String>) -> Bool;

public static native func OperatorGreater(a: GameTime, b: GameTime) -> Bool;

public struct InventoryItemSortData {

  public let Name: String;

  public let Quality: Int32;

  public let Price: Int32;

  public let Weight: Float;

  public let DPS: Int32;

  public let ItemType: Int32;

  public let QuestItem: Bool;

  public let NewItem: Bool;
}

public class UIScriptableSystemInventoryAddItem extends ScriptableSystemRequest {

  public let itemID: ItemID;
}

public class UIScriptableSystemInventoryRemoveItem extends ScriptableSystemRequest {

  public let itemID: ItemID;
}

public class UIScriptableSystemSetBackpackSorting extends ScriptableSystemRequest {

  public let sortMode: Int32;
}

public class UIScriptableSystemSetBackpackFilter extends ScriptableSystemRequest {

  public let filterMode: Int32;
}

public class UIScriptableSystemSetVendorPanelVendorSorting extends ScriptableSystemRequest {

  public let sortMode: Int32;
}

public class UIScriptableSystemSetVendorPanelPlayerSorting extends ScriptableSystemRequest {

  public let sortMode: Int32;
}

public class UIScriptableSystemSetComparisionTooltipDisabled extends ScriptableSystemRequest {

  public let value: Bool;
}

public class UIScriptableSystemInventoryInspectItem extends ScriptableSystemRequest {

  public let itemID: ItemID;
}

public struct InventoryTooltipData_QuickhackData {

  public let memorycost: Int32;

  public let baseCost: Int32;

  public let uploadTime: Float;

  public let duration: Float;

  public let cooldown: Float;

  public let attackEffects: array<ref<DamageEffectUIEntry>>;

  public let uploadTimeDiff: Float;

  public let durationDiff: Float;

  public let cooldownDiff: Float;
}

public native class TriggerAttackEffector_Record extends Effector_Record {

  public final native func AttackRecord() -> wref<Attack_Record>;

  public final native func AttackRecordHandle() -> ref<Attack_Record>;
}

public class DamageEffectUIEntry extends IScriptable {

  public let valueStat: gamedataStatType;

  public let targetStat: gamedataStatType;

  public let displayType: DamageEffectDisplayType;

  public let valueToDisplay: Float;

  public let effectorDuration: Float;

  public let effectorDelay: Float;

  public let isContinuous: Bool;
}

public class InventoryTooltiData_GrenadeData extends IScriptable {

  public let type: GrenadeDamageType;

  public let range: Float;

  public let duration: Float;

  public let delay: Float;

  public let damagePerTick: Float;

  public let damageType: gamedataStatType;

  public let detonationTimer: Float;

  public let deliveryMethod: gamedataGrenadeDeliveryMethodType;

  public let totalDamage: Float;
}

public native class CombinedStatModifier_Record extends StatModifier_Record {

  public final native func RefStat() -> wref<Stat_Record>;

  public final native func RefStatHandle() -> ref<Stat_Record>;

  public final native func RefObject() -> CName;

  public final native func OpSymbol() -> CName;

  public final native func Value() -> Float;
}

public class InventoryTooltiData_GrenadeDamageData extends IScriptable {

  public let statType: gamedataStatType;

  public let value: Float;
}

public class MessageTooltipData extends ATooltipData {

  public let Title: String;

  public let Description: String;

  public let TitleLocalizationPackage: ref<UILocalizationDataPackage>;

  public let DescriptionLocalizationPackage: ref<UILocalizationDataPackage>;
}

public class MinimalItemTooltipModData extends IScriptable {
}

public struct AttachmentSlotCacheData {

  public let empty: Bool;

  public let attachmentSlotRecord: wref<AttachmentSlot_Record>;

  public let shouldBeAvailable: Bool;

  public let slotId: TweakDBID;
}

public class MinimalItemTooltipModAttachmentData extends MinimalItemTooltipModData {

  public let isEmpty: Bool;

  public let slotName: String;

  public let qualityName: CName;

  public let abilitiesSize: Int32;

  public let abilities: array<InventoryItemAbility>;
}

public class IdentifiedWrappedTooltipData extends ATooltipData {

  public let m_identifier: CName;

  public let m_tooltipOwner: EntityID;

  public let m_data: ref<ATooltipData>;
}

public struct AbilityData {

  @default(AbilityData, true)
  public let Empty: Bool;

  public let ID: ItemID;

  public let Name: String;

  public let IconPath: String;

  public let CategoryName: String;

  public let Description: String;

  @default(AbilityData, gamedataEquipmentArea.Invalid)
  public let EquipmentArea: gamedataEquipmentArea;

  @default(AbilityData, false)
  public let IsEquipped: Bool;

  public let GameItemData: ref<gameItemData>;

  @default(AbilityData, -1)
  public let AssignedIndex: Int32;
}

public class ClearItemAppearanceEvent extends Event {

  public let itemID: ItemID;
}

public native struct SEquipmentSet {

  public native persistent let setItems: array<SItemInfo>;

  public native persistent let setName: CName;

  public native persistent let setType: EEquipmentSetType;
}

public native struct SItemInfo {

  public native persistent let itemID: ItemID;

  public native persistent let slotIndex: Int32;
}

public class AssignToCyberwareWheelRequest extends PlayerScriptableSystemRequest {

  public let itemID: ItemID;

  @default(AssignToCyberwareWheelRequest, -1)
  public let slotIndex: Int32;
}

public class UnequipItemsRequest extends PlayerScriptableSystemRequest {

  public let items: array<ItemID>;
}

public native class UnequipByTDBIDRequest extends PlayerScriptableSystemRequest {

  public native let itemTDBID: TweakDBID;
}

public class ThrowEquipmentRequest extends PlayerScriptableSystemRequest {

  public let itemObject: wref<ItemObject>;
}

public native class DrawItemRequest extends PlayerScriptableSystemRequest {

  public native let itemID: ItemID;

  public native let equipAnimationType: gameEquipAnimationType;
}

public class SaveEquipmentSetRequest extends PlayerScriptableSystemRequest {

  public let setName: String;

  public let setType: EEquipmentSetType;
}

public class LoadEquipmentSetRequest extends PlayerScriptableSystemRequest {

  public let setName: String;
}

public class DeleteEquipmentSetRequest extends PlayerScriptableSystemRequest {

  public let setName: String;
}

public class CheckRemovedItemWithSlotActiveItem extends PlayerScriptableSystemRequest {

  public let itemID: ItemID;
}

public native class SynchronizeAttachmentSlotRequest extends PlayerScriptableSystemRequest {

  public native let slotID: TweakDBID;
}

public class SetActiveItemInEquipmentArea extends PlayerScriptableSystemRequest {

  public let itemID: ItemID;
}

public native class DrawItemByContextRequest extends PlayerScriptableSystemRequest {

  public native let itemEquipContext: gameItemEquipContexts;

  public native let equipAnimationType: gameEquipAnimationType;
}

public native class UnequipByContextRequest extends PlayerScriptableSystemRequest {

  public native let itemUnequipContext: gameItemUnequipContexts;
}

public class ClearEquipmentRequest extends PlayerScriptableSystemRequest {
}

public native class gameCombinedStatModifierData extends gameStatModifierData {

  public native let refStatType: gamedataStatType;

  public native let operation: gameCombinedStatOperation;

  public native let refObject: gameStatObjectsRelation;

  public native let value: Float;
}

public class CraftItemRequest extends PlayerScriptableSystemRequest {

  public let target: wref<GameObject>;

  public let itemRecord: ref<Item_Record>;

  public let amount: Int32;

  public let bulletAmount: Int32;
}

public native class DisassemblingResult_Record extends TweakDBRecord {

  public final native func Ingredients(out outList: array<wref<RecipeElement_Record>>) -> Void;

  public final native func GetIngredientsCount() -> Int32;

  public final native func GetIngredientsItem(index: Int32) -> wref<RecipeElement_Record>;

  public final native func GetIngredientsItemHandle(index: Int32) -> wref<RecipeElement_Record>;

  public final native func IngredientsContains(item: wref<RecipeElement_Record>) -> Bool;
}

public class UpgradeItemRequest extends PlayerScriptableSystemRequest {

  public let itemID: ItemID;
}

public class HideRecipeRequest extends PlayerScriptableSystemRequest {

  public let recipe: TweakDBID;
}

public class ShowRecipeRequest extends PlayerScriptableSystemRequest {

  public let recipe: TweakDBID;
}

public class NCPDJobDoneEvent extends Event {

  public let levelXPAwarded: Int32;

  public let streetCredXPAwarded: Int32;
}

public native class InventoryItem_Record extends TweakDBRecord {

  public final native func EquipSlot_DEPRECATED() -> wref<AttachmentSlot_Record>;

  public final native func EquipSlot_DEPRECATEDHandle() -> ref<AttachmentSlot_Record>;

  public final native func Item() -> wref<Item_Record>;

  public final native func ItemHandle() -> ref<Item_Record>;

  public final native func ActiveForSlot() -> wref<AttachmentSlot_Record>;

  public final native func ActiveForSlotHandle() -> ref<AttachmentSlot_Record>;

  public final native func Quantity() -> Int32;

  public final native func ChanceInCrowd() -> Float;
}

public static native func StrBeginsWith(const str: script_ref<String>, const match: script_ref<String>) -> Bool;

public native class Cooldown_Record extends TweakDBRecord {

  public final native func Type() -> wref<CooldownType_Record>;

  public final native func TypeHandle() -> ref<CooldownType_Record>;

  public final native func Tags() -> array<CName>;

  public final native func GetTagsCount() -> Int32;

  public final native func GetTagsItem(index: Int32) -> CName;

  public final native func TagsContains(item: CName) -> Bool;

  public final native func Duration() -> Float;

  public final native func Modifiable() -> Bool;
}

public struct CooldownStorageID {

  public let ID: Uint32;

  public let isValid: EBOOL;
}

public class ClearPingedSquadRequest extends ScriptableSystemRequest {

  public let squadName: CName;
}

public native class VehicleCameraManagerComponent extends GameComponent {

  public final native func GetManagerHandle() -> ref<VehicleCameraManager>;
}

public struct VehEntityPlayerStateData {

  public let entID: EntityID;

  public let state: Int32;
}

public class QuickSlotButtonTap extends Event {

  public let dPadItemDirection: EDPadSlot;
}

public class UsePhoneRequest extends ScriptableSystemRequest {
}

public native struct PlayerVehicle {

  public native let name: CName;

  public native let recordID: TweakDBID;

  public native let vehicleType: gamedataVehicleType;

  public native let isUnlocked: Bool;
}

public static native func Cast(a: TweakDBID) -> GarageVehicleID;

public class DPADActionPerformed extends Event {

  public let ownerID: EntityID;

  public let state: EUIActionState;

  public let stateInt: Int32;

  public let action: EHotkey;

  public let successful: Bool;
}

public struct QuickSlotUIStructure {

  public let ItemIndex: Int32;

  public let OperationResult: Bool;
}

public class CallAction extends Event {

  public let calledAction: QuickSlotActionType;
}

public class QuickSlotKeyboardTap extends Event {

  public let keyIndex: Int32;
}

public class QuickSlotButtonHoldStartEvent extends Event {

  public let dPadItemDirection: EDPadSlot;
}

public native class VehicleModel_Record extends TweakDBRecord {

  public final native func EnumName() -> String;

  public final native func EnumComment() -> String;

  public final native func Type() -> gamedataVehicleModel;
}

public struct QuickWheelStartUIStructure {

  public let WheelItems: array<QuickSlotCommand>;

  public let dpadSlot: EDPadSlot;
}

public native class questSetPhoneStatusRequest extends ScriptableSystemRequest {

  public native let status: CName;
}

public native class questTriggerCallRequest extends ScriptableSystemRequest {

  public native let caller: CName;

  public native let addressee: CName;

  public native let callPhase: questPhoneCallPhase;

  public native let callMode: questPhoneCallMode;

  public native let isPlayerTriggered: Bool;

  public native let isRejectable: Bool;
}

public native struct PhoneCallInformation {

  public native let callMode: questPhoneCallMode;

  public native let isAudioCall: Bool;

  public native let contactName: CName;

  public native let isPlayerCalling: Bool;

  public native let isPlayerTriggered: Bool;

  public native let callPhase: questPhoneCallPhase;
}

public final native class questPhoneManager extends questIPhoneManager {

  public final native func ApplyPhoneCallRestriction(apply: Bool) -> Void;
}

public static native func StrLower(const str: script_ref<String>) -> String;

public class PickupPhoneRequest extends ScriptableSystemRequest {

  public let CallInformation: PhoneCallInformation;
}

public class UIInGameNotificationRemoveEvent extends Event {
}

public class TalkingTriggerRequest extends ScriptableSystemRequest {

  public let isPlayerCalling: Bool;

  public let contact: CName;

  public let state: questPhoneTalkingState;
}

public native class questMinimizeCallRequest extends ScriptableSystemRequest {

  public native let minimized: Bool;
}

public class AnimFeature_Inspection extends AnimFeature {

  public edit let activeInspectionStage: Int32;

  public edit let rotationX: Float;

  public edit let rotationY: Float;

  public edit let offsetX: Float;

  public edit let offsetY: Float;
}

public class InspectionEvent extends Event {

  public let enabled: Bool;
}

public class ObjectInspectEvent extends Event {

  public let showItem: Bool;
}

public class SetInspectStateEvent extends Event {

  public let state: questObjectInspectEventType;
}

public class TEMP_ScanningEvent extends Event {

  public let clue: CName;

  public let showUI: Bool;
}

public static native func AngleNormalize(a: Float) -> Float;

public class InspectionTriggerEvent extends Event {

  public let item: String;

  public let offset: Float;

  public let adsOffset: Float;

  public let timeToScan: Float;

  public let inspectedObjID: EntityID;
}

public class ScanEvent extends Event {

  public let clue: String;

  public let isAvailable: Bool;
}

public struct PlayerVisionModeControllerActiveFlags {

  public let m_kerenzikov: Bool;

  public let m_restrictedScene: Bool;

  public let m_dead: Bool;

  public let m_takedown: Bool;

  public let m_deviceTakeover: Bool;

  public let m_braindanceFPP: Bool;

  public let m_braindanceActive: Bool;

  public let m_veryHardLanding: Bool;

  public let m_noScanningRestriction: Bool;

  public let m_hasNotCybereye: Bool;

  public let m_isPhotoMode: Bool;
}

public struct PlayerVisionModeControllerBBIds {

  public let m_kerenzikov: ref<BlackboardDefinition>;

  public let m_restrictedScene: ref<BlackboardDefinition>;

  public let m_dead: ref<BlackboardDefinition>;

  public let m_takedown: ref<BlackboardDefinition>;

  public let m_deviceTakeover: ref<BlackboardDefinition>;

  public let m_braindanceFPP: ref<BlackboardDefinition>;

  public let m_braindanceActive: ref<BlackboardDefinition>;

  public let m_veryHardLanding: ref<BlackboardDefinition>;
}

public struct PlayerVisionModeControllerBBValuesIds {

  public let m_kerenzikov: BlackboardID_Int;

  public let m_restrictedScene: BlackboardID_Int;

  public let m_dead: BlackboardID_Int;

  public let m_takedown: BlackboardID_Int;

  public let m_deviceTakeover: BlackboardID_EntityID;

  public let m_braindanceFPP: BlackboardID_Bool;

  public let m_braindanceActive: BlackboardID_Bool;

  public let m_veryHardLanding: BlackboardID_Int;
}

public struct PlayerVisionModeControllerBBListeners {

  public let m_kerenzikov: ref<CallbackHandle>;

  public let m_restrictedScene: ref<CallbackHandle>;

  public let m_dead: ref<CallbackHandle>;

  public let m_takedown: ref<CallbackHandle>;

  public let m_deviceTakeover: ref<CallbackHandle>;

  public let m_braindanceFPP: ref<CallbackHandle>;

  public let m_braindanceActive: ref<CallbackHandle>;

  public let m_veryHardLanding: ref<CallbackHandle>;
}

public struct PlayerVisionModeControllerInputActionsNames {

  public let m_buttonHold: CName;

  public let m_buttonToggle: CName;
}

public struct PlayerVisionModeControllerRefreshPolicy {

  public let m_kerenzikov: PlayerVisionModeControllerRefreshPolicyEnum;

  public let m_restrictedScene: PlayerVisionModeControllerRefreshPolicyEnum;

  public let m_dead: PlayerVisionModeControllerRefreshPolicyEnum;

  public let m_takedown: PlayerVisionModeControllerRefreshPolicyEnum;

  public let m_deviceTakeover: PlayerVisionModeControllerRefreshPolicyEnum;

  public let m_braindanceFPP: PlayerVisionModeControllerRefreshPolicyEnum;

  public let m_braindanceActive: PlayerVisionModeControllerRefreshPolicyEnum;

  public let m_veryHardLanding: PlayerVisionModeControllerRefreshPolicyEnum;

  public let m_noScanningRestriction: PlayerVisionModeControllerRefreshPolicyEnum;

  public let m_hasNotCybereye: PlayerVisionModeControllerRefreshPolicyEnum;

  public let m_isPhotoMode: PlayerVisionModeControllerRefreshPolicyEnum;
}

public struct PlayerVisionModeControllerBlackboardListenersFunctions {

  public let m_kerenzikov: CName;

  public let m_restrictedScene: CName;

  public let m_dead: CName;

  public let m_takedown: CName;

  public let m_deviceTakeover: CName;

  public let m_braindanceFPP: CName;

  public let m_braindanceActive: CName;

  public let m_veryHardLanding: CName;
}

public struct PlayerVisionModeControllerOtherVars {

  public let m_enabledByToggle: Bool;

  public let m_active: Bool;

  public let m_toggledDuringHold: Bool;
}

public class PlayerVisionModeControllerInvalidateEvent extends Event {

  public let m_active: Bool;
}

public class AnimFeature_FocusMode extends AnimFeature {

  public edit let isFocusModeActive: Bool;
}

public struct PlayerVisionModeControllerInputActiveFlags {

  public let m_buttonHold: Bool;

  public let m_buttonToggle: Bool;
}

public native class ConfigVarListInt extends ConfigVar {

  public final native func GetValueFor(index: Int32) -> Int32;

  public final native func GetValue() -> Int32;

  public final native func GetDefaultValue() -> Int32;

  public final native func GetValues() -> array<Int32>;

  public final native func GetIndexFor(value: Int32) -> Int32;

  public final native func GetIndex() -> Int32;

  public final native func GetDefaultIndex() -> Int32;

  public final native func SetIndex(index: Int32) -> Void;

  public final native func GetDisplayValue(index: Int32) -> CName;
}

public native class AimAssistSettings_Record extends TweakDBRecord {

  public final native func Off() -> wref<AimAssistConfigPreset_Record>;

  public final native func OffHandle() -> ref<AimAssistConfigPreset_Record>;

  public final native func Light() -> wref<AimAssistConfigPreset_Record>;

  public final native func LightHandle() -> ref<AimAssistConfigPreset_Record>;

  public final native func Standard() -> wref<AimAssistConfigPreset_Record>;

  public final native func StandardHandle() -> ref<AimAssistConfigPreset_Record>;
}

public struct PlayerCombatControllerBBIds {

  public let m_crouchActive: ref<BlackboardDefinition>;
}

public struct PlayerCombatControllerBBValuesIds {

  public let m_crouchActive: BlackboardID_Int;
}

public struct PlayerCombatControllerBBListeners {

  public let m_crouchActive: ref<CallbackHandle>;
}

public struct PlayerCombatControllerRefreshPolicy {

  public let m_crouchActive: PlayerCombatControllerRefreshPolicyEnum;

  public let m_crouchTimerPassed: PlayerCombatControllerRefreshPolicyEnum;

  public let m_squadInCombat: PlayerCombatControllerRefreshPolicyEnum;

  public let m_usingJhonnyReplacer: PlayerCombatControllerRefreshPolicyEnum;

  public let m_usingQuickHack: PlayerCombatControllerRefreshPolicyEnum;
}

public struct PlayerCombatControllerBlackboardListenersFunctions {

  public let m_crouchActive: CName;
}

public struct PlayerCombatControllerActiveFlags {

  public let m_crouchActive: Bool;

  public let m_crouchTimerPassed: Bool;

  public let m_squadInCombat: Bool;

  public let m_usingJhonnyReplacer: Bool;

  public let m_usingQuickHack: Bool;
}

public struct PlayerCombatControllerOtherVars {

  public let m_state: PlayerCombatState;
}

public class PlayerCombatControllerInvalidateEvent extends Event {

  public let m_state: PlayerCombatState;
}

public class AnimFeature_CombatState extends AnimFeature {

  public edit let isInCombat: Bool;
}

public class CrouchDelayEvent extends Event {
}

public struct PlayerCombatControllerDelayCallbacksIds {

  public let m_crouch: DelayID;
}

public class EndGracePeriodAfterSpawn extends Event {
}

public final native class LookAtObjectChangedEvent extends Event {

  public native let lookatObject: wref<GameObject>;
}

public class WeaponEquipEvent extends Event {

  public edit let animFeature: ref<AnimFeature_EquipType>;

  public edit let item: wref<ItemObject>;
}

public class SetUpEquipmentOverlayEvent extends Event {

  public let meshOverlayEffectName: CName;

  public let meshOverlayEffectTag: CName;

  public let meshOverlaySlots: array<TweakDBID>;
}

public struct InterestingFactsListenersFunctions {

  public let m_zone: CName;
}

public struct InterestingFactsListenersIds {

  public let m_zone: Uint32;
}

public native class PlayerAttachRequest extends PlayerScriptableSystemRequest {
}

public static native func StringToFloat(const value: script_ref<String>, opt defValue: Float) -> Float;

public class CPOMissionDataUpdateEvent extends Event {
}

public class UpdateVisibilityModifierEvent extends Event {
}

public class HealthUpdateEvent extends Event {

  public let value: Float;

  public let healthDifference: Float;
}

public class UpdateAutoRevealStatEvent extends Event {

  public let hasAutoReveal: Bool;
}

public native struct StateMachineIdentifier {

  public native let definitionName: CName;

  public native let referenceName: CName;
}

public native class PSMRemoveOnDemandStateMachine extends Event {

  public native let stateMachineIdentifier: StateMachineIdentifier;
}

public class AnimFeature_CameraGameplay extends AnimFeature {

  @default(AnimFeature_CameraGameplay, 1.0f)
  public edit let is_forward_offset: Float;

  @default(AnimFeature_CameraGameplay, 0.2f)
  public edit let forward_offset_value: Float;

  @default(AnimFeature_CameraGameplay, 0.0f)
  public edit let upperbody_pitch_weight: Float;

  @default(AnimFeature_CameraGameplay, 0.0f)
  public edit let upperbody_yaw_weight: Float;

  @default(AnimFeature_CameraGameplay, 0.0f)
  public edit let is_pitch_off: Float;

  @default(AnimFeature_CameraGameplay, 0.0f)
  public edit let is_yaw_off: Float;
}

public class AnimFeature_CameraBodyOffset extends AnimFeature {

  @default(AnimFeature_CameraBodyOffset, 0.05f)
  public edit let lookat_pitch_forward_offset: Float;

  @default(AnimFeature_CameraBodyOffset, 0.4f)
  public edit let lookat_pitch_forward_down_ratio: Float;

  @default(AnimFeature_CameraBodyOffset, 0.0f)
  public edit let lookat_yaw_left_offset: Float;

  @default(AnimFeature_CameraBodyOffset, 0.0f)
  public edit let lookat_yaw_left_up_offset: Float;

  @default(AnimFeature_CameraBodyOffset, 0.0f)
  public edit let lookat_yaw_right_offset: Float;

  @default(AnimFeature_CameraBodyOffset, 0.0f)
  public edit let lookat_yaw_right_up_offset: Float;

  @default(AnimFeature_CameraBodyOffset, 45.0f)
  public edit let lookat_yaw_offset_active_angle: Float;

  @default(AnimFeature_CameraBodyOffset, 0.0f)
  public edit let is_paralax: Float;

  @default(AnimFeature_CameraBodyOffset, 0.1f)
  public edit let paralax_radius: Float;

  @default(AnimFeature_CameraBodyOffset, 0.1f)
  public edit let paralax_forward_offset: Float;

  @default(AnimFeature_CameraBodyOffset, 0.0f)
  public edit let lookat_offset_vertical: Float;
}

public native class VisibleObjectSecondaryPositionEvent extends Event {

  public native let offset: Vector3;
}

public native class VisibleObjectDistanceEvent extends Event {

  public native let distance: Float;
}

public native class VisibleObjectetSecondaryDistanceEvent extends Event {

  public native let distance: Float;
}

public native class PlayerDetachRequest extends PlayerScriptableSystemRequest {
}

public class CPOMissionDataTransferred extends Event {

  @default(CPOMissionDataTransferred, false)
  public replicated let dataDownloaded: Bool;

  @default(CPOMissionDataTransferred, CPODataRaceParams)
  public let dataDamagesPresetName: CName;

  public let compatibleDeviceName: CName;

  @default(CPOMissionDataTransferred, false)
  public replicated let ownerDecidesOnTransfer: Bool;

  @default(CPOMissionDataTransferred, false)
  public replicated let isChoiceToken: Bool;

  @default(CPOMissionDataTransferred, 0.0)
  public replicated let choiceTokenTimeout: Uint32;
}

public class ClearBeingNoticedBB extends Event {
}

public final native class PingSystem extends gameIPingSystem {

  public final native func TriggerPing(instigator: ref<GameObject>) -> Void;

  public final static native func IsPingSystemEnabled() -> Bool;
}

public class BeingTargetByLaserSightUpdateEvent extends Event {

  public let weapon: wref<WeaponObject>;

  public let state: LaserTargettingState;
}

public native struct bbUIInteractionData {

  public native let interactionListActive: Bool;

  public native let terminalInteractionActive: Bool;

  public final static native func HasAnyInteraction(self: bbUIInteractionData) -> Bool;
}

public class RequestBuyAttribute extends Event {

  public let type: gamedataStatType;
}

public final native class PartAddedToSlotEvent extends Event {

  public native let itemID: ItemID;

  public native let partID: ItemID;
}

public final native class PartRemovedFromSlotEvent extends Event {

  public native let itemID: ItemID;

  public native let removedPartID: ItemID;
}

public final native class ItemChangedEvent extends Event {

  public native let itemID: ItemID;

  public native let itemData: ref<gameItemData>;

  public native let difference: Int32;

  public native let currentQuantity: Int32;
}

public class HotkeyRefreshRequest extends PlayerScriptableSystemRequest {
}

public final native class PartRemovedEvent extends Event {

  public native let itemID: ItemID;

  public native let removedPartID: ItemID;
}

public final native class ItemAddedEvent extends Event {

  public native let itemID: ItemID;

  public native let itemData: ref<gameItemData>;

  public native let currentQuantity: Int32;

  public native let flaggedAsSilent: Bool;
}

public class AIFollowerTakedownCommand extends AIFollowerCommand {

  public inline edit let targetRef: EntityReference;

  public inline edit let approachBeforeTakedown: Bool;

  public inline edit let doNotTeleportIfTargetIsVisible: Bool;

  public let target: wref<GameObject>;
}

public class OrderTakedownEvent extends Event {

  public let target: wref<GameObject>;
}

public class AIFollowerDeviceCommand extends AIFollowerCommand {

  public let target: wref<GameObject>;

  public let overrideMovementTarget: wref<GameObject>;
}

public class AnimFeature_PlayerHitReactionData extends AnimFeature {

  public edit let hitDirection: Float;

  public edit let hitStrength: Float;

  public edit let isMeleeHit: Bool;

  public edit let isLightMeleeHit: Bool;

  public edit let isStrongMeleeHit: Bool;

  public edit let isQuickMeleeHit: Bool;

  public edit let isExplosion: Bool;

  public edit let isPressureWave: Bool;

  public edit let meleeAttackDirection: Int32;
}

public class TogglePlayerFlashlightEvent extends Event {

  public let enable: Bool;
}

public class KatanaMagFieldHitDelayEvent extends Event {
}

public class ResetMagFieldHitsEvent extends Event {
}

public class AnimFeature_BulletBend extends AnimFeature {

  public edit let animProgression: Float;

  public edit let randomAdditive: Float;

  public edit let isResetting: Bool;
}

public class ResetTickEvent extends TickableEvent {
}

public class CleanUpTimeDilationEvent extends Event {

  public let reason: CName;
}

public class StopCritHealthRumble extends Event {
}

public final native class RewardEvent extends Event {

  public native let rewardName: TweakDBID;
}

public native class gameuiPersonalLinkSwitcherEvent extends Event {

  public native let isAdvanced: Bool;
}

public class HeavyFootstepEvent extends Event {

  public let instigator: wref<GameObject>;

  public let audioEventName: CName;
}

public native class PlayerCoverStatusChangedEvent extends Event {

  public native let direction: gamePlayerCoverDirection;

  public native let fullyBehindCover: Bool;
}

public native class GameplayRestrictionStatusEffect_Record extends StatusEffect_Record {

  public final native func ActionRestriction() -> wref<ActionRestrictionGroup_Record>;

  public final native func ActionRestrictionHandle() -> ref<ActionRestrictionGroup_Record>;
}

public struct SPlayerCooldown {

  public let effectID: TweakDBID;

  public let instigatorID: TweakDBID;
}

public class AnimFeature_SceneGameplayOverrides extends AnimFeature {

  public edit let aimForced: Bool;

  public edit let safeForced: Bool;

  public edit let isAimOutTimeOverridden: Bool;

  public edit let aimOutTimeOverride: Float;
}

public class EnableFields extends ScriptableSystemRequest {

  public let actionMask: SBraindanceInputMask;
}

public struct SBraindanceInputMask {

  public edit persistent let pauseAction: Bool;

  public edit persistent let playForwardAction: Bool;

  public edit persistent let playBackwardAction: Bool;

  public edit persistent let restartAction: Bool;

  public edit persistent let switchLayerAction: Bool;

  public edit persistent let cameraToggleAction: Bool;
}

public class DisableFields extends ScriptableSystemRequest {

  public let actionMask: SBraindanceInputMask;
}

public class SetBraindanceState extends ScriptableSystemRequest {

  public let newState: Bool;
}

public class SetDebugSceneThrehsold extends ScriptableSystemRequest {

  public let newThreshold: Int32;
}

public class SetIsInBraindance extends ScriptableSystemRequest {

  public let newState: Bool;
}

public class SendPauseBraindanceRequest extends ScriptableSystemRequest {
}

public final native class WorkspotStartedEvent extends Event {

  public native let nodeId: GlobalNodeID;

  public native let tags: array<CName>;
}

public final native class WorkspotFinishedEvent extends Event {

  public native let nodeId: GlobalNodeID;

  public native let tags: array<CName>;
}

public class RequestEquipHeavyWeapon extends Event {

  public let itemID: ItemID;
}

public class FillAnimWrapperInfoBasedOnEquippedItem extends Event {

  public let itemID: ItemID;

  public let itemType: CName;

  public let itemName: CName;

  public let clearWrapperInfo: Bool;
}

public class FinishedVendettaTimeEvent extends Event {
}

public class PlayerDamageFromDataEvent extends TickableEvent {
}

public class CPOChoiceTokenDrawTextEvent extends Event {
}

public class CPOMissionPlayerVotedEvent extends Event {

  public let compatibleDeviceName: CName;
}

public class ForceRadialWheelShutdown extends Event {
}

public class TargetNeutraliziedEvent extends Event {

  public let type: ENeutralizeType;

  public let targetID: EntityID;
}

public native class scnRewindableSectionEvent extends Event {

  public native let active: Bool;
}

public static native func StringToInt(const value: script_ref<String>, opt defValue: Int32) -> Int32;

public native class questSetProgressionBuildRequest extends PlayerScriptableSystemRequest {

  public native let buildID: TweakDBID;
}

public class MeleeHitSlowMoEvent extends Event {

  public let isStrongAttack: Bool;
}

public struct HUDProgressBarData {

  public let header: String;

  public let active: Bool;

  public let progress: Float;
}

public native class OnCarHitPlayer extends Event {

  public native let hitDirection: Vector4;

  public native let carId: EntityID;
}

public class UpdateMiniGameProgramsEvent extends Event {

  public let program: MinigameProgramData;

  public let add: Bool;
}

public native class SquadIsTracked extends AIEvent {

  public native let isSquadTracked: Bool;
}

public native struct LevelUpData {

  public native let lvl: Int32;

  public native let type: gamedataProficiencyType;

  public native let perkPoints: Int32;

  public native let attributePoints: Int32;

  public native let disableAction: Bool;
}

public native class PassiveProficiencyBonus_Record extends TweakDBRecord {

  public final native func EffectorToTrigger() -> wref<Effector_Record>;

  public final native func EffectorToTriggerHandle() -> ref<Effector_Record>;

  public final native func StatGroup() -> wref<StatModifierGroup_Record>;

  public final native func StatGroupHandle() -> ref<StatModifierGroup_Record>;

  public final native func UiData() -> wref<PassiveProficiencyBonusUIData_Record>;

  public final native func UiDataHandle() -> ref<PassiveProficiencyBonusUIData_Record>;
}

public native class Trait_Record extends TweakDBRecord {

  public final native func Loc_desc_key() -> String;

  public final native func EnumComment() -> String;

  public final native func Loc_name_key() -> String;

  public final native func Requirement() -> wref<IPrereq_Record>;

  public final native func RequirementHandle() -> ref<IPrereq_Record>;

  public final native func BaseTraitData() -> wref<TraitData_Record>;

  public final native func BaseTraitDataHandle() -> ref<TraitData_Record>;

  public final native func InfiniteTraitData() -> wref<TraitData_Record>;

  public final native func InfiniteTraitDataHandle() -> ref<TraitData_Record>;

  public final native func IconPath() -> CName;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataTraitType;
}

public native class TraitData_Record extends TweakDBRecord {

  public final native func Loc_name_key() -> String;

  public final native func Loc_desc_key() -> String;

  public final native func StatusEffect() -> wref<StatusEffect_Record>;

  public final native func StatusEffectHandle() -> ref<StatusEffect_Record>;

  public final native func DataPackage() -> wref<GameplayLogicPackage_Record>;

  public final native func DataPackageHandle() -> ref<GameplayLogicPackage_Record>;
}

public native class Perk_Record extends TweakDBRecord {

  public final native func Loc_desc_key() -> String;

  public final native func DisplayName() -> String;

  public final native func EnumComment() -> String;

  public final native func Loc_name_key() -> String;

  public final native func Utility() -> wref<PerkUtility_Record>;

  public final native func UtilityHandle() -> ref<PerkUtility_Record>;

  public final native func Levels(out outList: array<wref<PerkLevelData_Record>>) -> Void;

  public final native func GetLevelsCount() -> Int32;

  public final native func GetLevelsItem(index: Int32) -> wref<PerkLevelData_Record>;

  public final native func GetLevelsItemHandle(index: Int32) -> wref<PerkLevelData_Record>;

  public final native func LevelsContains(item: wref<PerkLevelData_Record>) -> Bool;

  public final native func EnumName() -> CName;

  public final native func IconPath() -> CName;

  public final native func BinkPath() -> ResRef;

  public final native func Type() -> gamedataPerkType;
}

public static native func StrBeforeFirst(const str: script_ref<String>, const match: script_ref<String>) -> String;

public struct SPerk {

  public persistent let type: gamedataPerkType;

  public persistent let currLevel: Int32;
}

public native class PerkLevelData_Record extends TweakDBRecord {

  public final native func Loc_name_key() -> String;

  public final native func Loc_desc_key() -> String;

  public final native func DataPackage() -> wref<GameplayLogicPackage_Record>;

  public final native func DataPackageHandle() -> ref<GameplayLogicPackage_Record>;

  public final native func UiData() -> wref<PerkLevelUIData_Record>;

  public final native func UiDataHandle() -> ref<PerkLevelUIData_Record>;
}

public native struct TelemetryLevelGained {

  public native let playerPuppet: wref<GameObject>;

  public native let proficiencyType: gamedataProficiencyType;

  public native let proficiencyValue: Int32;

  public native let perkPointsAwarded: Int32;

  public native let attributePointsAwarded: Int32;

  public native let isDebugEvt: Bool;
}

public class ProficiencyProgressEvent extends Event {

  public let type: gamedataProficiencyType;

  public let expValue: Int32;

  public let remainingXP: Int32;

  public let delta: Int32;

  public let currentLevel: Int32;

  public let isLevelMaxed: Bool;
}

public struct SExperiencePoints {

  public persistent let amount: Float;

  public persistent let forType: gamedataProficiencyType;

  public persistent let entity: EntityID;
}

public native class Curve_Record extends TweakDBRecord {

  public final native func CurveSetName() -> CName;

  public final native func CurveName() -> CName;
}

public native class AddItemsEffector_Record extends Effector_Record {

  public final native func ItemsToAdd(out outList: array<wref<InventoryItem_Record>>) -> Void;

  public final native func GetItemsToAddCount() -> Int32;

  public final native func GetItemsToAddItem(index: Int32) -> wref<InventoryItem_Record>;

  public final native func GetItemsToAddItemHandle(index: Int32) -> wref<InventoryItem_Record>;

  public final native func ItemsToAddContains(item: wref<InventoryItem_Record>) -> Bool;
}

public class PerkResetEvent extends Event {
}

public native class ProgressionBuild_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func PerkSet() -> wref<BuildPerkSet_Record>;

  public final native func PerkSetHandle() -> ref<BuildPerkSet_Record>;

  public final native func ProficiencySet() -> wref<BuildProficiencySet_Record>;

  public final native func ProficiencySetHandle() -> ref<BuildProficiencySet_Record>;

  public final native func LifePath() -> wref<LifePath_Record>;

  public final native func LifePathHandle() -> ref<LifePath_Record>;

  public final native func AttributeSet() -> wref<BuildAttributeSet_Record>;

  public final native func AttributeSetHandle() -> ref<BuildAttributeSet_Record>;

  public final native func CyberwareSet() -> wref<BuildCyberwareSet_Record>;

  public final native func CyberwareSetHandle() -> ref<BuildCyberwareSet_Record>;

  public final native func EquipmentSet() -> wref<BuildEquipmentSet_Record>;

  public final native func EquipmentSetHandle() -> ref<BuildEquipmentSet_Record>;

  public final native func InventorySet() -> wref<InventoryItemSet_Record>;

  public final native func InventorySetHandle() -> ref<InventoryItemSet_Record>;

  public final native func CraftBook() -> wref<Craftable_Record>;

  public final native func CraftBookHandle() -> ref<Craftable_Record>;

  public final native func StartingAttributes(out outList: array<wref<BuildAttribute_Record>>) -> Void;

  public final native func GetStartingAttributesCount() -> Int32;

  public final native func GetStartingAttributesItem(index: Int32) -> wref<BuildAttribute_Record>;

  public final native func GetStartingAttributesItemHandle(index: Int32) -> wref<BuildAttribute_Record>;

  public final native func StartingAttributesContains(item: wref<BuildAttribute_Record>) -> Bool;

  public final native func StartingCyberware(out outList: array<wref<BuildCyberware_Record>>) -> Void;

  public final native func GetStartingCyberwareCount() -> Int32;

  public final native func GetStartingCyberwareItem(index: Int32) -> wref<BuildCyberware_Record>;

  public final native func GetStartingCyberwareItemHandle(index: Int32) -> wref<BuildCyberware_Record>;

  public final native func StartingCyberwareContains(item: wref<BuildCyberware_Record>) -> Bool;

  public final native func StartingProficiencies(out outList: array<wref<BuildProficiency_Record>>) -> Void;

  public final native func GetStartingProficienciesCount() -> Int32;

  public final native func GetStartingProficienciesItem(index: Int32) -> wref<BuildProficiency_Record>;

  public final native func GetStartingProficienciesItemHandle(index: Int32) -> wref<BuildProficiency_Record>;

  public final native func StartingProficienciesContains(item: wref<BuildProficiency_Record>) -> Bool;

  public final native func StartingPerks(out outList: array<wref<BuildPerk_Record>>) -> Void;

  public final native func GetStartingPerksCount() -> Int32;

  public final native func GetStartingPerksItem(index: Int32) -> wref<BuildPerk_Record>;

  public final native func GetStartingPerksItemHandle(index: Int32) -> wref<BuildPerk_Record>;

  public final native func StartingPerksContains(item: wref<BuildPerk_Record>) -> Bool;

  public final native func InventoryLayout(out outList: array<wref<CPOItemCategoryBase_Record>>) -> Void;

  public final native func GetInventoryLayoutCount() -> Int32;

  public final native func GetInventoryLayoutItem(index: Int32) -> wref<CPOItemCategoryBase_Record>;

  public final native func GetInventoryLayoutItemHandle(index: Int32) -> wref<CPOItemCategoryBase_Record>;

  public final native func InventoryLayoutContains(item: wref<CPOItemCategoryBase_Record>) -> Bool;

  public final native func StartingItems(out outList: array<wref<InventoryItem_Record>>) -> Void;

  public final native func GetStartingItemsCount() -> Int32;

  public final native func GetStartingItemsItem(index: Int32) -> wref<InventoryItem_Record>;

  public final native func GetStartingItemsItemHandle(index: Int32) -> wref<InventoryItem_Record>;

  public final native func StartingItemsContains(item: wref<InventoryItem_Record>) -> Bool;

  public final native func StartingEquipment(out outList: array<wref<BuildEquipment_Record>>) -> Void;

  public final native func GetStartingEquipmentCount() -> Int32;

  public final native func GetStartingEquipmentItem(index: Int32) -> wref<BuildEquipment_Record>;

  public final native func GetStartingEquipmentItemHandle(index: Int32) -> wref<BuildEquipment_Record>;

  public final native func StartingEquipmentContains(item: wref<BuildEquipment_Record>) -> Bool;

  public final native func PerkSets(out outList: array<wref<BuildPerkSet_Record>>) -> Void;

  public final native func GetPerkSetsCount() -> Int32;

  public final native func GetPerkSetsItem(index: Int32) -> wref<BuildPerkSet_Record>;

  public final native func GetPerkSetsItemHandle(index: Int32) -> wref<BuildPerkSet_Record>;

  public final native func PerkSetsContains(item: wref<BuildPerkSet_Record>) -> Bool;

  public final native func EnumName() -> CName;

  public final native func RandomizeClothing() -> Bool;

  public final native func Type() -> gamedataBuildType;
}

public native class BuildAttributeSet_Record extends TweakDBRecord {

  public final native func Attributes(out outList: array<wref<BuildAttribute_Record>>) -> Void;

  public final native func GetAttributesCount() -> Int32;

  public final native func GetAttributesItem(index: Int32) -> wref<BuildAttribute_Record>;

  public final native func GetAttributesItemHandle(index: Int32) -> wref<BuildAttribute_Record>;

  public final native func AttributesContains(item: wref<BuildAttribute_Record>) -> Bool;
}

public native class BuildProficiencySet_Record extends TweakDBRecord {

  public final native func Proficiencies(out outList: array<wref<BuildProficiency_Record>>) -> Void;

  public final native func GetProficienciesCount() -> Int32;

  public final native func GetProficienciesItem(index: Int32) -> wref<BuildProficiency_Record>;

  public final native func GetProficienciesItemHandle(index: Int32) -> wref<BuildProficiency_Record>;

  public final native func ProficienciesContains(item: wref<BuildProficiency_Record>) -> Bool;
}

public native class BuildPerkSet_Record extends TweakDBRecord {

  public final native func Perks(out outList: array<wref<BuildPerk_Record>>) -> Void;

  public final native func GetPerksCount() -> Int32;

  public final native func GetPerksItem(index: Int32) -> wref<BuildPerk_Record>;

  public final native func GetPerksItemHandle(index: Int32) -> wref<BuildPerk_Record>;

  public final native func PerksContains(item: wref<BuildPerk_Record>) -> Bool;
}

public native class InventoryItemSet_Record extends TweakDBRecord {

  public final native func Items(out outList: array<wref<InventoryItem_Record>>) -> Void;

  public final native func GetItemsCount() -> Int32;

  public final native func GetItemsItem(index: Int32) -> wref<InventoryItem_Record>;

  public final native func GetItemsItemHandle(index: Int32) -> wref<InventoryItem_Record>;

  public final native func ItemsContains(item: wref<InventoryItem_Record>) -> Bool;
}

public native class BuildEquipmentSet_Record extends TweakDBRecord {

  public final native func Equipment(out outList: array<wref<BuildEquipment_Record>>) -> Void;

  public final native func GetEquipmentCount() -> Int32;

  public final native func GetEquipmentItem(index: Int32) -> wref<BuildEquipment_Record>;

  public final native func GetEquipmentItemHandle(index: Int32) -> wref<BuildEquipment_Record>;

  public final native func EquipmentContains(item: wref<BuildEquipment_Record>) -> Bool;
}

public native class BuildCyberwareSet_Record extends TweakDBRecord {

  public final native func Cyberware(out outList: array<wref<BuildCyberware_Record>>) -> Void;

  public final native func GetCyberwareCount() -> Int32;

  public final native func GetCyberwareItem(index: Int32) -> wref<BuildCyberware_Record>;

  public final native func GetCyberwareItemHandle(index: Int32) -> wref<BuildCyberware_Record>;

  public final native func CyberwareContains(item: wref<BuildCyberware_Record>) -> Bool;
}

public native class BuildAttribute_Record extends TweakDBRecord {

  public final native func Attribute() -> wref<Attribute_Record>;

  public final native func AttributeHandle() -> ref<Attribute_Record>;

  public final native func Level() -> Int32;
}

public native class BuildProficiency_Record extends TweakDBRecord {

  public final native func Proficiency() -> wref<Proficiency_Record>;

  public final native func ProficiencyHandle() -> ref<Proficiency_Record>;

  public final native func Level() -> Int32;
}

public native class BuildPerk_Record extends TweakDBRecord {

  public final native func Perk() -> wref<Perk_Record>;

  public final native func PerkHandle() -> ref<Perk_Record>;

  public final native func Level() -> Int32;

  public final native func IsActive() -> Bool;
}

public native class BuildEquipment_Record extends TweakDBRecord {

  public final native func Equipment() -> wref<Item_Record>;

  public final native func EquipmentHandle() -> ref<Item_Record>;
}

public native class BuildCyberware_Record extends TweakDBRecord {

  public final native func Cyberware() -> wref<Item_Record>;

  public final native func CyberwareHandle() -> ref<Item_Record>;
}

public native class LifePath_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func CaptionIcon() -> wref<ChoiceCaptionIconPart_Record>;

  public final native func CaptionIconHandle() -> ref<ChoiceCaptionIconPart_Record>;

  public final native func DisplayName() -> CName;

  public final native func NewGameSpawnTag() -> CName;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataLifePath;
}

public native struct CharacterCustomizationAttribute {

  public native const let type: gamedataStatType;

  public native const let value: Uint32;
}

public class PerkBoughtEvent extends Event {

  public let perkType: gamedataPerkType;
}

public class TraitBoughtEvent extends Event {

  public let traitType: gamedataTraitType;
}

public class AttributeBoughtEvent extends Event {

  public let attributeType: gamedataStatType;
}

public native class gameSetProgressionBuildRequest extends PlayerScriptableSystemRequest {

  public native let buildID: TweakDBID;
}

public native class questSetLifePathRequest extends PlayerScriptableSystemRequest {

  public native let lifePathID: TweakDBID;
}

public native class PlayerBuild_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func CaptionIcon() -> wref<ChoiceCaptionIconPart_Record>;

  public final native func CaptionIconHandle() -> ref<ChoiceCaptionIconPart_Record>;

  public final native func Proficiencies(out outList: array<wref<Proficiency_Record>>) -> Void;

  public final native func GetProficienciesCount() -> Int32;

  public final native func GetProficienciesItem(index: Int32) -> wref<Proficiency_Record>;

  public final native func GetProficienciesItemHandle(index: Int32) -> wref<Proficiency_Record>;

  public final native func ProficienciesContains(item: wref<Proficiency_Record>) -> Bool;

  public final native func DisplayName() -> CName;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataPlayerBuild;
}

public struct gameStatTotalValue {

  public let statType: gamedataStatType;

  public let value: Float;
}

public class UnregisterAllMappinsEvent extends Event {
}

public class EvaluateMinigame extends Event {

  public let minigameBB: wref<IBlackboard>;

  public let reward: TweakDBID;

  public let journalEntry: String;

  public let fact: CName;

  public let factValue: Int32;

  public let item: ItemID;

  public let showPopup: Bool;

  public let returnToJournal: Bool;
}

public class HubMenuInitData extends IScriptable {

  public let m_menuName: CName;

  public let m_submenuName: CName;

  public let m_userData: ref<IScriptable>;
}

public class ShardForceSelectionEvent extends Event {

  public let m_selectionIndex: Int32;

  public let m_hash: Int32;
}

public class CreateCustomBlackboardEvent extends Event {

  public let m_blackboardDef: ref<CustomBlackboardDef>;

  public let m_blackboard: wref<IBlackboard>;
}

public class ResetSignal extends Event {

  public let signalName: CName;

  public let signalTable: ref<gameBoolSignalTable>;
}

public final native class KillRewardEvent extends Event {

  public native let victim: wref<GameObject>;

  public native let killType: gameKillType;
}

public native struct TelemetryDamageDealt {

  public native let situation: gameTelemetryDamageSituation;

  public native let damage: TelemetryDamage;

  public native let enemy: TelemetryEnemy;
}

public native struct TelemetryDamage {

  public native let attackType: gamedataAttackType;

  public native let damageAmount: Float;

  public native let weapon: TelemetryInventoryItem;

  public native let distance: Float;

  public native let time: Float;
}

public native struct TelemetryEnemy {

  public native let characterRecord: TweakDBID;

  public native let enemyAffiliation: String;

  public native let enemy: wref<GameObject>;

  public native let enemyEntityID: EntityID;

  public native let archetype: gamedataArchetypeType;

  public native let level: Int32;
}

public native struct TelemetryEnemyDown {

  public native let enemy: TelemetryEnemy;

  public native let situation: gameTelemetryDamageSituation;

  public native let killType: gameKillType;
}

public class RegisterPostionEvent extends BlackBoardRequestEvent {

  public let start: Bool;
}

public class ClearOutlinesRequestEvent extends Event {
}

public class ToggleTargetingComponentsEvent extends Event {

  public let toggle: Bool;
}

public class SetBloodPuddleSettingsEvent extends Event {

  @default(SetBloodPuddleSettingsEvent, true)
  public let shouldSpawnBloodPuddle: Bool;
}

public final native struct DismemberedLimbCount {

  public native let fleshDismemberments: Uint32;

  public native let cyberDismemberments: Uint32;
}

public class BloodPuddleEvent extends Event {

  public let m_slotName: CName;

  public let cyberBlood: Bool;
}

public native class InteractionChoiceCaptionStringPart extends InteractionChoiceCaptionPart {

  public native const let content: String;
}

public native class ObjectActionPrereq_Record extends TweakDBRecord {

  public final native func FailureExplanation() -> String;

  public final native func FailureConditionPrereq(out outList: array<wref<IPrereq_Record>>) -> Void;

  public final native func GetFailureConditionPrereqCount() -> Int32;

  public final native func GetFailureConditionPrereqItem(index: Int32) -> wref<IPrereq_Record>;

  public final native func GetFailureConditionPrereqItemHandle(index: Int32) -> wref<IPrereq_Record>;

  public final native func FailureConditionPrereqContains(item: wref<IPrereq_Record>) -> Bool;
}

public class StartEndPhoneCallEvent extends Event {

  public let callDuration: Float;

  public let startCall: Bool;

  public let statType: gamedataStatType;

  public let statPoolType: gamedataStatPoolType;

  public let statPoolName: String;
}

public class PauseResumePhoneCallEvent extends Event {

  public let callDuration: Float;

  public let pauseCall: Bool;

  public let statPoolType: gamedataStatPoolType;
}

public class AddOrRemoveListenerForGOEvent extends Event {

  public let listener: ref<GameObjectListener>;

  public let shouldAdd: Bool;
}

public final native class PuppetBlackboardUpdater extends IScriptable {

  public final native func AddDamageInfo(damageInfo: DamageInfo) -> Void;

  public final native func AddKillInfo(killInfo: KillInfo) -> Void;
}

public native class HighlightOpacityEvent extends Event {

  public native let opacity: Float;
}

public class DebugOutlineEvent extends Event {

  public let type: EOutlineType;

  public let opacity: Float;

  public let requester: EntityID;
}

public class EvaluateMappinsVisualStateEvent extends Event {
}

public class DelayPrereqEvent extends Event {

  public let m_state: ref<GameTimePrereqState>;
}

public class TriggerAttackEffectorWithDelay extends Event {

  public let attack: ref<Attack_GameEffect>;
}

public class ToggleOffMeshConnections extends Event {

  public let enable: Bool;

  public let affectsPlayer: Bool;

  public let affectsNPCs: Bool;
}

public final native class SmartGunLockEvent extends Event {

  public native let locked: Bool;

  public native let lockedOnByPlayer: Bool;
}

public native class AIMoveCommand extends AICommand {

  public native let removeAfterCombat: Bool;

  public native let ignoreInCombat: Bool;

  public native let alwaysUseStealth: Bool;
}

public abstract native class IInspectListener extends IScriptable {
}

public abstract native class IStatusEffectListener extends IScriptable {
}

public native class ScriptStatusEffectListener extends IStatusEffectListener {
}

public abstract native class gameinteractionsNodeDefinition extends IScriptable {
}

public struct SFactToChange {

  public let factName: CName;

  public let factValue: Int32;

  @default(SFactToChange, EMathOperationType.Set)
  public let operationType: EMathOperationType;
}

public native class HitPrereq_Record extends IPrereq_Record {

  public final native func CallbackType() -> String;

  public final native func PipelineStage() -> String;

  public final native func Conditions(out outList: array<wref<HitPrereqCondition_Record>>) -> Void;

  public final native func GetConditionsCount() -> Int32;

  public final native func GetConditionsItem(index: Int32) -> wref<HitPrereqCondition_Record>;

  public final native func GetConditionsItemHandle(index: Int32) -> wref<HitPrereqCondition_Record>;

  public final native func ConditionsContains(item: wref<HitPrereqCondition_Record>) -> Bool;

  public final native func IsSynchronous() -> Bool;
}

public native class HitPrereqCondition_Record extends TweakDBRecord {

  public final native func Type() -> wref<HitPrereqConditionType_Record>;

  public final native func TypeHandle() -> ref<HitPrereqConditionType_Record>;

  public final native func Invert() -> Bool;
}

public native class HitPrereqConditionType_Record extends TweakDBRecord {

  public final native func EnumName() -> CName;

  public final native func EnumComment() -> CName;

  public final native func Type() -> gamedataHitPrereqConditionType;
}

public native class StatusEffectPrereq_Record extends IPrereq_Record {

  public final native func StatusEffect() -> wref<StatusEffect_Record>;

  public final native func StatusEffectHandle() -> ref<StatusEffect_Record>;

  public final native func Invert() -> Bool;
}

public class HitTriggeredPrereq extends GenericHitPrereq {
}

public abstract native class JournalInternetBase extends IScriptable {

  public final native const func GetName() -> CName;

  public final native const func GetLinkAddress() -> String;

  public final native const func GetColor() -> Color;

  public final native const func GetHoverColor() -> Color;
}

public native class inkToggleController extends inkButtonController {

  public final native func Toggle() -> Void;

  public final native func IsToggled() -> Bool;

  public final native func SetToggled(toggled: Bool) -> Void;

  public final native func GetToggleState() -> inkEToggleState;

  public final native func IsAutoToggle() -> Bool;

  public final native func SetAutoToggle(auto: Bool) -> Void;
}

public abstract native class inkBasePanel extends inkCompoundWidget {
}

public abstract native class AbstractDataSource extends IScriptable {

  public final native func Size() -> Uint32;

  public final native func GetItemAsVariant(index: Uint32) -> Variant;

  public final native func HasItemAsVariant(data: Variant) -> Bool;
}

public abstract native class inkAnimTextInterpolator extends inkAnimInterpolator {

  public final native func SetStartProgress(complexityValue: Float) -> Void;

  public final native func GetStartProgress() -> Float;

  public final native func SetEndProgress(complexityValue: Float) -> Void;

  public final native func GetEndProgress() -> Float;
}

public class ListItemData extends IScriptable {

  public let label: String;
}

public native struct inkBasePanelRef extends inkCompoundRef {
}

public abstract class AnimFeatureCustom extends AnimFeature {
}

public abstract native class inkBaseShapeWidget extends inkLeafWidget {
}

public native class inkGameNotificationData extends inkUserData {

  public native let notificationName: CName;

  public native let isBlocking: Bool;

  public native let useCursor: Bool;

  public native let queueName: CName;

  public native let token: wref<inkGameNotificationToken>;
}

public native class inkInputDisplayController extends inkLogicController {

  public final native func SetInputKey(inputKeyData: inkInputKeyData) -> Void;

  public final native func SetFixedIconHeight(fixedIconHeight: Float) -> Void;

  public final native func GetInputAction() -> CName;

  public final native func SetInputAction(actionName: CName) -> Void;

  public final native func SetVisible(visible: Bool) -> Void;

  public final native func SetHoldIndicatorType(type: inkInputHintHoldIndicationType) -> Void;
}

public abstract native class BaseScriptableDataSource extends AbstractDataSource {

  public final native func GetItem(index: Uint32) -> ref<IScriptable>;

  public final native func HasItem(data: ref<IScriptable>) -> Bool;
}

public native class inkVirtualItemTemplateClassifier extends IScriptable {
}

public native class inkProjectedHUDGameController extends inkHUDGameController {

  protected final native func RegisterScreenProjection(projectionData: inkScreenProjectionData) -> ref<inkScreenProjection>;

  protected final native func UnregisterScreenProjection(projection: ref<inkScreenProjection>) -> Void;

  protected final native func SetShouldNotifyProjections(shouldNotify: Bool) -> Void;

  protected final native func EnableSleeping(enabled: Bool) -> Void;

  protected final native func WakeUp() -> Void;

  public final native func ApplyProjectionMarginOnWidget(widget: wref<inkWidget>, margin: inkMargin) -> Void;
}

public abstract native class inkDiscreteNavigationController extends inkLogicController {

  public final native func Navigate(direction: inkDiscreteNavigationDirection) -> Void;

  public final native func OverrideNavigation(direction: inkDiscreteNavigationDirection, target: wref<inkWidget>) -> Void;
}

public abstract native class inkVirtualCompoundController extends inkDiscreteNavigationController {

  public final native func SetSource(source: wref<AbstractDataSource>) -> Void;

  public final native func GetSelectedItem() -> wref<inkVirtualCompoundItemController>;

  public final native func GetToggledItem() -> wref<inkVirtualCompoundItemController>;

  public final native func SetClassifier(classifier: wref<inkVirtualItemTemplateClassifier>) -> Void;

  public final native func SelectItem(index: Uint32) -> Void;

  public final native func ToggleItem(index: Uint32) -> Void;

  public final native func ScrollToIndex(index: Uint32) -> Void;

  public final native func GetSelectedIndex() -> Uint32;

  public final native func GetToggledIndex() -> Uint32;
}

public native class inkItemPositionProvider extends IScriptable {
}

public abstract native class inkMenuEventDispatcher extends IScriptable {

  public final native func SpawnEvent(name: CName, opt userData: ref<IScriptable>) -> Void;

  public final native func SpawnAddressedEvent(scenario: CName, name: CName, opt userData: ref<IScriptable>) -> Void;

  public final native func RegisterToEvent(eventName: CName, object: ref<IScriptable>, functionName: CName) -> Void;

  public final native func UnregisterFromEvent(eventName: CName, object: ref<IScriptable>, functionName: CName) -> Void;
}

public class BackActionCallback extends Event {
}

public abstract native class JournalBriefingBaseSection extends JournalEntry {

  public final native const func GetType() -> gameJournalBriefingContentType;
}

public native class inkVirtualListController extends inkVirtualCompoundController {
}

public native class ScriptableDataSource extends BaseScriptableDataSource {

  public final native func AppendItem(data: ref<IScriptable>) -> Void;

  public final native func InsertItemAt(index: Uint32, data: ref<IScriptable>) -> Void;

  public final native func RemoveItem(data: ref<IScriptable>) -> Void;

  public final native func RemoveItemAt(index: Uint32) -> Void;

  public final native func Clear() -> Void;

  public final native func GetArray() -> array<ref<IScriptable>>;

  public final native func GetArraySize() -> Uint32;

  public final native func Reset(scriptables: array<ref<IScriptable>>) -> Void;
}

public class VirutalNestedListData extends IScriptable {

  public let m_collapsable: Bool;

  public let m_isHeader: Bool;

  public let m_level: Int32;

  public let m_forceToTopWithinLevel: Bool;

  public let m_widgetType: Uint32;

  public let m_data: ref<IScriptable>;
}

public class GenericCodexEntryData extends IScriptable {

  public let m_hash: Int32;

  public let m_title: String;

  public let m_description: String;

  public let m_imageId: TweakDBID;

  public let m_counter: Int32;

  public let m_timeStamp: GameTime;

  public let m_isNew: Bool;

  public let m_newEntries: array<Int32>;

  public let m_itemID: ItemID;

  public let m_activeDataSync: wref<CodexListSyncData>;
}

public native struct BuffInfo {

  public native let buffID: TweakDBID;

  public native let timeRemaining: Float;
}

public class TooltipSpawnedCallbackData extends IScriptable {

  @default(TooltipSpawnedCallbackData, -1)
  public let index: Int32;

  public let identifier: CName;

  public let tooltipStyle: ETooltipsStyle;

  public let styleResRef: ResRef;
}

public struct TooltipWidgetReference {

  public edit let m_identifier: CName;

  public edit let m_widgetLibraryReference: inkWidgetLibraryReference;
}

public final native struct inkWidgetLibraryResource {

  public final static native func IsValid(self: inkWidgetLibraryResource) -> Bool;

  public final static native func GetPath(self: inkWidgetLibraryResource) -> ResRef;

  public final static native func GetHash(self: inkWidgetLibraryResource) -> Uint64;
}

public final native struct inkWidgetLibraryReference {

  public native let widgetLibrary: inkWidgetLibraryResource;

  public native let widgetItem: CName;
}

public struct TooltipWidgetStyledReference {

  public edit let m_identifier: CName;

  public edit let m_widgetLibraryReference: inkWidgetLibraryReference;

  @default(TooltipWidgetStyledReference, base/gameplay/gui/common/tooltip/tooltip_menu.inkstyle)
  public edit let m_menuTooltipStylePath: ResRef;

  @default(TooltipWidgetStyledReference, base/gameplay/gui/common/tooltip/tooltip_hud.inkstyle)
  public edit let m_hudTooltipStylePath: ResRef;
}

public class NamedTooltipController extends IScriptable {

  public let identifier: CName;

  public let controller: wref<AGenericTooltipController>;
}

public native struct WidgetUtils {

  public final static native func LocalToGlobal(widget: ref<inkWidget>, opt localOffset: Vector2) -> Vector2;

  public final static native func GlobalToLocal(widget: ref<inkWidget>, globalPosition: Vector2) -> Vector2;

  public final static native func WidgetToWidget(sourceWidget: ref<inkWidget>, destinationWidget: ref<inkWidget>) -> Vector2;

  public final static native func WidgetToWidgetGlobal(sourceWidget: ref<inkWidget>, destinationWidget: ref<inkWidget>) -> Vector2;
}

public class VendorUserData extends IScriptable {

  public let vendorData: ref<VendorPanelData>;

  public let menu: String;
}

public struct VendingTerminalSetup {

  @attrib(customEditor, "TweakDBGroupInheritance;Vendor")
  public let m_vendorTweakID: TweakDBID;

  public const let m_vendingBlacklist: array<EVendorMode>;

  @default(VendingTerminalSetup, 3.f)
  public let m_timeToCompletePurchase: Float;
}

public class VendorGameItemData extends IScriptable {

  public let gameItemData: ref<gameItemData>;

  public let itemStack: SItemStack;
}

public class BuybackRequest extends TransactionRequest {
}

public class SellRequest extends TransactionRequest {
}

public struct VendorShoppingCartItem {

  public let itemData: wref<gameItemData>;

  public let amount: Int32;
}

public class ProgressBarFinishedProccess extends Event {
}

public class CraftingItemPreviewEvent extends Event {

  public let itemID: ItemID;
}

public class ItemDisplayHoverOverEvent extends Event {

  public let itemData: InventoryItemData;

  public let display: wref<InventoryItemDisplayController>;

  public let widget: wref<inkWidget>;

  public let isBuybackStack: Bool;
}

public class ItemDisplayHoverOutEvent extends Event {
}

public class ItemDisplayClickEvent extends Event {

  public let itemData: InventoryItemData;

  public let actionName: ref<inkActionName>;

  public let displayContext: ItemDisplayContext;

  public let isBuybackStack: Bool;

  public let evt: ref<inkPointerEvent>;
}

public native class inkWidgetsSet extends IScriptable {

  public final native func Select(widget: ref<inkWidget>, opt selectionRule: inkSelectionRule, opt param: String) -> ref<inkWidgetsSet>;

  public final native func FromSet(other: ref<inkWidgetsSet>) -> ref<inkWidgetsSet>;

  public final native func Get() -> array<wref<inkWidget>>;
}

public class ItemDisplayHoldEvent extends Event {

  public let itemData: InventoryItemData;

  public let actionName: ref<inkActionName>;
}

public native class iconAtlasCallbackData extends IScriptable {

  public native let loadResult: inkIconResult;

  public native let targetWidget: wref<inkImage>;

  public native let errorMsg: String;

  public native let iconSrc: TweakDBID;
}

public class DEBUG_IconErrorInfo extends IScriptable {

  public let itemName: String;

  public let innerItemName: String;

  public let resolvedIconName: String;

  public let errorMessage: String;

  public let errorType: inkIconResult;

  public let isManuallySet: Bool;
}

public class WrappedInventoryItemData extends IScriptable {

  public let ItemData: InventoryItemData;

  public let ComparisonState: ItemComparisonState;

  public let IsNew: Bool;

  public let ItemTemplate: Uint32;

  public let DisplayContext: ItemDisplayContext;
}

public struct InventoryItemDisplayData {

  public let m_itemID: ItemID;

  public let m_equipmentArea: gamedataEquipmentArea;

  public let m_slotIndex: Int32;
}

public class MaterialTooltipData extends ATooltipData {

  public let Title: String;

  public let BaseMaterialQuantity: Int32;

  public let MaterialQuantity: Int32;

  public let TitleLocalizationPackage: ref<UILocalizationDataPackage>;

  public let DescriptionLocalizationPackage: ref<UILocalizationDataPackage>;
}

public class QuantityPickerPopupData extends inkGameNotificationData {

  public let maxValue: Int32;

  public let gameItemData: InventoryItemData;

  public let actionType: QuantityPickerActionType;

  public let vendor: wref<GameObject>;

  public let isBuyback: Bool;

  public let sendQuantityChangedEvent: Bool;
}

public native class inkGameNotificationToken extends IScriptable {

  public final native func RegisterListener(object: ref<IScriptable>, functionName: CName) -> Void;

  public final native func TriggerCallback(data: ref<inkGameNotificationData>) -> Void;
}

public class QuantityPickerPopupCloseData extends inkGameNotificationData {

  public let choosenQuantity: Int32;

  public let itemData: InventoryItemData;

  public let actionType: QuantityPickerActionType;

  public let isBuyback: Bool;
}

public class PickerChoosenQuantityChangedEvent extends inkGameNotificationData {

  public let choosenQuantity: Int32;
}

public class ItemCraftingData extends IScriptable {

  public let inventoryItem: InventoryItemData;

  public let isUpgradable: Bool;

  public let isNew: Bool;

  public let isSelected: Bool;
}

public native class inkVirtualGridController extends inkVirtualListController {
}

public class DropdownItemData extends IScriptable {

  public let identifier: Variant;

  public let labelKey: CName;

  public let direction: DropdownItemDirection;
}

public class DropdownItemClickedEvent extends Event {

  public let owner: wref<IScriptable>;

  public let triggerButton: wref<DropdownButtonController>;

  public let identifier: Variant;
}

public native class inkScrollController extends inkLogicController {

  public final native func SetScrollPosition(newValue: Float) -> Void;

  public final native func UpdateScrollPositionFromScrollArea() -> Void;
}

public abstract native class IVisualObject extends IScriptable {
}

public native class BaseInteractionMappinController extends BaseMappinBaseController {

  protected native let isCurrentlyClamped: Bool;

  protected native let isUnderCrosshair: Bool;
}

public abstract native class IMappin extends IVisualObject {

  public final native func IsStatic() -> Bool;

  public final native func IsVisible() -> Bool;

  public final native func IsActive() -> Bool;

  public final native func IsVisited() -> Bool;

  public final native func IsQuestMappin() -> Bool;

  public final native func IsQuestNPCMappin() -> Bool;

  public final native func IsQuestEntityMappin() -> Bool;

  public final native func IsQuestAreaMappin() -> Bool;

  public final native func IsPlayerTracked() -> Bool;

  public final native func GetWorldPosition() -> Vector4;

  public final native func GetDisplayName() -> String;

  public final native func GetDistanceToPlayer() -> Float;

  public final native func GetVerticalRelationToPlayer() -> gamemappinsVerticalPositioning;

  public final native func GetEntityID() -> EntityID;

  public final native func GetPhase() -> gamedataMappinPhase;

  public final native func GetVariant() -> gamedataMappinVariant;

  public final native func GetScriptData() -> wref<MappinScriptData>;

  public final native const func IsQuestImportant() -> Bool;

  public final native func IsQuestPath() -> Bool;
}

public native class RuntimeMappin extends IMappin {

  public final native func EnableVisibilityThroughWalls(visible: Bool) -> Void;

  public final native func GetOwnerObjectMarkerPossibility() -> Bool;
}

public abstract native class inkTextAnimationController extends inkLogicController {

  public final native func PlaySetAnimation() -> ref<inkAnimProxy>;

  public final native func SetDuration(duration: Float) -> Void;

  public final native func GetDuration() -> Float;

  public final native func SetDelay(delay: Float) -> Void;

  public final native func GetDelay() -> Float;

  public final native func SetStart(delay: Float) -> Void;

  public final native func GetStart() -> Float;

  public final native func SetEnd(delay: Float) -> Void;

  public final native func GetEnd() -> Float;
}

public class JournalEntryNotificationRemoveRequestData extends IScriptable {

  public let entryHash: Uint32;
}

public class BasePerkDisplayData extends IDisplayData {

  public let m_attributeId: TweakDBID;

  public let m_name: CName;

  public let m_localizedName: String;

  public let m_localizedDescription: String;

  public let m_iconID: CName;

  public let m_binkRef: ResRef;

  public let m_level: Int32;

  public let m_maxLevel: Int32;

  public let m_locked: Bool;

  public let m_proficiency: gamedataProficiencyType;
}

public class PerksMenuAttributeItemClicked extends Event {

  public let widget: wref<inkWidget>;

  public let attributeType: PerkMenuAttribute;

  public let attributeData: ref<AttributeData>;
}

public native class inkHorizontalPanel extends inkBasePanel {
}

public abstract native class gameuiCharacterCustomizationInfo extends IScriptable {

  public native const let name: CName;

  public native const let localizedName: String;

  public native const let hidden: Bool;

  public native const let defaultIndex: Int32;

  public native const let uiSlot: CName;
}

public native class BaseGOGRegisterController extends inkLogicController {

  protected final native func SetupQRCodeWidget(widget: ref<inkImage>, qrCodePNGBlob: array<Uint8>) -> Void;
}

public native class inkAnimTextOffset extends inkAnimTextInterpolator {
}

public native class ConfigNotificationListener extends IScriptable {

  public native func OnNotify(status: ConfigNotificationType) -> Void;

  public final native func Register() -> Bool;

  public final native func Unregister() -> Bool;
}

public native class inkLanguageOverrideProvider extends inkUserData {

  public final native func SetLanguage(lang: scnDialogLineLanguage) -> Void;
}

public native class ConfigVarListName extends ConfigVar {

  public final native func GetValueFor(index: Int32) -> CName;

  public final native func GetValue() -> CName;

  public final native func GetDefaultValue() -> CName;

  public final native func GetValues() -> array<CName>;

  public final native func GetIndexFor(value: CName) -> Int32;

  public final native func GetIndex() -> Int32;

  public final native func GetDefaultIndex() -> Int32;

  public final native func SetIndex(index: Int32) -> Void;

  public final native func GetDisplayValue(index: Int32) -> CName;
}

public native class BluelinePart extends IScriptable {

  public native let passed: Bool;

  public native let captionIconRecordId: TweakDBID;
}

public native class BaseQuestMappinController extends BaseInteractionMappinController {

  protected edit native let distanceText: inkTextRef;

  protected edit native let displayName: inkTextRef;

  protected native let nameplateVisible: Bool;

  protected final native func UpdateDistanceText() -> Void;

  protected final native func UpdateDisplayName() -> Void;
}

public native class MinigameState extends IScriptable {

  public native let currentLives: Int32;

  public native let currentScore: Int32;
}

public struct RadialAnimData {

  @default(RadialAnimData, Anim name for hover in)
  public edit let hover_in: CName;

  @default(RadialAnimData, Anim name for hover out)
  public edit let hover_out: CName;

  @default(RadialAnimData, Anim name for cycle in animation)
  public edit let cycle_in: CName;

  @default(RadialAnimData, Anim name for cycle out animation)
  public edit let cycle_out: CName;
}

public native struct scnDialogLineData {

  public native let id: CRUID;

  public native let text: String;

  public native let type: scnDialogLineType;

  public native let speaker: wref<GameObject>;

  public native let speakerName: String;

  public native let isPersistent: Bool;

  public native let duration: Float;

  public final static native func GetDisplayText(self: scnDialogLineData) -> scnDialogDisplayString;

  public final static native func HasKiroshiTag(self: scnDialogLineData) -> Bool;

  public final static native func HasMothertongueTag(self: scnDialogLineData) -> Bool;
}

public abstract native class inkISystemRequestsHandler extends IScriptable {

  public final native func RegisterToCallback(eventName: CName, object: ref<IScriptable>, functionName: CName) -> Void;

  public final native func UnregisterFromCallback(eventName: CName, object: ref<IScriptable>, functionName: CName) -> Void;

  public final native func ExitGame() -> Void;

  public final native func GetUserSettings() -> ref<UserSettings>;

  public final native func RequestLoadUserSettings() -> Void;

  public final native func RequestSaveUserSettings() -> Void;

  public final native func UpdateLaunchCounter() -> Void;

  public final native func RequestTelemetryConsent(fromSettings: Bool) -> Void;

  public final native func RequestLocalStorageSave() -> Void;

  public final native func ShouldDisplayGog() -> Bool;

  public final native func RequestDlcNotification() -> Void;

  public final native func GetGameDefCategories() -> array<String>;

  public final native func GetGameDefinitions(categoryId: Int32) -> array<String>;

  public final native func GetWorlds() -> array<String>;

  public final native func GetGenders() -> array<String>;

  public final native func IsOnline() -> Bool;

  public final native func RunUiFunctionalTestWorld() -> Void;

  public final native func StartGameDefinition(categoryId: Int32, gamedefId: Int32, genderId: Int32) -> Void;

  public final native func StartWorld(worldId: Int32, genderId: Int32) -> Void;

  public final native func StartNewGame(state: ref<IScriptable>) -> Void;

  public final native func RequestSavesCountSync() -> Int32;

  public final native func RequestSavesForLoad() -> Void;

  public final native func RequestSavesForSave() -> Void;

  public final native func HasLastCheckpoint() -> Bool;

  public final native func LoadSavedGame(saveId: Int32) -> Void;

  public final native func LoadLastCheckpoint(onlySamePlaythrough: Bool) -> Void;

  public final native func DeleteSavedGame(saveId: Int32) -> Void;

  public final native func QuickSave() -> Void;

  public final native func ManualSave(saveName: String) -> Void;

  public final native func HasFreeSaveSlot(saveName: String) -> Bool;

  public final native func OverrideSave(saveId: Int32) -> Void;

  public final native func RequestSavedGameScreenshot(saveId: Int32, imageWidget: wref<inkImage>, opt callbackListener: wref<IScriptable>, opt functionName: CName) -> Void;

  public final native func CancelSavedGameScreenshotRequests() -> Void;

  public final native func GetLatestSaveMetadata() -> ref<LatestSaveMetadataInfo>;

  public final native func RequestLANServers() -> Void;

  public final native func RequestInternetServers() -> Void;

  public final native func CloudQuickmatch(groupToken: String) -> Void;

  public final native func JoinServer(serverId: Int32) -> Void;

  public final native func GetMultiplayerWorlds() -> array<String>;

  public final native func GetPlayerRecordIds() -> array<String>;

  public final native func GetSessionTypes() -> array<String>;

  public final native func GetSessionTimeLimits() -> array<String>;

  public final native func GetSessionPlayersLimits() -> array<String>;

  public final native func GetRecords() -> array<String>;

  public final native func PlayRecord(filename: String) -> Void;

  public final native func GotoMainMenu() -> Void;

  public final native func PauseGame() -> Void;

  public final native func UnpauseGame() -> Void;

  public final native func IsGamePaused() -> Bool;

  public final native func IsPreGame() -> Bool;

  public final native func GetGameVersion() -> String;
}

public struct subtitleLineMapEntry {

  public let id: CRUID;

  public let widget: wref<inkWidget>;

  public let owner: wref<GameObject>;
}

public native class ConfigVarFloat extends ConfigVar {

  public final native func SetValue(value: Float) -> Void;

  public final native func GetValue() -> Float;

  public final native func GetDefaultValue() -> Float;

  public final native func GetMinValue() -> Float;

  public final native func GetMaxValue() -> Float;

  public final native func GetStepValue() -> Float;
}

public final native class SubtitleHandlerSystem extends ISubtitleHandlerSystem {

  public final native func RegisterSubtitleController(gameController: wref<inkGameController>) -> gamePendingSubtitles;

  public final native func UnregisterSubtitleController(gameController: wref<inkGameController>) -> Void;
}

public native struct scnDialogDisplayString {

  public native let text: String;

  public native let translation: String;

  public native let preTranslatedText: String;

  public native let postTranslatedText: String;

  public native let language: scnDialogLineLanguage;
}

public native struct gamePendingSubtitles {

  public native let pendingSubtitles: array<scnDialogLineData>;
}

public static native func RefreshSettings() -> Void;

public class MinimalItemTooltipDataRequirements extends IScriptable {

  public let isLevelRequirementNotMet: Bool;

  public let isSmartlinkRequirementNotMet: Bool;

  public let isStrengthRequirementNotMet: Bool;

  public let isReflexRequirementNotMet: Bool;

  public let isAnyStatRequirementNotMet: Bool;

  public let strengthOrReflexStatName: String;

  public let anyStatName: String;

  public let anyStatColor: String;

  public let anyStatLocKey: String;

  public let strengthOrReflexValue: Int32;

  public let anyStatValue: Int32;

  public let requiredLevel: Int32;
}

public class MinimalItemTooltipRecipeData extends IScriptable {

  public let statsNumber: Int32;

  public let damageTypes: array<InventoryTooltipData_StatData>;

  public let recipeStats: array<InventoryTooltipData_StatData>;
}

public class MinimalItemTooltipStatData extends IScriptable {

  public let value: Float;

  public let diff: Float;

  public let statName: String;

  public let type: gamedataStatType;

  public let isPercentage: Bool;

  public let roundValue: Bool;

  public let displayPlus: Bool;

  public let inMeters: Bool;

  public let inSeconds: Bool;
}

public class MinimalItemTooltipModRecordData extends MinimalItemTooltipModData {

  public let dataPackage: ref<UILocalizationDataPackage>;

  public let description: String;
}

public class RefreshCrosshairEvent extends Event {

  public let force: Bool;
}

public native struct NPCNextToTheCrosshair {

  public native let npc: wref<GameObject>;

  public native let name: String;

  public native let currentHealth: Int32;

  public native let maximumHealth: Int32;

  public native let currentCyberwarePct: Int32;

  public native let level: Int32;

  public native let quickHackUpload: Int32;

  public native let attitude: EAIAttitude;

  public native let scanningState: gameScanningState;

  public native let isTagged: Bool;

  public native let highLevelState: gamedataNPCHighLevelState;

  public native let canSeePlayer: Bool;

  public native let playerDetectionAboveZero: Bool;

  public native let playerDetectionAtMax: Bool;
}

public native class gameuiIronsightGameController extends inkGameController {

  public final native func EnableUpdate(enable: Bool) -> Void;
}

public struct AnimationElement {

  public let m_animation: CName;

  public let m_animOptions: inkAnimOptions;
}

public static native func AtanF(a: Float, b: Float) -> Float;

public abstract native class gameIPlayerManager extends IGameSystem {
}

public native class ActionInternalEvent extends IScriptable {
}

public abstract native class AIVehicleCommand extends AICommand {

  public native let useKinematic: Bool;

  public native let needDriver: Bool;
}

public struct ProgramData {

  public let id: String;

  public let commandLists: array<array<ElementData>>;

  public let effects: array<ProgramEffect>;

  public let type: ProgramType;

  public let localizationKey: String;

  public let startAsUnknown: Bool;

  public let wasCompleted: Bool;
}

public struct ElementData {

  public let id: String;
}

public struct ProgramProgressData {

  public let id: String;

  public let completionProgress: array<Int32>;

  public let isComplete: Bool;

  public let revealLocalizedName: Bool;
}

public native struct inkVideoRef extends inkLeafRef {

  public final static native func SetVideoPath(self: inkVideoRef, videoPath: ResRef) -> Void;

  public final static native func ForceVideoFrameRate(self: inkVideoRef, forceVideoFrameRate: Bool) -> Void;

  public final static native func Play(self: inkVideoRef) -> Void;

  public final static native func Stop(self: inkVideoRef) -> Void;

  public final static native func Pause(self: inkVideoRef) -> Void;

  public final static native func Resume(self: inkVideoRef) -> Void;

  public final static native func SkipFrames(self: inkVideoRef, numberOfFrames: Int32) -> Void;

  public final static native func FastForwardTo(self: inkVideoRef, numberOfFrames: Uint32) -> Void;

  public final static native func RewindTo(self: inkVideoRef, numberOfFrames: Uint32) -> Void;

  public final static native func JumpToFrame(self: inkVideoRef, frameNumber: Uint32) -> Void;

  public final static native func JumpToTime(self: inkVideoRef, timeInSeconds: Float) -> Void;

  public final static native func SetLoop(self: inkVideoRef, isLooped: Bool) -> Void;

  public final static native func GetVideoWidgetSummary(self: inkVideoRef) -> VideoWidgetSummary;

  public final static native func PreloadNextVideo(self: inkVideoRef, videoPath: String) -> Void;

  public final static native func IsPlayingVideo(self: inkVideoRef) -> Bool;

  public final static native func IsPaused(self: inkVideoRef) -> Bool;

  public final static native func IsParallaxEnabled(self: inkVideoRef) -> Bool;
}

public final native class GlobalTvSystem extends IGlobalTvSystem {

  public final native func RegisterTVChannelOnController(gameController: wref<inkGameController>, previousChannelID: Int32, activeChannelID: Int32) -> Void;

  public final native func UnregisterTVChannelFromEntity(entity: wref<Entity>) -> Void;
}

public native class VirtualCameraViewComponent extends IVisualComponent {

  public final native func GetVirtualCameraName() -> CName;

  public final native func SetVirtualCameraName(newName: CName) -> Void;
}

public class RequestThumbnailWidgetsUpdateEvent extends RequestWidgetUpdateEvent {
}

public abstract native class worldITriggerAreaNotifer extends IScriptable {
}

public struct MediaDeviceData {

  public let m_initialStation: Int32;

  public let m_amountOfStations: Int32;

  public let m_activeChannelName: String;

  public let m_isInteractive: Bool;
}

public native class TimeDilationListener extends tickITimeDilationListener {
}

public class MorphData extends IScriptable {

  public let changed: Bool;
}

public abstract native class AttachmentSlotEvent extends Event {

  public final native func GetSlotID() -> TweakDBID;

  public final native func SetSlotID(slotId: TweakDBID) -> Void;
}

public abstract native class StateScriptInterface extends IScriptable {

  public native let owner: wref<GameObject>;

  public native let executionOwner: wref<GameObject>;

  public native let localBlackboard: wref<IBlackboard>;

  public native let ownerEntityID: EntityID;

  public native let executionOwnerEntityID: EntityID;

  public final native const func GetNow() -> Float;
}

public native class AdjustTransform extends IScriptable {
}

public native class AnimFeature_BasicAim extends AnimFeature {

  public final native func SetAimState(aimState: animAimState) -> Void;

  public final native func SetZoomState(zoomState: animAimState) -> Void;
}

public abstract native class SceneTierData extends IScriptable {

  public native const let tier: GameplayTier;

  public native let emptyHands: Bool;
}

public abstract native class SceneTierDataMotionConstrained extends SceneTierData {

  public native let params: MotionConstrainedTierDataParams;
}

public native class gameprojectileSpawnerPreviewEvent extends Event {

  public native let previewActive: Bool;
}

public native class StateFunctor extends IScriptable {

  public final native const func GetStaticBoolParameter(parameterName: String) -> StateResultBool;

  public final native const func GetStaticIntParameter(parameterName: String) -> StateResultInt;

  public final native const func GetStaticFloatParameter(parameterName: String) -> StateResultFloat;

  public final native const func GetStaticCNameParameter(parameterName: String) -> StateResultCName;

  public final native const func GetStaticStringParameter(parameterName: String) -> StateResultString;

  public final native const func GetStaticBoolParameterDefault(parameterName: String, defaultVal: Bool) -> Bool;

  public final native const func GetStaticIntParameterDefault(parameterName: String, defaultVal: Int32) -> Int32;

  public final native const func GetStaticFloatParameterDefault(parameterName: String, defaultVal: Float) -> Float;

  public final native const func GetStaticCNameParameterDefault(parameterName: String, defaultVal: CName) -> CName;

  public final native const func GetStaticStringParameterDefault(parameterName: String, defaultVal: String) -> String;

  public final native const func GetStaticBoolArrayParameter(parameterName: String) -> array<Bool>;

  public final native const func GetStaticIntArrayParameter(parameterName: String) -> array<Int32>;

  public final native const func GetStaticFloatArrayParameter(parameterName: String) -> array<Float>;

  public final native const func GetStaticStringArrayParameter(parameterName: String) -> array<String>;

  public final native const func GetStaticCNameArrayParameter(parameterName: String) -> array<CName>;

  public final native const func GetStateMachineName() -> CName;

  public final native const func GetStateName() -> CName;

  public final native const func GetInStateTime() -> Float;

  public final native func SetFlavour(flavourName: CName) -> Void;

  public final native const func EnableOnEnterCondition(enable: Bool) -> Void;

  public final native const func IsOnEnterConditionEnabled() -> Bool;
}

public native class LocomotionParameters extends IScriptable {

  public final native func SetUpwardsGravity(value: Float) -> Void;

  public final native func SetDownwardsGravity(value: Float) -> Void;

  public final native func SetImperfectTurn(value: Bool) -> Void;

  public final native func SetSpeedBoostInputRequired(value: Bool) -> Void;

  public final native func SetSpeedBoostMultiplyByDot(value: Bool) -> Void;

  public final native func SetUseCameraHeadingForMovement(value: Bool) -> Void;

  public final native func SetCapsuleHeight(value: Float) -> Void;

  public final native func SetCapsuleRadius(value: Float) -> Void;

  public final native func SetDoJump(value: Bool) -> Void;

  public final native func SetIgnoreSlope(value: Bool) -> Void;

  public final native func GetUpwardsGravity(defaultValue: Float) -> Float;

  public final native func GetDownwardsGravity(defaultValue: Float) -> Float;

  public final native func GetImperfectTurn(defaultValue: Bool) -> Bool;

  public final native func GetSpeedBoostInputRequired(defaultValue: Bool) -> Bool;

  public final native func GetSpeedBoostMultiplyByDot(defaultValue: Bool) -> Bool;

  public final native func GetUseCameraHeadingForMovement(defaultValue: Bool) -> Bool;

  public final native func GetCapsuleHeight(defaultValue: Float) -> Float;

  public final native func GetCapsuleRadius(defaultValue: Float) -> Float;

  public final native func GetDoJump(defaultValue: Bool) -> Bool;

  public final native func GetIgnoreSlope(defaultValue: Bool) -> Bool;
}

public native class ClimbParametersBase extends IScriptable {

  public final native func SetObstacleFrontEdgePosition(val: Vector4) -> Void;

  public final native func SetObstacleFrontEdgeNormal(val: Vector4) -> Void;

  public final native func SetObstacleVerticalDestination(val: Vector4) -> Void;

  public final native func SetObstacleHorizontalDestination(val: Vector4) -> Void;

  public final native func SetObstacleSurfaceNormal(val: Vector4) -> Void;

  public final native func SetAnimationNameApproach(val: CName) -> Void;
}

public native class gameprojectileLinearMovementEvent extends Event {

  public native let targetPosition: Vector4;
}

public abstract native class inkAnimEvent extends IScriptable {

  public final native func GetStartTime() -> Float;

  public final native func SetStartTime(startTime: Float) -> Void;
}

public abstract native class EffectNode extends IScriptable {
}

public abstract native class EffectExecutor extends EffectNode {
}

public native class EffectExecutor_Scripted extends EffectExecutor {
}

public native class MultiPrereqState extends PrereqState {

  public native let nestedStates: array<ref<PrereqState>>;
}

public native class InteractionScriptedCondition extends IScriptable {
}

public final native class inkPointerEvent extends inkInputEvent {

  public final native const func GetScreenSpacePosition() -> Vector2;

  public final native const func GetWindowSpacePosition() -> Vector2;

  public final native const func GetAxisData() -> Float;
}

public class AnimFeature_Paperdoll extends AnimFeature {

  public edit let genderSelection: Bool;

  public edit let characterCreation: Bool;

  public edit let characterCreation_Head: Bool;

  public edit let characterCreation_Teeth: Bool;

  public edit let characterCreation_Nails: Bool;

  public edit let characterCreation_Summary: Bool;

  public edit let inventoryScreen: Bool;

  public edit let inventoryScreen_Weapon: Bool;

  public edit let inventoryScreen_Legs: Bool;

  public edit let inventoryScreen_Feet: Bool;

  public edit let inventoryScreen_Cyberware: Bool;

  public edit let inventoryScreen_QuickSlot: Bool;

  public edit let inventoryScreen_Consumable: Bool;

  public edit let inventoryScreen_Outfit: Bool;

  public edit let inventoryScreen_Head: Bool;

  public edit let inventoryScreen_Face: Bool;

  public edit let inventoryScreen_InnerChest: Bool;

  public edit let inventoryScreen_OuterChest: Bool;
}

public class JournalRepresentationData extends ListItemData {

  public let Data: wref<JournalEntry>;

  public let OnscreenData: wref<JournalOnscreensStructuredGroup>;

  public let Reference: wref<inkWidget>;

  public let IsNew: Bool;
}

public native class inkItemPreviewGameController extends inkPreviewGameController {

  protected final native func PreviewItem(itemID: ItemID) -> Void;
}

public native class inkMenuLayer_SetCursorVisibility extends Event {

  public final native func Init(isVisible: Bool, opt pos: Vector2) -> Void;
}

public native class inkVerticalPanel extends inkBasePanel {
}

public native class inkVideo extends inkLeafWidget {

  public final native func SetVideoPath(videoPath: ResRef) -> Void;

  public final native func ForceVideoFrameRate(forceVideoFrameRate: Bool) -> Void;

  public final native func Play() -> Void;

  public final native func Stop() -> Void;

  public final native func Pause() -> Void;

  public final native func Resume() -> Void;

  public final native func SkipFrames(numberOfFrames: Int32) -> Void;

  public final native func FastForwardTo(numberOfFrames: Uint32) -> Void;

  public final native func RewindTo(numberOfFrames: Uint32) -> Void;

  public final native func JumpToFrame(frameNumber: Uint32) -> Void;

  public final native func JumpToTime(timeInSeconds: Float) -> Void;

  public final native func SetLoop(isLooped: Bool) -> Void;

  public final native func SetAudioEvent(audioEvent: CName) -> Void;

  public final native func SetSyncToAudio(syncToAudio: Bool) -> Void;

  public final native func GetVideoWidgetSummary() -> VideoWidgetSummary;

  public final native func PreloadNextVideo(videoPath: ResRef) -> Void;

  public final native func IsPlayingVideo() -> Bool;

  public final native func IsPaused() -> Bool;

  public final native func IsParallaxEnabled() -> Bool;
}

public native class inkRectangle extends inkBaseShapeWidget {
}

public static native func GetLocalizedItemNameByString(hashKey: CName) -> String;

public native class inkMenuScenario extends IScriptable {

  public final native func SwitchToScenario(name: CName, opt userData: ref<IScriptable>) -> Void;

  public final native func GetMenusState() -> wref<inkMenusState>;

  public final native func GetSystemRequestsHandler() -> wref<inkISystemRequestsHandler>;

  public final native func QueueEvent(evt: ref<Event>) -> Void;

  public final native func QueueBroadcastEvent(evt: ref<Event>) -> Void;
}

public class PauseMenuListItemData extends ListItemData {

  public let eventName: CName;

  public let action: PauseMenuAction;
}

public native class gameuiBaseMenuGameController extends inkGameController {

  protected final native func GetPuppet(sceneName: CName) -> ref<gamePuppet>;

  protected final native func SpawnMenuInstanceEvent(eventName: CName) -> Void;

  protected final native func SpawnMenuInstanceDataEvent(eventName: CName, userData: ref<IScriptable>) -> Void;
}

public abstract native class QuestMappin extends IMappin {

  public final native func GetJournalPathHash() -> Uint32;

  public final native func IsInsideTrigger() -> Bool;

  public final native func IsUIAnimation() -> Bool;

  public final native func GetUIAnimationRecordID() -> TweakDBID;

  public final native func GetOwnerObjectMarkerVisibility() -> Bool;
}

public native class inkAnimPadding extends inkAnimInterpolator {

  public final native func GetStartPadding() -> inkMargin;

  public final native func GetEndPadding() -> inkMargin;

  public final native func SetStartPadding(startPadding: inkMargin) -> Void;

  public final native func SetEndPadding(endPadding: inkMargin) -> Void;
}

public native class MappinUIFilterGroup_Record extends TweakDBRecord {

  public final native func FilterType() -> wref<WorldMapFilter_Record>;

  public final native func FilterTypeHandle() -> ref<WorldMapFilter_Record>;

  public final native func Mappins(out outList: array<wref<MappinVariant_Record>>) -> Void;

  public final native func GetMappinsCount() -> Int32;

  public final native func GetMappinsItem(index: Int32) -> wref<MappinVariant_Record>;

  public final native func GetMappinsItemHandle(index: Int32) -> wref<MappinVariant_Record>;

  public final native func MappinsContains(item: wref<MappinVariant_Record>) -> Bool;

  public final native func WidgetState() -> CName;

  public final native func ShouldCollectMappins() -> Bool;
}

public native class MappinControllerCustomData extends IScriptable {
}

public native class gameuiGenericNotificationReceiverGameController extends inkGameController {

  public native func SetNotificationData(notificationData: ref<GenericNotificationViewData>) -> Void;
}

public native class inkTextReplaceController extends inkTextAnimationController {

  public final native func GetBaseText() -> String;

  public final native func SetBaseText(text: String) -> Void;

  public final native func GetTargetText() -> String;

  public final native func SetTargetText(text: String) -> Void;

  public final native func GetTimeSkip() -> Float;

  public final native func SetTimeSkip(timeSkipValue: Float) -> Void;
}

public class JournalEntryListItemData extends IScriptable {

  public let m_entry: wref<JournalEntry>;

  public let m_extraData: ref<IScriptable>;
}

public native class BaseGOGProfileController extends inkGameController {

  protected final native func RequestStop() -> Void;

  protected final native func OpenProfileUrl(url: String) -> Void;
}

public native class MainMenuGameController extends gameuiMenuItemListGameController {
}

public abstract native class JournalCodexCategory extends JournalFileEntry {

  public final native const func GetCategoryName() -> String;
}

public native class JournalOnscreensStructuredGroup extends IScriptable {

  public final native const func GetTag() -> CName;

  public final native const func GetEntries() -> array<wref<JournalOnscreen>>;
}

public native struct InteractionChoiceHubData {

  public native let id: Int32;

  public native let flags: EVisualizerDefinitionFlags;

  public native let active: Bool;

  public native let title: String;

  public native let choices: array<InteractionChoiceData>;

  public native let timeProvider: wref<IVisualizerTimeProvider>;
}

public class ItemChooserItemChanged extends Event {

  public let itemData: InventoryItemData;

  public let itemEquipmentArea: gamedataEquipmentArea;

  public let slotIndex: Int32;

  public let slotID: TweakDBID;
}

public class ItemChooserUnequipItem extends Event {

  public let itemData: InventoryItemData;
}

public class ItemChooserUnequipMod extends Event {

  public let itemData: InventoryItemData;

  public let slotID: TweakDBID;
}

public class ItemChooserItemHoverOver extends Event {

  public let sourceEvent: ref<inkPointerEvent>;

  public let targetItem: wref<InventoryItemDisplayController>;
}

public class ItemChooserItemHoverOut extends Event {

  public let sourceEvent: ref<inkPointerEvent>;
}

public native class GameFinishEvent extends Event {

  public native let gameState: ref<MinigameState>;

  public native let gameName: CName;
}

public native class BaseDirectionalIndicatorPartLogicController extends inkLogicController {

  public final native func GetPlayerPosition() -> Vector4;

  public final native func GetSourcePosition() -> Vector4;

  public final native func GetSourceEntity() -> wref<Entity>;

  public final native func GetSourceEntityID() -> EntityID;

  public final native func GetAngleDegrees() -> Float;
}

public abstract class PassiveAutonomousCondition extends AIbehaviorexpressionScript {
}

public abstract class AILookatTask extends AIbehaviortaskScript {
}

public final native struct LootVisualiserControlWrapper {

  public final static native func AddOperation(wrapper: script_ref<LootVisualiserControlWrapper>, controlOperation: gameinteractionsELootVisualiserControlOperation, value: Bool) -> Void;

  public final static native func Wrap(wrapper: LootVisualiserControlWrapper) -> ref<InteractionSetChoicesEvent>;
}

public native class ContainerObjectSingleItem extends gameContainerObjectBase {
}

public class ScreenMessageData extends IScriptable {

  public let m_messageRecord: ref<ScreenMessageData_Record>;

  public let m_replaceTextWithCustomNumber: Bool;

  public let m_customNumber: Int32;
}

public class LcdScreenBlackBoardDef extends DeviceBaseBlackboardDef {

  public let MessegeData: BlackboardID_Variant;
}

public struct ActivatedDeviceSetup {

  @default(ActivatedDeviceSetup, LocKey#233)
  public let m_actionName: CName;

  public let m_disableOnActivation: Bool;

  public let m_glitchOnActivation: Bool;

  public let vfxResource: FxResource;

  public let activationVFXname: CName;

  @attrib(category, "AvailableInteractions")
  @default(ActivatedDeviceSetup, false)
  public let m_hasSimpleInteraction: Bool;

  @attrib(category, "AvailableInteractions")
  public let m_hasSpiderbotInteraction: Bool;

  @attrib(category, "AvailableInteractions")
  @default(ActivatedDeviceSetup, false)
  public let m_hasQuickHack: Bool;

  @attrib(category, "AvailableInteractions")
  public let m_hasQuickHackDistraction: Bool;

  @attrib(category, "InteractionNamesSetup")
  @attrib(customEditor, "TweakDBGroupInheritance;Interactions.InteractionChoice;Interactions.MountChoice")
  public let m_alternativeInteractionName: TweakDBID;

  @attrib(category, "InteractionNamesSetup")
  @attrib(customEditor, "TweakDBGroupInheritance;Interactions.InteractionChoice;Interactions.MountChoice")
  public let m_alternativeSpiderbotInteractionName: TweakDBID;

  @attrib(category, "InteractionNamesSetup")
  @attrib(customEditor, "TweakDBGroupInheritance;Interactions.InteractionChoice;Interactions.MountChoice")
  public let m_alternativeQuickHackName: TweakDBID;

  public inline let m_activatedDeviceSkillChecks: ref<EngDemoContainer>;

  @attrib(category, "Trap Setup")
  @attrib(customEditor, "TweakDBGroupInheritance;Attacks.Trap_Attack_Base")
  public let attackType: TweakDBID;

  @attrib(category, "Trap Setup")
  public let m_shouldActivateTrapOnAreaEnter: Bool;

  @attrib(category, "UI")
  @attrib(customEditor, "TweakDBGroupInheritance;DeviceWidgetDefinition")
  public edit let m_deviceWidgetRecord: TweakDBID;

  @attrib(category, "UI")
  @attrib(customEditor, "TweakDBGroupInheritance;UIIcon")
  @default(ActivatedDeviceSetup, DeviceIcons.GenenericDeviceIcon)
  public edit let m_thumbnailIconRecord: TweakDBID;

  @attrib(category, "UI")
  @attrib(customEditor, "TweakDBGroupInheritance;ActionWidgetDefinition")
  public edit let m_actionWidgetRecord: TweakDBID;
}

public struct ActivatedDeviceAnimSetup {

  @default(ActivatedDeviceAnimSetup, 0.5f)
  public let m_animationTime: Float;
}

public native class TriggerNotifier_Script extends worldITriggerAreaNotifer {
}

public struct ReflectorSFX extends VendingMachineSFX {

  @attrib(customEditor, "AudioEvent")
  @default(ReflectorSFX, dev_reflector_distraction)
  public let m_distraction: CName;

  @attrib(customEditor, "AudioEvent")
  @default(ReflectorSFX, dev_reflector_turn_on_loop)
  public let m_turnOn: CName;

  @attrib(customEditor, "AudioEvent")
  @default(ReflectorSFX, dev_reflector_turn_on_loop_stop)
  public let m_turnOff: CName;
}

public class AnimFeature_RoadBlock extends AnimFeature {

  public edit let isOpening: Bool;

  public edit let duration: Float;

  public edit let initOpen: Bool;
}

public class QuickHackToggleActivate extends ToggleActivate {
}

public struct TVSetup {

  public let m_channels: array<STvChannel>;

  public let m_initialChannel: Int32;

  @attrib(customEditor, "TweakDBGroupInheritance;ChannelData")
  public let m_initialGlobalTvChannel: TweakDBID;

  @default(TVSetup, true)
  public let m_muteInterface: Bool;

  public let m_isInteractive: Bool;

  @default(TVSetup, false)
  public persistent let m_isGlobalTvOnly: Bool;
}

public struct STvChannel {

  @default(STvChannel, 1)
  public let channelName: String;

  public let videoPath: ResRef;

  @attrib(customEditor, "TweakDBGroupInheritance;ScreenMessageData")
  public edit let m_messageRecordID: TweakDBID;

  @attrib(customEditor, "AudioEvent")
  public let audioEvent: CName;

  @default(STvChannel, true)
  public let looped: Bool;

  public const let m_sequence: array<SequenceVideo>;

  public let channelTweakID: TweakDBID;
}

public native class TVBase_Record extends Device_Record {

  public final native func Channels(out outList: array<wref<ChannelData_Record>>) -> Void;

  public final native func GetChannelsCount() -> Int32;

  public final native func GetChannelsItem(index: Int32) -> wref<ChannelData_Record>;

  public final native func GetChannelsItemHandle(index: Int32) -> wref<ChannelData_Record>;

  public final native func ChannelsContains(item: wref<ChannelData_Record>) -> Bool;
}

public native class ChannelData_Record extends TweakDBRecord {

  public final native func LocalizedName() -> String;

  public final native func DynamicTexturePath() -> String;

  public final native func OverlayWidgetPath() -> String;

  public final native func ChannelWidget() -> CName;

  public final native func AudioEvent() -> CName;

  public final native func OrderID() -> Int32;
}

public class TvDeviceWidgetCustomData extends WidgetCustomData {

  public let videoPath: ResRef;

  public let channelID: TweakDBID;

  public let messageRecordID: TweakDBID;

  public let looped: Bool;
}

public struct MediaResaveData {

  public let m_mediaDeviceData: MediaDeviceData;
}

public struct TVResaveData {

  public let m_mediaResaveData: MediaResaveData;

  public let m_channels: array<STvChannel>;

  public let m_securedText: CName;

  public let m_muteInterface: Bool;

  public let m_useWhiteNoiseFX: Bool;
}

public class TVDeviceBlackboardDef extends DeviceBaseBlackboardDef {

  public let PreviousChannel: BlackboardID_Int;

  public let CurrentChannel: BlackboardID_Int;
}

public native class TrafficLightChangeEvent extends Event {

  public native let lightColor: worldTrafficLightColor;
}

public static native func OperatorNotEqual(a: GameTime, b: GameTime) -> Bool;

public class RefreshCLSOnSlavesEvent extends Event {

  public let slaves: array<ref<DeviceComponentPS>>;

  public let state: EDeviceStatus;

  public let restorePower: Bool;
}

public class DelayedTimetableEvent extends Event {

  public let eventToForward: ref<DeviceTimetableEvent>;

  public let targetPS: wref<ScriptableDeviceComponentPS>;
}

public class InitializeCLSEvent extends Event {
}

public class ProjectileDelayEvent extends Event {
}

public native class Attack_Projectile_Record extends Attack_Record {

  public final native func ExplosionAttack() -> wref<Attack_GameEffect_Record>;

  public final native func ExplosionAttackHandle() -> ref<Attack_GameEffect_Record>;

  public final native func ProjectileTemplateName() -> CName;
}

public abstract native class IDebugDrawHistorySystem extends IGameSystem {

  public final native func DrawWireSphere(position: Vector4, radius: Float, opt color: Color, tag: String) -> Void;

  public final native func DrawArrow(position: Vector4, direction: Vector4, opt color: Color, tag: String) -> Void;
}

public final native class gameprojectileSpawnerLaunchEvent extends Event {

  public native let launchParams: gameprojectileLaunchParams;

  public native let templateName: CName;

  public native let owner: wref<GameObject>;

  public native let projectileParams: gameprojectileWeaponParams;
}

public native struct gameprojectileLaunchParams {

  public native let launchMode: gameprojectileELaunchMode;

  public native let logicalPositionProvider: ref<IPositionProvider>;

  public native let logicalOrientationProvider: ref<IOrientationProvider>;

  public native let visualPositionProvider: ref<IPositionProvider>;

  public native let visualOrientationProvider: ref<IOrientationProvider>;

  public native let ownerVelocityProvider: ref<IVelocityProvider>;
}

public native class LinearTrajectoryParams extends gameprojectileTrajectoryParams {

  public edit native let startVel: Float;
}

public native class FollowCurveTrajectoryParams extends gameprojectileTrajectoryParams {

  public edit native let target: wref<GameObject>;

  public edit native let componentName: CName;

  public edit native let targetComponent: wref<IPlacedComponent>;

  public edit native let targetPosition: Vector4;

  public edit native let startVelocity: Float;

  public edit native let linearTimeRatio: Float;

  public edit native let interpolationTimeRatio: Float;

  public edit native let returnTimeMargin: Float;

  public edit native let bendTimeRatio: Float;

  public edit native let bendFactor: Float;

  public edit native let angleInHitPlane: Float;

  public edit native let angleInVerticalPlane: Float;

  public edit native let shouldRotate: Bool;

  public edit native let halfLeanAngle: Float;

  public edit native let endLeanAngle: Float;

  public edit native let angleInterpolationDuration: Float;

  public edit native let snapRadius: Float;

  public edit native let accuracy: Float;

  public edit native let offset: Vector4;

  public edit native let offsetInPlane: Vector3;

  public edit native let sendFollowEvent: Bool;
}

public class ProjectileBreachEvent extends Event {
}

public class ProjectileTickEvent extends TickableEvent {
}

public final native class ObjectPoolSystem extends IObjectPoolSystem {

  public final native func Release(object: ref<GameObject>) -> Bool;
}

public native class gameCpoPickableItem extends GameObject {

  protected final native func EquipItem(puppet: ref<GameObject>) -> Void;

  public final native func GetItemIDToEquip() -> ItemID;
}

public native class StateContext extends IScriptable {

  public final native const func GetTemporaryBoolParameter(parameterName: CName) -> StateResultBool;

  public final native const func GetTemporaryIntParameter(parameterName: CName) -> StateResultInt;

  public final native const func GetTemporaryFloatParameter(parameterName: CName) -> StateResultFloat;

  public final native const func GetTemporaryVectorParameter(parameterName: CName) -> StateResultVector;

  public final native const func GetTemporaryCNameParameter(parameterName: CName) -> StateResultCName;

  public final native const func GetTemporaryScriptableParameter(parameterName: CName) -> ref<IScriptable>;

  public final native const func GetTemporaryTweakDBIDParameter(parameterName: CName) -> TweakDBID;

  public final native const func GetPermanentBoolParameter(parameterName: CName) -> StateResultBool;

  public final native const func GetPermanentIntParameter(parameterName: CName) -> StateResultInt;

  public final native const func GetPermanentFloatParameter(parameterName: CName) -> StateResultFloat;

  public final native const func GetPermanentVectorParameter(parameterName: CName) -> StateResultVector;

  public final native const func GetPermanentCNameParameter(parameterName: CName) -> StateResultCName;

  public final native const func GetPermanentScriptableParameter(parameterName: CName) -> ref<IScriptable>;

  public final native const func GetPermanentTweakDBIDParameter(parameterName: CName) -> TweakDBID;

  public final native const func GetBoolParameter(parameterName: CName, opt isPermanent: Bool) -> Bool;

  public final native const func GetFloatParameter(parameterName: CName, opt isPermanent: Bool) -> Float;

  public final native const func GetIntParameter(parameterName: CName, opt isPermanent: Bool) -> Int32;

  public final native const func GetVectorParameter(parameterName: CName, opt isPermanent: Bool) -> Vector4;

  public final native const func GetConditionBoolParameter(parameterName: CName) -> StateResultBool;

  public final native const func GetConditionBool(parameterName: CName) -> Bool;

  public final native const func GetConditionIntParameter(parameterName: CName) -> StateResultInt;

  public final native const func GetConditionInt(parameterName: CName) -> Int32;

  public final native const func GetConditionFloatParameter(parameterName: CName) -> StateResultFloat;

  public final native const func GetConditionFloat(parameterName: CName) -> Float;

  public final native const func GetConditionVectorParameter(parameterName: CName) -> StateResultVector;

  public final native const func GetConditionCNameParameter(parameterName: CName) -> StateResultCName;

  public final native const func GetConditionScriptableParameter(parameterName: CName) -> ref<IScriptable>;

  public final native const func GetConditionWeakScriptableParameter(parameterName: CName) -> wref<IScriptable>;

  public final native const func GetConditionTweakDBIDParameter(parameterName: CName) -> TweakDBID;

  public final native const func GetCurrentStates(stateMachineIdentifier: StateMachineIdentifier) -> array<CName>;

  public final native const func IsStateActive(stateMachineName: CName, stateName: CName) -> Bool;

  public final native const func IsStateActiveWithIdentifier(stateMachineIdentifier: StateMachineIdentifier, stateName: CName) -> Bool;

  public final native const func GetStateMachineCurrentState(stateMachineName: CName) -> CName;

  public final native const func GetStateMachineCurrentStateWithIdentifier(stateMachineIdentifier: StateMachineIdentifier) -> CName;

  public final native const func IsStateMachineActive(stateMachineName: CName) -> Bool;

  public final native const func IsStateMachineActiveWithIdentifier(stateMachineIdentifier: StateMachineIdentifier) -> Bool;

  public final native const func IsStateJustBecomeActive(stateMachineName: CName, stateName: CName) -> Bool;

  public final native const func IsStateJustBecomeActiveWithIdentifier(stateMachineIdentifier: StateMachineIdentifier, stateName: CName) -> Bool;

  public final native func SetTemporaryBoolParameter(parameterName: CName, value: Bool, opt force: Bool) -> Void;

  public final native func SetTemporaryIntParameter(parameterName: CName, value: Int32, opt force: Bool) -> Void;

  public final native func SetTemporaryFloatParameter(parameterName: CName, value: Float, opt force: Bool) -> Void;

  public final native func SetTemporaryVectorParameter(parameterName: CName, value: Vector4, opt force: Bool) -> Void;

  public final native func SetTemporaryCNameParameter(parameterName: CName, value: CName, opt force: Bool) -> Void;

  public final native func SetTemporaryScriptableParameter(parameterName: CName, value: ref<IScriptable>, opt force: Bool) -> Void;

  public final native func SetTemporaryTweakDBIDParameter(parameterName: CName, value: TweakDBID, opt force: Bool) -> Void;

  public final native func SetPermanentBoolParameter(parameterName: CName, value: Bool, opt force: Bool) -> Void;

  public final native func SetPermanentIntParameter(parameterName: CName, value: Int32, opt force: Bool) -> Void;

  public final native func SetPermanentFloatParameter(parameterName: CName, value: Float, opt force: Bool) -> Void;

  public final native func SetPermanentVectorParameter(parameterName: CName, value: Vector4, opt force: Bool) -> Void;

  public final native func SetPermanentCNameParameter(parameterName: CName, value: CName, opt force: Bool) -> Void;

  public final native func SetPermanentScriptableParameter(parameterName: CName, value: ref<IScriptable>, opt force: Bool) -> Void;

  public final native func SetPermanentTweakDBIDParameter(parameterName: CName, value: TweakDBID, opt force: Bool) -> Void;

  public final native const func SetConditionBoolParameter(parameterName: CName, value: Bool, opt force: Bool) -> Void;

  public final native const func SetConditionIntParameter(parameterName: CName, value: Int32, opt force: Bool) -> Void;

  public final native const func SetConditionFloatParameter(parameterName: CName, value: Float, opt force: Bool) -> Void;

  public final native const func SetConditionVectorParameter(parameterName: CName, value: Vector4, opt force: Bool) -> Void;

  public final native const func SetConditionCNameParameter(parameterName: CName, value: CName, opt force: Bool) -> Void;

  public final native const func SetConditionScriptableParameter(parameterName: CName, value: ref<IScriptable>, opt force: Bool) -> Void;

  public final native const func SetConditionWeakScriptableParameter(parameterName: CName, value: wref<IScriptable>, opt force: Bool) -> Void;

  public final native const func SetConditionTweakDBIDParameter(parameterName: CName, value: TweakDBID, opt force: Bool) -> Void;

  public final native func RemovePermanentBoolParameter(parameterName: CName) -> Bool;

  public final native func RemovePermanentIntParameter(parameterName: CName) -> Bool;

  public final native func RemovePermanentFloatParameter(parameterName: CName) -> Bool;

  public final native func RemovePermanentVectorParameter(parameterName: CName) -> Bool;

  public final native func RemovePermanentCNameParameter(parameterName: CName) -> Bool;

  public final native func RemovePermanentScriptableParameter(parameterName: CName) -> Bool;

  public final native func RemovePermanentTweakDBIDParameter(parameterName: CName) -> Bool;

  public final native const func RemoveConditionBoolParameter(parameterName: CName) -> Bool;

  public final native const func RemoveConditionIntParameter(parameterName: CName) -> Bool;

  public final native const func RemoveConditionFloatParameter(parameterName: CName) -> Bool;

  public final native const func RemoveConditionVectorParameter(parameterName: CName) -> Bool;

  public final native const func RemoveConditionCNameParameter(parameterName: CName) -> Bool;

  public final native const func RemoveConditionScriptableParameter(parameterName: CName) -> Bool;

  public final native const func RemoveConditionWeakScriptableParameter(parameterName: CName) -> Bool;

  public final native const func RemoveConditionTweakDBIDParameter(parameterName: CName) -> Bool;
}

public native class AdjustTransformWithDurations extends AdjustTransform {

  public final native func SetPosition(value: Vector4) -> Void;

  public final native func SetRotation(value: Quaternion) -> Void;

  public final native func SetSlideDuration(value: Float) -> Void;

  public final native func SetRotationDuration(value: Float) -> Void;

  public final native func SetGravity(value: Float) -> Void;

  public final native func SetCurve(value: CName) -> Void;

  public final native func SetTarget(value: wref<GameObject>) -> Void;

  public final native func SetDistanceRadius(value: Float) -> Void;

  public final native func SetUseParabolicMotion(value: Bool) -> Void;
}

public static native func StrLeft(const str: script_ref<String>, length: Int32) -> String;

public static native func StrRight(const str: script_ref<String>, length: Int32) -> String;

public static native func SqrF(a: Float) -> Float;

public final native class ToggleAimDownSightsEvent extends Event {

  public native let toggleOn: Bool;
}

public final native class NotifySurfaceDirectionChangedEvent extends Event {

  public native let surfaceDirection: gameaudioeventsSurfaceDirection;
}

public native class SceneTier extends StimuliData {

  public final native func SetTierData(tierData: ref<SceneTierData>) -> Void;

  public final native func GetTierData() -> ref<SceneTierData>;

  public final native func GetTier() -> GameplayTier;

  public final native func GetForceEmptyHands() -> Bool;
}

public class ChangeActiveContextRequest extends PlayerScriptableSystemRequest {

  public let newContext: inputContextType;
}

public native class AnimFeature_AimPlayer extends AnimFeature_BasicAim {

  public final native func SetZoomLevel(zoomLevel: Float) -> Void;

  public final native func SetAimInTime(aimInTime: Float) -> Void;

  public final native func SetAimOutTime(aimOutTime: Float) -> Void;
}

public class ItemIdWrapper extends IScriptable {

  public let itemID: ItemID;
}

public class GameplayCameraData extends IScriptable {

  @default(GameplayCameraData, 1.0f)
  public let is_forward_offset: Float;

  @default(GameplayCameraData, 0.0f)
  public let upperbody_pitch_weight: Float;

  @default(GameplayCameraData, 0.2f)
  public let forward_offset_value: Float;

  @default(GameplayCameraData, 0.0f)
  public let upperbody_yaw_weight: Float;

  @default(GameplayCameraData, 0.0f)
  public let is_pitch_off: Float;

  @default(GameplayCameraData, 0.0f)
  public let is_yaw_off: Float;
}

public native struct StateResultCName {

  public native let valid: Bool;

  public native let value: CName;
}

public native struct StateResultBool {

  public native let valid: Bool;

  public native let value: Bool;
}

public native class vehicleRequestCameraPerspectiveEvent extends Event {

  public native let cameraPerspective: vehicleCameraPerspective;
}

public native class vehicleCameraSceneEnableEvent extends Event {

  public native let scene: Bool;
}

public native class SetCameraParamsEvent extends Event {

  public native let paramsName: CName;
}

public native class SceneTier3Data extends SceneTierDataMotionConstrained {

  public native let cameraSettings: Tier3CameraSettings;
}

public native class SetCameraParamsWithOverridesEvent extends Event {

  public native let paramsName: CName;

  public native let yawMaxLeft: Float;

  public native let yawMaxRight: Float;

  public native let pitchMax: Float;

  public native let pitchMin: Float;

  public native let sensitivityMultX: Float;

  public native let sensitivityMultY: Float;
}

public native struct Tier3CameraSettings {

  public native let yawLeftLimit: Float;

  public native let yawRightLimit: Float;

  public native let pitchTopLimit: Float;

  public native let pitchBottomLimit: Float;

  public native let yawSpeedMultiplier: Float;

  public native let pitchSpeedMultiplier: Float;
}

public native class AnimFeature_PlayerVitals extends AnimFeature {

  public edit native let state: Int32;

  public edit native let stateDuration: Float;
}

public class AnimFeature_PlayerDeathAnimation extends AnimFeature {

  public edit let animation: Int32;
}

public class AnimFeature_LeftHandCyberware extends AnimFeature {

  public edit let actionDuration: Float;

  public edit let state: Int32;

  public edit let isQuickAction: Bool;

  public edit let isChargeAction: Bool;

  public edit let isLoopAction: Bool;

  public edit let isCatchAction: Bool;

  public edit let isSafeAction: Bool;
}

public class AnimFeature_LeftHandAnimation extends AnimFeature {

  public edit let lockLeftHandAnimation: Bool;
}

public native class AnimFeature_LeftHandItem extends AnimFeature {

  public native let itemInLeftHand: Bool;
}

public native class gameprojectileProjectilePreviewEvent extends gameprojectileSpawnerPreviewEvent {

  public native let visualOffset: Transform;
}

public class LeftHandCyberwareDataDef extends BlackboardDefinition {

  public let ProjectileCaught: BlackboardID_Bool;
}

public native struct SimulationFilter {

  public final static native func SimulationFilter_BuildFromPreset(out f: SimulationFilter, preset: CName) -> Void;

  public final static native func ALL() -> SimulationFilter;

  public final static native func ZERO() -> SimulationFilter;
}

public native struct SecureFootingResult {

  public native let slidingDirection: Vector4;

  public native let normalDirection: Vector4;

  public native let lowestLocalPosition: Vector4;

  public native let staticGroundFactor: Float;

  public native let reason: moveSecureFootingFailureReason;

  public native let type: moveSecureFootingFailureType;
}

public class AnimFeature_PlayerLocomotionStateMachine extends AnimFeature {

  public edit let inAirState: Bool;
}

public class AnimFeature_Grapple extends AnimFeature {

  public edit let inGrapple: Bool;
}

public final native class EnableAimAssist extends Event {
}

public class LocomotionTakedownInitData extends IScriptable {

  public let target: wref<GameObject>;

  public let slideTime: Float;

  public let actionName: CName;
}

public native class AnimFeature_Landing extends AnimFeature {

  public native let type: Int32;

  public native let impactSpeed: Float;
}

public native class LadderDescription extends IScriptable {

  public native let position: Vector4;

  public native let normal: Vector4;

  public native let up: Vector4;

  public native let topHeightFromPosition: Float;

  public native let exitStepTop: Float;

  public native let verticalStepTop: Float;

  public native let exitStepBottom: Float;

  public native let verticalStepBottom: Float;

  public native let exitStepJump: Float;

  public native let verticalStepJump: Float;

  public native let enterOffset: Float;
}

public native class PSMFall extends Event {

  public final native func SetSpeed(speed: Float) -> Void;
}

public native struct ControllerHit {

  public native let worldPos: Vector4;

  public native let worldNormal: Vector4;
}

public native struct StateResultFloat {

  public native let valid: Bool;

  public native let value: Float;
}

public native class PSMImpulse extends PSMBaseEvent {

  public native let impulse: Vector4;
}

public native class AimAssistConfigPreset_Record extends TweakDBRecord {

  public final native func MagnetismParams() -> wref<AimAssistMagnetism_Record>;

  public final native func MagnetismParamsHandle() -> ref<AimAssistMagnetism_Record>;

  public final native func BulletMagnetismParams() -> wref<AimAssistBulletMagnetism_Record>;

  public final native func BulletMagnetismParamsHandle() -> ref<AimAssistBulletMagnetism_Record>;

  public final native func AimSnapParams() -> wref<AimAssistAimSnap_Record>;

  public final native func AimSnapParamsHandle() -> ref<AimAssistAimSnap_Record>;

  public final native func CommonParams() -> wref<AimAssistCommon_Record>;

  public final native func CommonParamsHandle() -> ref<AimAssistCommon_Record>;

  public final native func FinishingParams() -> wref<AimAssistFinishing_Record>;

  public final native func FinishingParamsHandle() -> ref<AimAssistFinishing_Record>;

  public final native func MeleeParams() -> wref<AimAssistMelee_Record>;

  public final native func MeleeParamsHandle() -> ref<AimAssistMelee_Record>;
}

public native struct StateResultInt {

  public native let valid: Bool;

  public native let value: Int32;
}

public native class AnimFeature_MeleeData extends AnimFeature {

  public native let isMeleeWeaponEquipped: Bool;

  public native let attackSpeed: Float;

  public native let isEquippingThrowable: Bool;

  public native let isTargeting: Bool;

  public native let isBlocking: Bool;

  public native let isHolding: Bool;

  public edit let isParried: Bool;

  public native let isAttacking: Bool;

  public native let attackNumber: Int32;

  public native let shouldHandsDisappear: Bool;

  public native let isSliding: Bool;

  public native let deflectDuration: Float;

  public native let isSafe: Bool;

  public native let keepRenderPlane: Bool;

  public native let hasDeflectAnim: Bool;

  public native let hasHitAnim: Bool;

  public native let attackType: Int32;
}

public class AnimFeature_SimpleIkSystem extends AnimFeature {

  public edit let isEnable: Bool;

  @default(AnimFeature_SimpleIkSystem, 1.0f)
  public edit let weight: Float;

  public edit let setPosition: Bool;

  public edit let position: Vector4;

  public edit let positionOffset: Vector4;

  public edit let setRotation: Bool;

  public edit let rotation: Quaternion;

  public edit let rotationOffset: Quaternion;
}

public class MeleeAttackData extends IScriptable {

  public let attackName: String;

  public let attackSpeed: Float;

  public let attackWindowOpen: Float;

  public let attackWindowClosed: Float;

  public let idleTransitionTime: Float;

  public let holdTransitionTime: Float;

  public let blockTransitionTime: Float;

  public let attackEffectDirection: CName;

  public let attackEffectDuration: Float;

  public let attackEffectDelay: Float;

  public let impactFxSlot: CName;

  public let impulseDelay: Float;

  public let cameraSpaceImpulse: Float;

  public let forwardImpulse: Float;

  public let upImpulse: Float;

  public let useAdjustmentInsteadOfImpulse: Bool;

  public let enableAdjustingPlayerPositionToTarget: Bool;

  public let startPosition: Vector4;

  public let endPosition: Vector4;

  public let staminaCost: Float;

  public let chargeCost: Float;

  public let hasDeflectAnim: Bool;

  public let hasHitAnim: Bool;

  @default(MeleeAttackData, 0.1f)
  public let trailStartDelay: Float;

  @default(MeleeAttackData, 0.5f)
  public let trailStopDelay: Float;

  public let trailAttackSide: String;

  public let incrementsCombo: Bool;

  public let startupDuration: Float;

  public let activeDuration: Float;

  public let recoverDuration: Float;

  public let activeHitDuration: Float;

  public let recoverHitDuration: Float;

  public let standUpDelay: Float;

  public let ikOffset: Vector3;
}

public abstract class MineDispenserTransition extends DefaultTransition {
}

public class AnimFeature_VehicleData extends AnimFeature {

  public edit let isInVehicle: Bool;

  public edit let isDriver: Bool;

  public edit let vehType: Int32;

  public edit let vehSlot: Int32;

  public edit let isInCombat: Bool;

  public edit let isInWindowCombat: Bool;

  public edit let isInDriverCombat: Bool;

  public edit let vehClass: Int32;

  public edit let isEnteringCombat: Bool;

  public edit let enteringCombatDuration: Float;

  public edit let isExitingCombat: Bool;

  public edit let exitingCombatDuration: Float;

  public edit let isEnteringVehicle: Bool;

  public edit let isExitingVehicle: Bool;

  public edit let isWorldRenderPlane: Bool;
}

public native class AnimFeature_VehiclePassenger extends AnimFeature {

  public native let isCar: Bool;
}

public native class VehicleFPPCameraParams_Record extends TweakDBRecord {

  public final native func Lookat_yaw_right_up_offset() -> Float;

  public final native func Lookat_pitch_forward_down_ratio() -> Float;

  public final native func Forward_offset_value() -> Float;

  public final native func Lookat_yaw_left_offset() -> Float;

  public final native func Lookat_pitch_forward_offset() -> Float;

  public final native func Paralax_forward_offset() -> Float;

  public final native func Paralax_radius() -> Float;

  public final native func Lookat_offset_vertical() -> Float;

  public final native func Lookat_yaw_right_offset() -> Float;

  public final native func Lookat_yaw_offset_active_angle() -> Float;

  public final native func Is_forward_offset() -> Float;

  public final native func Lookat_yaw_left_up_offset() -> Float;

  public final native func Is_paralax() -> Float;

  public final native func Upperbody_pitch_weight() -> Float;

  public final native func Upperbody_yaw_weight() -> Float;

  public final native func Is_pitch_off() -> Float;

  public final native func Is_yaw_off() -> Float;
}

public native class vehicleCameraResetEvent extends Event {
}

public native class PSMStopStateMachine extends Event {

  public native let stateMachineIdentifier: StateMachineIdentifier;
}

public native class PSMStartStateMachine extends Event {

  public native let stateMachineIdentifier: StateMachineIdentifier;
}

public abstract class QuickSlotsDecisions extends QuickSlotsTransition {
}

public abstract class QuickSlotsEvents extends QuickSlotsTransition {
}

public class AnimFeature_DOFControl extends AnimFeature {

  public edit let dofIntensity: Float;

  public edit let dofNearBlur: Float;

  public edit let dofNearFocus: Float;

  public edit let dofFarBlur: Float;

  public edit let dofFarFocus: Float;

  public edit let dofBlendInTime: Float;

  public edit let dofBlendOutTime: Float;
}

public class AnimFeature_PlayerCoverActionWeaponHolster extends AnimFeature {

  public edit let isWeaponHolstered: Bool;
}

public class AnimFeature_Mounting extends AnimFeature {

  public edit let mountingState: Int32;

  public edit let parentSpeed: Float;
}

public native struct vehicleUnmountPosition {

  public native let direction: vehicleExitDirection;

  public native let position: WorldPosition;
}

public final native class VehicleAudioEvent extends Event {

  public native let action: vehicleAudioEventAction;
}

public native class parameterRequestReload extends IScriptable {

  public native let item: wref<ItemObject>;
}

public native class AnimFeature_Zoom extends AnimFeature {

  public native let finalZoomLevel: Float;

  public native let weaponZoomLevel: Float;

  public native let weaponAimFOV: Float;

  public native let worldFOV: Float;

  public edit let weaponScopeFov: Float;

  public native let zoomLevelNum: Int32;

  public native let noWeaponAimInTime: Float;

  public native let noWeaponAimOutTime: Float;

  public native let shouldUseWeaponZoomStats: Bool;

  public native let focusModeActive: Bool;
}

public native class ActionEvent extends AIEvent {

  public native let eventAction: CName;

  public native let internalEvent: ref<ActionInternalEvent>;
}

public native class gameChangeDestination extends ActionInternalEvent {

  public native let destination: Vector4;
}

public native class ActionSlideToScriptProxy extends CActionScriptProxy {

  public final native func SetupWorldPosition(worldPosition: Vector4, opt duration: Float, opt ignoreNavigation: Bool, opt rotateTowardsMovementDirection: Bool) -> Bool;

  public final native func SetupPosition(localPosition: Vector4, opt duration: Float, opt ignoreNavigation: Bool, opt rotateTowardsMovementDirection: Bool) -> Bool;

  public final native func SetupObject(gameObject: ref<GameObject>, opt duration: Float, opt ignoreNavigation: Bool, opt rotateTowardsMovementDirection: Bool) -> Bool;
}

public native class ActionDodgeScriptProxy extends CActionScriptProxy {

  public final native func Setup(DodgeData: ref<AnimFeature_DodgeData>) -> Bool;
}

public native class ActionTeleportScriptProxy extends CActionScriptProxy {

  public final native func Setup(targetPosition: Vector4, rotation: Float, doNavTest: Bool) -> Bool;
}

public native struct ActionAnimationSlideParams {

  public native let distance: Float;

  public native let duration: Float;

  public native let positionSpeed: Float;

  public native let rotationSpeed: Float;

  public native let maxSlidePositionDistance: Float;

  public native let maxSlideRotationAngle: Float;

  public native let slideStartDelay: Float;

  public native let usePositionSlide: Bool;

  public native let useRotationSlide: Bool;

  public native let slideToTarget: Bool;

  public native let zAlignmentThreshold: Float;

  public native let offsetToTarget: Float;

  public native let offsetAroundTarget: Float;

  public native let maxTargetVelocity: Float;

  public native let directionAngle: Float;

  public native let finalRotationAngle: Float;
}

public struct AIActionLookatParams {

  public let useLookat: Bool;

  public let useLeftHand: Bool;

  public let useRightHand: Bool;

  public let attachRightHandtoLeftHand: Bool;

  public let attachLeftHandtoRightHand: Bool;

  public let slotName: CName;

  public let lookatStyle: animLookAtStyle;

  public let hasOutTransition: Bool;

  public let outTransitionStyle: animLookAtStyle;

  public let softLimitDegrees: animLookAtLimitDegreesType;

  public let hardLimitDegrees: animLookAtLimitDegreesType;

  public let hardLimitDistance: animLookAtLimitDistanceType;

  public let backLimitDegrees: animLookAtLimitDegreesType;

  public let additionalParts: array<LookAtPartRequest>;
}

public struct AIActionSlideParams {

  public let distance: Float;

  public let directionAngle: Float;

  public let duration: Float;

  public let offset: Float;

  public let slideToTarget: Bool;

  public let debugDrawSlideLines: Bool;
}

public native class AIActionLookAtData_Record extends TweakDBRecord {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func ActivationCondition() -> wref<AIActionCondition_Record>;

  public final native func ActivationConditionHandle() -> ref<AIActionCondition_Record>;

  public final native func Preset() -> wref<LookAtPreset_Record>;

  public final native func PresetHandle() -> ref<LookAtPreset_Record>;

  public final native func Offset() -> Vector3;

  public final native func TimeDelay() -> Float;
}

public native class LookAtPart_Record extends TweakDBRecord {

  public final native func PartName() -> CName;

  public final native func Weight() -> Float;

  public final native func Suppress() -> Float;

  public final native func Mode() -> Int32;
}

public native class AIActionChangeNPCState_Record extends TweakDBRecord {

  public final native func DefenseMode() -> CName;

  public final native func HitReactionMode() -> CName;

  public final native func HighLevelState() -> CName;

  public final native func LocomotionMode() -> CName;

  public final native func UpperBodyState() -> CName;

  public final native func StanceState() -> CName;
}

public static native func Cast(a: Uint64) -> Bool;

public native class NavigationCostModCircle extends IScriptable {

  public native let pos: Vector4;

  public native let range: Float;

  public native let cost: Float;
}

public class AnimFeature_DroneProcedural extends AnimFeature {

  @default(AnimFeature_DroneProcedural, 100f)
  public edit let mass: Float;

  @default(AnimFeature_DroneProcedural, 1.5f)
  public edit let size_front: Float;

  @default(AnimFeature_DroneProcedural, -1.5f)
  public edit let size_back: Float;

  @default(AnimFeature_DroneProcedural, 1.2f)
  public edit let size_left: Float;

  @default(AnimFeature_DroneProcedural, -1.2f)
  public edit let size_right: Float;

  @default(AnimFeature_DroneProcedural, 1.33f)
  public edit let walk_tilt_coef: Float;

  @default(AnimFeature_DroneProcedural, 2.0f)
  public edit let mass_normalized_coef: Float;

  @default(AnimFeature_DroneProcedural, 40.0f)
  public edit let tilt_angle_on_speed: Float;

  @default(AnimFeature_DroneProcedural, 0.2f)
  public edit let speed_idle_threshold: Float;

  @default(AnimFeature_DroneProcedural, 0.01f)
  public edit let starting_recovery_ballance: Float;

  @default(AnimFeature_DroneProcedural, 30f)
  public edit let pseudo_acceleration: Float;

  @default(AnimFeature_DroneProcedural, 0.75f)
  public edit let turn_inertia_damping: Float;

  @default(AnimFeature_DroneProcedural, 0.f)
  public edit let combat_default_z_offset: Float;
}

public class ApplyDroneProceduralAnimFeatureEvent extends Event {

  public let feature: ref<AnimFeature_DroneProcedural>;
}

public class ApplyDroneLocomotionWrapperEvent extends Event {

  public let movementType: CName;
}

public class AnimFeature_DroneStateAnimationData extends AnimFeature {

  @default(AnimFeature_DroneStateAnimationData, 0)
  public edit let statePose: Int32;
}

public class ReenableColliderEvent extends Event {
}

public native class MovementPolicyTagList_Record extends TweakDBRecord {

  public final native func Condition() -> wref<AIActionCondition_Record>;

  public final native func ConditionHandle() -> ref<AIActionCondition_Record>;

  public final native func Tags() -> array<CName>;

  public final native func GetTagsCount() -> Int32;

  public final native func GetTagsItem(index: Int32) -> CName;

  public final native func TagsContains(item: CName) -> Bool;
}

public native class AnimFeature_AIAction extends AnimFeature {

  public edit native let state: Int32;

  public edit native let stateDuration: Float;

  public edit native let animVariation: Int32;

  public edit let direction: Float;
}

public native class AIActionAnimDirection_Record extends TweakDBRecord {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func DirectionAngle() -> Float;
}

public native class AIActionSlideData_Record extends TweakDBRecord {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func OffsetAroundTarget() -> Float;

  public final native func FinalRotationAngle() -> Float;

  public final native func PositionSpeed() -> Float;

  public final native func Distance() -> Float;

  public final native func DirectionAngle() -> Float;

  public final native func OffsetToTarget() -> Float;

  public final native func SlideStartDelay() -> Float;

  public final native func RotationSpeed() -> Float;

  public final native func Duration() -> Float;

  public final native func PositionPredictionTime() -> Float;

  public final native func ZAlignmentCollisionThreshold() -> Float;

  public final native func UsePositionSlide() -> Bool;

  public final native func DisablePositionSlideAgainstNpc() -> Bool;

  public final native func OverrideOffsetToTargetFromWeapon() -> Bool;

  public final native func UseRotationSlide() -> Bool;
}

public class AnimFeature_WeaponOverride extends AnimFeature {

  public edit let state: Int32;
}

public class AIPatrolDef extends AIBlackboardDef {

  public let patrolPathOverride: BlackboardID_Variant;

  public let patrolWithWeapon: BlackboardID_Bool;

  public let forceAlerted: BlackboardID_Bool;

  public let sprint: BlackboardID_Bool;

  public let selectedPath: BlackboardID_Variant;

  public let closestPathPoint: BlackboardID_Vector4;

  public let workspotData: BlackboardID_Variant;

  public let workspotEntryPosition: BlackboardID_Vector4;

  public let workspotExitPosition: BlackboardID_Vector4;

  public let patrolAction: BlackboardID_Variant;

  public let patrolInProgress: BlackboardID_Bool;
}

public native class AISubActionPlayVoiceOver_Record extends AISubAction_Record {

  public final native func Condition() -> wref<AIActionCondition_Record>;

  public final native func ConditionHandle() -> ref<AIActionCondition_Record>;

  public final native func Cooldown() -> wref<AIActionCooldown_Record>;

  public final native func CooldownHandle() -> ref<AIActionCooldown_Record>;

  public final native func Name() -> CName;

  public final native func Delay() -> Float;

  public final native func SendEventToSquadmates() -> Bool;

  public final native func SetSelfAsAnsweringEntity() -> Bool;

  public final native func Repeat() -> Bool;
}

public native class AISubActionDisableCollider_Record extends AISubAction_Record {

  public final native func Delay() -> Float;

  public final native func Disable() -> Bool;

  public final native func EnableOnDeactivate() -> Bool;
}

public native class AISubActionAddFact_Record extends AISubAction_Record {

  public final native func Name() -> CName;

  public final native func Delay() -> Float;

  public final native func ResetValue() -> Bool;
}

public native class AISubActionQueueAIEvent_Record extends AISubAction_Record {

  public final native func Name() -> CName;

  public final native func Delay() -> Float;
}

public native class AISubActionQueueCommunicationEvent_Record extends AISubAction_Record {

  public final native func TargetListener() -> wref<AIActionTarget_Record>;

  public final native func TargetListenerHandle() -> ref<AIActionTarget_Record>;

  public final native func Name() -> CName;

  public final native func Delay() -> Float;
}

public native class AISubActionSpawnFX_Record extends AISubAction_Record {

  public final native func AttachmentSlot() -> wref<AttachmentSlot_Record>;

  public final native func AttachmentSlotHandle() -> ref<AttachmentSlot_Record>;

  public final native func Name() -> CName;

  public final native func Delay() -> Float;
}

public native class AISubActionPlaySound_Record extends AISubAction_Record {

  public final native func AttachmentSlot() -> wref<AttachmentSlot_Record>;

  public final native func AttachmentSlotHandle() -> ref<AttachmentSlot_Record>;

  public final native func Name() -> CName;

  public final native func Delay() -> Float;
}

public native class AISubActionEquipOnSlot_Record extends AISubActionCharacterRecordEquip_Record {

  public final native func UseItemSpawnDelayFromWeapon() -> Bool;
}

public native class AISubActionForceEquip_Record extends AISubAction_Record {

  public final native func ItemObject() -> wref<AIActionTarget_Record>;

  public final native func ItemObjectHandle() -> ref<AIActionTarget_Record>;

  public final native func ItemID() -> wref<Item_Record>;

  public final native func ItemIDHandle() -> ref<Item_Record>;

  public final native func AttachmentSlot() -> wref<AttachmentSlot_Record>;

  public final native func AttachmentSlotHandle() -> ref<AttachmentSlot_Record>;

  public final native func ItemCategory() -> wref<ItemCategory_Record>;

  public final native func ItemCategoryHandle() -> ref<ItemCategory_Record>;

  public final native func ItemType() -> wref<ItemType_Record>;

  public final native func ItemTypeHandle() -> ref<ItemType_Record>;

  public final native func ItemTag() -> CName;

  public final native func Delay() -> Float;

  public final native func AnimationTime() -> Float;

  public final native func EquipDespiteInterruption() -> Bool;
}

public class ItemLootedEvent extends Event {
}

public native class AISubActionUnequipOnSlot_Record extends AISubActionCharacterRecordUnequip_Record {

  public final native func UseItemSpawnDelayFromWeapon() -> Bool;
}

public native class AISubActionForceUnequip_Record extends AISubAction_Record {

  public final native func AttachmentSlot() -> wref<AttachmentSlot_Record>;

  public final native func AttachmentSlotHandle() -> ref<AttachmentSlot_Record>;

  public final native func Delay() -> Float;

  public final native func AnimationTime() -> Float;

  public final native func UnequipDespiteInterruption() -> Bool;

  public final native func DropItem() -> Bool;

  public final native func GenerateLootAfterDrop() -> Bool;
}

public native class AISubActionDisableAimAssist_Record extends AISubAction_Record {

  public final native func Delay() -> Float;

  public final native func Duration() -> Float;
}

public native class AISubActionApplyTimeDilation_Record extends AISubAction_Record {

  public final native func EaseIn() -> CName;

  public final native func EaseOut() -> CName;

  public final native func Type() -> CName;

  public final native func Duration() -> Float;

  public final native func Multiplier() -> Float;

  public final native func OverrideMultiplerWhenPlayerInTimeDilation() -> Float;
}

public native class AISubActionModifyStatPool_Record extends AISubAction_Record {

  public final native func StatPool() -> wref<StatPool_Record>;

  public final native func StatPoolHandle() -> ref<StatPool_Record>;

  public final native func Delay() -> Float;

  public final native func Amount() -> Float;

  public final native func Perc() -> Bool;
}

public native class AISubActionForceDeath_Record extends AISubAction_Record {

  public final native func Delay() -> Float;

  public final native func HitIntensity() -> Int32;

  public final native func HitBodyPart() -> Int32;

  public final native func HitSource() -> Int32;

  public final native func HitDirection() -> Int32;
}

public native class AISubActionStatusEffect_Record extends AISubAction_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func StatusEffects(out outList: array<wref<StatusEffect_Record>>) -> Void;

  public final native func GetStatusEffectsCount() -> Int32;

  public final native func GetStatusEffectsItem(index: Int32) -> wref<StatusEffect_Record>;

  public final native func GetStatusEffectsItemHandle(index: Int32) -> wref<StatusEffect_Record>;

  public final native func StatusEffectsContains(item: wref<StatusEffect_Record>) -> Bool;

  public final native func Delay() -> Float;

  public final native func Remove() -> Bool;

  public final native func Apply() -> Bool;
}

public native class AISubActionGameplayLogicPackage_Record extends AISubAction_Record {

  public final native func Packages(out outList: array<wref<GameplayLogicPackage_Record>>) -> Void;

  public final native func GetPackagesCount() -> Int32;

  public final native func GetPackagesItem(index: Int32) -> wref<GameplayLogicPackage_Record>;

  public final native func GetPackagesItemHandle(index: Int32) -> wref<GameplayLogicPackage_Record>;

  public final native func PackagesContains(item: wref<GameplayLogicPackage_Record>) -> Bool;
}

public native class AISubActionSetInt_Record extends AISubAction_Record {

  public final native func Name() -> CName;

  public final native func Delay() -> Float;

  public final native func Value() -> Int32;
}

public native class AISubActionReloadWeapon_Record extends AISubAction_Record {

  public final native func WeaponSlot() -> wref<AttachmentSlot_Record>;

  public final native func WeaponSlotHandle() -> ref<AttachmentSlot_Record>;

  public final native func PauseCondition(out outList: array<wref<AIActionCondition_Record>>) -> Void;

  public final native func GetPauseConditionCount() -> Int32;

  public final native func GetPauseConditionItem(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func GetPauseConditionItemHandle(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func PauseConditionContains(item: wref<AIActionCondition_Record>) -> Bool;

  public final native func PauseConditionCheckInterval() -> Float;

  public final native func Duration() -> Float;
}

public native class AISubActionTriggerStim_Record extends AISubAction_Record {

  public final native func StimType() -> wref<StimType_Record>;

  public final native func StimTypeHandle() -> ref<StimType_Record>;

  public final native func StimSource() -> wref<AIActionTarget_Record>;

  public final native func StimSourceHandle() -> ref<AIActionTarget_Record>;

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func Delay() -> Float;

  public final native func Radius() -> Float;

  public final native func Direct() -> Bool;
}

public native class AISubActionChangeAttitude_Record extends AISubAction_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func Attitude() -> CName;

  public final native func Delay() -> Float;
}

public native class AISubActionThrowItem_Record extends AISubAction_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func AttachmentSlot() -> wref<AttachmentSlot_Record>;

  public final native func AttachmentSlotHandle() -> ref<AttachmentSlot_Record>;

  public final native func ThrowType() -> CName;

  public final native func PositionPredictionTime() -> Float;

  public final native func Delay() -> Float;

  public final native func ThrowAngle() -> Float;

  public final native func TrajectoryGravity() -> Float;

  public final native func DropItemOnInterruption() -> Bool;

  public final native func CheckThrowQuery() -> Bool;
}

public native class gameprojectileSetUpAndLaunchEvent extends gameprojectileLaunchEvent {

  public native let trajectoryParams: ref<gameprojectileTrajectoryParams>;

  public native let lerpMultiplier: Float;
}

public abstract native class IOrientationProvider extends IScriptable {

  public final static native func CreateStaticOrientationProvider(orientation: Quaternion) -> ref<IOrientationProvider>;

  public final static native func CreateEntityOrientationProvider(slotComponent: wref<SlotComponent>, slotName: CName, entity: wref<Entity>, opt orientationEntitySpace: Quaternion) -> ref<IOrientationProvider>;
}

public native class AISubActionTriggerItemActivation_Record extends AISubAction_Record {

  public final native func AttachmentSlot() -> wref<AttachmentSlot_Record>;

  public final native func AttachmentSlotHandle() -> ref<AttachmentSlot_Record>;

  public final native func Instigator() -> wref<AIActionTarget_Record>;

  public final native func InstigatorHandle() -> ref<AIActionTarget_Record>;

  public final native func Delay() -> Float;
}

public final native class gameprojectileForceActivationEvent extends Event {
}

public native class AISubActionAttackWithWeapon_Record extends AISubAction_Record {

  public final native func Attack() -> wref<Attack_Record>;

  public final native func AttackHandle() -> ref<Attack_Record>;

  public final native func WeaponSlots(out outList: array<wref<AttachmentSlot_Record>>) -> Void;

  public final native func GetWeaponSlotsCount() -> Int32;

  public final native func GetWeaponSlotsItem(index: Int32) -> wref<AttachmentSlot_Record>;

  public final native func GetWeaponSlotsItemHandle(index: Int32) -> wref<AttachmentSlot_Record>;

  public final native func WeaponSlotsContains(item: wref<AttachmentSlot_Record>) -> Bool;

  public final native func AttackName() -> CName;

  public final native func ColliderBoxSize() -> Vector3;

  public final native func AttackTime() -> Float;

  public final native func AttackRange() -> Float;

  public final native func AttackDuration() -> Float;
}

public native class AISubActionRegisterActionName_Record extends AISubAction_Record {

  public final native func ActionName() -> CName;
}

public native class AISubActionMeleeAttackManager_Record extends AISubAction_Record {

  public final native func Name() -> CName;

  public final native func FxDelay() -> Float;

  public final native func TrailDuration() -> Float;

  public final native func TrailDelay() -> Float;

  public final native func WarningDelay() -> Float;

  public final native func SpawnTrail() -> Bool;

  public final native func SpawnWeaponFX() -> Bool;

  public final native func SendFriendlyFireWarning() -> Bool;
}

public native class AISubActionShootToPoint_Record extends AISubActionShootWithWeapon_Record {

  public final native func RotationObj() -> wref<AIActionTarget_Record>;

  public final native func RotationObjHandle() -> ref<AIActionTarget_Record>;

  public final native func PositionObj() -> wref<AIActionTarget_Record>;

  public final native func PositionObjHandle() -> ref<AIActionTarget_Record>;

  public final native func TargetPositionObj() -> wref<AIActionTarget_Record>;

  public final native func TargetPositionObjHandle() -> ref<AIActionTarget_Record>;

  public final native func PointPosition() -> array<Vector3>;

  public final native func GetPointPositionCount() -> Int32;

  public final native func GetPointPositionItem(index: Int32) -> Vector3;

  public final native func PointPositionContains(item: Vector3) -> Bool;

  public final native func WaypointTag() -> array<CName>;

  public final native func GetWaypointTagCount() -> Int32;

  public final native func GetWaypointTagItem(index: Int32) -> CName;

  public final native func WaypointTagContains(item: CName) -> Bool;
}

public native class AISubActionMissileRainGrid_Record extends AISubActionShootWithWeapon_Record {

  public final native func MissileOffsets() -> array<Vector3>;

  public final native func GetMissileOffsetsCount() -> Int32;

  public final native func GetMissileOffsetsItem(index: Int32) -> Vector3;

  public final native func MissileOffsetsContains(item: Vector3) -> Bool;
}

public native class AISubActionMissileRainCircular_Record extends AISubActionShootWithWeapon_Record {

  public final native func MaxRadius() -> Float;

  public final native func MissilesPerLaunch() -> Int32;

  public final native func MinRadius() -> Float;
}

public native class AISubActionCreateGameEffect_Record extends AISubAction_Record {

  public final native func PositionObj() -> wref<AIActionTarget_Record>;

  public final native func PositionObjHandle() -> ref<AIActionTarget_Record>;

  public final native func TargetPositionObj() -> wref<AIActionTarget_Record>;

  public final native func TargetPositionObjHandle() -> ref<AIActionTarget_Record>;

  public final native func RotationObj() -> wref<AIActionTarget_Record>;

  public final native func RotationObjHandle() -> ref<AIActionTarget_Record>;

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func EffectTag() -> CName;

  public final native func EffectName() -> CName;

  public final native func ColliderBoxSize() -> Vector3;

  public final native func Range() -> Float;

  public final native func Duration() -> Float;

  public final native func Delay() -> Float;
}

public native class AISubActionSetWaypointByTag_Record extends AISubActionSetTargetByTag_Record {
}

public final native class GameTagSystem extends IGameSystem {

  public final native func GetAnyMatchingEntity(tag: CName) -> ref<Entity>;

  public final native func GetAllMatchingEntities(tag: CName, out entities: array<ref<Entity>>) -> Bool;
}

public native class AISubActionSetInfluenceMap_Record extends AISubAction_Record {

  public final native func PositionObj() -> wref<AIActionTarget_Record>;

  public final native func PositionObjHandle() -> ref<AIActionTarget_Record>;

  public final native func Lerp() -> Vector2;

  public final native func Delay() -> Float;

  public final native func Radius() -> Float;

  public final native func Threat() -> Bool;
}

public final native class InfluenceMapSystem extends IInfluenceMapSystem {

  public final native func SetSearchValueSquad(position: Vector4, radius: Float, owner: ref<gamePuppet>) -> Void;

  public final native func SetSearchValue(position: Vector4, radius: Float) -> Void;

  public final native func SetSearchValueLerp(position: Vector4, radius: Float, minValue: Float, maxValue: Float) -> Void;
}

public native class AISubActionSetStimSource_Record extends AISubAction_Record {

  public final native func StimTarget() -> wref<AIActionTarget_Record>;

  public final native func StimTargetHandle() -> ref<AIActionTarget_Record>;

  public final native func Delay() -> Float;

  public final native func UseInvestigateData() -> Bool;
}

public native class AISubActionWorkspot_Record extends AISubAction_Record {

  public final native func WorkspotObject() -> wref<AIActionTarget_Record>;

  public final native func WorkspotObjectHandle() -> ref<AIActionTarget_Record>;
}

public class OnReserveWorkspotEvent extends OnWorkspotAvailabilityEvent {

  public let action: gamedataWorkspotActionType;
}

public class OnReleaseWorkspotEvent extends OnWorkspotAvailabilityEvent {
}

public native class AISubActionChangeCoverSelectionPreset_Record extends AISubAction_Record {

  public final native func GatheringObjectCenter() -> wref<AIActionTarget_Record>;

  public final native func GatheringObjectCenterHandle() -> ref<AIActionTarget_Record>;

  public final native func InitialPreset() -> CName;

  public final native func Preset() -> CName;

  public final native func ChangeThreshold() -> Float;

  public final native func CoverDisablingDuration() -> Float;

  public final native func FallbackToLastSelectedPreset() -> Bool;
}

public native class AISubActionStartCooldown_Record extends AISubAction_Record {

  public final native func Cooldowns(out outList: array<wref<AIActionCooldown_Record>>) -> Void;

  public final native func GetCooldownsCount() -> Int32;

  public final native func GetCooldownsItem(index: Int32) -> wref<AIActionCooldown_Record>;

  public final native func GetCooldownsItemHandle(index: Int32) -> wref<AIActionCooldown_Record>;

  public final native func CooldownsContains(item: wref<AIActionCooldown_Record>) -> Bool;

  public final native func Delay() -> Float;
}

public native class AISubActionSquadSync_Record extends AISubAction_Record {

  public final native func SquadType() -> wref<AISquadType_Record>;

  public final native func SquadTypeHandle() -> ref<AISquadType_Record>;

  public final native func Pull() -> Bool;
}

public native class AISubActionSecuritySystemNotification_Record extends AISubAction_Record {

  public final native func Threat() -> wref<AIActionTarget_Record>;

  public final native func ThreatHandle() -> ref<AIActionTarget_Record>;

  public final native func NotificationType() -> wref<AIActionSecurityNotificationType_Record>;

  public final native func NotificationTypeHandle() -> ref<AIActionSecurityNotificationType_Record>;
}

public native class AIActionSecurityNotificationType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataAIActionSecurityNotificationType;
}

public native class AISubActionQuickHack_Record extends AISubAction_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func ActionResult() -> wref<ObjectAction_Record>;

  public final native func ActionResultHandle() -> ref<ObjectAction_Record>;

  public final native func PauseUploadCondition(out outList: array<wref<AIActionCondition_Record>>) -> Void;

  public final native func GetPauseUploadConditionCount() -> Int32;

  public final native func GetPauseUploadConditionItem(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func GetPauseUploadConditionItemHandle(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func PauseUploadConditionContains(item: wref<AIActionCondition_Record>) -> Bool;

  public final native func Delay() -> Float;

  public final native func EstablishContactOnly() -> Bool;
}

public native class AISubActionActivateStrongArmsFX_Record extends AISubAction_Record {

  public final native func Delay() -> Float;
}

public native class AISubActionMountVehicle_Record extends AISubAction_Record {

  public final native func Vehicle() -> wref<AIActionTarget_Record>;

  public final native func VehicleHandle() -> ref<AIActionTarget_Record>;

  public final native func Slot() -> wref<VehicleSeat_Record>;

  public final native func SlotHandle() -> ref<VehicleSeat_Record>;

  public final native func MountInstantly() -> Bool;
}

public native class AISubActionUseSensePreset_Record extends AISubAction_Record {

  public final native func SensePreset() -> wref<SensePreset_Record>;

  public final native func SensePresetHandle() -> ref<SensePreset_Record>;

  public final native func Delay() -> Float;
}

public native class AISubActionConditionalFailure_Record extends AISubAction_Record {

  public final native func Condition(out outList: array<wref<AIActionCondition_Record>>) -> Void;

  public final native func GetConditionCount() -> Int32;

  public final native func GetConditionItem(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func GetConditionItemHandle(index: Int32) -> wref<AIActionCondition_Record>;

  public final native func ConditionContains(item: wref<AIActionCondition_Record>) -> Bool;

  public final native func Cooldowns(out outList: array<wref<AIActionCooldown_Record>>) -> Void;

  public final native func GetCooldownsCount() -> Int32;

  public final native func GetCooldownsItem(index: Int32) -> wref<AIActionCooldown_Record>;

  public final native func GetCooldownsItemHandle(index: Int32) -> wref<AIActionCooldown_Record>;

  public final native func CooldownsContains(item: wref<AIActionCooldown_Record>) -> Bool;

  public final native func Delay() -> Float;
}

public native class AISubActionCompleteCommand_Record extends AISubAction_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func Commands() -> array<CName>;

  public final native func GetCommandsCount() -> Int32;

  public final native func GetCommandsItem(index: Int32) -> CName;

  public final native func CommandsContains(item: CName) -> Bool;

  public final native func Delay() -> Float;

  public final native func CheckOneTimeExecutionFlag() -> Bool;
}

public native class AISubActionLeaveCover_Record extends AISubAction_Record {

  public final native func Delay() -> Float;

  public final native func CheckExposure() -> Int32;
}

public native class AISubActionCustomEffectors_Record extends AISubAction_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func Effectors(out outList: array<wref<Effector_Record>>) -> Void;

  public final native func GetEffectorsCount() -> Int32;

  public final native func GetEffectorsItem(index: Int32) -> wref<Effector_Record>;

  public final native func GetEffectorsItemHandle(index: Int32) -> wref<Effector_Record>;

  public final native func EffectorsContains(item: wref<Effector_Record>) -> Bool;

  public final native func Delay() -> Float;

  public final native func Remove() -> Bool;

  public final native func Apply() -> Bool;
}

public native class AISubActionActivateLightPreset_Record extends AISubAction_Record {

  public final native func LightPreset() -> wref<LightPreset_Record>;

  public final native func LightPresetHandle() -> ref<LightPreset_Record>;

  public final native func Delay() -> Float;
}

public struct DiodeLightPreset {

  @default(DiodeLightPreset, true)
  public let state: Bool;

  public let colorMax: array<Int32>;

  public let colorMin: array<Int32>;

  @default(DiodeLightPreset, true)
  public let overrideColorMin: Bool;

  @default(DiodeLightPreset, 1.f)
  public let strength: Float;

  public let curve: CName;

  @default(DiodeLightPreset, 0.f)
  public let time: Float;

  @default(DiodeLightPreset, false)
  public let loop: Bool;

  @default(DiodeLightPreset, 0.f)
  public let duration: Float;

  @default(DiodeLightPreset, false)
  public let force: Bool;
}

public native class LightPreset_Record extends TweakDBRecord {

  public final native func ColorMin() -> array<Int32>;

  public final native func GetColorMinCount() -> Int32;

  public final native func GetColorMinItem(index: Int32) -> Int32;

  public final native func ColorMinContains(item: Int32) -> Bool;

  public final native func ColorMax() -> array<Int32>;

  public final native func GetColorMaxCount() -> Int32;

  public final native func GetColorMaxItem(index: Int32) -> Int32;

  public final native func ColorMaxContains(item: Int32) -> Bool;

  public final native func Curve() -> CName;

  public final native func Strength() -> Float;

  public final native func Duration() -> Float;

  public final native func Time() -> Float;

  public final native func OverrideColorMin() -> Bool;

  public final native func On() -> Bool;

  public final native func Loop() -> Bool;

  public final native func Force() -> Bool;
}

public class ApplyDiodeLightPresetEvent extends Event {

  public let preset: DiodeLightPreset;

  public let delay: Float;

  public let duration: Float;

  public let force: Bool;
}

public native class AISubActionFailIfFriendlyFire_Record extends AISubAction_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func CheckOnlyFirstFrame() -> Bool;
}

public native class AISubActionUpdateFriendlyFireParams_Record extends AISubAction_Record {

  public final native func UpdateOnDeactivate() -> Bool;
}

public native class AISubActionSendSignal_Record extends AISubAction_Record {

  public final native func Name() -> CName;

  public final native func Duration() -> Float;

  public final native func Delay() -> Float;
}

public native class AISubActionFastExitWorkspot_Record extends AISubAction_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func DestinationObj() -> wref<AIActionTarget_Record>;

  public final native func DestinationObjHandle() -> ref<AIActionTarget_Record>;

  public final native func Delay() -> Float;

  public final native func PlaySlowExitIfFailed() -> Bool;

  public final native func StayInWorkspotIfFailed() -> Bool;
}

public native class AISubActionMeleeAttackAttemptEvent_Record extends AISubAction_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func IsWindUp() -> Bool;
}

public native class AISubActionSetWorldPosition_Record extends AISubAction_Record {

  public final native func CustomPositionTarget() -> wref<AIActionTarget_Record>;

  public final native func CustomPositionTargetHandle() -> ref<AIActionTarget_Record>;

  public final native func ReferenceTarget() -> wref<AIActionTarget_Record>;

  public final native func ReferenceTargetHandle() -> ref<AIActionTarget_Record>;

  public final native func MinOffsetFromTarget() -> Vector3;

  public final native func MaxOffsetFromTarget() -> Vector3;

  public final native func RandomizePoint() -> Bool;

  public final native func UseLocalSpace() -> Bool;

  public final native func CheckForNavmesh() -> Bool;
}

public native class AnimFeature_NPCCoverStanceState extends AnimFeature_NPCState {
}

public native class AISubActionInitialReaction_Record extends AISubAction_Record {

  public final native func DirectionObj() -> wref<AIActionTarget_Record>;

  public final native func DirectionObjHandle() -> ref<AIActionTarget_Record>;
}

public native class AISubActionRandomize_Record extends AISubAction_Record {

  public final native func AnimVariationRandomize() -> array<Int32>;

  public final native func GetAnimVariationRandomizeCount() -> Int32;

  public final native func GetAnimVariationRandomizeItem(index: Int32) -> Int32;

  public final native func AnimVariationRandomizeContains(item: Int32) -> Bool;
}

public native class AISubActionCallReinforcements_Record extends AISubAction_Record {

  public final native func Duration() -> Float;

  public final native func Delay() -> Float;
}

public native class AISubActionGeneratePointOfInterestTarget_Record extends AISubAction_Record {

  public final native func ClosestThreatDurationRange() -> Vector2;

  public final native func SquadMateDurationRange() -> Vector2;

  public final native func RandomPointDurationRange() -> Vector2;

  public final native func FriendlyTargetDurationRange() -> Vector2;

  public final native func RandomPointZRotationAngleRange() -> Vector2;

  public final native func RandomPointYRotationAngleRange() -> Vector2;

  public final native func SquadMateWatchingMaxAngle() -> Float;

  public final native func ChoosingRandomPointChanceWeight() -> Float;

  public final native func ChoosingFriendlyTargetChanceWeight() -> Float;

  public final native func ChoosingClosestThreatChanceWeight() -> Float;

  public final native func ChoosingSquadMateChanceWeight() -> Float;

  public final native func FriendlyTargetWatchingMaxAngle() -> Float;

  public final native func ClosestThreatWatchingMaxAngle() -> Float;
}

public native class AISubActionDroneModifyAltitude_Record extends AISubAction_Record {

  public final native func Delay() -> Float;

  public final native func AltitudeOffset() -> Float;
}

public class AnimFeature_DroneActionAltitudeOffset extends AnimFeature {

  @default(AnimFeature_DroneActionAltitudeOffset, 0.f)
  public edit let desiredOffset: Float;
}

public native class AISubActionScaleDurationWithDistance_Record extends AISubAction_Record {

  public final native func Source() -> wref<AIActionTarget_Record>;

  public final native func SourceHandle() -> ref<AIActionTarget_Record>;

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func DistanceRange() -> Vector2;

  public final native func ScaleDistanceToTime() -> Vector2;
}

public native struct AIDelegateAttrRef {

  public native let name: CName;
}

public native struct AIDelegateTaskRef {

  public native let name: CName;
}

public class TestBehaviorDelegateTask extends AIbehaviortaskScript {

  public inline edit let attrRef: AIDelegateAttrRef;

  public inline edit let taskRef: AIDelegateTaskRef;
}

public abstract native class AICommandFactory extends IScriptable {
}

public abstract native class AICommandParams extends AICommandFactory {
}

public abstract native class MiscAICommandNodeParams extends AICommandParams {
}

public native struct worldTrafficLaneRef {

  public native let nodeRef: NodeRef;

  public native let laneNumber: Uint16;

  public native let isReversed: Bool;
}

public native struct AIMovementTypeSpec {

  public native let useNPCMovementParams: Bool;

  public native let movementType: moveMovementType;

  public final static native func Resolve(spec: AIMovementTypeSpec, puppet: ref<gamePuppet>) -> moveMovementType;
}

public native class AIMoveToCommand extends AIMoveCommand {

  public native let movementTarget: AIPositionSpec;

  public native let rotateEntityTowardsFacingTarget: Bool;

  public native let facingTarget: AIPositionSpec;

  public native let movementType: moveMovementType;

  public native let ignoreNavigation: Bool;

  public native let useStart: Bool;

  public native let useStop: Bool;

  public native let desiredDistanceFromTarget: Float;

  public native let finishWhenDestinationReached: Bool;
}

public native class AIMoveOnSplineCommand extends AIMoveCommand {

  public native let spline: NodeRef;

  public native let movementType: AIMovementTypeSpec;

  public native let rotateEntityTowardsFacingTarget: Bool;

  public native let facingTarget: wref<GameObject>;

  public native let shootingTarget: wref<GameObject>;

  public native let companion: wref<GameObject>;

  public native let desiredDistance: Float;

  public native let deadZoneRadius: Float;

  public native let catchUpWithCompanion: Bool;

  public native let teleportToCompanion: Bool;

  public native let useMatchForSpeedForPlayer: Bool;

  public native let startFromClosestPoint: Bool;

  public native let ignoreNavigation: Bool;

  public native let snapToTerrain: Bool;

  public native let ignoreLineOfSightCheck: Bool;

  public native let useAlertedState: Bool;

  public native let useStart: Bool;

  public native let useStop: Bool;

  public native let reverse: Bool;

  public native let useOMLReservation: Bool;

  public native let useCombatState: Bool;

  public native let lookAtTarget: wref<GameObject>;

  public native let minSearchAngle: Float;

  public native let maxSearchAngle: Float;

  public native let noWaitToEndDistance: Float;

  public native let noWaitToEndCompanionDistance: Float;

  public native let maxCompanionDistanceOnSpline: Float;
}

public native class AIAnimMoveOnSplineCommand extends AIMoveCommand {

  public native let spline: NodeRef;

  public native let useStart: Bool;

  public native let useStop: Bool;

  public native let controllerSetupName: CName;

  public native let blendTime: Float;

  public native let globalInBlendTime: Float;

  public native let globalOutBlendTime: Float;

  public native let turnCharacterToMatchVelocity: Bool;

  public native let customStartAnimationName: CName;

  public native let customMainAnimationName: CName;

  public native let customStopAnimationName: CName;

  public native let startSnapToTerrain: Bool;

  public native let mainSnapToTerrain: Bool;

  public native let stopSnapToTerrain: Bool;

  public native let startSnapToTerrainBlendTime: Float;

  public native let stopSnapToTerrainBlendTime: Float;
}

public native class AIRotateToCommand extends AIMoveCommand {

  public native let target: AIPositionSpec;

  public native let angleTolerance: Float;

  public native let angleOffset: Float;

  public native let speed: Float;
}

public native class AIPatrolCommand extends AIMoveCommand {

  public native let pathParams: ref<AIPatrolPathParameters>;

  public native let alertedPathParams: ref<AIPatrolPathParameters>;

  public native let alertedRadius: Float;

  public native let alertedSpots: array<NodeRef>;

  public edit let patrolWithWeapon: Bool;

  @attrib(customEditor, "TweakDBGroupInheritance;PatrolActions.AIPatrolActionComposite")
  public edit let patrolAction: TweakDBID;
}

public native class AIFollowTargetCommand extends AIMoveCommand {

  public native let target: wref<GameObject>;

  public native let desiredDistance: Float;

  public native let tolerance: Float;

  public native let stopWhenDestinationReached: Bool;

  public native let movementType: moveMovementType;

  public native let lookAtTarget: wref<GameObject>;

  public native let matchSpeed: Bool;

  public native let teleport: Bool;
}

public native class AIRootMotionCommand extends AIMoveCommand {

  public native let params: ref<SceneAnimationMotionActionParams>;
}

public native class AIAssignRestrictMovementAreaCommand extends AICommand {

  public native let restrictMovementAreaRef: NodeRef;
}

public native class vehiclePortalsList extends IScriptable {

  public native let listPoints: array<NodeRef>;
}

public native class AIVehicleOnSplineCommand extends AIVehicleCommand {

  public native let splineRef: NodeRef;

  public native let secureTimeOut: Float;

  public native let driveBackwards: Bool;

  public native let reverseSpline: Bool;

  public native let startFromClosest: Bool;

  public native let forcedStartSpeed: Float;

  public native let stopAtPathEnd: Bool;

  public native let keepDistanceBool: Bool;

  public native let keepDistanceCompanion: wref<GameObject>;

  public native let keepDistanceDistance: Float;

  public native let rubberBandingBool: Bool;

  public native let rubberBandingTargetRef: wref<GameObject>;

  public native let rubberBandingMinDistance: Float;

  public native let rubberBandingMaxDistance: Float;

  public native let rubberBandingStopAndWait: Bool;

  public native let rubberBandingTeleportToCatchUp: Bool;

  public native let rubberBandingStayInFront: Bool;
}

public native class AIVehicleFollowCommand extends AIVehicleCommand {

  public native let target: wref<GameObject>;

  public native let secureTimeOut: Float;

  public native let distanceMin: Float;

  public native let distanceMax: Float;

  public native let stopWhenTargetReached: Bool;

  public native let useTraffic: Bool;

  public native let trafficTryNeighborsForStart: Bool;

  public native let trafficTryNeighborsForEnd: Bool;

  public native let allowStubMovement: Bool;
}

public native class AIVehicleToNodeCommand extends AIVehicleCommand {

  public native let nodeRef: NodeRef;

  public native let stopAtPathEnd: Bool;

  public native let secureTimeOut: Float;

  public native let isPlayer: Bool;

  public native let useTraffic: Bool;

  public native let speedInTraffic: Float;

  public native let forceGreenLights: Bool;

  public native let portals: ref<vehiclePortalsList>;

  public native let trafficTryNeighborsForStart: Bool;

  public native let trafficTryNeighborsForEnd: Bool;
}

public native class AIVehicleRacingCommand extends AIVehicleCommand {

  public native let splineRef: NodeRef;

  public native let secureTimeOut: Float;

  public native let reverseSpline: Bool;

  public native let driveBackwards: Bool;

  public native let startFromClosest: Bool;

  public native let rubberBandingBool: Bool;

  public native let rubberBandingTargetRef: wref<GameObject>;

  public native let rubberBandingMinDistance: Float;

  public native let rubberBandingMaxDistance: Float;

  public native let rubberBandingStopAndWait: Bool;

  public native let rubberBandingTeleportToCatchUp: Bool;

  public native let rubberBandingStayInFront: Bool;
}

public native class AIVehicleJoinTrafficCommand extends AIVehicleCommand {
}

public native class SceneAnimationMotionActionParams extends IScriptable {

  public native let animationName: CName;

  public native let placementMode: gameSceneAnimationMotionActionParamsPlacementMode;

  public native let placementTransform: WorldTransform;

  public native let startTime: Float;

  public native let endTime: Float;

  public native let poseBlendInTime: Float;
}

public native class AITeleportCommand extends AICommand {

  public native let position: Vector4;

  public native let rotation: Float;

  public native let doNavTest: Bool;
}

public abstract native class AIBaseUseWorkspotCommand extends AICommand {

  public native let moveToWorkspot: Bool;

  public native let forceEntryAnimName: CName;

  public native let continueInCombat: Bool;

  public edit let movementType: moveMovementType;
}

public native class AIUseWorkspotCommand extends AIBaseUseWorkspotCommand {

  public native let workspotNode: NodeRef;

  public native let jumpToEntry: Bool;

  public native let entryId: WorkEntryId;
}

public native class AIEquipCommand extends AICommand {

  public native let slotId: TweakDBID;

  public native let itemId: TweakDBID;

  public native let failIfItemNotFound: Bool;

  public native let durationOverride: Float;
}

public native class AIUnequipCommand extends AICommand {

  public native let slotId: TweakDBID;

  public native let durationOverride: Float;
}

public class AIAssignRoleCommand extends AICommand {

  public inline edit let role: ref<AIRole>;
}

public class AINoRole extends AIRole {
}

public native class AIUseCoverCommand extends AICombatRelatedCommand {

  public inline edit native let coverNodeRef: NodeRef;

  public inline edit native let oneTimeSelection: Bool;

  public inline edit native let forcedEntryAnimation: CName;

  public inline edit let limitToTheseExposureMethods: ref<CoverCommandParams>;
}

public class AISetCombatPresetCommand extends AICombatRelatedCommand {

  public inline edit let combatPreset: EAICombatPreset;
}

public native class AIInjectCombatTargetCommand extends AICombatRelatedCommand {

  public inline edit native let targetNodeRef: NodeRef;

  public inline edit native let targetPuppetRef: EntityReference;

  public inline edit native let duration: Float;
}

public native class AIInjectLookatTargetCommand extends AICombatRelatedCommand {

  public inline edit native let targetNodeRef: NodeRef;

  public inline edit native let targetPuppetRef: EntityReference;

  public inline edit native let duration: Float;
}

public native class AIThrowGrenadeCommand extends AICombatRelatedCommand {

  public inline edit native let targetOverrideNodeRef: NodeRef;

  public inline edit native let targetOverridePuppetRef: EntityReference;

  public inline edit native let duration: Float;

  public inline edit native let once: Bool;
}

public native class AIShootCommand extends AICombatRelatedCommand {

  public inline edit native let targetOverrideNodeRef: NodeRef;

  public inline edit native let targetOverridePuppetRef: EntityReference;

  public inline edit native let duration: Float;

  public inline edit native let once: Bool;
}

public class AIAimAtTargetCommand extends AICombatRelatedCommand {

  public inline edit let targetOverrideNodeRef: NodeRef;

  public inline edit let targetOverridePuppetRef: EntityReference;

  public inline edit let duration: Float;
}

public native class AISwitchToPrimaryWeaponCommand extends AICommand {

  public edit native let unEquip: Bool;
}

public native class AISwitchToSecondaryWeaponCommand extends AICommand {

  public edit native let unEquip: Bool;
}

public class AIHoldPositionCommand extends AIMoveCommand {

  public edit let duration: Float;
}

public native class AIMoveToCoverCommand extends AIMoveCommand {

  public inline edit let coverNodeRef: NodeRef;

  public inline edit let specialAction: ECoverSpecialAction;
}

public class AIStopCoverCommand extends AICommand {
}

public class AIJoinTargetsSquad extends AICommand {

  public inline edit let targetPuppetRef: EntityReference;
}

public class AIFollowerCombatCommand extends AIFollowerCommand {
}

public class AIFlatheadSetSoloModeCommand extends AIFollowerCommand {

  public inline edit let soloModeState: Bool;
}

public class AIScanTargetCommand extends AICommand {

  public inline edit let targetPuppetRef: EntityReference;
}

public struct TestStackScriptData {

  public let testVar: Int32;

  public let anotherVar: CName;
}

public abstract native class AIbehaviorPassiveExpressionDefinition extends IScriptable {
}

public native class AIbehaviorStackScriptPassiveExpressionDefinition extends AIbehaviorPassiveExpressionDefinition {

  public final native func MarkDirty(context: script_ref<ScriptExecutionContext>) -> Void;

  public final native func AddToUpdateQueue(context: script_ref<ScriptExecutionContext>) -> Bool;

  public final native func RemoveFromUpdateQueue(context: script_ref<ScriptExecutionContext>) -> Bool;

  public final native func AddBehaviorCallback(context: script_ref<ScriptExecutionContext>, callbackName: CName) -> Uint32;

  public final native func RemoveBehaviorCallback(context: script_ref<ScriptExecutionContext>, callbackId: Uint32) -> Bool;

  public final native func ListenToSignal(context: script_ref<ScriptExecutionContext>, signalName: CName) -> Uint16;

  public final native func StopListeningToSignal(context: script_ref<ScriptExecutionContext>, signalId: Uint16) -> Bool;
}

public native class AIArgumentMapping extends IScriptable {

  public final native func GetArgumentType() -> AIArgumentType;

  public final native func GetParameterizationType() -> AIParameterizationType;

  public final native func GetArgumentName() -> CName;
}

public abstract native class AttitudeGroupChangedEvent extends Event {
}

public final native class RagdollRequestCollectAnimPoseEvent extends Event {
}

public final native class RagdollNotifyDisabledEvent extends Event {
}

public final native class AnimatedRagdollNotifyDisabledEvent extends Event {
}

public final native class RagdollNotifyVelocityTresholdEvent extends Event {

  public native let velocity: Vector4;
}

public final native class RagdollPutToSleepEvent extends Event {
}

public final class DisableRagdollComponentEvent extends Event {
}

public native class AnimFeature_WeaponData extends AnimFeature {

  public final native func SetCycleTime(cycleTime: Float) -> Void;

  public final native func SetChargePercentage(chargePercentage: Float) -> Void;

  public final native func SetTimeInMaxCharge(timeInMaxCharge: Float) -> Void;

  public final native func SetAmmoRemaining(ammoRemaining: Int32) -> Void;

  public final native func SetTriggerMode(triggerMode: gamedataTriggerMode) -> Void;

  public final native func SetMagazineFull(magazineFull: Bool) -> Void;

  public final native func SetTriggerDown(triggerDown: Bool) -> Void;
}

public native class AnimFeature_CoverAction extends AnimFeature_AIAction {

  public edit native let coverStance: Int32;

  public edit native let coverActionType: Int32;

  public edit native let coverShootType: Int32;

  public edit native let movementType: Int32;
}

public native class AnimFeature_ExitCover extends AnimFeature_AIAction {

  public edit native let coverStance: Int32;

  public edit native let coverExitDirection: Int32;
}

public class AnimFeature_EquipType extends AnimFeature {

  public edit let firstEquip: Bool;

  public edit let equipDuration: Float;

  public edit let unequipDuration: Float;
}

public native class AnimFeature_LoopableAction extends AnimFeature {

  public final native func SetLoopDuration(loopDuration: Float) -> Void;

  public final native func SetNumLoops(numLoops: Int32) -> Void;

  public final native func SetActive(isActive: Bool) -> Void;
}

public native class AnimFeature_Aim extends AnimFeature_BasicAim {

  public final native func Aim(aimPoint: Vector4) -> Void;
}

public native class AnimFeature_Stance extends AnimFeature {

  public final native func SetStanceState(stanceState: animStanceState) -> Void;
}

public native class AnimFeature_MoveTo extends AnimFeature {

  public final native func MoveTo(targetPosition: Vector4, targetYawRotation: Float, timeToMove: Float) -> Void;

  public final native func MoveToWithDir(targetPosition: Vector4, targetYawRotation: Vector4, timeToMove: Float) -> Void;
}

public native class AnimFeature_Movement extends AnimFeature {

  public final native func SetSpeed(speed: Float) -> Void;
}

public native class AnimFeature_PlayerMovement extends AnimFeature_Movement {

  public final native func SetVerticalSpeed(verticalSpeed: Float) -> Void;

  public final native func SetFacingDirection(facingDirection: Vector4) -> Void;

  public final native func SetMovementDirection(movementDirection: Vector4, forwardVector: Vector4) -> Void;
}

public class AnimFeature_LadderEnterStyleData extends AnimFeature {

  public edit let enterStyle: Int32;
}

public native class AnimFeature_Cover extends AnimFeature {

  public final native func SetCoverState(coverState: animCoverState) -> Void;

  public final native func SetCoverAction(coverAction: animCoverAction) -> Void;

  public final native func SetCoverAngleToAction(angleToAction: Float) -> Void;

  public final native func SetCoverPosition(position: Vector4) -> Void;

  public final native func SetCoverDirection(direction: Vector4) -> Void;
}

public class MeshParam_Weakspot extends AnimFeature {

  public edit let hidden: Int32;
}

public class AnimFeature_RotatingObject extends AnimFeature {

  public edit let rotateClockwise: Bool;

  public edit let randomizeBladesRotation: Bool;

  public edit let maxRotationSpeed: Float;

  public edit let timeToMaxRotation: Float;
}

public native class AnimFeature_FPPCamera extends AnimFeature {

  public final native func SetDeltaYaw(deltaYaw: Float) -> Void;

  public final native func SetDeltaPitch(deltaPitch: Float) -> Void;

  public final native func SetYawSpeed(yawSpeed: Float) -> Void;

  public final native func SetPitchSpeed(pitchSpeed: Float) -> Void;
}

public native class AnimFeature_PlayerStateMachineState extends AnimFeature {

  public final native func SetActive(active: Float) -> Void;
}

public class AnimFeature_IconicItem extends AnimFeature {

  public edit let isScanning: Bool;

  public edit let isFreeDrilling: Bool;

  public edit let isActiveDrilling: Bool;

  public edit let isScanToInteraction: Bool;

  public edit let isItemEquipped: Bool;
}

public class AnimFeature_CoverState extends AnimFeature {

  public edit let inCover: Bool;

  public edit let debugVar: Bool;
}

public class AnimFeature_DelayEntry extends AnimFeature {

  public edit let thresholdPassed: Bool;
}

public native class AnimFeature_PlayerCoverActionState extends AnimFeature {

  public native let state: Int32;
}

public class AnimFeature_PlayerPeekScale extends AnimFeature {

  public edit let peekScale: Float;
}

public class AnimFeature_AnimatedDevice extends AnimFeature {

  public edit let isOn: Bool;

  public edit let isOff: Bool;
}

public class AnimFeature_IndustrialArm extends AnimFeature {

  public edit let idleAnimNumber: Int32;

  public edit let isRotate: Bool;

  public edit let isDistraction: Bool;

  public edit let isPoke: Bool;
}

public class AnimFeature_DoorDevice extends AnimFeature {

  public edit let isOpen: Bool;

  public edit let isLocked: Bool;

  public edit let isSealed: Bool;
}

public class AnimFeature_Container extends AnimFeature {

  public edit let opened: Bool;

  public edit let transitionDuration: Float;
}

public class AnimFeature_ForkliftDevice extends AnimFeature {

  public edit let isUp: Bool;

  public edit let isDown: Bool;

  public edit let distract: Bool;
}

public class AnimFeature_SceneSystem extends AnimFeature {

  public edit let tier: Int32;
}

public class AnimFeature_SceneSystemCarrying extends AnimFeature {

  public edit let carrying: Bool;
}

public class AnimFeature_SelectRandomAnimSync extends AnimFeature {

  public edit let value: Int32;
}

public class AnimFeature_TriggerModeChange extends AnimFeature {

  public edit let cycleTime: Float;
}

public native class AnimFeature_MeleeSlotData extends AnimFeature {

  public native let attackType: Int32;

  public native let comboNumber: Int32;

  public native let startupDuration: Float;

  public native let activeDuration: Float;

  public native let recoverDuration: Float;

  public edit let activeHitDuration: Float;

  public edit let recoverHitDuration: Float;
}

public native class AnimFeature_MeleeIKData extends AnimFeature {

  public native let isValid: Bool;

  public native let headPosition: Vector4;

  public native let chestPosition: Vector4;

  public native let ikOffset: Vector4;
}

public class AnimFeature_MeleeAttack extends AnimFeature {

  public edit let hit: Bool;
}

public native class AnimFeature_QuickMelee extends AnimFeature {

  public native let state: Int32;
}

public class AnimFeature_Whip extends AnimFeature {

  public edit let state: Int32;

  public edit let pullState: Int32;

  public edit let targetPoint: Vector4;
}

public class AnimFeature_AirHover extends AnimFeature {

  public edit let state: Int32;
}

public class AnimFeature_SuperheroLand extends AnimFeature {

  public edit let state: Int32;

  public edit let type: Int32;
}

public class AnimFeature_HoverJumpData extends AnimFeature {

  public edit let state: Int32;
}

public class AnimFeature_SwimmingData extends AnimFeature {

  public edit let state: Int32;
}

public class AnimFeature_AirThrusterData extends AnimFeature {

  public edit let state: Int32;
}

public class AnimFeature_VehicleNPCDeathData extends AnimFeature {

  public edit let deathType: Int32;

  public edit let side: Int32;
}

public class AnimFeature_LookAt extends AnimFeature {

  public edit let enableLookAt: Int32;

  public edit let enableLookAtChest: Int32;

  public edit let enableLookAtHead: Int32;

  public edit let enableLookAtLeftHanded: Int32;

  public edit let enableLookAtRightHanded: Int32;

  public edit let enableLookAtTwoHanded: Int32;

  public edit let gpLookAtTargetBlend: Float;

  public edit let gpLookAtUpBlend: Float;

  public edit let gpLookAtTarget: Vector4;

  public edit let gpLookAtUp: Vector4;

  public edit let lookAtChestMode: Int32;

  public edit let lookAtChestOverride: Float;

  public edit let lookAtHeadMode: Int32;

  public edit let lookAtHeadOverride: Float;

  public edit let lookAtLeftHandedMode: Int32;

  public edit let lookAtLeftHandedOverride: Float;

  public edit let lookAtRightHandedMode: Int32;

  public edit let lookAtRightHandedOverride: Float;

  public edit let lookAtTwoHandedMode: Int32;

  public edit let lookAtTwoHandedOverride: Float;
}

public class AnimFeature_ProceduralIronsightData extends AnimFeature {

  public edit let hasScope: Bool;

  public edit let isEnabled: Bool;

  public edit let offset: Float;

  public edit let scopeOffset: Float;

  public edit let position: Vector4;

  public edit let rotation: Quaternion;
}

public native class AnimFeature_DodgeData extends AnimFeature {

  public native let dodgeType: Int32;

  public native let dodgeDirection: Int32;
}

public class AnimFeature_Carry extends AnimFeature {

  public edit let state: Int32;

  public edit let pickupAnimation: Int32;

  public edit let useBothHands: Bool;

  public edit let instant: Bool;
}

public class AnimFeature_PreClimbing extends AnimFeature {

  public edit let edgePositionLS: Vector4;

  public edit let valid: Float;
}

public class AnimFeature_SafeAction extends AnimFeature {

  public edit let triggerHeld: Bool;

  public edit let inCover: Bool;

  public edit let safeActionDuration: Float;
}

public class AnimFeatureShieldState extends AnimFeatureCustom {

  public edit let state: Int32;
}

public class AnimFeature_StimReactions extends AnimFeature {

  public edit let reactionType: Int32;
}

public native class AnimFeature_ConsumableAnimation extends AnimFeature {

  public native let consumableType: Int32;

  public native let useConsumable: Bool;
}

public class AnimFeature_Stamina extends AnimFeature {

  @default(AnimFeature_Stamina, 1.f)
  public edit let staminaValue: Float;

  @default(AnimFeature_Stamina, 0.f)
  public edit let tiredness: Float;
}

public class AnimFeature_AdHocAnimation extends AnimFeature {

  public edit let isActive: Bool;

  public edit let useBothHands: Bool;

  public edit let animationIndex: Int32;
}

public native class AnimFeature_WeaponReload extends AnimFeature {

  public native let emptyReload: Bool;

  public native let amountToReload: Int32;

  public native let continueLoop: Bool;

  public native let loopDuration: Float;

  public native let emptyDuration: Float;
}

public class AnimFeature_CameraSceneMode extends AnimFeature {

  public edit let pitch_yaw_order: Float;

  public edit let is_scene_mode: Float;

  public edit let scene_settings_mode: Float;
}

public class AnimFeature_CameraBreathing extends AnimFeature {

  public edit let amplitudeWeight: Float;

  public edit let dampIncreaseSpeed: Float;

  public edit let dampDecreaseSpeed: Float;
}

public class AnimFeature_CameraRecoil extends AnimFeature {

  public edit let backward_offset: Float;

  public edit let side_offset: Float;

  public edit let tilt_angle: Float;

  public edit let yaw_angle: Float;

  public edit let pitch_angle: Float;

  public edit let translate_transform_speed: Float;

  public edit let rotate_transform_speed: Float;

  public edit let is_offset: Bool;
}

public class AnimFeature_DeviceWorkspot extends AnimFeature {

  public edit let e3_lockInReferencePose: Bool;
}

public class AnimFeature_WeaponBlur extends AnimFeature {

  public edit let weaponNearPlane: Float;

  public edit let weaponFarPlane: Float;

  public edit let weaponEdgesSharpness: Float;

  public edit let weaponVignetteIntensity: Float;

  public edit let weaponVignetteRadius: Float;

  public edit let weaponVignetteCircular: Float;

  public edit let weaponBlurIntensity: Float;

  public edit let weaponNearPlane_aim: Float;

  public edit let weaponFarPlane_aim: Float;

  public edit let weaponEdgesSharpness_aim: Float;

  public edit let weaponVignetteIntensity_aim: Float;

  public edit let weaponVignetteRadius_aim: Float;

  public edit let weaponVignetteCircular_aim: Float;

  public edit let weaponBlurIntensity_aim: Float;
}

public class AnimFeature_WeaponHandlingStats extends AnimFeature {

  public edit let weaponRecoil: Float;

  public edit let weaponSpread: Float;
}

public native class AnimFeature_WeaponReloadSpeedData extends AnimFeature {

  public native let reloadSpeed: Float;

  public native let emptyReloadSpeed: Float;
}

public native class AnimFeature_PhotomodeFacial extends AnimFeature {

  public edit native let facialPoseIndex: Int32;
}

public class AnimFeature_Reprimand extends AnimFeature {

  public edit let state: Int32;

  public edit let isActive: Bool;

  public edit let isLocomotion: Bool;

  public edit let weaponType: Int32;
}

public final native class BlackboardChangedEvent extends Event {

  public final native const func GetDefinition() -> ref<BlackboardDefinition>;

  public final native const func GetID() -> BlackboardID;
}

public native struct BlackboardID_Bool extends BlackboardID {
}

public native struct BlackboardID_Int extends BlackboardID {
}

public native struct BlackboardID_Uint extends BlackboardID {
}

public native struct BlackboardID_Float extends BlackboardID {
}

public native struct BlackboardID_Name extends BlackboardID {
}

public native struct BlackboardID_Vector2 extends BlackboardID {
}

public native struct BlackboardID_Vector4 extends BlackboardID {
}

public native struct BlackboardID_Quat extends BlackboardID {
}

public native struct BlackboardID_Entity extends BlackboardID {
}

public native struct BlackboardID_String extends BlackboardID {
}

public native struct BlackboardID_EulerAngles extends BlackboardID {
}

public native struct BlackboardID_EntityID extends BlackboardID {
}

public native struct BlackboardID_Variant extends BlackboardID {
}

public struct SpreadMapItem {

  public let key: wref<InteractionBase_Record>;

  public let count: Int32;

  public let range: Float;
}

public class CoverActionDataDef extends BlackboardDefinition {

  public let coverActionStateId: BlackboardID_Int;

  public let playerNearValidEdge: BlackboardID_Bool;

  public let debugLeaning: BlackboardID_Bool;

  public let debugAutoLeaning: BlackboardID_Bool;

  public let debugDpadLeaning: BlackboardID_Bool;

  public let debugLsLeaning: BlackboardID_Bool;

  public let debugStagesLeaning: BlackboardID_Bool;

  public let debugAdsLeaning: BlackboardID_Bool;
}

public class UI_HUDButtonHintDef extends BlackboardDefinition {

  public let ActionsData: BlackboardID_Variant;
}

public class BackDoorDeviceBlackboardDef extends MasterDeviceBaseBlackboardDef {

  public let isInDefaultState: BlackboardID_Bool;

  public let shutdownModule: BlackboardID_Int;

  public let bootModule: BlackboardID_Int;
}

public class ArcadeMachineBlackboardDef extends DeviceBaseBlackboardDef {
}

public class ConfessionalBlackboardDef extends DeviceBaseBlackboardDef {

  public let IsConfessing: BlackboardID_Bool;
}

public class JukeboxBlackboardDef extends DeviceBaseBlackboardDef {

  public let IsPlaying: BlackboardID_Bool;
}

public class NcartTimetableBlackboardDef extends DeviceBaseBlackboardDef {

  public let TimeToDepart: BlackboardID_Int;
}

public class IntercomBlackboardDef extends DeviceBaseBlackboardDef {

  public let DisplayString: BlackboardID_String;

  public let EnableActions: BlackboardID_Bool;

  public let Status: BlackboardID_Variant;
}

public class DataTermDeviceBlackboardDef extends DeviceBaseBlackboardDef {

  public let fastTravelPoint: BlackboardID_Variant;

  public let triggerWorldMap: BlackboardID_Bool;
}

public class InteractiveDeviceBlackboardDef extends DeviceBaseBlackboardDef {

  public let showAd: BlackboardID_Bool;

  public let showVendor: BlackboardID_Bool;
}

public class UI_FastForwardDef extends BlackboardDefinition {

  public let FastForwardAvailable: BlackboardID_Bool;

  public let FastForwardActive: BlackboardID_Bool;
}

public class AIAlertedPatrolDef extends AIBlackboardDef {

  public let patrolPathOverride: BlackboardID_Variant;

  public let sprint: BlackboardID_Bool;

  public let selectedPath: BlackboardID_Variant;

  public let closestPathPoint: BlackboardID_Vector4;

  public let workspotData: BlackboardID_Variant;

  public let workspotEntryPosition: BlackboardID_Vector4;

  public let workspotExitPosition: BlackboardID_Vector4;

  public let patrolAction: BlackboardID_Variant;

  public let forceAlerted: BlackboardID_Bool;

  public let patrolInProgress: BlackboardID_Bool;
}

public abstract native class ISkinableComponent extends IPlacedComponent {
}

public native class AnimatedComponent extends ISkinableComponent {
}

public class AnimationsLoaded extends TaggedSignalUserData {
}

public native struct BinkVideoSummary {

  public native let currentTimeMs: Uint32;

  public native let totalTimeMs: Uint32;

  public native let currentFrame: Uint32;

  public native let totalFrames: Uint32;

  public native let frameRate: Uint32;
}

public native class InCrowd extends Event {
}

public native class OutOfCrowd extends Event {
}

public native class OnPavement extends Event {
}

public native class OffPavement extends Event {
}

public abstract class EntityStubComponent extends GameComponent {
}

public final native class EthnicityComponent extends IComponent {
}

public native class InteractionMountBase_Record extends InteractionBase_Record {

  public final native func VehicleMountSlot() -> CName;

  public final native func Tag() -> CName;
}

public static native func StrEndsWith(const str: script_ref<String>, const match: script_ref<String>) -> Bool;

public native class HitRepresentation_SetSingleScaleMultiplier_AllShapes extends Event {

  public native let scaleMultiplier: Vector4;
}

public final native class HitRepresentation_SetSingleScaleMultiplier_SingleShape extends HitRepresentation_SetSingleScaleMultiplier_AllShapes {

  public native let shapeName: CName;
}

public final native class HitRepresentation_SetSingleScaleMultiplier_MultipleShapes extends HitRepresentation_SetSingleScaleMultiplier_AllShapes {

  public native let shapeNames: array<CName>;
}

public final native class HitRepresentation_SetMultipleScaleMultipliers_MultipleShapes extends Event {

  public native let scaleMultipliers: array<Vector4>;

  public native let shapeNames: array<CName>;
}

public final native class HitRepresentation_ResetSingleScaleMultiplier extends Event {

  public native let shapeName: CName;
}

public final native class HitRepresentation_ResetMultipleScaleMultipliers extends Event {

  public native let shapeNames: array<CName>;
}

public final native class HitRepresentation_ResetAllScaleMultipliers extends Event {
}

public class HitData_Humanoid extends HitData_Base {

  public edit let m_reactionZonesSide: ReactionZones_Humanoid_Side;
}

public native class InfluenceObstacleComponent extends IPlacedComponent {

  public final native func GetBoundingBox() -> Box;

  public final native func SetBoundingBox(boundingBox: Box) -> Void;
}

public native class InteractionSetChoicesEvent extends Event {

  public native let choices: array<InteractionChoice>;

  public native let layer: CName;
}

public native class InventoryScriptListener extends InventoryListener {
}

public final native class OnLootEvent extends Event {
}

public final native class OnLootAllEvent extends Event {
}

public native class UILootedItemEvent extends Event {

  public native let itemID: ItemID;
}

public class ResolveQualityRangeInteractionLayerEvent extends Event {

  public let itemData: wref<gameItemData>;
}

public class gameContainerObjectBasePS extends gameLootContainerBasePS {
}

public class ContainerObjectSingleItemPS extends gameLootContainerBasePS {
}

public class LootContainerObjectAnimatedByTransformPS extends gameLootContainerBasePS {
}

public native class ExplorationEnteredEvent extends Event {

  public native let type: moveExplorationType;
}

public native class ExplorationLeftEvent extends Event {

  public native let type: moveExplorationType;
}

public native class ExitedSplineEvent extends Event {
}

public native class PhysicalDestructionComponent extends IVisualComponent {

  public final native func IsFractured() -> Bool;
}

public native class PhysicalDestructionEvent extends Event {

  public native let componentName: CName;

  public native let levelOfDestruction: Uint8;
}

public native class gamePlayerControlledComponent extends IComponent {
}

public class TurretInitData extends IScriptable {

  public let turret: wref<GameObject>;
}

public native struct MountingRelationship {

  public native let otherMountableType: gameMountingObjectType;

  public native let relationshipType: gameMountingRelationshipType;

  public native let slotId: MountingSlotId;
}

public class VehicleTransitionInitData extends IScriptable {

  public let instant: Bool;

  public let entityID: EntityID;

  public let alive: Bool;

  public let occupiedByNeutral: Bool;
}

public class CarriedObjectData extends IScriptable {

  public let instant: Bool;
}

public native class FollowTrajectoryParams extends gameprojectileTrajectoryParams {

  public edit native let startVel: Float;

  public edit native let target: wref<GameObject>;

  public edit native let targetComponent: wref<IPlacedComponent>;

  public edit native let accuracy: Float;

  public edit native let targetOffset: Vector4;
}

public native class SpiralControllerParams extends IScriptable {

  public edit native let enabled: Bool;

  public edit native let radius: Float;

  public edit native let cycleTimeMin: Float;

  public edit native let cycleTimeMax: Float;

  public edit native let rampUpDistanceStart: Float;

  public edit native let rampUpDistanceEnd: Float;

  public edit native let rampDownDistanceStart: Float;

  public edit native let rampDownDistanceEnd: Float;

  public edit native let rampDownFactor: Float;

  public edit native let randomizePhase: Bool;

  public edit native let randomizeDirection: Bool;
}

public native class SlideTrajectoryParams extends gameprojectileTrajectoryParams {

  public edit native let stickiness: Float;

  public edit native let constAccel: Vector4;
}

public native class ProjectileSpawnComponent extends IPlacedComponent {

  public final native func Spawn(templateID: Uint32) -> Void;
}

public class RefreshClueScanningDataEvent extends Event {
}

public class ClueScannedEvent extends Event {

  public let clueIndex: Int32;

  public let requesterID: EntityID;
}

public class InitializeFocusCluesEvent extends Event {

  public let requesterID: EntityID;
}

public final native class OnScannableBraindanceClueEnabledEvent extends Event {
}

public final native class OnScannableBraindanceClueDisabledEvent extends Event {
}

public class DisableWeakspotDelayedEvent extends DelayEvent {
}

public class EnableColliderDelayEvent extends DelayEvent {
}

public struct WeakspotOnDestroyProperties {

  @default(WeakspotOnDestroyProperties, false)
  public edit let m_isInternal: Bool;

  @default(WeakspotOnDestroyProperties, true)
  public edit let m_disableInteraction: Bool;

  @default(WeakspotOnDestroyProperties, true)
  public edit let m_destroyMesh: Bool;

  @default(WeakspotOnDestroyProperties, false)
  public edit let m_disableCollider: Bool;

  public edit let m_hideMeshParameterValue: CName;

  @default(WeakspotOnDestroyProperties, false)
  public edit let m_playHitFxFromOwnerEntity: Bool;

  @default(WeakspotOnDestroyProperties, false)
  public edit let m_playDestroyedFxFromOwnerEntity: Bool;

  public edit let m_playBrokenFxFromOwnerEntity: Bool;

  public edit let m_addFact: CName;

  public edit let m_sendAIActionAnimFeatureName: CName;

  @default(WeakspotOnDestroyProperties, 0)
  public edit let m_sendAIActionAnimFeatureState: Int32;

  @default(WeakspotOnDestroyProperties, 0)
  public edit let m_destroyDelay: Float;

  @default(WeakspotOnDestroyProperties, false)
  public edit let m_useWeakspotDestroyStageVFX: Bool;

  @attrib(customEditor, "TweakDBGroupInheritance;Attack_GameEffect")
  public edit let m_attackRecordID: TweakDBID;

  public edit let m_StatusEffectOnDestroyID: TweakDBID;
}

public class WeakspotOnDestroyEvent extends Event {

  public let weakspotRecordData: WeakspotRecordData;
}

public struct WeakspotRecordData {

  public let m_isInvulnerable: Bool;

  public let m_slotID: TweakDBID;

  public let m_reducedMeleeDamage: Bool;
}

public native class Weakspot_Record extends SpawnableObject_Record {

  public final native func SlotToAttach() -> wref<AttachmentSlot_Record>;

  public final native func SlotToAttachHandle() -> ref<AttachmentSlot_Record>;

  public final native func OnDestroyedEffectors(out outList: array<wref<Effector_Record>>) -> Void;

  public final native func GetOnDestroyedEffectorsCount() -> Int32;

  public final native func GetOnDestroyedEffectorsItem(index: Int32) -> wref<Effector_Record>;

  public final native func GetOnDestroyedEffectorsItemHandle(index: Int32) -> wref<Effector_Record>;

  public final native func OnDestroyedEffectorsContains(item: wref<Effector_Record>) -> Bool;

  public final native func ValidCharacterAppearances() -> array<CName>;

  public final native func GetValidCharacterAppearancesCount() -> Int32;

  public final native func GetValidCharacterAppearancesItem(index: Int32) -> CName;

  public final native func ValidCharacterAppearancesContains(item: CName) -> Bool;

  public final native func GameplayTags() -> array<CName>;

  public final native func GetGameplayTagsCount() -> Int32;

  public final native func GetGameplayTagsItem(index: Int32) -> CName;

  public final native func GameplayTagsContains(item: CName) -> Bool;
}

public class DestroyWeakspotDelayedEvent extends Event {
}

public class AVComponent extends VehicleComponent {
}

public class CarComponent extends VehicleComponent {
}

public native struct EffectExecutionScriptContext {

  public final static native func GetTimeDelta(applierCtx: EffectExecutionScriptContext) -> Float;

  public final static native func GetTarget(applierCtx: EffectExecutionScriptContext) -> ref<Entity>;

  public final static native func GetTargetNode(applierCtx: EffectExecutionScriptContext) -> GlobalNodeID;

  public final static native func GetHitPosition(applierCtx: EffectExecutionScriptContext) -> Vector4;

  public final static native func GetHitNormal(applierCtx: EffectExecutionScriptContext) -> Vector4;

  public final static native func GetHitThroughTechSurface(applierCtx: EffectExecutionScriptContext) -> Bool;
}

public class ChangeDiodeLightSettingsEvent extends Event {

  public let colorValues: array<Int32>;

  public let strength: Float;

  public let time: Float;

  public let curve: CName;

  public let loop: Bool;
}

public class RemoveSecondaryDiodeLightPresetEvent extends Event {
}

public class DurabilityLimitReach extends Event {
}

public class DurabilityComponent extends ScriptableComponent {
}

public struct EntityAttachementData {

  public persistent let slotName: CName;

  public persistent let slotComponentName: CName;

  public persistent let nodeRef: NodeRef;

  @default(EntityAttachementData, EntityAttachementComponent)
  public persistent let attachementComponentName: CName;

  public persistent let ownerID: EntityID;
}

public class EntityAttachementRequestEvent extends Event {

  public let attachementData: EntityAttachementData;
}

public class FollowSlot extends IScriptable {

  public let id: Int32;

  public let slotTransform: Transform;

  @default(FollowSlot, true)
  public let isEnabled: Bool;

  @default(FollowSlot, true)
  public let isAvailable: Bool;
}

public class RequestSlotEvent extends Event {

  public let blackboard: wref<IBlackboard>;

  public let requester: wref<GameObject>;
}

public class ReleaseSlotEvent extends Event {

  public let slotID: Int32;
}

public class ToggleMappinsOnLookAtEvent extends Event {

  public let state: Bool;
}

public class DeactivateQuickHackIndicatorEvent extends Event {
}

public class InspectItemInspectionEvent extends Event {

  public let owner: wref<GameObject>;
}

public class LootItemInspectionEvent extends Event {

  public let owner: wref<GameObject>;
}

public native class ObjectInspectListener extends IInspectListener {

  public final native func OnInspect(type: questObjectInspectEventType) -> Void;
}

public native class InspectListenerEvent extends Event {

  public native let listener: ref<ObjectInspectListener>;

  public native let register: Bool;
}

public native class PhysicalImpulseEvent extends Event {

  public native let bodyIndex: Uint32;

  public native let worldPosition: Vector3;

  public native let worldImpulse: Vector3;

  public native let radius: Float;

  public native let shapeIndex: Uint32;
}

public struct SMovementPattern {

  @default(SMovementPattern, 2.0f)
  public let speed: Float;

  public let distance: Float;

  public let direction: EMovementDirection;
}

public class ObjectMoverStatus extends Event {

  public let ownerName: CName;

  public let direction: EMovementDirection;
}

public class ObjectMoverComponentPS extends GameComponentPS {
}

public class ObjectMoverComponent extends ScriptableComponent {
}

public native class PlayerProximityStopEvent extends Event {

  public native let profile: CName;
}

public class CrowdCallingPoliceEvent extends Event {
}

public class SpreadFearEvent extends Event {

  public let player: Bool;

  public let phase: Int32;
}

public class VehicleReadyInteractionDelayEvent extends Event {
}

public class VehicleCycleLightsEvent extends Event {
}

public native class SenseInitializeEvent extends Event {
}

public native class OnBeingDetectedEvent extends Event {

  public native let isVisible: Bool;

  public native let shapeId: TweakDBID;

  public final native func GetSourceObject() -> wref<GameObject>;
}

public native class EnterShapeEvent extends SenseVisibilityEvent {
}

public native class ExitShapeEvent extends SenseVisibilityEvent {
}

public native class SenseBox extends ISenseShape {

  public native let box: Box;
}

public native class SenseSphere extends ISenseShape {

  public native let sphere: Sphere;
}

public native class SenseAngleRange extends ISenseShape {

  public native let position: Vector4;

  public native let angle: Float;

  public native let range: Float;

  public native let halfHeight: Float;
}

public abstract native class SoundComponentBase extends IPlacedComponent {
}

public final native class soundComponent extends SoundComponentBase {
}

public native struct TacticRatio {

  public native let ratioSum: Float;

  public native let reachSum: Float;

  public native let area: Float;
}

public final native class gameStatsComponent extends GameComponent {
}

public native class StartedBeingTrackedAsHostile extends AIEvent {
}

public native class StoppedBeingTrackedAsHostile extends AIEvent {
}

public native class ThreatExpectationInvalid extends AIEvent {

  public native let owner: wref<Entity>;

  public native let threat: wref<Entity>;

  public native let threatId: Uint32;
}

public native class EnemyPushedToSquad extends AIEvent {

  public native let threat: wref<Entity>;
}

public native class HostJoinedSquad extends AIEvent {

  public native let squad: CName;
}

public native class EntitySpotted extends AIEvent {

  public native let spotter: wref<Entity>;

  public native let spotted: wref<Entity>;

  public native let isHostile: Bool;
}

public native class EntityLost extends AIEvent {

  public native let spotter: wref<Entity>;

  public native let spotted: wref<Entity>;

  public native let isHostile: Bool;
}

public abstract native class WidgetHudComponentInterface extends WidgetBaseComponent {

  public final native func GetWidget(entryName: CName) -> ref<inkWidget>;
}

public abstract native class WidgetHudComponent extends WidgetHudComponentInterface {
}

public class ClearAllRevealRequestsEvent extends Event {
}

public native struct CameraData {

  public native let rotation: Quaternion;
}

public class TestMappinScriptData extends MappinScriptData {

  public let test: Int32;
}

public native struct PrereqCheckData {

  public native let prereqType: gameEPrerequisiteType;

  public native let comparisonType: EComparisonType;

  public native let contextObject: String;

  public native let valueToCompare: Float;
}

public native struct PrereqData {

  public native let bAndValues: Bool;

  public native let prereqList: array<PrereqCheckData>;
}

public native struct PrereqParams {

  public native let objectID: StatsObjectID;

  public native let otherObjectID: StatsObjectID;

  public native let otherData: Variant;
}

public native struct ScanningTooltipElementData {

  public native let recordID: TweakDBID;

  public native let localizedName: CName;

  public native let localizedDescription: CName;
}

public native struct AmmoData {

  public native let id: ItemID;

  public native let available: Int32;

  public native let equipped: Int32;
}

public native struct RequestItemParam {

  public native let itemIDToEquip: ItemID;

  public native let slotID: TweakDBID;

  public native let forceFirstEquip: Bool;
}

public native class parameterRequestItem extends IScriptable {

  public native let requests: array<RequestItemParam>;
}

public class parameterRequestEquip extends IScriptable {

  public let valid: Bool;

  public let itemID: ItemID;
}

public native struct gameStatModifierDetailedData {

  public native let statType: gamedataStatType;

  public native let modifierType: gameStatModifierType;

  public native let value: Float;
}

public native struct gameStatDetailedData {

  public native let statType: gamedataStatType;

  public native let limitMin: Float;

  public native let limitMax: Float;

  public native let value: Float;

  public native let modifiers: array<gameStatModifierDetailedData>;

  public native let boolStatType: Bool;
}

public native class AIActionAND_Record extends AIActionSubCondition_Record {

  public final native func AND(out outList: array<wref<AIActionSubCondition_Record>>) -> Void;

  public final native func GetANDCount() -> Int32;

  public final native func GetANDItem(index: Int32) -> wref<AIActionSubCondition_Record>;

  public final native func GetANDItemHandle(index: Int32) -> wref<AIActionSubCondition_Record>;

  public final native func ANDContains(item: wref<AIActionSubCondition_Record>) -> Bool;
}

public native class AIActionOR_Record extends AIActionSubCondition_Record {

  public final native func OR(out outList: array<wref<AIActionSubCondition_Record>>) -> Void;

  public final native func GetORCount() -> Int32;

  public final native func GetORItem(index: Int32) -> wref<AIActionSubCondition_Record>;

  public final native func GetORItemHandle(index: Int32) -> wref<AIActionSubCondition_Record>;

  public final native func ORContains(item: wref<AIActionSubCondition_Record>) -> Bool;
}

public native class AIActionTicket_Record extends AITicket_Record {
}

public native class AIActionType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataAIActionType;
}

public native class AIAffiliationCond_Record extends AIActionSubCondition_Record {

  public final native func Affiliation() -> wref<Affiliation_Record>;

  public final native func AffiliationHandle() -> ref<Affiliation_Record>;
}

public native class AICommand_Record extends TweakDBRecord {

  public final native func HasCommands() -> array<CName>;

  public final native func GetHasCommandsCount() -> Int32;

  public final native func GetHasCommandsItem(index: Int32) -> CName;

  public final native func HasCommandsContains(item: CName) -> Bool;

  public final native func HasNewOrOverridenCommands() -> array<CName>;

  public final native func GetHasNewOrOverridenCommandsCount() -> Int32;

  public final native func GetHasNewOrOverridenCommandsItem(index: Int32) -> CName;

  public final native func HasNewOrOverridenCommandsContains(item: CName) -> Bool;
}

public native class AICooldownCond_Record extends AIActionSubCondition_Record {

  public final native func Cooldowns(out outList: array<wref<AIActionCooldown_Record>>) -> Void;

  public final native func GetCooldownsCount() -> Int32;

  public final native func GetCooldownsItem(index: Int32) -> wref<AIActionCooldown_Record>;

  public final native func GetCooldownsItemHandle(index: Int32) -> wref<AIActionCooldown_Record>;

  public final native func CooldownsContains(item: wref<AIActionCooldown_Record>) -> Bool;
}

public native class AIDirectorEntryStartType_Record extends TweakDBRecord {

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataAIDirectorEntryStartType;
}

public native class AIDirectorSchedule_Record extends TweakDBRecord {

  public final native func Entries(out outList: array<wref<AIDirectorScheduleEntry_Record>>) -> Void;

  public final native func GetEntriesCount() -> Int32;

  public final native func GetEntriesItem(index: Int32) -> wref<AIDirectorScheduleEntry_Record>;

  public final native func GetEntriesItemHandle(index: Int32) -> wref<AIDirectorScheduleEntry_Record>;

  public final native func EntriesContains(item: wref<AIDirectorScheduleEntry_Record>) -> Bool;
}

public native class AIDirectorScheduleEntry_Record extends TweakDBRecord {

  public final native func EntryStartType() -> wref<AIDirectorEntryStartType_Record>;

  public final native func EntryStartTypeHandle() -> ref<AIDirectorEntryStartType_Record>;

  public final native func Plans(out outList: array<wref<AIDirectorSchedulePlan_Record>>) -> Void;

  public final native func GetPlansCount() -> Int32;

  public final native func GetPlansItem(index: Int32) -> wref<AIDirectorSchedulePlan_Record>;

  public final native func GetPlansItemHandle(index: Int32) -> wref<AIDirectorSchedulePlan_Record>;

  public final native func PlansContains(item: wref<AIDirectorSchedulePlan_Record>) -> Bool;

  public final native func Duration() -> Float;

  public final native func TensionDelta() -> Float;

  public final native func KillsLimit() -> Int32;
}

public native class AIDirectorSchedulePlan_Record extends TweakDBRecord {

  public final native func SpawningDesc() -> wref<AIDirectorScheduleSpawningDesc_Record>;

  public final native func SpawningDescHandle() -> ref<AIDirectorScheduleSpawningDesc_Record>;

  public final native func MinTensionToPerform() -> Float;
}

public native class AIDirectorSchedulePlanEnemyEntry_Record extends TweakDBRecord {

  public final native func Character() -> wref<Character_Record>;

  public final native func CharacterHandle() -> ref<Character_Record>;

  public final native func Tags() -> array<CName>;

  public final native func GetTagsCount() -> Int32;

  public final native func GetTagsItem(index: Int32) -> CName;

  public final native func TagsContains(item: CName) -> Bool;

  public final native func SpawnChanceFactor() -> Float;

  public final native func MaxAmountConcurrently() -> Int32;
}

public native class AIDirectorScheduleSpawningDesc_Record extends TweakDBRecord {

  public final native func Entries(out outList: array<wref<AIDirectorSchedulePlanEnemyEntry_Record>>) -> Void;

  public final native func GetEntriesCount() -> Int32;

  public final native func GetEntriesItem(index: Int32) -> wref<AIDirectorSchedulePlanEnemyEntry_Record>;

  public final native func GetEntriesItemHandle(index: Int32) -> wref<AIDirectorSchedulePlanEnemyEntry_Record>;

  public final native func EntriesContains(item: wref<AIDirectorSchedulePlanEnemyEntry_Record>) -> Bool;

  public final native func SpawningBigDistance() -> Float;

  public final native func SpawningAngle() -> Float;

  public final native func EnemiesAmount() -> Int32;

  public final native func SpawningMinDistance() -> Float;
}

public native class AIDriverCond_Record extends AIActionSubCondition_Record {

  public final native func Driver() -> wref<AIActionTarget_Record>;

  public final native func DriverHandle() -> ref<AIActionTarget_Record>;
}

public native class AIFriendlyFireCond_Record extends AIActionSubCondition_Record {

  public final native func CheckPlayer() -> Bool;
}

public native class AIInTacticPositionCond_Record extends AIActionSubCondition_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func Tactics(out outList: array<wref<AITacticType_Record>>) -> Void;

  public final native func GetTacticsCount() -> Int32;

  public final native func GetTacticsItem(index: Int32) -> wref<AITacticType_Record>;

  public final native func GetTacticsItemHandle(index: Int32) -> wref<AITacticType_Record>;

  public final native func TacticsContains(item: wref<AITacticType_Record>) -> Bool;
}

public native class AINodeMap_Record extends TweakDBRecord {

  public final native func Map(out outList: array<wref<AINodeMapField_Record>>) -> Void;

  public final native func GetMapCount() -> Int32;

  public final native func GetMapItem(index: Int32) -> wref<AINodeMapField_Record>;

  public final native func GetMapItemHandle(index: Int32) -> wref<AINodeMapField_Record>;

  public final native func MapContains(item: wref<AINodeMapField_Record>) -> Bool;
}

public native class AINodeMapField_Record extends TweakDBRecord {

  public final native func Node() -> wref<AIRecord_Record>;

  public final native func NodeHandle() -> ref<AIRecord_Record>;

  public final native func IsOverriddenBy() -> wref<AIRecord_Record>;

  public final native func IsOverriddenByHandle() -> ref<AIRecord_Record>;

  public final native func ForLOD() -> Int32;
}

public native class AISquadClosestToSectorCheck_Record extends AISquadDistanceRelationToSectorCheck_Record {
}

public native class AISquadClosestToTargetCheck_Record extends AISquadDistanceRelationToTargetCheck_Record {
}

public native class AISquadFurthestToSectorCheck_Record extends AISquadDistanceRelationToSectorCheck_Record {
}

public native class AISquadFurthestToTargetCheck_Record extends AISquadDistanceRelationToTargetCheck_Record {
}

public native class AISquadType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataAISquadType;
}

public native class AISubActionCallSquadSearchBackUp_Record extends AISubAction_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func NumberOfTargets() -> Float;

  public final native func CallInLevel() -> Float;
}

public native class AISubActionEquipOnBody_Record extends AISubActionCharacterRecordEquip_Record {
}

public native class AISubActionFail_Record extends AISubAction_Record {
}

public native class AISubActionHitData_Record extends AISubAction_Record {
}

public native class AISubActionSetEquipPrimaryWeapons_Record extends AISubActionCharacterRecordEquip_Record {
}

public native class AISubActionSetEquipSecondaryWeapons_Record extends AISubActionCharacterRecordEquip_Record {
}

public native class AISubActionSetItemAsTarget_Record extends AISubActionSetTargetByTag_Record {

  public final native func ItemCategory() -> wref<ItemCategory_Record>;

  public final native func ItemCategoryHandle() -> ref<ItemCategory_Record>;

  public final native func ItemType() -> wref<ItemType_Record>;

  public final native func ItemTypeHandle() -> ref<ItemType_Record>;
}

public native class AISubActionSetTopThreatPersistance_Record extends AISubAction_Record {

  public final native func Source() -> wref<AIThreatPersistenceSource_Record>;

  public final native func SourceHandle() -> ref<AIThreatPersistenceSource_Record>;
}

public native class AISubActionSetUnequipPrimaryWeapons_Record extends AISubActionCharacterRecordUnequip_Record {
}

public native class AISubActionSetUnequipSecondaryWeapons_Record extends AISubActionCharacterRecordUnequip_Record {
}

public native class AITacticType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataAITacticType;
}

public native class AIThreatPersistenceSource_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func EnumValue() -> Int32;

  public final native func Type() -> gamedataAIThreatPersistenceSource;
}

public native class AbsoluteZLimiterCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  public final native func ZLimit() -> Float;
}

public native class ActionMap_Record extends TweakDBRecord {

  public final native func DefaultMap() -> wref<AINodeMap_Record>;

  public final native func DefaultMapHandle() -> ref<AINodeMap_Record>;

  public final native func Map(out outList: array<wref<ActionMapField_Record>>) -> Void;

  public final native func GetMapCount() -> Int32;

  public final native func GetMapItem(index: Int32) -> wref<ActionMapField_Record>;

  public final native func GetMapItemHandle(index: Int32) -> wref<ActionMapField_Record>;

  public final native func MapContains(item: wref<ActionMapField_Record>) -> Bool;
}

public native class ActionMapField_Record extends TweakDBRecord {

  public final native func ItemType() -> wref<ItemType_Record>;

  public final native func ItemTypeHandle() -> ref<ItemType_Record>;

  public final native func Map() -> wref<AINodeMap_Record>;

  public final native func MapHandle() -> ref<AINodeMap_Record>;
}

public native class ActionPayment_Record extends ObjectAction_Record {
}

public native class ActionTargetInDistancePrereq_Record extends IPrereq_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func Distance() -> Float;

  public final native func Invert() -> Bool;
}

public native class ActionTargetPrereq_Record extends IPrereq_Record {

  public final native func Target() -> wref<AIActionTarget_Record>;

  public final native func TargetHandle() -> ref<AIActionTarget_Record>;

  public final native func Invert() -> Bool;
}

public native class ActionWidgetDefinition_Record extends WidgetDefinition_Record {
}

public native class AddStatusEffectToAttackEffector_Record extends Effector_Record {

  public final native func StatusEffect() -> wref<StatusEffect_Record>;

  public final native func StatusEffectHandle() -> ref<StatusEffect_Record>;

  public final native func Stacks() -> Float;

  public final native func ApplicationChance() -> Float;

  public final native func IsRandom() -> Bool;
}

public native class Advertisement_Record extends TweakDBRecord {

  public final native func Definitions(out outList: array<wref<AdvertisementFormatDef_Record>>) -> Void;

  public final native func GetDefinitionsCount() -> Int32;

  public final native func GetDefinitionsItem(index: Int32) -> wref<AdvertisementFormatDef_Record>;

  public final native func GetDefinitionsItemHandle(index: Int32) -> wref<AdvertisementFormatDef_Record>;

  public final native func DefinitionsContains(item: wref<AdvertisementFormatDef_Record>) -> Bool;

  public final native func LocalizationKey() -> CName;

  public final native func Resource() -> ResRef;
}

public native class AdvertisementFormatDef_Record extends TweakDBRecord {

  public final native func Format() -> String;

  public final native func LibraryName() -> String;

  public final native func LocalizationKeyOverride() -> CName;
}

public native class AdvertisementFormatsEnum_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;
}

public native class AdvertisementGroup_Record extends TweakDBRecord {

  public final native func IncludedGroups(out outList: array<wref<AdvertisementGroup_Record>>) -> Void;

  public final native func GetIncludedGroupsCount() -> Int32;

  public final native func GetIncludedGroupsItem(index: Int32) -> wref<AdvertisementGroup_Record>;

  public final native func GetIncludedGroupsItemHandle(index: Int32) -> wref<AdvertisementGroup_Record>;

  public final native func IncludedGroupsContains(item: wref<AdvertisementGroup_Record>) -> Bool;

  public final native func Advertisements(out outList: array<wref<Advertisement_Record>>) -> Void;

  public final native func GetAdvertisementsCount() -> Int32;

  public final native func GetAdvertisementsItem(index: Int32) -> wref<Advertisement_Record>;

  public final native func GetAdvertisementsItemHandle(index: Int32) -> wref<Advertisement_Record>;

  public final native func AdvertisementsContains(item: wref<Advertisement_Record>) -> Bool;

  public final native func FallbackAtlasResource() -> ResRef;

  public final native func LightTintColor() -> Vector3;

  public final native func AdvertTintColor() -> Vector3;
}

public native class AimAssistAimSnap_Record extends TweakDBRecord {

  public final native func CameraInputMagToBreak() -> Float;

  public final native func Precision() -> Float;

  public final native func Duration() -> Float;

  public final native func MaxDuration() -> Float;

  public final native func MinDistance() -> Float;

  public final native func MaxDistance() -> Float;

  public final native func TargetAngleDistanceFactor() -> Float;

  public final native func EndOnAimingStopped() -> Bool;

  public final native func EaseIn() -> Bool;

  public final native func EaseOut() -> Bool;

  public final native func IsEnabled() -> Bool;

  public final native func AdjustPitch() -> Bool;

  public final native func EndOnCameraInputApplied() -> Bool;

  public final native func AdjustYaw() -> Bool;

  public final native func EndOnTargetReached() -> Bool;

  public final native func EndOnTimeExceeded() -> Bool;

  public final native func EvaluateTargets() -> Bool;

  public final native func CheckRange() -> Bool;

  public final native func CancelWithRecoil() -> Bool;
}

public native class AimAssistBulletMagnetism_Record extends TweakDBRecord {

  public final native func TargetHighAngularVelocity() -> Float;

  public final native func TargetSearchAngleYaw() -> Float;

  public final native func TargetSearchAnglePitch() -> Float;

  public final native func MagPointOffset() -> Float;

  public final native func IsEnabled() -> Bool;
}

public native class AimAssistCommon_Record extends TweakDBRecord {

  public final native func AimAssistType() -> wref<AimAssistType_Record>;

  public final native func AimAssistTypeHandle() -> ref<AimAssistType_Record>;

  public final native func FirstPassAngleRange() -> EulerAngles;

  public final native func SoftLockBrakeAngle() -> EulerAngles;

  public final native func AngleDistUnit() -> Float;

  public final native func RotatingAwayFromPastTargetPenalty() -> Float;

  public final native func AngleProximityThreshold() -> Float;

  public final native func AngleProximityBonus() -> Float;

  public final native func PastTargetWeight() -> Float;

  public final native func AngleDistUnitWeight() -> Float;

  public final native func WorldProximityThreshold() -> Float;

  public final native func WorldDistUnitWeight() -> Float;

  public final native func WorldProximityBonus() -> Float;

  public final native func WorldDistUnit() -> Float;

  public final native func TargetLostTimeOut() -> Float;

  public final native func SoftLockTargetWeight() -> Float;

  public final native func TargetAcquisitionDelayTime() -> Float;

  public final native func RecentInputTime() -> Float;

  public final native func IsEnabledForMouse() -> Bool;

  public final native func IsEnabled() -> Bool;
}

public native class AimAssistFinishing_Record extends TweakDBRecord {

  public final native func MaxTime() -> Float;

  public final native func MaxCorrectionYaw() -> Float;

  public final native func VelocityDecreaseActivationFactor() -> Float;

  public final native func InputHistoryTime() -> Float;

  public final native func MaxCorrectionAngle() -> Float;

  public final native func MaxCorrectionPitch() -> Float;

  public final native func IsEnabled() -> Bool;
}

public native class AimAssistMagnetism_Record extends TweakDBRecord {

  public final native func DistanceMultiplier() -> CName;

  public final native func StickInputMagMultiplier() -> CName;

  public final native func MaxStrength() -> Vector2;

  public final native func YawBoundAdditiveForPitchMagnetism() -> Float;

  public final native func PitchBoundAdditiveForYawMagnetism() -> Float;

  public final native func BlendOnTime() -> Float;

  public final native func BlendOffTime() -> Float;

  public final native func MaxTimeTillOffTarget() -> Float;

  public final native func MinTimeTillOffTarget() -> Float;

  public final native func SoftLockTimeToReach() -> Float;

  public final native func FullStickThreshold() -> Float;

  public final native func FullStickYawAngleDisable() -> Float;

  public final native func TargetLostBlendOut() -> Bool;

  public final native func IsEnabled() -> Bool;

  public final native func CheckWeaponEffectiveRange() -> Bool;

  public final native func DisableWithNoInput() -> Bool;
}

public native class AimAssistMelee_Record extends TweakDBRecord {

  public final native func MoveToTargetEnabledAttacks() -> Int32;

  public final native func MoveToTargetSearchDistance() -> Float;

  public final native func MoveToTargetDistanceIntoAttackRange() -> Float;

  public final native func AimSnapOnBlockHit() -> Bool;

  public final native func AimSnapOnAttack() -> Bool;

  public final native func AimSnapOnThrow() -> Bool;

  public final native func AimSnapOnAim() -> Bool;

  public final native func AimSnapOnHit() -> Bool;
}

public native class AimAssistTargetData_Record extends TweakDBRecord {

  public final native func Filters(out outList: array<wref<AimAssistType_Record>>) -> Void;

  public final native func GetFiltersCount() -> Int32;

  public final native func GetFiltersItem(index: Int32) -> wref<AimAssistType_Record>;

  public final native func GetFiltersItemHandle(index: Int32) -> wref<AimAssistType_Record>;

  public final native func FiltersContains(item: wref<AimAssistType_Record>) -> Bool;

  public final native func HeightUp() -> Float;

  public final native func AimSnapAngle() -> Float;

  public final native func HeightDown() -> Float;

  public final native func Width() -> Float;

  public final native func AimSnapPriorityWeight() -> Float;

  public final native func IsForAimMagnetisim() -> Bool;

  public final native func IsForAimSnap() -> Bool;
}

public native class AimAssistType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataAimAssistType;
}

public native class AngleDistanceCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  public final native func AngleDistanceScore() -> Float;

  public final native func CoverLowerMinVerticalAngle() -> Float;

  public final native func MaximumDistance() -> Float;

  public final native func MinThreatsAmountToCheckDistance() -> Int32;

  public final native func CoverProtectionAngleMul() -> Float;

  public final native func ThreatPredictionTime() -> Float;

  public final native func VerticalAngleCooldown() -> Float;

  public final native func ShootingSpotLowerMinVerticalAngle() -> Float;

  public final native func ClosestThreatsAmountToIgnoreDistanceCheck() -> Int32;
}

public native class AngleRange_Record extends SenseShape_Record {

  public final native func Position() -> Vector3;

  public final native func Angle() -> Float;

  public final native func Range() -> Float;

  public final native func HalfHeight() -> Float;
}

public native class Appearance_Record extends TweakDBRecord {

  public final native func Tags() -> array<CName>;

  public final native func GetTagsCount() -> Int32;

  public final native func GetTagsItem(index: Int32) -> CName;

  public final native func TagsContains(item: CName) -> Bool;
}

public native class ApperanceToEthnicities_Record extends TweakDBRecord {

  public final native func Ethnicities(out outList: array<wref<EthnicNames_Record>>) -> Void;

  public final native func GetEthnicitiesCount() -> Int32;

  public final native func GetEthnicitiesItem(index: Int32) -> wref<EthnicNames_Record>;

  public final native func GetEthnicitiesItemHandle(index: Int32) -> wref<EthnicNames_Record>;

  public final native func EthnicitiesContains(item: wref<EthnicNames_Record>) -> Bool;

  public final native func AppearanceName() -> CName;
}

public native class ApperanceToEthnicitiesMap_Record extends TweakDBRecord {

  public final native func Map(out outList: array<wref<ApperanceToEthnicities_Record>>) -> Void;

  public final native func GetMapCount() -> Int32;

  public final native func GetMapItem(index: Int32) -> wref<ApperanceToEthnicities_Record>;

  public final native func GetMapItemHandle(index: Int32) -> wref<ApperanceToEthnicities_Record>;

  public final native func MapContains(item: wref<ApperanceToEthnicities_Record>) -> Bool;
}

public native class ApplyEffectorEffector_Record extends Effector_Record {

  public final native func ApplicationTarget() -> String;

  public final native func EffectorToApply() -> wref<Effector_Record>;

  public final native func EffectorToApplyHandle() -> ref<Effector_Record>;
}

public native class ApplyLightPresetEffector_Record extends Effector_Record {

  public final native func LightPreset() -> wref<LightPreset_Record>;

  public final native func LightPresetHandle() -> ref<LightPreset_Record>;
}

public native class ApplyStatGroupEffector_Record extends Effector_Record {

  public final native func ApplicationTarget() -> String;

  public final native func StatGroup() -> wref<StatModifierGroup_Record>;

  public final native func StatGroupHandle() -> ref<StatModifierGroup_Record>;
}

public native class ApplyStatusEffectEffector_Record extends Effector_Record {

  public final native func ApplicationTarget() -> String;

  public final native func StatusEffect() -> wref<StatusEffect_Record>;

  public final native func StatusEffectHandle() -> ref<StatusEffect_Record>;

  public final native func Count() -> Float;

  public final native func Inverted() -> Bool;

  public final native func RemoveWithEffector() -> Bool;
}

public native class AttachableObject_Record extends SpawnableObject_Record {
}

public native class Attack_Landing_Record extends Attack_GameEffect_Record {

  public final native func FxPackage() -> wref<LandingFxPackage_Record>;

  public final native func FxPackageHandle() -> ref<LandingFxPackage_Record>;
}

public native class Attitude_Record extends TweakDBRecord {

  public final native func Value() -> String;

  public final native func Group1() -> wref<AttitudeGroup_Record>;

  public final native func Group1Handle() -> ref<AttitudeGroup_Record>;

  public final native func Group2() -> wref<AttitudeGroup_Record>;

  public final native func Group2Handle() -> ref<AttitudeGroup_Record>;
}

public native class Attribute_Record extends Stat_Record {

  public final native func Proficiencies(out outList: array<wref<Proficiency_Record>>) -> Void;

  public final native func GetProficienciesCount() -> Int32;

  public final native func GetProficienciesItem(index: Int32) -> wref<Proficiency_Record>;

  public final native func GetProficienciesItemHandle(index: Int32) -> wref<Proficiency_Record>;

  public final native func ProficienciesContains(item: wref<Proficiency_Record>) -> Bool;
}

public native class AvoidLineOfSightSelectionParameters_Record extends CoverSelectionParameters_Record {

  public final native func Angle() -> Float;

  public final native func Multiplier() -> Float;

  public final native func Height() -> Float;

  public final native func Distance() -> Float;
}

public native class BaseDrivingParameters_Record extends TweakDBRecord {

  public final native func Brake() -> wref<VehiclePIDSettings_Record>;

  public final native func BrakeHandle() -> ref<VehiclePIDSettings_Record>;

  public final native func Stopping() -> wref<VehicleStoppingSettings_Record>;

  public final native func StoppingHandle() -> ref<VehicleStoppingSettings_Record>;

  public final native func BoostStats() -> wref<VehicleAIBoostSettings_Record>;

  public final native func BoostStatsHandle() -> ref<VehicleAIBoostSettings_Record>;

  public final native func Accel() -> wref<VehiclePIDSettings_Record>;

  public final native func AccelHandle() -> ref<VehiclePIDSettings_Record>;

  public final native func SteeringReverse() -> wref<VehicleSteeringSettings_Record>;

  public final native func SteeringReverseHandle() -> ref<VehicleSteeringSettings_Record>;

  public final native func Steering() -> wref<VehicleSteeringSettings_Record>;

  public final native func SteeringHandle() -> ref<VehicleSteeringSettings_Record>;

  public final native func MaxVisionDistance() -> Float;

  public final native func WheelTurnSpeed() -> Float;

  public final native func HasPanic() -> Bool;
}

public native class Bounce_Record extends ProjectileCollision_Record {
}

public native class Box_Record extends SenseShape_Record {

  public final native func Min() -> Vector3;

  public final native func Max() -> Vector3;
}

public native class CPOItemCategoryBase_Record extends TweakDBRecord {
}

public native class CPOLoadoutBase_Record extends TweakDBRecord {

  public final native func DisplayName() -> String;

  public final native func Items(out outList: array<wref<InventoryItem_Record>>) -> Void;

  public final native func GetItemsCount() -> Int32;

  public final native func GetItemsItem(index: Int32) -> wref<InventoryItem_Record>;

  public final native func GetItemsItemHandle(index: Int32) -> wref<InventoryItem_Record>;

  public final native func ItemsContains(item: wref<InventoryItem_Record>) -> Bool;
}

public native class CarriableObject_Record extends SpawnableObject_Record {
}

public native class CharacterEntry_Record extends TweakDBRecord {

  public final native func Name() -> CName;

  public final native func Id() -> Int32;
}

public native class CharacterList_Record extends TweakDBRecord {

  public final native func Entries(out outList: array<wref<CharacterEntry_Record>>) -> Void;

  public final native func GetEntriesCount() -> Int32;

  public final native func GetEntriesItem(index: Int32) -> wref<CharacterEntry_Record>;

  public final native func GetEntriesItemHandle(index: Int32) -> wref<CharacterEntry_Record>;

  public final native func EntriesContains(item: wref<CharacterEntry_Record>) -> Bool;
}

public native class ChatterHelperRadius_Record extends TweakDBRecord {

  public final native func MinDistanceToOtherPlayer() -> Float;

  public final native func MaxDistanceToOtherPlayer() -> Float;
}

public native class ChoiceCaptionPartType_Record extends TweakDBRecord {

  public final native func Comment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataChoiceCaptionPartType;
}

public native class ChoiceCaptionTagPart_Record extends ChoiceCaptionPart_Record {

  public final native func TagLocId() -> String;
}

public native class ClearLineOfSightCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  public final native func Cooldown() -> Float;

  public final native func Multiplier() -> Float;

  public final native func ClearLOSDistanceTolerance() -> Float;

  public final native func PreferredActionCount() -> Int32;
}

public native class ClosestToOwnerCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  public final native func PreferredOwnerDistance() -> Float;

  public final native func DistanceToOwnerMultiplier() -> Float;
}

public native class Clothing_Record extends Item_Record {
}

public native class Clothing_inline0_Record extends ConstantStatModifier_Record {
}

public native class Codex_Record extends TweakDBRecord {

  public final native func Entries(out outList: array<wref<CodexRecord_Record>>) -> Void;

  public final native func GetEntriesCount() -> Int32;

  public final native func GetEntriesItem(index: Int32) -> wref<CodexRecord_Record>;

  public final native func GetEntriesItemHandle(index: Int32) -> wref<CodexRecord_Record>;

  public final native func EntriesContains(item: wref<CodexRecord_Record>) -> Bool;
}

public native class CodexRecord_Record extends TweakDBRecord {

  public final native func RecordContent(out outList: array<wref<CodexRecordPart_Record>>) -> Void;

  public final native func GetRecordContentCount() -> Int32;

  public final native func GetRecordContentItem(index: Int32) -> wref<CodexRecordPart_Record>;

  public final native func GetRecordContentItemHandle(index: Int32) -> wref<CodexRecordPart_Record>;

  public final native func RecordContentContains(item: wref<CodexRecordPart_Record>) -> Bool;

  public final native func Tags() -> array<CName>;

  public final native func GetTagsCount() -> Int32;

  public final native func GetTagsItem(index: Int32) -> CName;

  public final native func TagsContains(item: CName) -> Bool;

  public final native func UnlockPrereq() -> CName;

  public final native func UnlockedFromStart() -> Bool;
}

public native class CodexRecordPart_Record extends TweakDBRecord {

  public final native func PartContent() -> String;

  public final native func PartName() -> CName;
}

public native class CompanionDistancePreset_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Distance() -> Float;

  public final native func Tolerance() -> Float;

  public final native func Type() -> gamedataCompanionDistancePreset;
}

public native class CompoundSelectionPreset_Record extends TweakDBRecord {

  public final native func Presets() -> array<String>;

  public final native func GetPresetsCount() -> Int32;

  public final native func GetPresetsItem(index: Int32) -> String;

  public final native func PresetsContains(item: String) -> Bool;

  public final native func GatherRadius() -> Float;
}

public native class ComputerScreenType_Record extends DeviceScreenType_Record {
}

public native class Cone_Record extends SenseShape_Record {

  public final native func Position2() -> Vector3;

  public final native func Position1() -> Vector3;

  public final native func Radius1() -> Float;

  public final native func Radius2() -> Float;
}

public native class CooldownType_Record extends TweakDBRecord {

  public final native func Type() -> CName;
}

public native class CoverHealthCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  public final native func HpMultiplier() -> Float;
}

public native class CoverSelectionPreset_Record extends TweakDBRecord {

  public final native func CombatRing() -> wref<AIRingType_Record>;

  public final native func CombatRingHandle() -> ref<AIRingType_Record>;

  public final native func Scoring() -> array<String>;

  public final native func GetScoringCount() -> Int32;

  public final native func GetScoringItem(index: Int32) -> String;

  public final native func ScoringContains(item: String) -> Bool;

  public final native func PostFiltering() -> array<String>;

  public final native func GetPostFilteringCount() -> Int32;

  public final native func GetPostFilteringItem(index: Int32) -> String;

  public final native func PostFilteringContains(item: String) -> Bool;

  public final native func Filtering() -> array<String>;

  public final native func GetFilteringCount() -> Int32;

  public final native func GetFilteringItem(index: Int32) -> String;

  public final native func FilteringContains(item: String) -> Bool;

  public final native func DismissedCoverTimer() -> Float;

  public final native func GatherRadius() -> Float;

  public final native func UsesLineOfSight() -> Bool;
}

public native class CoverTypeCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  public final native func MaxScore() -> Float;

  public final native func CoverScore() -> Float;

  public final native func ShootingSpotScore() -> Float;
}

public native class Crosshair_Record extends TweakDBRecord {

  public final native func WidgetResourcePath() -> ResRef;
}

public native class CrowdSettingsPackageBase_Record extends TweakDBRecord {

  public final native func Specs(out outList: array<wref<CrowdSlotMovementPatternBase_Record>>) -> Void;

  public final native func GetSpecsCount() -> Int32;

  public final native func GetSpecsItem(index: Int32) -> wref<CrowdSlotMovementPatternBase_Record>;

  public final native func GetSpecsItemHandle(index: Int32) -> wref<CrowdSlotMovementPatternBase_Record>;

  public final native func SpecsContains(item: wref<CrowdSlotMovementPatternBase_Record>) -> Bool;
}

public native class CrowdSlotMovementPatternBase_Record extends TweakDBRecord {

  public final native func Settings() -> wref<CrowdSlotMovementSettingsBase_Record>;

  public final native func SettingsHandle() -> ref<CrowdSlotMovementSettingsBase_Record>;

  public final native func Name() -> CName;
}

public native class CrowdSlotMovementSettingsBase_Record extends TweakDBRecord {

  public final native func MaxStopSpeed() -> Float;

  public final native func DirectionSmoothFactor() -> Float;

  public final native func CurveFactor() -> Float;

  public final native func MinLightDelay() -> Float;

  public final native func RadiusSmoothFactor() -> Float;

  public final native func BumpTriggerSpeedFactor() -> Float;

  public final native func MaxSpeed() -> Float;

  public final native func AvoidanceReserve() -> Float;

  public final native func MaxDeviationFromPath() -> Float;

  public final native func SoftAdheranceMax() -> Float;

  public final native func MoveSpeedType() -> Int32;

  public final native func OverlapTolerance() -> Float;

  public final native func MaxLightDelay() -> Float;

  public final native func Length() -> Float;

  public final native func StopReserve() -> Float;

  public final native func SoftAdheranceMin() -> Float;

  public final native func ReachFactor() -> Float;

  public final native func FenceGapReserve() -> Float;

  public final native func BumpTriggerMaxDistancePlayer() -> Float;

  public final native func MinSpeed() -> Float;

  public final native func BaseRadius() -> Float;

  public final native func AccelerationFactor() -> Float;

  public final native func BumpTriggerRadiusFactor() -> Float;

  public final native func RotationSpeed() -> Float;

  public final native func SurroundDistance() -> Float;

  public final native func BumpTriggerMaxDistanceNPC() -> Float;

  public final native func MaxSpeedTolerance() -> Float;

  public final native func RadiusTopClamp() -> Float;

  public final native func BumpTriggerMinSpeed() -> Float;

  public final native func BrakePressureFactor() -> Float;

  public final native func Acceleration() -> Float;

  public final native func RadiusBottomClamp() -> Float;

  public final native func AbsoluteFrontClamp() -> Float;

  public final native func MinStopSpeed() -> Float;

  public final native func LaneObstacleBuffer() -> Float;

  public final native func Deceleration() -> Float;

  public final native func CurveLimit() -> Float;

  public final native func SpeedStage() -> Bool;

  public final native func DirectionStage() -> Bool;

  public final native func IgnorePlayer() -> Bool;

  public final native func DropItems() -> Bool;

  public final native func IgnoreLights() -> Bool;

  public final native func IgnoreSpeedLimitations() -> Bool;

  public final native func IgnorePedestrians() -> Bool;

  public final native func IgnoreCars() -> Bool;

  public final native func IgnoreRules() -> Bool;

  public final native func IgnoreStatics() -> Bool;
}

public native class CurrencyReward_inline0_Record extends ConstantStatModifier_Record {
}

public native class Curves_Record extends TweakDBRecord {

  public final native func Curves(out outList: array<wref<Curve_Record>>) -> Void;

  public final native func GetCurvesCount() -> Int32;

  public final native func GetCurvesItem(index: Int32) -> wref<Curve_Record>;

  public final native func GetCurvesItemHandle(index: Int32) -> wref<Curve_Record>;

  public final native func CurvesContains(item: wref<Curve_Record>) -> Bool;
}

public native class CyberwareArea_Record extends EquipmentArea_Record {

  public final native func StatModifierGroups(out outList: array<wref<StatModifierGroup_Record>>) -> Void;

  public final native func GetStatModifierGroupsCount() -> Int32;

  public final native func GetStatModifierGroupsItem(index: Int32) -> wref<StatModifierGroup_Record>;

  public final native func GetStatModifierGroupsItemHandle(index: Int32) -> wref<StatModifierGroup_Record>;

  public final native func StatModifierGroupsContains(item: wref<StatModifierGroup_Record>) -> Bool;
}

public native class DefenseMode_Record extends TweakDBRecord {

  public final native func Comment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataDefenseMode;
}

public native class DestructibleObject_Record extends BaseObject_Record {
}

public native class DetectionCurve_Record extends TweakDBRecord {

  public final native func States() -> array<CName>;

  public final native func GetStatesCount() -> Int32;

  public final native func GetStatesItem(index: Int32) -> CName;

  public final native func StatesContains(item: CName) -> Bool;

  public final native func Name() -> CName;

  public final native func MaxDistance() -> Float;
}

public native class DevelopmentPoint_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataDevelopmentPointType;
}

public native class DeviceAreaAttack_Record extends Attack_GameEffect_Record {
}

public native class DeviceContentAssignment_Record extends ContentAssignment_Record {
}

public native class DeviceWidgetDefinition_Record extends WidgetDefinition_Record {
}

public native class DistanceFromOthersCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  public final native func MinimalPreferredDistance() -> Float;

  public final native func MinimalDistance() -> Float;

  public final native func DistanceScoreMultiplier() -> Float;
}

public native class DriveHelperType_Record extends TweakDBRecord {

  public final native func EnumName() -> CName;
}

public native class DriveWheelsAccelerateNoise_Record extends DriveHelper_Record {

  public final native func MaxApplyTime() -> Float;

  public final native func AccelerationBoostMaxSpeed() -> Float;

  public final native func MaxForcesDifference() -> Float;

  public final native func AccelerationBoost() -> Float;

  public final native func MinApplyTime() -> Float;

  public final native func MinForcesDifference() -> Float;

  public final native func MinLongSlipRatio() -> Float;

  public final native func AccelerationBoostReverse() -> Float;

  public final native func AccelerationNoiseMaxSpeed() -> Float;
}

public native class DroneAnimationSetup_Record extends TweakDBRecord {

  public final native func TiltAngleOnSpeed() -> Float;

  public final native func SizeFront() -> Float;

  public final native func SizeBack() -> Float;

  public final native func WalkTiltCoefficient() -> Float;

  public final native func SizeLeft() -> Float;

  public final native func SizeRight() -> Float;

  public final native func Mass() -> Float;

  public final native func SpeedIdleThreshold() -> Float;

  public final native func MassNormalizedCoefficient() -> Float;

  public final native func StartingRecoveryBalance() -> Float;

  public final native func PseudoAcceleration() -> Float;

  public final native func TurnInertiaDamping() -> Float;
}

public native class DynamicDownforceHelper_Record extends DriveHelper_Record {

  public final native func MaxSpeed() -> Float;

  public final native func MaxSpeedFactorGround() -> Float;

  public final native func MinSpeed() -> Float;

  public final native func MaxSpeedFactorAir() -> Float;
}

public native class EnvLight_Record extends TweakDBRecord {

  public final native func Color() -> array<Int32>;

  public final native func GetColorCount() -> Int32;

  public final native func GetColorItem(index: Int32) -> Int32;

  public final native func ColorContains(item: Int32) -> Bool;

  public final native func Intensity() -> Float;

  public final native func Radius() -> Float;

  public final native func Temperature() -> Float;
}

public native class EthnicNames_Record extends TweakDBRecord {

  public final native func Gender() -> wref<Gender_Record>;

  public final native func GenderHandle() -> ref<Gender_Record>;

  public final native func Ethnicity() -> wref<Ethnicity_Record>;

  public final native func EthnicityHandle() -> ref<Ethnicity_Record>;

  public final native func Surnames() -> array<CName>;

  public final native func GetSurnamesCount() -> Int32;

  public final native func GetSurnamesItem(index: Int32) -> CName;

  public final native func SurnamesContains(item: CName) -> Bool;

  public final native func VisualTags() -> array<CName>;

  public final native func GetVisualTagsCount() -> Int32;

  public final native func GetVisualTagsItem(index: Int32) -> CName;

  public final native func VisualTagsContains(item: CName) -> Bool;

  public final native func Names() -> array<CName>;

  public final native func GetNamesCount() -> Int32;

  public final native func GetNamesItem(index: Int32) -> CName;

  public final native func NamesContains(item: CName) -> Bool;

  public final native func NameOrderFormat() -> CName;

  public final native func DisplayName() -> CName;
}

public native class Ethnicity_Record extends TweakDBRecord {

  public final native func Comment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataEthnicity;
}

public native class FacialPreset_Record extends TweakDBRecord {

  public final native func ProfileName() -> CName;

  public final native func UpperFaceBlendAdditive() -> Bool;

  public final native func LowerFaceBlendAdditive() -> Bool;

  public final native func EyesBlendAdditive() -> Bool;
}

public native class FastTravelBinkData_Record extends TweakDBRecord {

  public final native func District() -> wref<District_Record>;

  public final native func DistrictHandle() -> ref<District_Record>;

  public final native func Time() -> wref<Time_Record>;

  public final native func TimeHandle() -> ref<Time_Record>;

  public final native func Weather() -> wref<Weather_Record>;

  public final native func WeatherHandle() -> ref<Weather_Record>;

  public final native func BinkPath() -> ResRef;
}

public native class FastTravelBinksGroup_Record extends TweakDBRecord {

  public final native func BinksData(out outList: array<wref<FastTravelBinkData_Record>>) -> Void;

  public final native func GetBinksDataCount() -> Int32;

  public final native func GetBinksDataItem(index: Int32) -> wref<FastTravelBinkData_Record>;

  public final native func GetBinksDataItemHandle(index: Int32) -> wref<FastTravelBinkData_Record>;

  public final native func BinksDataContains(item: wref<FastTravelBinkData_Record>) -> Bool;
}

public native class FastTravelScreenData_Record extends TweakDBRecord {

  public final native func Time() -> wref<Time_Record>;

  public final native func TimeHandle() -> ref<Time_Record>;

  public final native func District() -> wref<District_Record>;

  public final native func DistrictHandle() -> ref<District_Record>;

  public final native func Weather() -> wref<Weather_Record>;

  public final native func WeatherHandle() -> ref<Weather_Record>;

  public final native func ExtendingResourcePath() -> ResRef;

  public final native func ResourcePath() -> ResRef;
}

public native class FastTravelScreenDataGroup_Record extends TweakDBRecord {

  public final native func ScreensData(out outList: array<wref<FastTravelScreenData_Record>>) -> Void;

  public final native func GetScreensDataCount() -> Int32;

  public final native func GetScreensDataItem(index: Int32) -> wref<FastTravelScreenData_Record>;

  public final native func GetScreensDataItemHandle(index: Int32) -> wref<FastTravelScreenData_Record>;

  public final native func ScreensDataContains(item: wref<FastTravelScreenData_Record>) -> Bool;
}

public native class FocusClue_Record extends ScannableData_Record {
}

public native class Footstep_Record extends TweakDBRecord {

  public final native func FootstepEntityLeft() -> CName;

  public final native func FootstepEntityRight() -> CName;

  public final native func TimeToFade() -> Float;
}

public native class ForceDismembermentEffector_Record extends Effector_Record {

  public final native func WoundType() -> String;

  public final native func BodyPart() -> String;

  public final native func DismembermentChance() -> Float;

  public final native func ShouldKillNPC() -> Bool;

  public final native func SkipDeathAnim() -> Bool;

  public final native func IsCritical() -> Bool;
}

public native class FriendlyTargetAngleDistanceCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  public final native func CoverProtectionAngleMul() -> Float;

  public final native func MinDot() -> Float;

  public final native func AngleDistanceScore() -> Float;

  public final native func PositionChangeThreshold() -> Float;

  public final native func MaxScoreIfInRange() -> Bool;
}

public native class FriendlyTargetDistanceCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  public final native func SpatialHintMults() -> Vector3;

  public final native func FriendlyTargetPreferredDistance() -> Float;

  public final native func FriendlyTargetMaxDistance() -> Float;

  public final native func FriendlyTargetZLimit() -> Float;

  public final native func FriendlyTargetMinDistance() -> Float;

  public final native func DistanceToFriendlyTargetMultiplier() -> Float;
}

public native class FxActionType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataFxActionType;
}

public native class GOGReward_Record extends TweakDBRecord {

  public final native func DisplayName() -> CName;

  public final native func Description() -> CName;

  public final native func IconsAtlasSlot() -> CName;

  public final native func RewardToken() -> Int32;
}

public native class GameplayTagsPrereq_Record extends IPrereq_Record {

  public final native func AllowedTags() -> array<CName>;

  public final native func GetAllowedTagsCount() -> Int32;

  public final native func GetAllowedTagsItem(index: Int32) -> CName;

  public final native func AllowedTagsContains(item: CName) -> Bool;

  public final native func Invert() -> Bool;
}

public native class Gender_Record extends TweakDBRecord {

  public final native func Comment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataGender;
}

public native class GenderEntity_Record extends TweakDBRecord {

  public final native func Gender() -> wref<Gender_Record>;

  public final native func GenderHandle() -> ref<Gender_Record>;

  public final native func MultiplayerEntities() -> array<ResRef>;

  public final native func GetMultiplayerEntitiesCount() -> Int32;

  public final native func GetMultiplayerEntitiesItem(index: Int32) -> ResRef;

  public final native func Entity() -> ResRef;

  public final native func Initial() -> Bool;
}

public native class GenericHighwaySign_Record extends BaseSign_Record {

  public final native func DistrictName() -> String;

  public final native func SubDistrictName() -> String;

  public final native func IconName() -> CName;
}

public native class GenericMetroSign_Record extends BaseSign_Record {

  public final native func SubDistrictName() -> String;

  public final native func StationName() -> String;

  public final native func MetroLineName() -> array<CName>;

  public final native func GetMetroLineNameCount() -> Int32;

  public final native func GetMetroLineNameItem(index: Int32) -> CName;

  public final native func MetroLineNameContains(item: CName) -> Bool;

  public final native func IconName() -> CName;
}

public native class GenericStreetNameSign_Record extends BaseSign_Record {

  public final native func DistrictName() -> String;

  public final native func SubDistrictName() -> String;

  public final native func StreetName() -> String;
}

public native class HUD_Preset_Entry_Record extends TweakDBRecord {

  public final native func HudEntries() -> array<CName>;

  public final native func GetHudEntriesCount() -> Int32;

  public final native func GetHudEntriesItem(index: Int32) -> CName;

  public final native func HudEntriesContains(item: CName) -> Bool;
}

public native class HackingMiniGame_Record extends TweakDBRecord {

  public final native func AllowedTraps(out outList: array<wref<Trap_Record>>) -> Void;

  public final native func GetAllowedTrapsCount() -> Int32;

  public final native func GetAllowedTrapsItem(index: Int32) -> wref<Trap_Record>;

  public final native func GetAllowedTrapsItemHandle(index: Int32) -> wref<Trap_Record>;

  public final native func AllowedTrapsContains(item: wref<Trap_Record>) -> Bool;

  public final native func PredefinedNetworkPrograms() -> array<String>;

  public final native func GetPredefinedNetworkProgramsCount() -> Int32;

  public final native func GetPredefinedNetworkProgramsItem(index: Int32) -> String;

  public final native func PredefinedNetworkProgramsContains(item: String) -> Bool;

  public final native func PredefinedBasicAccess() -> array<String>;

  public final native func GetPredefinedBasicAccessCount() -> Int32;

  public final native func GetPredefinedBasicAccessItem(index: Int32) -> String;

  public final native func PredefinedBasicAccessContains(item: String) -> Bool;

  public final native func PredefinedEnemyPrograms() -> array<String>;

  public final native func GetPredefinedEnemyProgramsCount() -> Int32;

  public final native func GetPredefinedEnemyProgramsItem(index: Int32) -> String;

  public final native func PredefinedEnemyProgramsContains(item: String) -> Bool;

  public final native func Symbols() -> array<String>;

  public final native func GetSymbolsCount() -> Int32;

  public final native func GetSymbolsItem(index: Int32) -> String;

  public final native func SymbolsContains(item: String) -> Bool;

  public final native func PredefinedGrid() -> array<String>;

  public final native func GetPredefinedGridCount() -> Int32;

  public final native func GetPredefinedGridItem(index: Int32) -> String;

  public final native func PredefinedGridContains(item: String) -> Bool;

  public final native func PredefinedCyberdeckPrograms() -> array<String>;

  public final native func GetPredefinedCyberdeckProgramsCount() -> Int32;

  public final native func GetPredefinedCyberdeckProgramsItem(index: Int32) -> String;

  public final native func PredefinedCyberdeckProgramsContains(item: String) -> Bool;

  public final native func SymbolProbabilities() -> array<String>;

  public final native func GetSymbolProbabilitiesCount() -> Int32;

  public final native func GetSymbolProbabilitiesItem(index: Int32) -> String;

  public final native func SymbolProbabilitiesContains(item: String) -> Bool;

  public final native func SymbolProbabilitiesAlternative() -> array<String>;

  public final native func GetSymbolProbabilitiesAlternativeCount() -> Int32;

  public final native func GetSymbolProbabilitiesAlternativeItem(index: Int32) -> String;

  public final native func SymbolProbabilitiesAlternativeContains(item: String) -> Bool;

  public final native func NetworkLevel() -> Int32;

  public final native func EnemyNetrunnerLevel() -> Int32;

  public final native func Dimension() -> Int32;

  public final native func GameType() -> Int32;

  public final native func InitialTimer() -> Int32;

  public final native func BufferModifier() -> Int32;

  public final native func HiddenCellsProbability() -> Int32;

  public final native func HasEnemyNetrunner() -> Bool;

  public final native func HasHiddenCells() -> Bool;

  public final native func HasInitialTimer() -> Bool;

  public final native func Officer() -> Bool;
}

public native class HandbrakeFrictionModifier_Record extends DriveHelper_Record {

  public final native func BlendOutTime() -> Float;

  public final native func RearWheelsLongFrictionCoef() -> Float;

  public final native func RearWheelsLatFrictionCoef() -> Float;

  public final native func AdditionalBrakeForLongUse() -> Float;

  public final native func PostHandbrakeTractionBoost() -> Float;
}

public native class HomingParameters_Record extends TweakDBRecord {

  public final native func AngleInVerticalPlane() -> Float;

  public final native func HalfLeanAngle() -> Float;

  public final native func AngleInHitPlane() -> Float;

  public final native func EndLeanAngle() -> Float;

  public final native func BendFactor() -> Float;

  public final native func ReturnTimeMargin() -> Float;

  public final native func BendTimeRatio() -> Float;

  public final native func InterpolationTimeRatio() -> Float;

  public final native func StartVelocity() -> Float;

  public final native func LinearTimeRatio() -> Float;

  public final native func SnapRadius() -> Float;

  public final native func AngleInterpolationDuration() -> Float;

  public final native func Accuracy() -> Float;

  public final native func ShouldRotate() -> Bool;
}

public native class IconsGeneratorContext_Record extends TweakDBRecord {

  public final native func MalePlayerAnimSet() -> ResRef;

  public final native func FemalePlayerAnimSet() -> ResRef;
}

public native class ImprovementRelation_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataImprovementRelation;
}

public native class InAirGravityModifier_Record extends DriveHelper_Record {

  public final native func SmoothingFactor() -> Float;

  public final native func BaseAddedGravity() -> Float;

  public final native func MinDriveSpeed() -> Float;

  public final native func MaxDriveSpeed() -> Float;

  public final native func DriveSpeedAddedGravity() -> Float;

  public final native func ZVelReductionStart() -> Float;

  public final native func ZVelReductionEnd() -> Float;
}

public native class InitLoadingScreen_Record extends TweakDBRecord {

  public final native func FirstAnimLibraryName() -> CName;

  public final native func SecondAnimLibraryName() -> CName;

  public final native func FirstAnimName() -> CName;

  public final native func ThirdAnimLibraryName() -> CName;

  public final native func ThirdAnimName() -> CName;

  public final native func MainMenuResource() -> ResRef;

  public final native func LoadingScreenResource() -> ResRef;

  public final native func SecondAnimName() -> CName;

  public final native func MainMenuLibraryName() -> CName;

  public final native func LoopAnimName() -> CName;

  public final native func MainMenuAnimName() -> CName;

  public final native func MainMenuLoopAnimName() -> CName;

  public final native func VoTrackAnimName() -> CName;
}

public native class InventoryItemGroup_Record extends TweakDBRecord {

  public final native func Items(out outList: array<wref<InventoryItem_Record>>) -> Void;

  public final native func GetItemsCount() -> Int32;

  public final native func GetItemsItem(index: Int32) -> wref<InventoryItem_Record>;

  public final native func GetItemsItemHandle(index: Int32) -> wref<InventoryItem_Record>;

  public final native func ItemsContains(item: wref<InventoryItem_Record>) -> Bool;
}

public native class ItemArrayQuery_Record extends ItemQuery_Record {

  public final native func MinItems() -> Int32;

  public final native func MaxItems() -> Int32;
}

public native class ItemCreationPrereq_Record extends StatPrereq_Record {
}

public native class ItemDropSettings_Record extends TweakDBRecord {

  public final native func DesiredAngularVelocity() -> Float;

  public final native func DesiredInitialRotation() -> Float;
}

public native class ItemPartConnection_Record extends TweakDBRecord {

  public final native func AttachmentSlot() -> wref<AttachmentSlot_Record>;

  public final native func AttachmentSlotHandle() -> ref<AttachmentSlot_Record>;

  public final native func Parent() -> Int32;

  public final native func Child() -> Int32;
}

public native class ItemQueryElement_Record extends LootTableElement_Record {

  public final native func Query() -> wref<ItemQuery_Record>;

  public final native func QueryHandle() -> ref<ItemQuery_Record>;
}

public native class ItemRequiredSlot_Record extends TweakDBRecord {

  public final native func AttachmentSlot() -> wref<AttachmentSlot_Record>;

  public final native func AttachmentSlotHandle() -> ref<AttachmentSlot_Record>;

  public final native func Tags() -> array<CName>;

  public final native func GetTagsCount() -> Int32;

  public final native func GetTagsItem(index: Int32) -> CName;

  public final native func TagsContains(item: CName) -> Bool;
}

public native class ItemStructure_Record extends TweakDBRecord {

  public final native func EnumName() -> CName;

  public final native func EnumComment() -> CName;

  public final native func Type() -> gamedataItemStructure;
}

public native class ItemsFactoryAppearanceSuffixBase_Record extends TweakDBRecord {

  public final native func ScriptedSystem() -> CName;

  public final native func ScriptedFunction() -> CName;

  public final native func InstantSwitch() -> Bool;
}

public native class ItemsFactoryAppearanceSuffixOrder_Record extends TweakDBRecord {

  public final native func AppearanceSuffixes(out outList: array<wref<ItemsFactoryAppearanceSuffixBase_Record>>) -> Void;

  public final native func GetAppearanceSuffixesCount() -> Int32;

  public final native func GetAppearanceSuffixesItem(index: Int32) -> wref<ItemsFactoryAppearanceSuffixBase_Record>;

  public final native func GetAppearanceSuffixesItemHandle(index: Int32) -> wref<ItemsFactoryAppearanceSuffixBase_Record>;

  public final native func AppearanceSuffixesContains(item: wref<ItemsFactoryAppearanceSuffixBase_Record>) -> Bool;
}

public native class JournalIcon_Record extends UIIcon_Record {
}

public native class KeepCurrentCoverCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  public final native func KeepCoverBonus() -> Float;
}

public native class LandingFxMaterial_Record extends TweakDBRecord {

  public final native func Material() -> wref<Material_Record>;

  public final native func MaterialHandle() -> ref<Material_Record>;

  public final native func Effect() -> ResRef;
}

public native class LandingFxPackage_Record extends TweakDBRecord {

  public final native func Materials(out outList: array<wref<LandingFxMaterial_Record>>) -> Void;

  public final native func GetMaterialsCount() -> Int32;

  public final native func GetMaterialsItem(index: Int32) -> wref<LandingFxMaterial_Record>;

  public final native func GetMaterialsItemHandle(index: Int32) -> wref<LandingFxMaterial_Record>;

  public final native func MaterialsContains(item: wref<LandingFxMaterial_Record>) -> Bool;
}

public native class Layout_Record extends TweakDBRecord {

  public final native func EnumName() -> CName;

  public final native func LibraryPath() -> ResRef;
}

public native class LinearAccuracy_Record extends Accuracy_Record {

  public final native func Duration() -> Float;
}

public native class LoadingTipsGroup_Record extends TweakDBRecord {

  public final native func HintLocalizationKeys() -> array<CName>;

  public final native func GetHintLocalizationKeysCount() -> Int32;

  public final native func GetHintLocalizationKeysItem(index: Int32) -> CName;

  public final native func HintLocalizationKeysContains(item: CName) -> Bool;

  public final native func UnlockingFact() -> CName;
}

public native class LocomotionMode_Record extends TweakDBRecord {

  public final native func Comment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataLocomotionMode;
}

public native class LootItem_Record extends LootTableElement_Record {

  public final native func ItemID() -> wref<Item_Record>;

  public final native func ItemIDHandle() -> ref<Item_Record>;
}

public native class LootTable_Record extends TweakDBRecord {

  public final native func LootGenerationType() -> String;

  public final native func LootItems(out outList: array<wref<LootItem_Record>>) -> Void;

  public final native func GetLootItemsCount() -> Int32;

  public final native func GetLootItemsItem(index: Int32) -> wref<LootItem_Record>;

  public final native func GetLootItemsItemHandle(index: Int32) -> wref<LootItem_Record>;

  public final native func LootItemsContains(item: wref<LootItem_Record>) -> Bool;

  public final native func Queries(out outList: array<wref<ItemQueryElement_Record>>) -> Void;

  public final native func GetQueriesCount() -> Int32;

  public final native func GetQueriesItem(index: Int32) -> wref<ItemQueryElement_Record>;

  public final native func GetQueriesItemHandle(index: Int32) -> wref<ItemQueryElement_Record>;

  public final native func QueriesContains(item: wref<ItemQueryElement_Record>) -> Bool;

  public final native func LootTableInclusions(out outList: array<wref<LootTable_Record>>) -> Void;

  public final native func GetLootTableInclusionsCount() -> Int32;

  public final native func GetLootTableInclusionsItem(index: Int32) -> wref<LootTable_Record>;

  public final native func GetLootTableInclusionsItemHandle(index: Int32) -> wref<LootTable_Record>;

  public final native func LootTableInclusionsContains(item: wref<LootTable_Record>) -> Bool;

  public final native func MaxItemsToLoot() -> Int32;

  public final native func MinItemsToLoot() -> Int32;
}

public native class MappinClampingSettings_Record extends TweakDBRecord {

  public final native func EllipseOffset() -> Vector2;

  public final native func EllipseSize() -> Vector2;

  public final native func CustomTopRightEllipseSize() -> Vector2;

  public final native func CustomTopRightEllipseOffset() -> Vector2;

  public final native func CustomBottomRightEllipseOffset() -> Vector2;

  public final native func CustomTopLeftEllipseOffset() -> Vector2;

  public final native func ClampingRectangleRightAndBottom() -> Vector2;

  public final native func CustomBottomRightEllipseSize() -> Vector2;

  public final native func CustomTopLeftEllipseSize() -> Vector2;

  public final native func ClampingRectangleLeftAndTop() -> Vector2;

  public final native func CustomBottomLeftEllipseSize() -> Vector2;

  public final native func CustomBottomLeftEllipseOffset() -> Vector2;

  public final native func EllipseShapeSize() -> Vector2;

  public final native func MinimumClampPercent() -> Float;

  public final native func ClampSmoothing() -> Float;

  public final native func CustomTopLeftEllipse() -> Bool;

  public final native func UseSpecialShapeLogic() -> Bool;

  public final native func CustomTopRightEllipse() -> Bool;

  public final native func CustomBottomLeftEllipse() -> Bool;

  public final native func DisableTopRightEllipse() -> Bool;

  public final native func CustomBottomRightEllipse() -> Bool;

  public final native func DisableBottomRightEllipse() -> Bool;

  public final native func DisableBottomLeftEllipse() -> Bool;

  public final native func DisableTopLeftEllipse() -> Bool;

  public final native func UseEllipseShape() -> Bool;
}

public native class MappinDefinition_Record extends Base_MappinDefinition_Record {

  public final native func PossibleVariants(out outList: array<wref<MappinVariant_Record>>) -> Void;

  public final native func GetPossibleVariantsCount() -> Int32;

  public final native func GetPossibleVariantsItem(index: Int32) -> wref<MappinVariant_Record>;

  public final native func GetPossibleVariantsItemHandle(index: Int32) -> wref<MappinVariant_Record>;

  public final native func PossibleVariantsContains(item: wref<MappinVariant_Record>) -> Bool;
}

public native class MappinPhase_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataMappinPhase;
}

public native class MappinPhaseDefinition_Record extends TweakDBRecord {

  public final native func Phase() -> wref<MappinPhase_Record>;

  public final native func PhaseHandle() -> ref<MappinPhase_Record>;

  public final native func Variant() -> wref<MappinVariant_Record>;

  public final native func VariantHandle() -> ref<MappinVariant_Record>;
}

public native class MappinUICustomOpacityParams_Record extends TweakDBRecord {

  public final native func DistanceWhenFullyVisible() -> Float;

  public final native func VisibilityConeStartAngle() -> Float;

  public final native func DistanceWhenFullyHidden() -> Float;

  public final native func VisibilityConeEndAngle() -> Float;

  public final native func VisibilityConeMaximumOpacity() -> Float;
}

public native class MappinUIGlobalProfile_Record extends TweakDBRecord {

  public final native func NameplateVisibleInTier() -> array<Bool>;

  public final native func GetNameplateVisibleInTierCount() -> Int32;

  public final native func GetNameplateVisibleInTierItem(index: Int32) -> Bool;

  public final native func NameplateVisibleInTierContains(item: Bool) -> Bool;

  public final native func VerticalRelationVisibleRangeMin() -> Float;

  public final native func VerticalRelationTolerance() -> Float;

  public final native func VerticalRelationVisibleRangeMax() -> Float;

  public final native func GpsPortalIconScale() -> Float;

  public final native func CompletedPOIOpacity() -> Float;

  public final native func NameplateVisibleInBraindance() -> Bool;
}

public native class MappinUIParamGroup_Record extends TweakDBRecord {

  public final native func MinFactor() -> Float;

  public final native func MaxValue() -> Float;

  public final native func ValueOffset() -> Float;

  public final native func MaxFactor() -> Float;

  public final native func MinValue() -> Float;

  public final native func QuadraticPeakMultiplier() -> Float;

  public final native func Quadratic() -> Bool;
}

public native class MappinUISettings_Record extends MappinUIRuntimeProfile_Record {

  public final native func CompletedPOIOpacity() -> Float;

  public final native func ShowInTier3() -> Bool;
}

public native class MappinUISpawnProfile_Record extends TweakDBRecord {

  public final native func SpawnDistance() -> Float;

  public final native func DespawnDistance() -> Float;
}

public native class MappinVariant_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataMappinVariant;
}

public native class Material_Record extends TweakDBRecord {

  public final native func Name() -> CName;
}

public native class MaterialFx_Record extends TweakDBRecord {

  public final native func Impact_reflected_effect() -> array<ResRef>;

  public final native func GetImpact_reflected_effectCount() -> Int32;

  public final native func GetImpact_reflected_effectItem(index: Int32) -> ResRef;

  public final native func Impact_dismemberment_piercing() -> array<ResRef>;

  public final native func GetImpact_dismemberment_piercingCount() -> Int32;

  public final native func GetImpact_dismemberment_piercingItem(index: Int32) -> ResRef;

  public final native func Impact_main_effect() -> array<ResRef>;

  public final native func GetImpact_main_effectCount() -> Int32;

  public final native func GetImpact_main_effectItem(index: Int32) -> ResRef;

  public final native func Impact_pierce_splatter_near() -> array<ResRef>;

  public final native func GetImpact_pierce_splatter_nearCount() -> Int32;

  public final native func GetImpact_pierce_splatter_nearItem(index: Int32) -> ResRef;

  public final native func Impact_decal() -> array<ResRef>;

  public final native func GetImpact_decalCount() -> Int32;

  public final native func GetImpact_decalItem(index: Int32) -> ResRef;

  public final native func Impact_pierce_decal() -> array<ResRef>;

  public final native func GetImpact_pierce_decalCount() -> Int32;

  public final native func GetImpact_pierce_decalItem(index: Int32) -> ResRef;

  public final native func Impact_pierce_splatter_far() -> array<ResRef>;

  public final native func GetImpact_pierce_splatter_farCount() -> Int32;

  public final native func GetImpact_pierce_splatter_farItem(index: Int32) -> ResRef;

  public final native func Impact_pierce_effect() -> array<ResRef>;

  public final native func GetImpact_pierce_effectCount() -> Int32;

  public final native func GetImpact_pierce_effectItem(index: Int32) -> ResRef;

  public final native func Pierce_near_distance() -> Float;

  public final native func Pierce_far_distance() -> Float;

  public final native func Reflected_angle_max() -> Float;

  public final native func Pierce_enter() -> Bool;

  public final native func Pierce_exit() -> Bool;
}

public native class MetaQuest_Record extends TweakDBRecord {

  public final native func EnumName() -> String;

  public final native func EnumComment() -> String;

  public final native func Type() -> gamedataMetaQuest;
}

public native class MiniGame_AllSymbols_Record extends TweakDBRecord {

  public final native func SymbolsWithRarity(out outList: array<wref<MiniGame_SymbolsWithRarity_Record>>) -> Void;

  public final native func GetSymbolsWithRarityCount() -> Int32;

  public final native func GetSymbolsWithRarityItem(index: Int32) -> wref<MiniGame_SymbolsWithRarity_Record>;

  public final native func GetSymbolsWithRarityItemHandle(index: Int32) -> wref<MiniGame_SymbolsWithRarity_Record>;

  public final native func SymbolsWithRarityContains(item: wref<MiniGame_SymbolsWithRarity_Record>) -> Bool;
}

public native class MiniGame_AllSymbols_inline0_Record extends MiniGame_SymbolsWithRarity_Record {
}

public native class MiniGame_AllSymbols_inline1_Record extends MiniGame_SymbolsWithRarity_Record {
}

public native class MiniGame_AllSymbols_inline2_Record extends MiniGame_SymbolsWithRarity_Record {
}

public native class MiniGame_AllSymbols_inline3_Record extends MiniGame_SymbolsWithRarity_Record {
}

public native class MiniGame_AllSymbols_inline4_Record extends MiniGame_SymbolsWithRarity_Record {
}

public native class MiniGame_Trap_Record extends TweakDBRecord {

  public final native func TrapType() -> wref<MinigameTrapType_Record>;

  public final native func TrapTypeHandle() -> ref<MinigameTrapType_Record>;

  public final native func TrapIcon() -> wref<UIIcon_Record>;

  public final native func TrapIconHandle() -> ref<UIIcon_Record>;

  public final native func TrapDescription() -> CName;

  public final native func TrapName() -> CName;

  public final native func SpawnProbability() -> Float;

  public final native func NegativeTrap() -> Bool;
}

public native class MinigameActionType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;
}

public native class MinigameCategory_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;
}

public native class MinigameTrapType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;
}

public native class Minigame_Def_Record extends TweakDBRecord {

  public final native func DefaultTrap() -> wref<MiniGame_Trap_Record>;

  public final native func DefaultTrapHandle() -> ref<MiniGame_Trap_Record>;

  public final native func OverrideProgramsList(out outList: array<wref<Program_Record>>) -> Void;

  public final native func GetOverrideProgramsListCount() -> Int32;

  public final native func GetOverrideProgramsListItem(index: Int32) -> wref<Program_Record>;

  public final native func GetOverrideProgramsListItemHandle(index: Int32) -> wref<Program_Record>;

  public final native func OverrideProgramsListContains(item: wref<Program_Record>) -> Bool;

  public final native func AdditionalProgramsList(out outList: array<wref<Program_Record>>) -> Void;

  public final native func GetAdditionalProgramsListCount() -> Int32;

  public final native func GetAdditionalProgramsListItem(index: Int32) -> wref<Program_Record>;

  public final native func GetAdditionalProgramsListItemHandle(index: Int32) -> wref<Program_Record>;

  public final native func AdditionalProgramsListContains(item: wref<Program_Record>) -> Bool;

  public final native func ForbiddenProgramsList(out outList: array<wref<Program_Record>>) -> Void;

  public final native func GetForbiddenProgramsListCount() -> Int32;

  public final native func GetForbiddenProgramsListItem(index: Int32) -> wref<Program_Record>;

  public final native func GetForbiddenProgramsListItemHandle(index: Int32) -> wref<Program_Record>;

  public final native func ForbiddenProgramsListContains(item: wref<Program_Record>) -> Bool;

  public final native func GridTraps(out outList: array<wref<RowTraps_Record>>) -> Void;

  public final native func GetGridTrapsCount() -> Int32;

  public final native func GetGridTrapsItem(index: Int32) -> wref<RowTraps_Record>;

  public final native func GetGridTrapsItemHandle(index: Int32) -> wref<RowTraps_Record>;

  public final native func GridTrapsContains(item: wref<RowTraps_Record>) -> Bool;

  public final native func GridSymbols(out outList: array<wref<RowSymbols_Record>>) -> Void;

  public final native func GetGridSymbolsCount() -> Int32;

  public final native func GetGridSymbolsItem(index: Int32) -> wref<RowSymbols_Record>;

  public final native func GetGridSymbolsItemHandle(index: Int32) -> wref<RowSymbols_Record>;

  public final native func GridSymbolsContains(item: wref<RowSymbols_Record>) -> Bool;

  public final native func BufferFullExitText() -> CName;

  public final native func TimeOutExitText() -> CName;

  public final native func GenericExitText() -> CName;

  public final native func SuccessExitText() -> CName;

  public final native func GreatSuccessExitText() -> CName;

  public final native func FailExitText() -> CName;

  public final native func CanceledExitText() -> CName;

  public final native func ExtraDifficulty() -> Float;

  public final native func GridSize() -> Int32;

  public final native func OverlapProbability() -> Float;

  public final native func TrapsProbability() -> Float;

  public final native func TimeLimit() -> Float;

  public final native func BufferSize() -> Int32;

  public final native func UseProgression() -> Bool;

  public final native func SaveSeed() -> Bool;

  public final native func NoTraps() -> Bool;
}

public native class ModifyStatPoolModifierEffector_Record extends Effector_Record {

  public final native func ModificationType() -> String;

  public final native func StatPoolType() -> String;

  public final native func PoolModifier() -> wref<PoolValueModifier_Record>;

  public final native func PoolModifierHandle() -> ref<PoolValueModifier_Record>;
}

public native class MovementParam_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func MaxSpeed() -> Float;

  public final native func Acceleration() -> Float;

  public final native func Deceleration() -> Float;

  public final native func RotationSpeed() -> Float;

  public final native func Type() -> gamedataMovementType;
}

public native class MovementParams_Record extends TweakDBRecord {

  public final native func Params(out outList: array<wref<MovementParam_Record>>) -> Void;

  public final native func GetParamsCount() -> Int32;

  public final native func GetParamsItem(index: Int32) -> wref<MovementParam_Record>;

  public final native func GetParamsItemHandle(index: Int32) -> wref<MovementParam_Record>;

  public final native func ParamsContains(item: wref<MovementParam_Record>) -> Bool;
}

public native class MultiPrereq_Record extends IPrereq_Record {

  public final native func NestedPrereqs(out outList: array<wref<IPrereq_Record>>) -> Void;

  public final native func GetNestedPrereqsCount() -> Int32;

  public final native func GetNestedPrereqsItem(index: Int32) -> wref<IPrereq_Record>;

  public final native func GetNestedPrereqsItemHandle(index: Int32) -> wref<IPrereq_Record>;

  public final native func NestedPrereqsContains(item: wref<IPrereq_Record>) -> Bool;

  public final native func AggregationType() -> CName;
}

public native class MutablePoolValueModifier_Record extends PoolValueModifier_Record {

  public final native func EnabledMod() -> wref<StatModifier_Record>;

  public final native func EnabledModHandle() -> ref<StatModifier_Record>;

  public final native func DelayOnChangeMod() -> wref<StatModifier_Record>;

  public final native func DelayOnChangeModHandle() -> ref<StatModifier_Record>;

  public final native func StartDelayMods(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetStartDelayModsCount() -> Int32;

  public final native func GetStartDelayModsItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetStartDelayModsItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func StartDelayModsContains(item: wref<StatModifier_Record>) -> Bool;

  public final native func RangeEndMods(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetRangeEndModsCount() -> Int32;

  public final native func GetRangeEndModsItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetRangeEndModsItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func RangeEndModsContains(item: wref<StatModifier_Record>) -> Bool;

  public final native func RangeBeginMods(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetRangeBeginModsCount() -> Int32;

  public final native func GetRangeBeginModsItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetRangeBeginModsItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func RangeBeginModsContains(item: wref<StatModifier_Record>) -> Bool;

  public final native func ValuePerSecMods(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetValuePerSecModsCount() -> Int32;

  public final native func GetValuePerSecModsItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetValuePerSecModsItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func ValuePerSecModsContains(item: wref<StatModifier_Record>) -> Bool;
}

public native class NPCBehaviorState_Record extends TweakDBRecord {

  public final native func Comment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataNPCBehaviorState;
}

public native class NPCHighLevelState_Record extends TweakDBRecord {

  public final native func Comment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataNPCHighLevelState;
}

public native class NPCQuestAffiliation_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataNPCQuestAffiliation;
}

public native class NPCStanceState_Record extends TweakDBRecord {

  public final native func Comment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataNPCStanceState;
}

public native class NPCTypePrereq_Record extends IPrereq_Record {

  public final native func AllowedTypes(out outList: array<wref<NPCType_Record>>) -> Void;

  public final native func GetAllowedTypesCount() -> Int32;

  public final native func GetAllowedTypesItem(index: Int32) -> wref<NPCType_Record>;

  public final native func GetAllowedTypesItemHandle(index: Int32) -> wref<NPCType_Record>;

  public final native func AllowedTypesContains(item: wref<NPCType_Record>) -> Bool;

  public final native func Invert() -> Bool;
}

public native class NPCUpperBodyState_Record extends TweakDBRecord {

  public final native func Comment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataNPCUpperBodyState;
}

public native class NewsFeedTitle_Record extends TweakDBRecord {

  public final native func TitlesList() -> array<CName>;

  public final native func GetTitlesListCount() -> Int32;

  public final native func GetTitlesListItem(index: Int32) -> CName;

  public final native func TitlesListContains(item: CName) -> Bool;
}

public native class NonLinearAccuracy_Record extends Accuracy_Record {

  public final native func Exponent() -> Float;

  public final native func TimeFactor() -> Float;
}

public native class NumberPlate_Record extends LCDScreen_Record {
}

public native class ObjectActionGameplayCategory_Record extends ScannableData_Record {
}

public native class OffMeshLinkTag_Record extends TweakDBRecord {

  public final native func Prerequisites(out outList: array<wref<IPrereq_Record>>) -> Void;

  public final native func GetPrerequisitesCount() -> Int32;

  public final native func GetPrerequisitesItem(index: Int32) -> wref<IPrereq_Record>;

  public final native func GetPrerequisitesItemHandle(index: Int32) -> wref<IPrereq_Record>;

  public final native func PrerequisitesContains(item: wref<IPrereq_Record>) -> Bool;

  public final native func Tag() -> CName;

  public final native func IsAllowed() -> Bool;
}

public native class OwnerAngleCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  public final native func MinAngle() -> Float;

  public final native func MaxAngle() -> Float;
}

public native class OwnerDistanceCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  public final native func OwnerMaxDistance() -> Float;

  public final native func DistanceToOwnerMultiplier() -> Float;

  public final native func OwnerPreferredDistance() -> Float;

  public final native func OwnerMinDistance() -> Float;
}

public native class OwnerThreatCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  public final native func OwnerThreatCoverAngle() -> Float;
}

public native class ParentAttachmentType_Record extends TweakDBRecord {

  public final native func Name() -> String;

  public final native func Type() -> gamedataParentAttachmentType;
}

public native class ParticleDamage_Record extends TweakDBRecord {

  public final native func Attack() -> wref<Attack_Record>;

  public final native func AttackHandle() -> ref<Attack_Record>;

  public final native func ParticlePath() -> ResRef;

  public final native func Cooldown() -> Float;
}

public native class PassiveProficiencyBonusUIData_Record extends TweakDBRecord {

  public final native func IntValues() -> array<Int32>;

  public final native func GetIntValuesCount() -> Int32;

  public final native func GetIntValuesItem(index: Int32) -> Int32;

  public final native func IntValuesContains(item: Int32) -> Bool;

  public final native func FloatValues() -> array<Float>;

  public final native func GetFloatValuesCount() -> Int32;

  public final native func GetFloatValuesItem(index: Int32) -> Float;

  public final native func FloatValuesContains(item: Float) -> Bool;

  public final native func Stats(out outList: array<wref<Stat_Record>>) -> Void;

  public final native func GetStatsCount() -> Int32;

  public final native func GetStatsItem(index: Int32) -> wref<Stat_Record>;

  public final native func GetStatsItemHandle(index: Int32) -> wref<Stat_Record>;

  public final native func StatsContains(item: wref<Stat_Record>) -> Bool;

  public final native func Loc_name_key() -> CName;

  public final native func Loc_desc_key() -> CName;
}

public native class PathLengthCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  public final native func MaximumRatio() -> Float;

  public final native func MinPathLengthToPerform() -> Float;

  public final native func Multiplier() -> Float;

  public final native func UseFriendlyTargetAsStart() -> Bool;

  public final native func DoorInvalidatesPath() -> Bool;
}

public native class PathSecurityCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  public final native func ThreatHalfSightAngle() -> Float;

  public final native func PathSampleDist() -> Float;

  public final native func Multiplier() -> Float;

  public final native func ThreatSightRange() -> Float;
}

public native class PerkLevelUIData_Record extends TweakDBRecord {

  public final native func IntValues() -> array<Int32>;

  public final native func GetIntValuesCount() -> Int32;

  public final native func GetIntValuesItem(index: Int32) -> Int32;

  public final native func IntValuesContains(item: Int32) -> Bool;

  public final native func FloatValues() -> array<Float>;

  public final native func GetFloatValuesCount() -> Int32;

  public final native func GetFloatValuesItem(index: Int32) -> Float;

  public final native func FloatValuesContains(item: Float) -> Bool;

  public final native func NameValues() -> array<CName>;

  public final native func GetNameValuesCount() -> Int32;

  public final native func GetNameValuesItem(index: Int32) -> CName;

  public final native func NameValuesContains(item: CName) -> Bool;
}

public native class PerkUtility_Record extends TweakDBRecord {

  public final native func EnumName() -> String;

  public final native func EnumComment() -> String;

  public final native func UtilityType() -> gamedataPerkUtility;
}

public native class PhotoModeBackground_Record extends PhotoModeItem_Record {

  public final native func TextureName() -> ResRef;
}

public native class PhotoModeEffect_Record extends PhotoModeItem_Record {

  public final native func LutPath() -> CName;

  public final native func HdrLutPath() -> CName;
}

public native class PhotoModeFace_Record extends PhotoModeItem_Record {

  public final native func FaceId() -> Int32;
}

public native class PhotoModeFrame_Record extends PhotoModeItem_Record {

  public final native func ImagePartsNames() -> array<CName>;

  public final native func GetImagePartsNamesCount() -> Int32;

  public final native func GetImagePartsNamesItem(index: Int32) -> CName;

  public final native func ImagePartsNamesContains(item: CName) -> Bool;

  public final native func Color() -> array<Int32>;

  public final native func GetColorCount() -> Int32;

  public final native func GetColorItem(index: Int32) -> Int32;

  public final native func ColorContains(item: Int32) -> Bool;

  public final native func AtlasName() -> ResRef;

  public final native func LibraryItemName() -> CName;

  public final native func FlipVertical() -> Bool;

  public final native func FlipHorizontal() -> Bool;
}

public native class PhotoModePose_Record extends PhotoModeItem_Record {

  public final native func DisableLookAtForGarmentTags() -> array<CName>;

  public final native func GetDisableLookAtForGarmentTagsCount() -> Int32;

  public final native func GetDisableLookAtForGarmentTagsItem(index: Int32) -> CName;

  public final native func DisableLookAtForGarmentTagsContains(item: CName) -> Bool;

  public final native func FilterOutForGarmentTags() -> array<CName>;

  public final native func GetFilterOutForGarmentTagsCount() -> Int32;

  public final native func GetFilterOutForGarmentTagsItem(index: Int32) -> CName;

  public final native func FilterOutForGarmentTagsContains(item: CName) -> Bool;

  public final native func LookAtPreset() -> CName;

  public final native func AnimationName() -> CName;

  public final native func AcceptedWeaponConfig() -> CName;

  public final native func Category() -> CName;

  public final native func PoseStateConfig() -> CName;

  public final native func PositionOffset() -> Vector3;

  public final native func PoseSize() -> Float;

  public final native func AllowMoveUpDown() -> Bool;
}

public native class PhotoModePoseCategory_Record extends TweakDBRecord {

  public final native func CategoryName() -> CName;

  public final native func DisplayName() -> CName;
}

public native class PhotoModeSticker_Record extends PhotoModeItem_Record {

  public final native func ImagePartName() -> CName;

  public final native func AtlasName() -> ResRef;
}

public native class Pierce_Record extends ProjectileCollision_Record {
}

public native class Ping_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func WorldIconName() -> CName;

  public final native func MinimapIconName() -> CName;

  public final native func VoTriggerName() -> CName;

  public final native func EnumName() -> CName;

  public final native func MaxCount() -> Int32;

  public final native func LifeSpan() -> Float;

  public final native func Type() -> gamedataPingType;
}

public native class PlayerPossesion_Record extends TweakDBRecord {

  public final native func EnumName() -> String;

  public final native func EnumComment() -> String;

  public final native func Type() -> gamedataPlayerPossesion;
}

public native class Prereq_Record extends TweakDBRecord {

  public final native func Name() -> String;

  public final native func DevNotes() -> String;

  public final native func Checks(out outList: array<wref<PrereqCheck_Record>>) -> Void;

  public final native func GetChecksCount() -> Int32;

  public final native func GetChecksItem(index: Int32) -> wref<PrereqCheck_Record>;

  public final native func GetChecksItemHandle(index: Int32) -> wref<PrereqCheck_Record>;

  public final native func ChecksContains(item: wref<PrereqCheck_Record>) -> Bool;

  public final native func AndValues() -> Bool;
}

public native class PrereqCheck_Record extends TweakDBRecord {

  public final native func PrereqType() -> String;

  public final native func ComparisonType() -> String;

  public final native func ContextObject() -> String;

  public final native func ValueToCompare() -> Float;
}

public native class Program_Record extends TweakDBRecord {

  public final native func Program() -> wref<ObjectAction_Record>;

  public final native func ProgramHandle() -> ref<ObjectAction_Record>;

  public final native func CharactersChain() -> array<Int32>;

  public final native func GetCharactersChainCount() -> Int32;

  public final native func GetCharactersChainItem(index: Int32) -> Int32;

  public final native func CharactersChainContains(item: Int32) -> Bool;

  public final native func ProgramName() -> CName;
}

public native class ProjectileLaunchMode_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataProjectileLaunchMode;
}

public native class ProjectileOnCollisionAction_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataProjectileOnCollisionAction;
}

public native class Prop_Record extends SpawnableObject_Record {

  public final native func FriendlyName() -> String;
}

public native class QuestRestrictionMode_Record extends TweakDBRecord {

  public final native func InjectedActions() -> array<CName>;

  public final native func GetInjectedActionsCount() -> Int32;

  public final native func GetInjectedActionsItem(index: Int32) -> CName;

  public final native func InjectedActionsContains(item: CName) -> Bool;
}

public native class QuestSystemSetup_Record extends TweakDBRecord {

  public final native func CustomTooltipActions() -> array<String>;

  public final native func GetCustomTooltipActionsCount() -> Int32;

  public final native func GetCustomTooltipActionsItem(index: Int32) -> String;

  public final native func CustomTooltipActionsContains(item: String) -> Bool;

  public final native func ContentTokenMinimalCooldownWhenBlocking() -> Float;

  public final native func ContentTokenStackMaxSize() -> Int32;

  public final native func ContentTokenSpawnMaxCooldown() -> Float;

  public final native func ContentTokenSpawnMinCooldown() -> Float;
}

public native class RPGAction_Record extends TweakDBRecord {

  public final native func Reward() -> wref<RewardBase_Record>;

  public final native func RewardHandle() -> ref<RewardBase_Record>;

  public final native func Prereqs(out outList: array<wref<IPrereq_Record>>) -> Void;

  public final native func GetPrereqsCount() -> Int32;

  public final native func GetPrereqsItem(index: Int32) -> wref<IPrereq_Record>;

  public final native func GetPrereqsItemHandle(index: Int32) -> wref<IPrereq_Record>;

  public final native func PrereqsContains(item: wref<IPrereq_Record>) -> Bool;

  public final native func ActionName() -> CName;
}

public native class RPGDataPackage_Record extends TweakDBRecord {

  public final native func StatModifiers(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetStatModifiersCount() -> Int32;

  public final native func GetStatModifiersItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetStatModifiersItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func StatModifiersContains(item: wref<StatModifier_Record>) -> Bool;

  public final native func StatModifierGroups(out outList: array<wref<StatModifierGroup_Record>>) -> Void;

  public final native func GetStatModifierGroupsCount() -> Int32;

  public final native func GetStatModifierGroupsItem(index: Int32) -> wref<StatModifierGroup_Record>;

  public final native func GetStatModifierGroupsItemHandle(index: Int32) -> wref<StatModifierGroup_Record>;

  public final native func StatModifierGroupsContains(item: wref<StatModifierGroup_Record>) -> Bool;

  public final native func StatPools(out outList: array<wref<StatPool_Record>>) -> Void;

  public final native func GetStatPoolsCount() -> Int32;

  public final native func GetStatPoolsItem(index: Int32) -> wref<StatPool_Record>;

  public final native func GetStatPoolsItemHandle(index: Int32) -> wref<StatPool_Record>;

  public final native func StatPoolsContains(item: wref<StatPool_Record>) -> Bool;

  public final native func Effectors(out outList: array<wref<Effector_Record>>) -> Void;

  public final native func GetEffectorsCount() -> Int32;

  public final native func GetEffectorsItem(index: Int32) -> wref<Effector_Record>;

  public final native func GetEffectorsItemHandle(index: Int32) -> wref<Effector_Record>;

  public final native func EffectorsContains(item: wref<Effector_Record>) -> Bool;
}

public native class RaceCheckpoint_Record extends LCDScreen_Record {
}

public native class RadioStation_Record extends TweakDBRecord {

  public final native func DisplayName() -> String;

  public final native func Icon() -> wref<UIIcon_Record>;

  public final native func IconHandle() -> ref<UIIcon_Record>;

  public final native func Index() -> Int32;
}

public native class RandomNewsFeedBatch_Record extends TweakDBRecord {

  public final native func FeedList() -> array<CName>;

  public final native func GetFeedListCount() -> Int32;

  public final native func GetFeedListItem(index: Int32) -> CName;

  public final native func FeedListContains(item: CName) -> Bool;
}

public native class RandomPassengerEntry_Record extends TweakDBRecord {

  public final native func ValidSlotNames() -> array<CName>;

  public final native func GetValidSlotNamesCount() -> Int32;

  public final native func GetValidSlotNamesItem(index: Int32) -> CName;

  public final native func ValidSlotNamesContains(item: CName) -> Bool;

  public final native func CharacterRecords(out outList: array<wref<WeightedCharacter_Record>>) -> Void;

  public final native func GetCharacterRecordsCount() -> Int32;

  public final native func GetCharacterRecordsItem(index: Int32) -> wref<WeightedCharacter_Record>;

  public final native func GetCharacterRecordsItemHandle(index: Int32) -> wref<WeightedCharacter_Record>;

  public final native func CharacterRecordsContains(item: wref<WeightedCharacter_Record>) -> Bool;

  public final native func Role() -> CName;

  public final native func Probability() -> Float;
}

public native class RandomRatioCoverSelectionParameters_Record extends CoverSelectionParameters_Record {
}

public native class RandomStatModifier_Record extends StatModifier_Record {

  public final native func Min() -> Float;

  public final native func Max() -> Float;
}

public native class ReactionLimit_Record extends TweakDBRecord {

  public final native func Name() -> CName;

  public final native func Limit() -> Int32;
}

public native class ReactionPresetCivilian_Record extends ReactionPreset_Record {
}

public native class ReactionPresetCorpo_Record extends ReactionPreset_Record {
}

public native class ReactionPresetGanger_Record extends ReactionPreset_Record {
}

public native class ReactionPresetMechanical_Record extends ReactionPreset_Record {
}

public native class ReactionPresetNoReaction_Record extends ReactionPreset_Record {
}

public native class ReactionPresetPolice_Record extends ReactionPreset_Record {
}

public native class RearWheelsFrictionModifier_Record extends DriveHelper_Record {

  public final native func MinLongSlipRatio() -> Float;

  public final native func MinLongFrictionCoef() -> Float;

  public final native func MinLatSlipRatio() -> Float;

  public final native func MaxLatSlipRatio() -> Float;

  public final native func MaxLongSlipRatio() -> Float;

  public final native func MinLatFrictionCoef() -> Float;

  public final native func MaxSpeed() -> Float;

  public final native func MaxHelperAcceleration() -> Float;
}

public native class RecipeItem_Record extends Item_Record {

  public final native func CraftableItems(out outList: array<wref<Item_Record>>) -> Void;

  public final native func GetCraftableItemsCount() -> Int32;

  public final native func GetCraftableItemsItem(index: Int32) -> wref<Item_Record>;

  public final native func GetCraftableItemsItemHandle(index: Int32) -> wref<Item_Record>;

  public final native func CraftableItemsContains(item: wref<Item_Record>) -> Bool;
}

public native class Regular_Record extends ProjectileLaunch_Record {

  public final native func StartVelocity() -> Float;

  public final native func StartVelocityCharged() -> Float;
}

public native class RegularGDM_Record extends GrenadeDeliveryMethod_Record {
}

public native class RewardBase_inline0_Record extends ConstantStatModifier_Record {
}

public native class RewardSet_Record extends TweakDBRecord {

  public final native func RewardItems(out outList: array<wref<Item_Record>>) -> Void;

  public final native func GetRewardItemsCount() -> Int32;

  public final native func GetRewardItemsItem(index: Int32) -> wref<Item_Record>;

  public final native func GetRewardItemsItemHandle(index: Int32) -> wref<Item_Record>;

  public final native func RewardItemsContains(item: wref<Item_Record>) -> Bool;
}

public native class Rigs_Record extends TweakDBRecord {

  public final native func RigsResRefs() -> array<ResRef>;

  public final native func GetRigsResRefsCount() -> Int32;

  public final native func GetRigsResRefsItem(index: Int32) -> ResRef;
}

public native class RotationLimiter_Record extends DriveHelper_Record {

  public final native func DriftLimit() -> Float;

  public final native func DriftFullAngleBegin() -> Float;

  public final native func DriftLimitMaxVel() -> Float;

  public final native func HandbrakeLimit() -> Float;

  public final native func DriftExceededAngle() -> Float;

  public final native func DriftLimitStartVel() -> Float;

  public final native func MaxAngularSpeedRad() -> Float;

  public final native func DriftFullAngleEnd() -> Float;

  public final native func SmoothingTime() -> Float;
}

public native class RowSymbols_Record extends TweakDBRecord {

  public final native func Symbols() -> array<Int32>;

  public final native func GetSymbolsCount() -> Int32;

  public final native func GetSymbolsItem(index: Int32) -> Int32;

  public final native func SymbolsContains(item: Int32) -> Bool;
}

public native class RowTraps_Record extends TweakDBRecord {

  public final native func Traps() -> array<Int32>;

  public final native func GetTrapsCount() -> Int32;

  public final native func GetTrapsItem(index: Int32) -> Int32;

  public final native func TrapsContains(item: Int32) -> Bool;
}

public native class SceneCameraDoF_Record extends TweakDBRecord {

  public final native func ProfileName() -> CName;

  public final native func DofNearFocus() -> Float;

  public final native func DofFarBlur() -> Float;

  public final native func DofNearBlur() -> Float;

  public final native func DofFarFocus() -> Float;

  public final native func DofIntensity() -> Float;

  public final native func UseNearPlane() -> Bool;

  public final native func UseFarPlane() -> Bool;
}

public native class ScreenMessageData_Record extends TweakDBRecord {

  public final native func FriendlyName() -> String;

  public final native func FontPath() -> String;

  public final native func BackgroundTextureID() -> wref<UIIcon_Record>;

  public final native func BackgroundTextureIDHandle() -> ref<UIIcon_Record>;

  public final native func MessageGroup() -> wref<ScreenMessagesList_Record>;

  public final native func MessageGroupHandle() -> ref<ScreenMessagesList_Record>;

  public final native func TextColor() -> array<Int32>;

  public final native func GetTextColorCount() -> Int32;

  public final native func GetTextColorItem(index: Int32) -> Int32;

  public final native func TextColorContains(item: Int32) -> Bool;

  public final native func BackgroundColor() -> array<Int32>;

  public final native func GetBackgroundColorCount() -> Int32;

  public final native func GetBackgroundColorItem(index: Int32) -> Int32;

  public final native func BackgroundColorContains(item: Int32) -> Bool;

  public final native func TextVerticalAlignment() -> CName;

  public final native func FontStyle() -> CName;

  public final native func LocalizedDescription() -> CName;

  public final native func TextHorizontalAlignment() -> CName;

  public final native func LocalizedName() -> CName;

  public final native func RightMargin() -> Float;

  public final native func LeftMargin() -> Float;

  public final native func BottomMargin() -> Float;

  public final native func FontSize() -> Int32;

  public final native func TopMargin() -> Float;

  public final native func BackgroundOpacity() -> Float;

  public final native func ScrollSpeed() -> Float;

  public final native func AutoScroll() -> Bool;
}

public native class ScreenMessagesList_Record extends TweakDBRecord {

  public final native func Messages(out outList: array<wref<ScreenMessageData_Record>>) -> Void;

  public final native func GetMessagesCount() -> Int32;

  public final native func GetMessagesItem(index: Int32) -> wref<ScreenMessageData_Record>;

  public final native func GetMessagesItemHandle(index: Int32) -> wref<ScreenMessageData_Record>;

  public final native func MessagesContains(item: wref<ScreenMessageData_Record>) -> Bool;
}

public native class SectorSelector_Record extends TweakDBRecord {

  public final native func HomeRight() -> Bool;

  public final native func TargetMid() -> Bool;

  public final native func TargetLeft() -> Bool;

  public final native func TargetBackRight() -> Bool;

  public final native func TargetBackMid() -> Bool;

  public final native func HomeMid() -> Bool;

  public final native func TargetBackLeft() -> Bool;

  public final native func HomeLeft() -> Bool;

  public final native func TargetRight() -> Bool;

  public final native func HomeBackLeft() -> Bool;

  public final native func HomeBackMid() -> Bool;

  public final native func HomeBackRight() -> Bool;

  public final native func DefensiveSelection() -> Bool;
}

public native class SenseObjectType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataSenseObjectType;
}

public native class SlotItemPartElement_Record extends TweakDBRecord {

  public final native func Item() -> wref<Item_Record>;

  public final native func ItemHandle() -> ref<Item_Record>;

  public final native func Weight() -> Float;
}

public native class SmartGunMissParams_Record extends TweakDBRecord {

  public final native func SpiralCycleTimeMax() -> Float;

  public final native func MinMissAngleYaw() -> Float;

  public final native func SpiralRampDownFactor() -> Float;

  public final native func SpiralRampUpDistanceEnd() -> Float;

  public final native func SpiralRadius() -> Float;

  public final native func MinMissAnglePitch() -> Float;

  public final native func SpiralRampUpDistanceStart() -> Float;

  public final native func MaxMissAnglePitch() -> Float;

  public final native func SpiralRampDownDistanceEnd() -> Float;

  public final native func SpiralRampDownDistanceStart() -> Float;

  public final native func SpiralCycleTimeMin() -> Float;

  public final native func AreaToIgnoreHalfYaw() -> Float;

  public final native func MaxMissAngleYaw() -> Float;

  public final native func Gravity() -> Float;

  public final native func SpiralRandomizePhase() -> Bool;
}

public native class SmartGunTargetSortConfigurations_Record extends TweakDBRecord {

  public final native func HipConfig() -> wref<SmartGunTargetSortData_Record>;

  public final native func HipConfigHandle() -> ref<SmartGunTargetSortData_Record>;

  public final native func AdsConfig() -> wref<SmartGunTargetSortData_Record>;

  public final native func AdsConfigHandle() -> ref<SmartGunTargetSortData_Record>;
}

public native class SmartGunTargetSortData_Record extends TweakDBRecord {

  public final native func AngleDistUnitSq() -> Float;

  public final native func WorldProximityThresholdSq() -> Float;

  public final native func AngleDistUnitWeightSq() -> Float;

  public final native func WorldProximityBonusSq() -> Float;

  public final native func AngleProximityThresholdSq() -> Float;

  public final native func AngleProximityBonusSq() -> Float;

  public final native func WorldDistUnitSq() -> Float;

  public final native func WorldDistUnitWeightSq() -> Float;

  public final native func PreviouslyLockedBonusSq() -> Float;
}

public native class SpreadEffector_Record extends Effector_Record {

  public final native func ObjectAction() -> wref<ObjectAction_Record>;

  public final native func ObjectActionHandle() -> ref<ObjectAction_Record>;

  public final native func EffectTag() -> CName;

  public final native func SpreadToAllTargetsInTheArea() -> Bool;
}

public native class SpreadInitEffector_Record extends Effector_Record {

  public final native func ObjectAction() -> wref<ObjectAction_Record>;

  public final native func ObjectActionHandle() -> ref<ObjectAction_Record>;

  public final native func BonusJumps() -> Int32;

  public final native func SpreadCount() -> Int32;

  public final native func SpreadDistance() -> Int32;
}

public native class SquadBackyardBase_Record extends TweakDBRecord {

  public final native func PaddingFrom() -> Float;

  public final native func PaddingTo() -> Float;
}

public native class SquadBase_Record extends TweakDBRecord {

  public final native func DefensiveLeftFence() -> wref<SquadFenceBase_Record>;

  public final native func DefensiveLeftFenceHandle() -> ref<SquadFenceBase_Record>;

  public final native func DefensiveBackyard() -> wref<SquadBackyardBase_Record>;

  public final native func DefensiveBackyardHandle() -> ref<SquadBackyardBase_Record>;

  public final native func OffensiveBackyard() -> wref<SquadBackyardBase_Record>;

  public final native func OffensiveBackyardHandle() -> ref<SquadBackyardBase_Record>;

  public final native func DefensiveRightFence() -> wref<SquadFenceBase_Record>;

  public final native func DefensiveRightFenceHandle() -> ref<SquadFenceBase_Record>;

  public final native func OffensiveRightFence() -> wref<SquadFenceBase_Record>;

  public final native func OffensiveRightFenceHandle() -> ref<SquadFenceBase_Record>;

  public final native func OffensiveLeftFence() -> wref<SquadFenceBase_Record>;

  public final native func OffensiveLeftFenceHandle() -> ref<SquadFenceBase_Record>;

  public final native func ScriptHandler() -> CName;

  public final native func SquadParams() -> CName;

  public final native func HasActiveAlley() -> Bool;
}

public native class SquadFenceBase_Record extends TweakDBRecord {

  public final native func PaddingInnerFence() -> Float;

  public final native func PaddingOuterFence() -> Float;
}

public native class SquadInstance_Record extends TweakDBRecord {

  public final native func SquadName() -> CName;

  public final native func SquadTemplate() -> CName;
}

public native class StatDistributionData_Record extends TweakDBRecord {

  public final native func StatType() -> wref<Stat_Record>;

  public final native func StatTypeHandle() -> ref<Stat_Record>;

  public final native func Value() -> Float;
}

public native class StatPoolDistributionData_Record extends TweakDBRecord {

  public final native func StatPoolType() -> wref<StatPool_Record>;

  public final native func StatPoolTypeHandle() -> ref<StatPool_Record>;

  public final native func Value() -> Float;
}

public native class StatPoolUpdate_Record extends TweakDBRecord {

  public final native func StatPoolType() -> wref<StatPool_Record>;

  public final native func StatPoolTypeHandle() -> ref<StatPool_Record>;

  public final native func StatPoolValue() -> Float;
}

public native class StatsArray_Record extends TweakDBRecord {

  public final native func EnumStats(out outList: array<wref<Stat_Record>>) -> Void;

  public final native func GetEnumStatsCount() -> Int32;

  public final native func GetEnumStatsItem(index: Int32) -> wref<Stat_Record>;

  public final native func GetEnumStatsItemHandle(index: Int32) -> wref<Stat_Record>;

  public final native func EnumStatsContains(item: wref<Stat_Record>) -> Bool;

  public final native func AdditionalStats(out outList: array<wref<Stat_Record>>) -> Void;

  public final native func GetAdditionalStatsCount() -> Int32;

  public final native func GetAdditionalStatsItem(index: Int32) -> wref<Stat_Record>;

  public final native func GetAdditionalStatsItemHandle(index: Int32) -> wref<Stat_Record>;

  public final native func AdditionalStatsContains(item: wref<Stat_Record>) -> Bool;

  public final native func ArrayName() -> CName;
}

public native class StatsFolder_Record extends TweakDBRecord {

  public final native func Stats(out outList: array<wref<Stat_Record>>) -> Void;

  public final native func GetStatsCount() -> Int32;

  public final native func GetStatsItem(index: Int32) -> wref<Stat_Record>;

  public final native func GetStatsItemHandle(index: Int32) -> wref<Stat_Record>;

  public final native func StatsContains(item: wref<Stat_Record>) -> Bool;

  public final native func Folders(out outList: array<wref<StatsFolder_Record>>) -> Void;

  public final native func GetFoldersCount() -> Int32;

  public final native func GetFoldersItem(index: Int32) -> wref<StatsFolder_Record>;

  public final native func GetFoldersItemHandle(index: Int32) -> wref<StatsFolder_Record>;

  public final native func FoldersContains(item: wref<StatsFolder_Record>) -> Bool;

  public final native func Arrays(out outList: array<wref<StatsArray_Record>>) -> Void;

  public final native func GetArraysCount() -> Int32;

  public final native func GetArraysItem(index: Int32) -> wref<StatsArray_Record>;

  public final native func GetArraysItemHandle(index: Int32) -> wref<StatsArray_Record>;

  public final native func ArraysContains(item: wref<StatsArray_Record>) -> Bool;
}

public native class StatsList_Record extends TweakDBRecord {

  public final native func Stats(out outList: array<wref<Stat_Record>>) -> Void;

  public final native func GetStatsCount() -> Int32;

  public final native func GetStatsItem(index: Int32) -> wref<Stat_Record>;

  public final native func GetStatsItemHandle(index: Int32) -> wref<Stat_Record>;

  public final native func StatsContains(item: wref<Stat_Record>) -> Bool;
}

public native class StatusEffectAIBehaviorType_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataStatusEffectAIBehaviorType;
}

public native class StatusEffectUIData_Record extends TweakDBRecord {

  public final native func DisplayName() -> String;

  public final native func Description() -> String;

  public final native func FluffText() -> String;

  public final native func IconPath() -> String;

  public final native func FloatValues() -> array<Float>;

  public final native func GetFloatValuesCount() -> Int32;

  public final native func GetFloatValuesItem(index: Int32) -> Float;

  public final native func FloatValuesContains(item: Float) -> Bool;

  public final native func IntValues() -> array<Int32>;

  public final native func GetIntValuesCount() -> Int32;

  public final native func GetIntValuesItem(index: Int32) -> Int32;

  public final native func IntValuesContains(item: Int32) -> Bool;

  public final native func NameValues() -> array<CName>;

  public final native func GetNameValuesCount() -> Int32;

  public final native func GetNameValuesItem(index: Int32) -> CName;

  public final native func NameValuesContains(item: CName) -> Bool;

  public final native func Stats(out outList: array<wref<Stat_Record>>) -> Void;

  public final native func GetStatsCount() -> Int32;

  public final native func GetStatsItem(index: Int32) -> wref<Stat_Record>;

  public final native func GetStatsItemHandle(index: Int32) -> wref<Stat_Record>;

  public final native func StatsContains(item: wref<Stat_Record>) -> Bool;

  public final native func Priority() -> Float;
}

public native class StatusEffect_inline0_Record extends StatModifierGroup_Record {
}

public native class StatusEffect_inline1_Record extends ConstantStatModifier_Record {
}

public native class StickyGDM_Record extends GrenadeDeliveryMethod_Record {
}

public native class StimPropagation_Record extends TweakDBRecord {

  public final native func Comment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataStimPropagation;
}

public native class Stop_Record extends ProjectileCollision_Record {
}

public native class StopAndStick_Record extends ProjectileCollision_Record {
}

public native class StopAndStickPerpendicular_Record extends ProjectileCollision_Record {
}

public native class StreetCredTier_Record extends TweakDBRecord {

  public final native func StreetCredRequirement() -> Int32;
}

public native class StreetSign_Record extends BaseSign_Record {
}

public native class SubStatModifier_Record extends StatModifier_Record {

  public final native func RefStat() -> wref<Stat_Record>;

  public final native func RefStatHandle() -> ref<Stat_Record>;

  public final native func RefObject() -> CName;
}

public native class Substat_Record extends Stat_Record {

  public final native func ModifierType() -> CName;
}

public native class TPPCameraSetup_Record extends TweakDBRecord {

  public final native func CurvesPath() -> ResRef;

  public final native func Pivot() -> Vector3;

  public final native func Pivot_z_offset_lerp_speed() -> Float;

  public final native func Boom_length_lerp_speed() -> Float;

  public final native func Shake_max_pitch() -> Float;

  public final native func Manual_control_reset_timeout() -> Float;

  public final native func Pivot_x_offset_lerp_speed() -> Float;

  public final native func Shake_max_roll() -> Float;

  public final native func Gear_changing_boom_modifier() -> Float;

  public final native func Boom_length_acc_mod_multiplier() -> Float;

  public final native func Gear_changing_fov_modifier() -> Float;

  public final native func Fov_lerp_speed() -> Float;

  public final native func Boom_length_base() -> Float;

  public final native func Boom_length_min_value() -> Float;

  public final native func Gear_changing_pitch_modifier() -> Float;

  public final native func Shake_frequency() -> Float;

  public final native func Camera_collision_sweep_small_sphere_radius() -> Float;

  public final native func Auto_center_speed_threshold() -> Float;

  public final native func Boom_length_acc_mod_reaction_speed() -> Float;

  public final native func Shake_max_yaw() -> Float;

  public final native func Reverse_camera_speed_threshold() -> Float;

  public final native func Camera_collision_sweep_big_sphere_radius() -> Float;

  public final native func Boom_pitch_lerp_speed() -> Float;

  public final native func Boom_length_no_accumulated_acc_impulses() -> Int32;

  public final native func Camera_centric_vertical_offset() -> Float;

  public final native func Boom_yaw_lerp_speed() -> Float;

  public final native func Boom_length_dec_mod_reaction_speed() -> Float;

  public final native func Debug_boom_length() -> Float;

  public final native func Debug_boom_roll() -> Float;

  public final native func Debug_boom_pitch() -> Float;

  public final native func Debug_boom_yaw() -> Float;

  public final native func Debug_fov() -> Float;

  public final native func Camera_transition_min_boom_length() -> Float;

  public final native func Camera_transition_time_activation() -> Float;

  public final native func Camera_transition_time_deactivation() -> Float;

  public final native func Camera_transition_time_deactivation_quick() -> Float;

  public final native func Enable_camera_auto_center() -> Bool;

  public final native func Debug_static_camera() -> Bool;
}

public native class TPPLookAtPresets_Record extends TweakDBRecord {

  public final native func NoWeaponPresets(out outList: array<wref<LookAtPreset_Record>>) -> Void;

  public final native func GetNoWeaponPresetsCount() -> Int32;

  public final native func GetNoWeaponPresetsItem(index: Int32) -> wref<LookAtPreset_Record>;

  public final native func GetNoWeaponPresetsItemHandle(index: Int32) -> wref<LookAtPreset_Record>;

  public final native func NoWeaponPresetsContains(item: wref<LookAtPreset_Record>) -> Bool;

  public final native func WeaponReadyPresets(out outList: array<wref<LookAtPreset_Record>>) -> Void;

  public final native func GetWeaponReadyPresetsCount() -> Int32;

  public final native func GetWeaponReadyPresetsItem(index: Int32) -> wref<LookAtPreset_Record>;

  public final native func GetWeaponReadyPresetsItemHandle(index: Int32) -> wref<LookAtPreset_Record>;

  public final native func WeaponReadyPresetsContains(item: wref<LookAtPreset_Record>) -> Bool;

  public final native func ReloadPresets(out outList: array<wref<LookAtPreset_Record>>) -> Void;

  public final native func GetReloadPresetsCount() -> Int32;

  public final native func GetReloadPresetsItem(index: Int32) -> wref<LookAtPreset_Record>;

  public final native func GetReloadPresetsItemHandle(index: Int32) -> wref<LookAtPreset_Record>;

  public final native func ReloadPresetsContains(item: wref<LookAtPreset_Record>) -> Bool;

  public final native func WeaponSafePresets(out outList: array<wref<LookAtPreset_Record>>) -> Void;

  public final native func GetWeaponSafePresetsCount() -> Int32;

  public final native func GetWeaponSafePresetsItem(index: Int32) -> wref<LookAtPreset_Record>;

  public final native func GetWeaponSafePresetsItemHandle(index: Int32) -> wref<LookAtPreset_Record>;

  public final native func WeaponSafePresetsContains(item: wref<LookAtPreset_Record>) -> Bool;
}

public native class TacticLimiterCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  public final native func AddUtilityValue() -> Float;
}

public native class TemporalPrereq_Record extends IPrereq_Record {

  public final native func Duration() -> Float;
}

public native class TerminalScreenType_Record extends DeviceScreenType_Record {
}

public native class ThreatDistanceCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  public final native func DistanceToThreatMultiplier() -> Float;

  public final native func ThreatPreferredDistance() -> Float;

  public final native func ThreatMinDistance() -> Float;

  public final native func ThreatMaxDistance() -> Float;

  public final native func ThreatPredictionTime() -> Float;

  public final native func CheckThreatDestination() -> Bool;

  public final native func CheckThreatPath() -> Bool;

  public final native func UseThreatMaxDistanceFiltering() -> Bool;

  public final native func AllowNegativeThreatMaxDistanceScoring() -> Bool;
}

public native class ThreatTrackingPresetBase_Record extends TweakDBRecord {

  public final native func BeliefAccuracy() -> wref<Accuracy_Record>;

  public final native func BeliefAccuracyHandle() -> ref<Accuracy_Record>;

  public final native func BaseAccuracy() -> wref<Accuracy_Record>;

  public final native func BaseAccuracyHandle() -> ref<Accuracy_Record>;

  public final native func BaseDroppingThreatCooldown() -> Float;

  public final native func DroppingCooldownPerSecondWhileVisible() -> Float;

  public final native func VisibleBeliefSpeedMultiplier() -> Float;

  public final native func DroppingCooldownPerHit() -> Float;

  public final native func MaximumDroppingCooldownValue() -> Float;

  public final native func MoveBeliefOnlyIfVisible() -> Bool;
}

public native class ThumbnailWidgetDefinition_Record extends WidgetDefinition_Record {
}

public native class Time_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;
}

public native class Tracking_Record extends ProjectileLaunch_Record {

  public final native func BendFactor() -> Float;

  public final native func HalfLeanAngle() -> Float;

  public final native func LinearTimeRatio() -> Float;

  public final native func ReturnTimeMargin() -> Float;

  public final native func BendTimeRatio() -> Float;

  public final native func InterpolationTimeRatio() -> Float;

  public final native func EndLeanAngle() -> Float;

  public final native func AngleInterpolationDuration() -> Float;
}

public native class Trap_Record extends TweakDBRecord {

  public final native func Name() -> String;

  public final native func Type() -> wref<TrapType_Record>;

  public final native func TypeHandle() -> ref<TrapType_Record>;

  public final native func Probability() -> Float;
}

public native class TrapType_Record extends TweakDBRecord {

  public final native func EnumName() -> CName;
}

public native class TriggerHackingMinigameEffector_Record extends Effector_Record {

  public final native func JournalEntry() -> String;

  public final native func Reward() -> wref<RewardBase_Record>;

  public final native func RewardHandle() -> ref<RewardBase_Record>;
}

public native class UIAnimation_Record extends TweakDBRecord {

  public final native func WidgetResource() -> ResRef;

  public final native func AnimationName() -> CName;

  public final native func Loop() -> Bool;
}

public native class UICharacterCreationAttribute_Record extends TweakDBRecord {

  public final native func Description() -> String;

  public final native func Shortcut() -> String;

  public final native func Attribute() -> wref<Stat_Record>;

  public final native func AttributeHandle() -> ref<Stat_Record>;

  public final native func IconPath() -> CName;

  public final native func Value() -> Float;
}

public native class UICharacterCreationAttributesPreset_Record extends TweakDBRecord {

  public final native func Attributes(out outList: array<wref<UICharacterCreationAttribute_Record>>) -> Void;

  public final native func GetAttributesCount() -> Int32;

  public final native func GetAttributesItem(index: Int32) -> wref<UICharacterCreationAttribute_Record>;

  public final native func GetAttributesItemHandle(index: Int32) -> wref<UICharacterCreationAttribute_Record>;

  public final native func AttributesContains(item: wref<UICharacterCreationAttribute_Record>) -> Bool;
}

public native class UICondition_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func IsCustom() -> Bool;

  public final native func Type() -> gamedataUICondition;
}

public native class UIElement_Record extends TweakDBRecord {

  public final native func CustomConditions(out outList: array<wref<UICondition_Record>>) -> Void;

  public final native func GetCustomConditionsCount() -> Int32;

  public final native func GetCustomConditionsItem(index: Int32) -> wref<UICondition_Record>;

  public final native func GetCustomConditionsItemHandle(index: Int32) -> wref<UICondition_Record>;

  public final native func CustomConditionsContains(item: wref<UICondition_Record>) -> Bool;
}

public native class UIIconCensorFlag_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataUIIconCensorFlag;
}

public native class UIIconCensorship_Record extends TweakDBRecord {

  public final native func CensoredIcon() -> wref<UIIcon_Record>;

  public final native func CensoredIconHandle() -> ref<UIIcon_Record>;

  public final native func Replacer() -> wref<UIIcon_Record>;

  public final native func ReplacerHandle() -> ref<UIIcon_Record>;

  public final native func CensorFlags(out outList: array<wref<UIIconCensorFlag_Record>>) -> Void;

  public final native func GetCensorFlagsCount() -> Int32;

  public final native func GetCensorFlagsItem(index: Int32) -> wref<UIIconCensorFlag_Record>;

  public final native func GetCensorFlagsItemHandle(index: Int32) -> wref<UIIconCensorFlag_Record>;

  public final native func CensorFlagsContains(item: wref<UIIconCensorFlag_Record>) -> Bool;
}

public native class UINameplate_Record extends TweakDBRecord {

  public final native func Type() -> wref<UINameplateDisplayType_Record>;

  public final native func TypeHandle() -> ref<UINameplateDisplayType_Record>;

  public final native func Slot() -> CName;

  public final native func Position() -> Vector3;

  public final native func Enabled() -> Bool;
}

public native class UINameplateDisplayType_Record extends TweakDBRecord {

  public final native func Comment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataUINameplateDisplayType;
}

public native class UncontrolledMovementEffector_Record extends Effector_Record {

  public final native func DebugSourceName() -> CName;

  public final native func RagdollNoGroundThreshold() -> Float;

  public final native func RagdollOnCollision() -> Bool;
}

public native class UphillDriveHelper_Record extends DriveHelper_Record {

  public final native func SlopeCompensationFactor() -> Float;

  public final native func SlopeCompensationMaxAngle() -> Float;
}

public native class UtilityLossCoverSelectionParameters_Record extends CoverSelectionParameters_Record {

  public final native func UtilityLossTimeoutCover() -> Float;

  public final native func UtilityLossMultiplier() -> Float;

  public final native func HitsTakenToClearScoreCover() -> Int32;

  public final native func HitsTakenToClearScoreInIdle() -> Int32;

  public final native func UtilityLossTimeoutShootingSpot() -> Float;

  public final native func UtilityLossTimeoutInIdle() -> Float;

  public final native func HitsTakenToClearScoreShootingSpot() -> Int32;
}

public native class VehicleAIBoostSettings_Record extends TweakDBRecord {

  public final native func MaxTorqueBoost() -> Float;

  public final native func MaxLongTractionBoost() -> Float;

  public final native func MaxLatTractionBoost() -> Float;
}

public native class VehicleAirControl_Record extends TweakDBRecord {

  public final native func Yaw() -> wref<VehicleAirControlAxis_Record>;

  public final native func YawHandle() -> ref<VehicleAirControlAxis_Record>;

  public final native func Pitch() -> wref<VehicleAirControlAxis_Record>;

  public final native func PitchHandle() -> ref<VehicleAirControlAxis_Record>;

  public final native func Roll() -> wref<VehicleAirControlAxis_Record>;

  public final native func RollHandle() -> ref<VehicleAirControlAxis_Record>;

  public final native func AnglePID() -> array<Float>;

  public final native func GetAnglePIDCount() -> Int32;

  public final native func GetAnglePIDItem(index: Int32) -> Float;

  public final native func AnglePIDContains(item: Float) -> Bool;

  public final native func VelocityPID() -> array<Float>;

  public final native func GetVelocityPIDCount() -> Int32;

  public final native func GetVelocityPIDItem(index: Int32) -> Float;

  public final native func VelocityPIDContains(item: Float) -> Bool;

  public final native func FlippedOverRecoveryPID() -> array<Float>;

  public final native func GetFlippedOverRecoveryPIDCount() -> Int32;

  public final native func GetFlippedOverRecoveryPIDItem(index: Int32) -> Float;

  public final native func FlippedOverRecoveryPIDContains(item: Float) -> Bool;

  public final native func MassReference() -> Float;
}

public native class VehicleAirControlAxis_Record extends TweakDBRecord {

  public final native func ControlAxis() -> CName;

  public final native func VelocityDampingThresholdMin() -> Float;

  public final native func AngleCorrectionThresholdMax() -> Float;

  public final native func VelocityDampingFactorMin() -> Float;

  public final native func AngleCorrectionThresholdMin() -> Float;

  public final native func VelocityDampingFactorMax() -> Float;

  public final native func VelocityDampingThresholdMax() -> Float;

  public final native func AngleCorrectionFactorMax() -> Float;

  public final native func MaxVelocityCompensation() -> Float;

  public final native func Multiplier() -> Float;

  public final native func BrakeMultiplierWhenNoInput() -> Float;

  public final native func AngleCorrectionFactorMin() -> Float;

  public final native func MaxAngleCompensation() -> Float;

  public final native func ZeroAngleThreshold() -> Float;

  public final native func MaxAngleToCompensateThreshold() -> Float;

  public final native func StabilizeAxis() -> Bool;
}

public native class VehicleBehaviorData_Record extends TweakDBRecord {

  public final native func ReadyToParkDistance() -> Float;
}

public native class VehicleCameraManager_Record extends TweakDBRecord {

  public final native func CamCollisionOBBIncrease() -> Vector3;

  public final native func CameraBlendTime() -> Float;

  public final native func AllowCameraReset() -> Bool;
}

public native class VehicleDeformablePart_Record extends TweakDBRecord {

  public final native func Zones(out outList: array<wref<VehicleDeformableZone_Record>>) -> Void;

  public final native func GetZonesCount() -> Int32;

  public final native func GetZonesItem(index: Int32) -> wref<VehicleDeformableZone_Record>;

  public final native func GetZonesItemHandle(index: Int32) -> wref<VehicleDeformableZone_Record>;

  public final native func ZonesContains(item: wref<VehicleDeformableZone_Record>) -> Bool;

  public final native func Component() -> CName;
}

public native class VehicleDeformableZone_Record extends TweakDBRecord {

  public final native func Shapes() -> array<Int32>;

  public final native func GetShapesCount() -> Int32;

  public final native func GetShapesItem(index: Int32) -> Int32;

  public final native func ShapesContains(item: Int32) -> Bool;

  public final native func GridCells() -> array<Int32>;

  public final native func GetGridCellsCount() -> Int32;

  public final native func GetGridCellsItem(index: Int32) -> Int32;

  public final native func GridCellsContains(item: Int32) -> Bool;
}

public native class VehicleDestructibleLight_Record extends TweakDBRecord {

  public final native func GridCells() -> array<Int32>;

  public final native func GetGridCellsCount() -> Int32;

  public final native func GetGridCellsItem(index: Int32) -> Int32;

  public final native func GridCellsContains(item: Int32) -> Bool;

  public final native func Component() -> CName;

  public final native func Threshold() -> Float;
}

public native class VehicleDestructibleWheel_Record extends TweakDBRecord {

  public final native func Name() -> CName;

  public final native func Intact() -> CName;

  public final native func Flat() -> CName;
}

public native class VehicleDestructionPointDamper_Record extends TweakDBRecord {

  public final native func PointIndex() -> Int32;

  public final native func DampValue() -> Float;

  public final native func PointFragility() -> Float;
}

public native class VehicleDetachablePart_Record extends TweakDBRecord {

  public final native func Components() -> array<CName>;

  public final native func GetComponentsCount() -> Int32;

  public final native func GetComponentsItem(index: Int32) -> CName;

  public final native func ComponentsContains(item: CName) -> Bool;

  public final native func GridCells() -> array<Int32>;

  public final native func GetGridCellsCount() -> Int32;

  public final native func GetGridCellsItem(index: Int32) -> Int32;

  public final native func GridCellsContains(item: Int32) -> Bool;

  public final native func Name() -> CName;

  public final native func Threshold() -> Float;

  public final native func SpawnsExplosionEffect() -> Bool;
}

public native class VehicleDriveModelData_Record extends TweakDBRecord {

  public final native func WaterParams() -> wref<VehicleWater_Record>;

  public final native func WaterParamsHandle() -> ref<VehicleWater_Record>;

  public final native func WheelSetup() -> wref<VehicleWheelDrivingSetup_Record>;

  public final native func WheelSetupHandle() -> ref<VehicleWheelDrivingSetup_Record>;

  public final native func WheelsFrictionMap() -> wref<VehicleWheelsFrictionMap_Record>;

  public final native func WheelsFrictionMapHandle() -> ref<VehicleWheelsFrictionMap_Record>;

  public final native func DriveHelpers(out outList: array<wref<DriveHelper_Record>>) -> Void;

  public final native func GetDriveHelpersCount() -> Int32;

  public final native func GetDriveHelpersItem(index: Int32) -> wref<DriveHelper_Record>;

  public final native func GetDriveHelpersItemHandle(index: Int32) -> wref<DriveHelper_Record>;

  public final native func DriveHelpersContains(item: wref<DriveHelper_Record>) -> Bool;

  public final native func TankSpringsLocalPositions() -> array<Vector2>;

  public final native func GetTankSpringsLocalPositionsCount() -> Int32;

  public final native func GetTankSpringsLocalPositionsItem(index: Int32) -> Vector2;

  public final native func TankSpringsLocalPositionsContains(item: Vector2) -> Bool;

  public final native func BikeTiltPID() -> array<Float>;

  public final native func GetBikeTiltPIDCount() -> Int32;

  public final native func GetBikeTiltPIDItem(index: Int32) -> Float;

  public final native func BikeTiltPIDContains(item: Float) -> Bool;

  public final native func BikeCurvesPath() -> ResRef;

  public final native func Center_of_mass_offset() -> Vector3;

  public final native func MomentOfInertiaScale() -> Vector3;

  public final native func MomentOfInertia() -> Vector3;

  public final native func SmoothWheelContactDecreaseTime() -> Float;

  public final native func SlopeTractionReductionBegin() -> Float;

  public final native func SideWeightTransferFactor() -> Float;

  public final native func TurningRollFactorWeakContactThresholdMax() -> Float;

  public final native func TurningRollFactor() -> Float;

  public final native func TurnUpdateInputFastChangeSpeed() -> Float;

  public final native func LowVelStoppingDeceleration() -> Float;

  public final native func SlipRatioMinSpeedThreshold() -> Float;

  public final native func BrakingFrictionFactor() -> Float;

  public final native func TurnUpdateInputSlowChangeSpeed() -> Float;

  public final native func TurningRollFactorWeakContactThresholdMin() -> Float;

  public final native func HandbrakeBrakingTorque() -> Float;

  public final native func TurnUpdateInputDiffProgressionPow() -> Float;

  public final native func MaxWheelTurnDeg() -> Float;

  public final native func BodyFriction() -> Float;

  public final native func SlipAngleMinSpeedThreshold() -> Float;

  public final native func BankBodyLRTanMultiplier() -> Float;

  public final native func SlipAngleCurveScale() -> Float;

  public final native func TankAcceleration() -> Float;

  public final native func TurnUpdateInputDiffForSlowChange() -> Float;

  public final native func PerfectSteeringFactor() -> Float;

  public final native func TurnUpdateMaxSpeedTurnMul() -> Float;

  public final native func BikeTiltReturnSpeed() -> Float;

  public final native func WheelTurnMaxAddPerSecond() -> Float;

  public final native func BikeTiltSpeed() -> Float;

  public final native func TurnUpdateBaseSpeedThreshold() -> Float;

  public final native func TurnUpdateMaxSpeedTurnChangeMul() -> Float;

  public final native func AntiSwaybarDampingScalor() -> Float;

  public final native func Total_mass() -> Float;

  public final native func TurnUpdateMaxSpeedThreshold() -> Float;

  public final native func BankBodyFBTanMultiplier() -> Float;

  public final native func SlopeTractionReductionFactor() -> Float;

  public final native func WheelTurnMaxSubPerSecond() -> Float;

  public final native func BikeTiltCustomSpeed() -> Float;

  public final native func TankSpringVerticalOffset() -> Float;

  public final native func TurningRollFactorWeakContactMul() -> Float;

  public final native func TankDeceleration() -> Float;

  public final native func SlipRatioCurveScale() -> Float;

  public final native func TurnUpdateInputDiffForFastChange() -> Float;

  public final native func RollingResistanceFactor() -> Float;

  public final native func TankSpringRadius() -> Float;

  public final native func AirResistanceFactor() -> Float;

  public final native func BurnOutRotationModifier() -> Float;

  public final native func SlopeTractionReductionMax() -> Float;

  public final native func TankSpringDamping() -> Float;

  public final native func DifferentialOvershootFactor() -> Float;

  public final native func ForwardWeightTransferFactor() -> Float;

  public final native func TankSpringDistance() -> Float;

  public final native func Chassis_mass() -> Float;

  public final native func TankSpringStiffness() -> Float;

  public final native func SmoothWheelContactIncreseTime() -> Float;

  public final native func BikeMaxTilt() -> Float;

  public final native func TankTurningSpeed() -> Float;

  public final native func TankMaxSpeed() -> Float;

  public final native func TankGravityMul() -> Float;

  public final native func TankCTOP() -> Float;

  public final native func TankCTOI() -> Float;

  public final native func TankCTOD() -> Float;

  public final native func UseAlternativeTurnUpdate() -> Bool;
}

public native class VehicleEngineData_Record extends TweakDBRecord {

  public final native func Gears(out outList: array<wref<VehicleGear_Record>>) -> Void;

  public final native func GetGearsCount() -> Int32;

  public final native func GetGearsItem(index: Int32) -> wref<VehicleGear_Record>;

  public final native func GetGearsItemHandle(index: Int32) -> wref<VehicleGear_Record>;

  public final native func GearsContains(item: wref<VehicleGear_Record>) -> Bool;

  public final native func GearCurvesPath() -> ResRef;

  public final native func GearChangeCooldown() -> Float;

  public final native func ClutchSyncTorqueWheelMul() -> Float;

  public final native func MinRPM() -> Float;

  public final native func WheelsResistanceRatio() -> Float;

  public final native func FlyWheelMomentOfInertia() -> Float;

  public final native func EngineMaxTorque() -> Float;

  public final native func ClutchSyncTorqueMul() -> Float;

  public final native func ResistanceTorque() -> Float;

  public final native func MaxRPM() -> Float;

  public final native func GearChangeTime() -> Float;

  public final native func InstantR1GearChange() -> Bool;

  public final native func ForceReverseRPMToMin() -> Bool;
}

public native class VehicleFxCollision_Record extends TweakDBRecord {

  public final native func Materials(out outList: array<wref<VehicleFxCollisionMaterial_Record>>) -> Void;

  public final native func GetMaterialsCount() -> Int32;

  public final native func GetMaterialsItem(index: Int32) -> wref<VehicleFxCollisionMaterial_Record>;

  public final native func GetMaterialsItemHandle(index: Int32) -> wref<VehicleFxCollisionMaterial_Record>;

  public final native func MaterialsContains(item: wref<VehicleFxCollisionMaterial_Record>) -> Bool;
}

public native class VehicleFxCollisionMaterial_Record extends TweakDBRecord {

  public final native func Material() -> wref<Material_Record>;

  public final native func MaterialHandle() -> ref<Material_Record>;

  public final native func Impact_decal() -> ResRef;

  public final native func Scratch_particles() -> ResRef;

  public final native func Impact_particles() -> ResRef;

  public final native func Scratch_decal() -> ResRef;
}

public native class VehicleFxWheelsDecals_Record extends TweakDBRecord {

  public final native func Materials(out outList: array<wref<VehicleFxWheelsDecalsMaterial_Record>>) -> Void;

  public final native func GetMaterialsCount() -> Int32;

  public final native func GetMaterialsItem(index: Int32) -> wref<VehicleFxWheelsDecalsMaterial_Record>;

  public final native func GetMaterialsItemHandle(index: Int32) -> wref<VehicleFxWheelsDecalsMaterial_Record>;

  public final native func MaterialsContains(item: wref<VehicleFxWheelsDecalsMaterial_Record>) -> Bool;

  public final native func Smear_materials(out outList: array<wref<VehicleFxWheelsDecalsMaterialSmear_Record>>) -> Void;

  public final native func GetSmear_materialsCount() -> Int32;

  public final native func GetSmear_materialsItem(index: Int32) -> wref<VehicleFxWheelsDecalsMaterialSmear_Record>;

  public final native func GetSmear_materialsItemHandle(index: Int32) -> wref<VehicleFxWheelsDecalsMaterialSmear_Record>;

  public final native func Smear_materialsContains(item: wref<VehicleFxWheelsDecalsMaterialSmear_Record>) -> Bool;
}

public native class VehicleFxWheelsDecalsMaterialSmear_Record extends VehicleFxWheelsDecalsMaterial_Record {

  public final native func Distance() -> Float;
}

public native class VehicleFxWheelsParticles_Record extends TweakDBRecord {

  public final native func Materials(out outList: array<wref<VehicleFxWheelsParticlesMaterial_Record>>) -> Void;

  public final native func GetMaterialsCount() -> Int32;

  public final native func GetMaterialsItem(index: Int32) -> wref<VehicleFxWheelsParticlesMaterial_Record>;

  public final native func GetMaterialsItemHandle(index: Int32) -> wref<VehicleFxWheelsParticlesMaterial_Record>;

  public final native func MaterialsContains(item: wref<VehicleFxWheelsParticlesMaterial_Record>) -> Bool;
}

public native class VehicleFxWheelsParticlesMaterial_Record extends TweakDBRecord {

  public final native func Material() -> wref<Material_Record>;

  public final native func MaterialHandle() -> ref<Material_Record>;

  public final native func Skid_marks_particles() -> ResRef;

  public final native func Tire_tracks_particles() -> ResRef;
}

public native class VehicleGear_Record extends TweakDBRecord {

  public final native func MaxSpeed() -> Float;

  public final native func MaxEngineRPM() -> Float;

  public final native func MinSpeed() -> Float;

  public final native func MinEngineRPM() -> Float;

  public final native func TorqueMultiplier() -> Float;
}

public native class VehicleImpactTraffic_Record extends TweakDBRecord {

  public final native func MinThreshold() -> Float;

  public final native func MaxThreshold() -> Float;

  public final native func MaxTimerStunned() -> Float;
}

public native class VehiclePIDSettings_Record extends TweakDBRecord {

  public final native func I() -> Float;

  public final native func P() -> Float;

  public final native func OutputSaturationLimit() -> Float;

  public final native func D() -> Float;

  public final native func IntegratorClampingLimit() -> Float;
}

public native class VehicleProceduralFPPCameraParams_Record extends TweakDBRecord {

  public final native func ImpactThreshold() -> Float;

  public final native func DisplacementThresholdForward() -> Float;

  public final native func MaxDisplacementDown() -> Float;

  public final native func ForwardDampFactor() -> Float;

  public final native func MaxAccelerationTiltAngle() -> Float;

  public final native func SteeringAngleRight() -> Float;

  public final native func MaxDisplacementUp() -> Float;

  public final native func DirectionFollowMaxVelocity() -> Float;

  public final native func MaxDisplacementRight() -> Float;

  public final native func MaxDisplacementLeft() -> Float;

  public final native func HeightDampFactor() -> Float;

  public final native func MaxDisplacementBackward() -> Float;

  public final native func ImpactDamperDampFactor() -> Float;

  public final native func MaxSlowdownTiltAngle() -> Float;

  public final native func SteeringDampFactor() -> Float;

  public final native func SideDampFactor() -> Float;

  public final native func SteeringAngleLeft() -> Float;

  public final native func SmoothSpeedDampFactor() -> Float;

  public final native func MaxDisplacementForward() -> Float;

  public final native func ImpactBlendSpeed() -> Float;

  public final native func ImpactStrengthCoef() -> Float;

  public final native func MaxRollCorrection() -> Float;

  public final native func MaxPitchCorrectionUP() -> Float;

  public final native func MaxPitchCorrectionDown() -> Float;

  public final native func RollCorrectionDampFactor() -> Float;

  public final native func PitchCorrectionDampFactor() -> Float;
}

public native class VehicleSteeringSettings_Record extends TweakDBRecord {

  public final native func SpeedForMaxDistance() -> Float;

  public final native func SpeedForMinDistance() -> Float;

  public final native func MinTargetDistance() -> Float;

  public final native func ErrorMagnitudeForMildSteering() -> Float;

  public final native func MildSteeringSpeed() -> Float;

  public final native func MaxTargetDistance() -> Float;

  public final native func FullSteeringSpeed() -> Float;

  public final native func ErrorMagnitudeForFullSteering() -> Float;
}

public native class VehicleStoppingSettings_Record extends TweakDBRecord {

  public final native func MildBrakingChangeSpeed() -> Float;

  public final native func ErrorMagnitudeForMildBrakingChange() -> Float;

  public final native func FullBrakingChangeSpeed() -> Float;

  public final native func ErrorMagnitudeForFullBrakingChange() -> Float;

  public final native func DecreaseMul() -> Float;
}

public native class VehicleSurfaceBinding_Record extends TweakDBRecord {

  public final native func SurfaceType() -> wref<VehicleSurfaceType_Record>;

  public final native func SurfaceTypeHandle() -> ref<VehicleSurfaceType_Record>;

  public final native func FrictionPreset() -> wref<VehicleWheelsFrictionPreset_Record>;

  public final native func FrictionPresetHandle() -> ref<VehicleWheelsFrictionPreset_Record>;
}

public native class VehicleSurfaceType_Record extends TweakDBRecord {

  public final native func DisplayName() -> String;

  public final native func MaterialNames() -> array<CName>;

  public final native func GetMaterialNamesCount() -> Int32;

  public final native func GetMaterialNamesItem(index: Int32) -> CName;

  public final native func MaterialNamesContains(item: CName) -> Bool;
}

public native class VehicleTPPCameraParams_Record extends TweakDBRecord {

  public final native func Fov() -> Float;

  public final native func SlopeCorrectionOnGroundPitchMin() -> Float;

  public final native func AutoCenterMaxSpeedThreshold() -> Float;

  public final native func CameraSphereRadius() -> Float;

  public final native func DrivingDirectionCompensationSpeedCoef() -> Float;

  public final native func CameraMinPitch() -> Float;

  public final native func SlopeCorrectionInAirPitchMin() -> Float;

  public final native func SlopeCorrectionInAirDampFactor() -> Float;

  public final native func SlopeCorrectionInAirPitchMax() -> Float;

  public final native func ElasticBoomForwardAccelerationCoef() -> Float;

  public final native func CameraBoomExtensionSpeed() -> Float;

  public final native func DrivingDirectionCompensationAngle() -> Float;

  public final native func SlopeCorrectionOnGroundStrength() -> Float;

  public final native func AutoCenterSpeed() -> Float;

  public final native func DrivingDirectionCompensationAngularVelocityMin() -> Float;

  public final native func SlopeCorrectionInAirSpeedMax() -> Float;

  public final native func ElasticBoomSpeedExpansionSpeedMin() -> Float;

  public final native func SlopeCorrectionInAirRaiseCoef() -> Float;

  public final native func AutoCenterStartTimeGamepad() -> Float;

  public final native func AutoCenterStartTimeMouse() -> Float;

  public final native func DrivingDirectionCompensationAngleSmooth() -> Float;

  public final native func ElasticBoomAccelerationExpansionLength() -> Float;

  public final native func SlopeCorrectionInAirFallCoef() -> Float;

  public final native func CameraMaxPitch() -> Float;

  public final native func SlopeCorrectionInAirStrength() -> Float;

  public final native func DrivingDirectionCompensationSpeedMax() -> Float;

  public final native func SlopeCorrectionOnGroundPitchMax() -> Float;

  public final native func DrivingDirectionCompensationSpeedMin() -> Float;

  public final native func ElasticBoomSpeedExpansionSpeedMax() -> Float;

  public final native func ElasticBoomSpeedExpansionLength() -> Float;

  public final native func HeadLookAtMaxYaw() -> Float;

  public final native func HeadLookAtCenterYawThreshold() -> Float;

  public final native func HeadLookAtMaxPitchUp() -> Float;

  public final native func HeadLookAtMaxPitchDown() -> Float;

  public final native func HeadLookAtRotationSpeed() -> Float;

  public final native func CollisionDetection() -> Bool;

  public final native func ElasticBoomVelocity() -> Bool;

  public final native func ElasticBoomAcceleration() -> Bool;

  public final native func DrivingDirectionCompensation() -> Bool;

  public final native func SlopeAdjustement() -> Bool;

  public final native func AirFlowDistortion() -> Bool;

  public final native func LockedCamera() -> Bool;
}

public native class VehicleTPPCameraPresetParams_Record extends TweakDBRecord {

  public final native func Height() -> CName;

  public final native func Distance() -> CName;

  public final native func LookAtOffset() -> Vector3;

  public final native func DefaultRotationPitch() -> Float;

  public final native func AirFlowDistortionSpeedMin() -> Float;

  public final native func BoomLength() -> Float;

  public final native func AirFlowDistortionSpeedMax() -> Float;

  public final native func AirFlowDistortionSizeHorizontal() -> Float;

  public final native func AirFlowDistortionSizeVertical() -> Float;
}

public native class VehicleWater_Record extends TweakDBRecord {

  public final native func SubmergedThreshold() -> Float;

  public final native func BuoyancyCoef() -> Float;

  public final native func LinearDampingCoef() -> Float;

  public final native func AngularDampingCoef() -> Float;

  public final native func DisableEngine() -> Bool;

  public final native func DisableAirControl() -> Bool;
}

public native class VehicleWeapon_Record extends TweakDBRecord {

  public final native func Slot() -> wref<AttachmentSlot_Record>;

  public final native func SlotHandle() -> ref<AttachmentSlot_Record>;

  public final native func Item() -> wref<Item_Record>;

  public final native func ItemHandle() -> ref<Item_Record>;

  public final native func WeaponShootAnimEvent() -> CName;

  public final native func MinYaw() -> Float;

  public final native func MaxYaw() -> Float;

  public final native func MaxPitch() -> Float;

  public final native func CycleTime() -> Float;

  public final native func AttackRange() -> Float;

  public final native func SingleShotProjectiles() -> Int32;

  public final native func SingleProjectileCycleTime() -> Float;

  public final native func WholeBurstProjectiles() -> Int32;

  public final native func MinPitch() -> Float;

  public final native func GenericTick() -> Bool;

  public final native func GenericShoot() -> Bool;

  public final native func CanFiendlyFire() -> Bool;
}

public native class VehicleWheelDimensionsPreset_Record extends TweakDBRecord {

  public final native func TireRadius() -> Float;

  public final native func RimRadius() -> Float;

  public final native func TireWidth() -> Float;

  public final native func WheelOffset() -> Float;
}

public native class VehicleWheelDimensionsSetup_Record extends TweakDBRecord {

  public final native func FrontPreset() -> wref<VehicleWheelDimensionsPreset_Record>;

  public final native func FrontPresetHandle() -> ref<VehicleWheelDimensionsPreset_Record>;

  public final native func BackPreset() -> wref<VehicleWheelDimensionsPreset_Record>;

  public final native func BackPresetHandle() -> ref<VehicleWheelDimensionsPreset_Record>;
}

public native class VehicleWheelDrivingPreset_Record extends TweakDBRecord {

  public final native func TireLongitudinalSlipEffectsMul() -> Float;

  public final native func TireRollingResistanceCoef() -> Float;

  public final native func Mass() -> Float;

  public final native func SwaybarDisplacementLimit() -> Float;

  public final native func TireFrictionCoef() -> Float;

  public final native func TireLateralSlipEffectsMul() -> Float;

  public final native func MaxBrakingTorque() -> Float;

  public final native func SpringDampingLowRateCompression() -> Float;

  public final native func SpringReboundDamping() -> Float;

  public final native func SpringBoundDampingLowRate() -> Float;

  public final native func ExtremeCompressionEventScalor() -> Float;

  public final native func SpringDampingHighRateCompression() -> Float;

  public final native func SwaybarStiffness() -> Float;

  public final native func SpringDamping() -> Float;

  public final native func FrictionMulLongitudinal() -> Float;

  public final native func FrictionMulLateral() -> Float;

  public final native func SwaybarLengthScalar() -> Float;

  public final native func SpringReboundDampingLowRate() -> Float;

  public final native func SpringStiffness() -> Float;

  public final native func VisualSuspensionDroop() -> Float;

  public final native func LogicalSuspensionCompressionLength() -> Float;

  public final native func VisualSuspensionCompressionLength() -> Float;

  public final native func WheelsVerticalOffset() -> Float;
}

public native class VehicleWheelDrivingSetup_2_Record extends VehicleWheelDrivingSetup_Record {

  public final native func F() -> wref<VehicleWheelRole_Record>;

  public final native func FHandle() -> ref<VehicleWheelRole_Record>;

  public final native func B() -> wref<VehicleWheelRole_Record>;

  public final native func BHandle() -> ref<VehicleWheelRole_Record>;
}

public native class VehicleWheelDrivingSetup_4_Record extends VehicleWheelDrivingSetup_Record {

  public final native func RF() -> wref<VehicleWheelRole_Record>;

  public final native func RFHandle() -> ref<VehicleWheelRole_Record>;

  public final native func RB() -> wref<VehicleWheelRole_Record>;

  public final native func RBHandle() -> ref<VehicleWheelRole_Record>;

  public final native func LF() -> wref<VehicleWheelRole_Record>;

  public final native func LFHandle() -> ref<VehicleWheelRole_Record>;

  public final native func LB() -> wref<VehicleWheelRole_Record>;

  public final native func LBHandle() -> ref<VehicleWheelRole_Record>;
}

public native class VehicleWheelRole_Record extends TweakDBRecord {

  public final native func IsDrive() -> Bool;

  public final native func IsMainBrake() -> Bool;

  public final native func IsHandBrake() -> Bool;
}

public native class VehicleWheelsFrictionMap_Record extends TweakDBRecord {

  public final native func DefaultFrictionPreset() -> wref<VehicleWheelsFrictionPreset_Record>;

  public final native func DefaultFrictionPresetHandle() -> ref<VehicleWheelsFrictionPreset_Record>;

  public final native func Surfaces(out outList: array<wref<VehicleSurfaceBinding_Record>>) -> Void;

  public final native func GetSurfacesCount() -> Int32;

  public final native func GetSurfacesItem(index: Int32) -> wref<VehicleSurfaceBinding_Record>;

  public final native func GetSurfacesItemHandle(index: Int32) -> wref<VehicleSurfaceBinding_Record>;

  public final native func SurfacesContains(item: wref<VehicleSurfaceBinding_Record>) -> Bool;
}

public native class VehicleWheelsFrictionPreset_Record extends TweakDBRecord {

  public final native func DisplayName() -> String;

  public final native func FrictionCurveSet() -> ResRef;

  public final native func LooseSurfaceLongDriveResistanceCoeff() -> Float;

  public final native func LooseSurfaceLongSpeedMax() -> Float;

  public final native func LooseSurfaceLatSpeedMax() -> Float;

  public final native func FrictionLongMultiplier() -> Float;

  public final native func LooseSurfaceLatResistanceCoeff() -> Float;

  public final native func LooseSurfaceLongNonDriveResistanceCoeff() -> Float;

  public final native func FrictionLatMultiplier() -> Float;

  public final native func AudioMaterialCoeff() -> Float;
}

public native class VendorCraftable_Record extends VendorWare_Record {

  public final native func Craftbook() -> wref<Craftable_Record>;

  public final native func CraftbookHandle() -> ref<Craftable_Record>;
}

public native class VendorExperience_Record extends VendorWare_Record {

  public final native func Proficiency() -> wref<Proficiency_Record>;

  public final native func ProficiencyHandle() -> ref<Proficiency_Record>;

  public final native func PricePerPoint(out outList: array<wref<StatModifier_Record>>) -> Void;

  public final native func GetPricePerPointCount() -> Int32;

  public final native func GetPricePerPointItem(index: Int32) -> wref<StatModifier_Record>;

  public final native func GetPricePerPointItemHandle(index: Int32) -> wref<StatModifier_Record>;

  public final native func PricePerPointContains(item: wref<StatModifier_Record>) -> Bool;
}

public native class VisionGroup_Record extends TweakDBRecord {

  public final native func GroupName() -> CName;

  public final native func Range() -> Float;
}

public native class VisionModuleBase_Record extends TweakDBRecord {

  public final native func Group() -> wref<VisionGroup_Record>;

  public final native func GroupHandle() -> ref<VisionGroup_Record>;

  public final native func Focus_cue() -> CName;

  public final native func Light_deact_mode() -> CName;

  public final native func Light_act_type() -> CName;

  public final native func Light_deact_type() -> CName;

  public final native func Default_cue() -> CName;

  public final native func Heavy_act_type() -> CName;

  public final native func Light_act_mode() -> CName;

  public final native func Heavy_act_mode() -> CName;

  public final native func Heavy_deact_mode() -> CName;

  public final native func Heavy_deact_type() -> CName;

  public final native func Prereq() -> CName;

  public final native func ObjectPrereq() -> CName;

  public final native func Light_act_delay() -> Float;

  public final native func Light_deact_duration() -> Float;

  public final native func Heavy_deact_duration() -> Float;

  public final native func Light_act_duration() -> Float;

  public final native func Heavy_act_delay() -> Float;

  public final native func Light_deact_delay() -> Float;

  public final native func Default_color() -> Int32;

  public final native func Focus_color() -> Int32;

  public final native func Heavy_act_duration() -> Float;

  public final native func Heavy_deact_delay() -> Float;

  public final native func Default_seeThroughWalls() -> Bool;

  public final native func Focus_seeThroughWalls() -> Bool;
}

public native class VisualTagsPrereq_Record extends IPrereq_Record {

  public final native func AllowedTags() -> array<CName>;

  public final native func GetAllowedTagsCount() -> Int32;

  public final native func GetAllowedTagsItem(index: Int32) -> CName;

  public final native func AllowedTagsContains(item: CName) -> Bool;

  public final native func Invert() -> Bool;
}

public native class WeaponManufacturer_Record extends TweakDBRecord {

  public final native func Name() -> String;

  public final native func Type() -> gamedataWeaponManufacturer;
}

public native class Weather_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;
}

public native class WeatherPreset_Record extends SpawnableObject_Record {

  public final native func Name() -> CName;
}

public native class Website_Record extends TweakDBRecord {

  public final native func Url() -> String;

  public final native func WidgetPath() -> ResRef;
}

public native class WeightedCharacter_Record extends TweakDBRecord {

  public final native func Character() -> wref<Character_Record>;

  public final native func CharacterHandle() -> ref<Character_Record>;

  public final native func Weight() -> Float;
}

public native class WorkspotActionType_Record extends TweakDBRecord {

  public final native func Comment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataWorkspotActionType;
}

public native class WorkspotCategory_Record extends TweakDBRecord {

  public final native func Comment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataWorkspotCategory;
}

public native class WorkspotReactionType_Record extends TweakDBRecord {

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataWorkspotReactionType;
}

public native class WorkspotStatusEffect_Record extends StatusEffect_Record {
}

public native class WorldMapFilter_Record extends TweakDBRecord {

  public final native func EnumComment() -> String;

  public final native func EnumName() -> CName;

  public final native func Type() -> gamedataWorldMapFilter;
}

public native class WorldMapFreeCameraSettings_Record extends TweakDBRecord {

  public final native func RotationMin() -> EulerAngles;

  public final native func RotationMax() -> EulerAngles;

  public final native func RotationSpeed() -> EulerAngles;

  public final native func RotationDefault() -> EulerAngles;

  public final native func ZoomDefaultInFastTravel() -> Float;

  public final native func PanSpeedMax() -> Float;

  public final native func MouseRotateStrength() -> Float;

  public final native func MousePanStrength() -> Float;

  public final native func ZoomSpeedMin() -> Float;

  public final native func ZoomDefault() -> Float;

  public final native func ZoomMax() -> Float;

  public final native func FovMin() -> Float;

  public final native func ZoomSpeedMax() -> Float;

  public final native func ZoomMin() -> Float;

  public final native func MouseZoomSpeedMin() -> Float;

  public final native func FovMax() -> Float;

  public final native func MouseZoomSpeedMax() -> Float;

  public final native func PanSpeedMin() -> Float;

  public final native func IconScaleMin() -> Float;

  public final native func IconScaleMax() -> Float;

  public final native func ZoomSpeed() -> Float;

  public final native func PitchRelativeToZoom() -> Bool;
}

public native class WorldMapSettings_Record extends TweakDBRecord {

  public final native func FreeCamera() -> wref<WorldMapFreeCameraSettings_Record>;

  public final native func FreeCameraHandle() -> ref<WorldMapFreeCameraSettings_Record>;

  public final native func TopDownCamera() -> wref<WorldMapFreeCameraSettings_Record>;

  public final native func TopDownCameraHandle() -> ref<WorldMapFreeCameraSettings_Record>;

  public final native func ZoomLevels(out outList: array<wref<WorldMapZoomLevel_Record>>) -> Void;

  public final native func GetZoomLevelsCount() -> Int32;

  public final native func GetZoomLevelsItem(index: Int32) -> wref<WorldMapZoomLevel_Record>;

  public final native func GetZoomLevelsItemHandle(index: Int32) -> wref<WorldMapZoomLevel_Record>;

  public final native func ZoomLevelsContains(item: wref<WorldMapZoomLevel_Record>) -> Bool;

  public final native func CursorBoundaryMin() -> Vector2;

  public final native func CursorBoundaryMax() -> Vector2;

  public final native func MouseZoomTransitionTime() -> Float;

  public final native func ZoomTransitionTime() -> Float;

  public final native func ZoomToZoomValue() -> Float;

  public final native func CameraModeTransitionTime() -> Float;

  public final native func ZoomToEnabledAtMinimumZoom() -> Float;

  public final native func EnableGroupTransitionAnimations() -> Bool;
}

public native class WorldMapZoomLevel_Record extends TweakDBRecord {

  public final native func MappinFilterGroups(out outList: array<wref<MappinUIFilterGroup_Record>>) -> Void;

  public final native func GetMappinFilterGroupsCount() -> Int32;

  public final native func GetMappinFilterGroupsItem(index: Int32) -> wref<MappinUIFilterGroup_Record>;

  public final native func GetMappinFilterGroupsItemHandle(index: Int32) -> wref<MappinUIFilterGroup_Record>;

  public final native func MappinFilterGroupsContains(item: wref<MappinUIFilterGroup_Record>) -> Bool;

  public final native func Rotation() -> EulerAngles;

  public final native func Fov() -> Float;

  public final native func Zoom() -> Float;

  public final native func IconScale() -> Float;

  public final native func PanSpeed() -> Float;

  public final native func ShowDistricts() -> Bool;

  public final native func ShowSubDistricts() -> Bool;

  public final native func CanChangeFilters() -> Bool;
}

public native class XPPoints_inline0_Record extends ConstantStatModifier_Record {
}

public native class device_gameplay_role_Record extends ScannableData_Record {
}

public native class device_role_action_desctiption_Record extends ScannableData_Record {
}

public native class device_scanning_data_Record extends ScannableData_Record {
}

public native class npc_scanning_data_Record extends ScannableData_Record {
}

public final native struct WrappedEntIDArray {

  public native let arr: array<EntityID>;
}

public native class InfoBox extends IScriptable {

  public final native func AddCategory(category: String, opt color: Color) -> Void;

  public final native func AddStringValue(name: String, value: String) -> Void;

  public final native func AddVector4Value(name: String, value: Vector4) -> Void;

  public final native func AddVector2Value(name: String, value: Vector2) -> Void;

  public final native func AddQuatValue(name: String, value: Quaternion) -> Void;

  public final native func AddColorValue(name: String, value: Color, opt coloredValue: Bool) -> Void;

  public final native func AddFloatValue(name: String, value: Float) -> Void;

  public final native func AddIntValue(name: String, value: Int32) -> Void;

  public final native func AddUintValue(name: String, value: Uint32) -> Void;

  public final native func AddBoolValue(name: String, value: Bool) -> Void;
}

public class ResloveFocusClueDescriptionEvent extends Event {
}

public class OnAttachedEvent extends Event {
}

public class OutlineItemRequestEvent extends Event {

  public let outlineRequest: ref<OutlineRequest>;
}

public final native class entAppearanceChangeFinishEvent extends Event {
}

public final native class UnequipStart extends AttachmentSlotEvent {
}

public final native class UnequipEnd extends AttachmentSlotEvent {
}

public final native class EquipStart extends AttachmentSlotEvent {

  public final native func GetItemID() -> ItemID;

  public final native func SetItemID(itemId: ItemID) -> Void;

  public final native func GetStartingRenderingPlane() -> ERenderingPlane;

  public final native func SetStartingRenderingPlane(renderingPlane: ERenderingPlane) -> Void;

  public final native func GetFirstEquip() -> Bool;

  public final native func SetFirstEquip(firstEquip: Bool) -> Void;

  public final native func SetHighPriority(highPriority: Bool) -> Void;
}

public final native class EquipEnd extends AttachmentSlotEvent {

  public final native func GetItemID() -> ItemID;

  public final native func SetItemID(itemId: ItemID) -> Void;
}

public native class AttachmentSlotsScriptListener extends AttachmentSlotsListener {
}

public native class entPostInitializeEvent extends Event {
}

public native class entPreUninitializeEvent extends Event {
}

public native class gameProjectedHitEvent extends gameHitEvent {
}

public final native class gameCloseByEvent extends Event {

  public native let position: Vector4;

  public native let forward: Vector4;

  public native let instigator: wref<GameObject>;

  public native let attackData: ref<AttackData>;
}

public final native class gameUnconsciousEvent extends Event {
}

public final native class gameDropItemEvent extends Event {

  public native let slotId: TweakDBID;
}

public final native class gameCoverHitEvent extends gameHitEvent {

  public native let cover: wref<GameObject>;
}

public class WillDieSoonEvent extends Event {
}

public native struct IKTargetRef {

  public native let id: Int32;

  public native let part: CName;
}

public native struct IKTargetRequest {

  public native let weightPosition: Float;

  public native let weightOrientation: Float;

  public native let transitionIn: Float;

  public native let transitionOut: Float;

  public native let priority: Int32;
}

public native class IKTargetAddEvent extends AnimTargetAddEvent {

  public native let request: IKTargetRequest;

  public native let targetPositionProvider: ref<IPositionProvider>;

  public native let orientationProvider: ref<IOrientationProvider>;

  public native let outIKTargetRef: IKTargetRef;

  public final native func SetEntityOrientationTarget(targetEntity: wref<Entity>, slotTargetName: CName, orientationOffsetEntitySpace: Quaternion) -> Void;

  public final native func SetStaticOrientationTarget(staticOrientationWs: Quaternion) -> Void;
}

public final native class OnInventoryEmptyEvent extends Event {
}

public final native class InventoryChangedEvent extends Event {
}

public final native class MakeInventoryShareableEvent extends Event {
}

public final native class SetLootInteractionAccessibilityEvent extends Event {

  public native let accessible: Bool;
}

public final native class ContainerFilledEvent extends Event {
}

public native class LookAtFacingPositionProvider extends IPositionProvider {

  public final native func SetCameraComponent(owner: ref<GameObject>) -> Void;
}

public native struct LookAtRef {

  public native let id: Int32;

  public native let part: CName;
}

public native class StoppedMovingEvent extends Event {
}

public final native class gameQuickItemsEvent extends Event {

  public native let questName: CName;
}

public native class FinalizeActivationTPPRepresentationEvent extends Event {
}

public native class FinalizeDeactivationTPPRepresentationEvent extends Event {
}

public native struct gameRicochetData {

  public native let count: Int32;

  public native let range: Float;

  public native let targetSearchAngle: Float;

  public native let minAngle: Float;

  public native let maxAngle: Float;

  public native let chance: Float;
}

public final native class gameprojectileShootTargetEvent extends gameprojectileShootEvent {
}

public final native class gameprojectileBroadPhaseHitEvent extends Event {

  public native let traceResult: TraceResult;

  public native let position: Vector4;

  public native let hitObject: wref<Entity>;

  public native let hitComponent: wref<IComponent>;
}

public final native class gameprojectileFollowEvent extends Event {

  public native let followObject: wref<GameObject>;
}

public final native class gameprojectileAcceleratedMovementEvent extends gameprojectileLinearMovementEvent {
}

public final native class EndTakedownEvent extends Event {
}

public final native class gameProperlySeenByPlayerEvent extends Event {
}

public class RemoveCachedStatusEffectFXEvent extends Event {
}

public final native class ReactionEvent extends Event {

  public native let interactionType: CName;

  public native let state: gameinteractionsReactionState;

  public native let interactionItems: array<RequestItemParam>;
}

public final native class ScanningActionFinishedEvent extends Event {
}

public final native class ScanningEventForInstigator extends ScanningEvent {
}

public final native class ScanningModeEvent extends Event {

  public native let mode: gameScanningMode;
}

public final native class TaggedEvent extends Event {

  public native let state: Bool;
}

public final native class ScanningPulseStartEvent extends Event {

  public native let targetsAffected: Int32;
}

public final native class ScanningPulseEvent extends Event {
}

public native class PSMPostponedParameterInt extends PSMPostponedParameterBase {

  public native let value: Int32;
}

public native class PSMPostponedParameterFloat extends PSMPostponedParameterBase {

  public native let value: Float;
}

public native class PSMPostponedParameterVector extends PSMPostponedParameterBase {

  public native let value: Vector4;
}

public native class PSMPostponedParameterCName extends PSMPostponedParameterBase {

  public native let value: CName;
}

public native class TaggedAIEvent extends AIEvent {

  public native let tags: array<CName>;

  public final native func AddTag(tag: CName) -> Void;
}

public native class SignalEvent extends TaggedAIEvent {
}

public native class AICommandEvent extends AIEvent {

  public native let command: ref<AICommand>;
}

public native class AICommandStateEvent extends Event {

  public native let command: ref<AICommand>;

  public native let newState: AICommandState;
}

public class StimuliEffectEvent extends Event {

  public let stimuliEventName: CName;

  public let targetPoint: Vector4;
}

public final native class AreaEnteredEvent extends TriggerEvent {
}

public final native class AreaExitedEvent extends TriggerEvent {
}

public native class VehicleRepairEvent extends Event {
}

public native class HasVehicleBeenFlippedOverForSomeTimeEvent extends Event {
}

public native class VehicleReadyToParkEvent extends Event {
}

public final native class gameVisionModuleEvent extends Event {

  public native let changedModule: CName;

  public native let activated: Bool;

  public native let activator: wref<GameObject>;
}

public final native class gameVisionModeEvent extends Event {

  public native let activated: Bool;

  public native let type: gameVisionModeType;
}

public final native class gameVisionModeVisualEvent extends Event {

  public native let group: TweakDBID;

  public native let changedModule: CName;

  public native let activated: Bool;

  public native let meshComponentName: CName;

  public native let type: gameVisionModeType;
}

public native class gameVisionModeHideEvent extends Event {

  public native let hide: Bool;

  public native let type: gameVisionModeType;
}

public final native class gameVisionModeMappinEvent extends Event {

  public native let show: Bool;
}

public final native class gameweaponeventsOwnerAimEvent extends Event {

  public native let isAiming: Bool;
}

public native class InteractionChoiceCaptionIconPart extends InteractionChoiceCaptionPart {

  public native let iconRecord: wref<ChoiceCaptionIconPart_Record>;
}

public native class InteractionChoiceCaptionBluelinePart extends InteractionChoiceCaptionPart {

  public native const let blueline: ref<BluelineDescription>;
}

public abstract native class EffectDurationModifier extends IScriptable {
}

public native class EffectDurationModifier_Scripted extends EffectDurationModifier {
}

public native struct EffectDurationModifierScriptContext {

  public final static native func GetTimeDelta(modifierCtx: EffectDurationModifierScriptContext) -> Float;

  public final static native func GetRemainingTime(modifierCtx: EffectDurationModifierScriptContext) -> Float;

  public final static native func SetRemainingTime(modifierCtx: EffectDurationModifierScriptContext, time: Float) -> Void;
}

public native struct EffectScriptContext {

  public final static native func GetGameInstance(ctx: EffectScriptContext) -> GameInstance;

  public final static native func ReportError(ctx: EffectScriptContext, error: String) -> Void;

  public final static native func GetSharedData(ctx: EffectScriptContext) -> EffectData;

  public final static native func GetBlackboard(ctx: EffectScriptContext) -> ref<IBlackboard>;

  public final static native func GetInstigator(ctx: EffectScriptContext) -> ref<Entity>;

  public final static native func GetSource(ctx: EffectScriptContext) -> ref<Entity>;

  public final static native func GetWeapon(ctx: EffectScriptContext) -> ref<Entity>;

  public final static native func SpawnEffect(ctx: EffectScriptContext, resource: FxResource, transform: WorldTransform, opt ignoreTimeDilation: Bool) -> Void;
}

public class EvaluateEncumbranceEvent extends Event {
}

public class VoiceOverQuickHackFeedbackEvent extends Event {

  public let voName: CName;

  public let owner: wref<GameObject>;
}

public abstract native class EffectObjectFilter extends EffectNode {
}

public abstract native class EffectObjectGroupFilter extends EffectObjectFilter {
}

public native class EffectObjectGroupFilter_Scripted extends EffectObjectGroupFilter {
}

public native struct EffectGroupFilterScriptContext {

  public native let resultIndices: array<Int32>;

  public final static native func GetTimeDelta(filterCtx: EffectGroupFilterScriptContext) -> Float;

  public final static native func GetNumAgents(filterCtx: EffectGroupFilterScriptContext) -> Int32;

  public final static native func GetEntity(filterCtx: EffectGroupFilterScriptContext, index: Int32) -> ref<Entity>;

  public final static native func GetHitPosition(filterCtx: EffectGroupFilterScriptContext, index: Int32) -> Vector4;

  public final static native func GetHitNormal(filterCtx: EffectGroupFilterScriptContext, index: Int32) -> Vector4;
}

public native class ForceResetAmmoEvent extends Event {

  public final native func SetTargetValue(targetValue: Int32) -> Void;
}

public native struct EffectRef {
}

public native struct EffectProviderScriptContext {

  public final static native func GetTimeDelta(providerCtx: EffectProviderScriptContext) -> Float;

  public final static native func AddTarget(ctx: EffectScriptContext, providerCtx: EffectProviderScriptContext, opt target: ref<Entity>) -> Void;
}

public native struct EffectSingleFilterScriptContext {

  public final static native func GetTimeDelta(filterCtx: EffectSingleFilterScriptContext) -> Float;

  public final static native func GetEntity(filterCtx: EffectSingleFilterScriptContext) -> ref<Entity>;

  public final static native func GetHitPosition(filterCtx: EffectSingleFilterScriptContext) -> Vector4;

  public final static native func GetHitNormal(filterCtx: EffectSingleFilterScriptContext) -> Vector4;
}

public native struct EffectPreloadScriptContext {

  public final static native func PreloadFxResource(ctx: EffectPreloadScriptContext, resource: FxResource) -> Void;
}

public abstract native class EffectObjectProvider extends EffectNode {
}

public abstract native class EffectObjectSingleFilter extends EffectObjectFilter {
}

public abstract native class EffectAction extends IScriptable {
}

public abstract native class EffectPreAction extends EffectAction {
}

public abstract native class EffectPostAction extends EffectAction {
}

public abstract native class gameEffectObjectFilter extends EffectNode {
}

public abstract native class gameEffectObjectGroupFilter extends gameEffectObjectFilter {
}

public native class gameEffectObjectFilter_OnlyNearest extends gameEffectObjectGroupFilter {
}

public native class EffectObjectProvider_Scripted extends EffectObjectProvider {
}

public native class EffectObjectSingleFilter_Scripted extends EffectObjectSingleFilter {
}

public native class EffectPreAction_Scripted extends EffectPreAction {
}

public native class EffectPostAction_Scripted extends EffectPostAction {
}

public native struct EffectInputParameter_Bool {

  public final static native func Get(ctx: EffectInputParameter_Bool, bb: ref<IBlackboard>) -> Bool;
}

public native struct EffectInputParameter_Int {

  public final static native func Get(ctx: EffectInputParameter_Int, bb: ref<IBlackboard>) -> Int32;
}

public native struct EffectInputParameter_Float {

  public final static native func Get(ctx: EffectInputParameter_Float, bb: ref<IBlackboard>) -> Float;
}

public native struct EffectInputParameter_CName {

  public final static native func Get(ctx: EffectInputParameter_CName, bb: ref<IBlackboard>) -> CName;
}

public native struct EffectInputParameter_String {

  public final static native func Get(ctx: EffectInputParameter_String, bb: ref<IBlackboard>) -> String;
}

public native struct EffectInputParameter_Vector {

  public final static native func Get(ctx: EffectInputParameter_Vector, bb: ref<IBlackboard>) -> Vector4;
}

public native struct EffectInputParameter_Quat {

  public final static native func Get(ctx: EffectInputParameter_Quat, bb: ref<IBlackboard>) -> Quaternion;
}

public native struct EffectInputParameter_Variant {

  public final static native func Get(ctx: EffectInputParameter_Variant, bb: ref<IBlackboard>) -> Variant;
}

public native struct EffectOutputParameter_Bool {

  public final static native func Set(ctx: EffectOutputParameter_Bool, bb: ref<IBlackboard>, value: Bool) -> Void;
}

public native struct EffectOutputParameter_Int {

  public final static native func Set(ctx: EffectOutputParameter_Int, bb: ref<IBlackboard>, value: Int32) -> Void;
}

public native struct EffectOutputParameter_Float {

  public final static native func Set(ctx: EffectOutputParameter_Float, bb: ref<IBlackboard>, value: Float) -> Void;
}

public native struct EffectOutputParameter_CName {

  public final static native func Set(ctx: EffectOutputParameter_CName, bb: ref<IBlackboard>, value: CName) -> Void;
}

public native struct EffectOutputParameter_String {

  public final static native func Set(ctx: EffectOutputParameter_String, bb: ref<IBlackboard>, value: String) -> Void;
}

public native struct EffectOutputParameter_Vector {

  public final static native func Set(ctx: EffectOutputParameter_Vector, bb: ref<IBlackboard>, value: Vector4) -> Void;
}

public native struct EffectOutputParameter_Quat {

  public final static native func Set(ctx: EffectOutputParameter_Quat, bb: ref<IBlackboard>, value: Quaternion) -> Void;
}

public native struct EffectOutputParameter_Variant {

  public final static native func Set(ctx: EffectOutputParameter_Variant, bb: ref<IBlackboard>, value: Variant) -> Void;
}

public native struct EffectInfo {

  public final static native func GetGatheredCount(info: EffectInfo) -> Int32;

  public final static native func GetFilteredCount(info: EffectInfo) -> Int32;

  public final static native func GetProcessedCount(info: EffectInfo) -> Int32;
}

public final native class EffectInfoEvent extends Event {

  public native let tag: String;

  public native let entitiesGathered: Uint32;

  public native let entitiesFiltered: Uint32;

  public native let entitiesProcessed: Uint32;
}

public abstract native class IComparisonPrereq extends IPrereq {
}

public native class WasScannedPrereq extends IPrereq {
}

public native class HotSpotLayerDefinition extends gameinteractionsNodeDefinition {

  public native let enabled: Bool;

  public native let tag: CName;
}

public native class InteractionManager extends IInteractionManager {

  public final native func IsInteractionLookAtTarget(const activatorOwner: wref<GameObject>, const hotSpotOwner: wref<GameObject>) -> Bool;
}

public native struct MovementParameters {

  public edit native let type: moveMovementType;

  public edit native let maxSpeed: Float;

  public edit native let acceleration: Float;

  public edit native let deceleration: Float;

  public edit native let rotationSpeed: Float;
}

public native class MovingPlatformMovementLinear extends IMovingPlatformMovementPointToPoint {
}

public native class BeforeArrivedAt extends Event {
}

public final native class gameObjectActionRefreshEvent extends Event {
}

public native class PrereqStateChangedEvent extends Event {

  public final native const func GetPrereqState() -> ref<PrereqState>;
}

public final native class gameScriptedPrereqPSChangeListenerWrapper extends IScriptable {

  public final static native func CreateListener(gameInstance: GameInstance, persistentId: PersistentID, prereqState: wref<PrereqState>) -> ref<gameScriptedPrereqPSChangeListenerWrapper>;
}

public final native class gameScriptedPrereqMountingListenerWrapper extends IScriptable {

  public final static native func CreateVehicleListener(gameInstance: GameInstance, vehicleId: EntityID, prereqState: wref<PrereqState>) -> ref<gameScriptedPrereqMountingListenerWrapper>;
}

public class AlwaysTruePrereqState extends PrereqState {
}

public class HitIsBodyPartHeadPrereq extends GenericHitPrereq {
}

public class HitIsBodyPartLimbPrereq extends GenericHitPrereq {
}

public class HitIsBodyPartTorsoPrereq extends GenericHitPrereq {
}

public class HitIsInstigatorPlayerPrereq extends GenericHitPrereq {
}

public class HitIsRicochetPrereq extends GenericHitPrereq {
}

public class HitIsSourceGrenadePrereq extends GenericHitPrereq {
}

public class HitReceivedPrereq extends GenericHitPrereq {
}

public final native class ItemCreationPrereqDataWrapper extends IScriptable {

  public final native func GetItemData() -> ref<gameItemData>;

  public final native func GetOwner() -> ref<IScriptable>;

  public final native func IsCreatedOnNPC() -> Bool;

  public final native func IsCreatedOnPlayer() -> Bool;

  public final native func IsCreatedOnLevel() -> Bool;
}

public class OnOffPrereqState extends PrereqState {
}

public class InvestedPerksPrereqState extends PrereqState {
}

public class PerkPrereqState extends PrereqState {
}

public class WeaponStateMachinePrereqState extends PrereqState {
}

public class WeaponStateMachinePrereq extends IScriptablePrereq {
}

public class BodyCarryingPSMPrereqState extends PlayerStateMachinePrereqState {
}

public class BodyDisposalPSMPrereqState extends PlayerStateMachinePrereqState {
}

public class CombatPSMPrereqState extends PlayerStateMachinePrereqState {
}

public class DetailedLocomotionPSMPrereqState extends PlayerStateMachinePrereqState {
}

public class FallPSMPrereqState extends PlayerStateMachinePrereqState {
}

public class HighLevelPSMPrereqState extends PlayerStateMachinePrereqState {
}

public class IsInWorkspotPSMPrereqState extends PlayerStateMachinePrereqState {
}

public class LocomotionPSMPrereqState extends PlayerStateMachinePrereqState {
}

public class MeleePSMPrereqState extends PlayerStateMachinePrereqState {
}

public class MeleeWeaponPSMPrereqState extends PlayerStateMachinePrereqState {
}

public class RangedWeaponPSMPrereqState extends PlayerStateMachinePrereqState {
}

public class SwimmingPSMPrereqState extends PlayerStateMachinePrereqState {
}

public class TakedownPSMPrereqState extends PlayerStateMachinePrereqState {
}

public class TimeDilationPSMPrereqState extends PlayerStateMachinePrereqState {
}

public class UpperBodyPSMPrereqState extends PlayerStateMachinePrereqState {
}

public class VehiclePSMPrereqState extends PlayerStateMachinePrereqState {
}

public class ZonesPSMPrereqState extends PlayerStateMachinePrereqState {
}

public final native class gameScriptedPrereqAttitudeListenerWrapper extends IScriptable {

  public final static native func CreateListener(gameInstance: GameInstance, agent1: wref<AttitudeAgent>, agent2: wref<AttitudeAgent>, prereqState: wref<PrereqState>) -> ref<gameScriptedPrereqAttitudeListenerWrapper>;
}

public class NPCRecordHasVisualTagState extends PrereqState {
}

public class EntityHasVisualTagPrereqState extends PrereqState {
}

public class NPCIsAggressiveState extends PrereqState {
}

public class NPCRarityPrereqState extends PrereqState {
}

public class NPCReactionPresetPrereqState extends PrereqState {
}

public final native class gameScriptedPrereqSceneInspectionListenerWrapper extends IScriptable {

  public final static native func CreateEntityListener(gameInstance: GameInstance, entityId: EntityID, prereqState: wref<PrereqState>) -> ref<gameScriptedPrereqSceneInspectionListenerWrapper>;
}

public class CharacterDataPrereqState extends PrereqState {
}

public class HighLevelNPCStatePrereqState extends NPCStatePrereqState {
}

public class IsHumanPrereqState extends PrereqState {
}

public class IsPlayerPrereqState extends PrereqState {
}

public class IsPlayerReachablePrereqState extends PrereqState {
}

public class StanceNPCStatePrereqState extends NPCStatePrereqState {
}

public class UpperBodyNPCStatePrereqState extends NPCStatePrereqState {
}

public class RandomChancePrereqState extends PrereqState {
}

public class SetChancePrereqState extends PrereqState {
}

public class DialogueChoiceHubPrereqState extends PrereqState {
}

public native struct animAnimFeatureEntry {
}

public native struct StateSnapshot {

  public native let instanceData: StateMachineInstanceData;

  public native let stateMachineName: CName;

  public native let stateName: CName;

  public native let running: Bool;

  public native let transitionJustHappened: Bool;
}

public native struct SnapshotResult {

  public native let snapshot: StateSnapshot;

  public native let valid: Bool;
}

public native struct StateSnapshotsContainer {

  public final static native func GetSnapshot(self: StateSnapshotsContainer, stateMachineIdentifier: StateMachineIdentifier) -> SnapshotResult;
}

public native struct StateResultVector {

  public native let valid: Bool;

  public native let value: Vector4;
}

public native struct StateResultString {

  public native let valid: Bool;

  public native let value: String;
}

public native class ItemEquipRequest extends IScriptable {

  public native let slotId: TweakDBID;

  public native let itemId: ItemID;

  public native let startingRenderingPlane: ERenderingPlane;
}

public native class ItemUnequipRequest extends IScriptable {

  public native let slotId: TweakDBID;

  public native let itemId: ItemID;

  public native let instant: Bool;
}

public native class ClimbParameters extends ClimbParametersBase {

  public final native func SetHorizontalDuration(val: Float) -> Void;

  public final native func SetVerticalDuration(val: Float) -> Void;

  public final native func SetClimbType(val: Int32) -> Void;
}

public native class VaultParameters extends ClimbParametersBase {

  public final native func SetObstacleDestination(val: Vector4) -> Void;

  public final native func SetObstacleDepth(val: Float) -> Void;

  public final native func SetMinSpeed(val: Float) -> Void;
}

public native class LocomotionSwimmingParameters extends LocomotionParameters {

  public final native func SetBuoyancyLineFraction(val: Float) -> Void;

  public final native func SetDragCoefficient(val: Float) -> Void;
}

public native class LocomotionBraindanceParameters extends LocomotionParameters {

  public final native func SetUpperMovementLimit(val: Float) -> Void;

  public final native func SetLowerMovementLimit(val: Float) -> Void;
}

public native struct SecureFootingParameters {

  public native let unsecureCollisionFilterName: CName;

  public native let slopeCurveName: CName;

  public native let maxVerticalDistanceForCentreRaycast: Float;

  public native let maxAngularDistanceForOtherRaycasts: Float;

  public native let standingMinNumberOfRaycasts: Uint32;

  public native let standingMinCollisionHorizontalDistance: Float;

  public native let fallingMinNumberOfRaycasts: Uint32;

  public native let fallingMinCollisionHorizontalDistance: Float;

  public native let maxStaticGroundFactor: Float;

  public native let minVelocityForFalling: Float;

  public native let needsCentreRaycast: Bool;
}

public native class ReactionData extends IScriptable {

  public native let choiceName: CName;
}

public native struct TargetSearchFilter {
}

public native class SceneTier1Data extends SceneTierData {
}

public native class SceneTier2Data extends SceneTierData {

  public native let walkType: Tier2WalkType;
}

public native struct MotionConstrainedTierDataParams {

  public native let splineRef: NodeRef;

  public native let adjustingSpeed: Float;

  public native let adjustingDuration: Float;

  public native let travellingSpeed: Float;

  public native let travellingDuration: Float;

  public native let notificationBackwardIndex: Int32;
}

public native class SceneTier4Data extends SceneTierDataMotionConstrained {
}

public native class SceneTier5Data extends SceneTierDataMotionConstrained {
}

public native class VehicleRadioStationChanged extends Event {

  public native let isActive: Bool;

  public native let radioIndex: Uint32;

  public native let radioStationName: CName;

  public native let radioSongName: CName;
}

public native class VehicleRadioSongChanged extends Event {

  public native let radioSongName: CName;
}

public native class VehicleCameraManagerFT extends VehicleCameraManager {

  public final native func FT_IsSceneModeActive() -> Bool;

  public final native func FT_RequestSceneMode(active: Bool) -> Void;

  public final native func FT_GetActiveCameraType() -> vehicleCameraType;
}

public native class WeakspotDestroyedEvent extends Event {
}

public native struct Frustum {
}

public native struct RectF {

  public native let Left: Float;

  public native let Top: Float;

  public native let Right: Float;

  public native let Bottom: Float;
}

public native struct Sphere {

  public native let CenterRadius2: Vector4;

  public final static native func IntersectRay(sphere: Sphere, orign: Vector4, direction: Vector4, out enterPoint: Vector4, out exitPoint: Vector4) -> Int32;

  public final static native func IntersectEdge(sphere: Sphere, a: Vector4, b: Vector4, out intersectionPoint0: Vector4, out intersectionPoint1: Vector4) -> Int32;
}

public native class CallbackHandle extends IScriptable {
}

public native class PhysicalCollisionEvent extends Event {

  public native let myComponent: wref<IScriptable>;

  public native let otherEntity: wref<IScriptable>;

  public native let otherComponent: wref<IScriptable>;

  public native let worldPosition: Vector4;

  public native let worldNormal: Vector4;

  public native let deltaVelocity: Vector4;

  public native let impulse: Float;
}

public native class HitCharacterControllerEvent extends Event {

  public native let entity: wref<Entity>;

  public native let component: wref<IComponent>;
}

public class LifePathBluelinePart extends BluelinePart {

  public let m_record: ref<LifePath_Record>;
}

public class BuildBluelinePart extends BluelinePart {

  public let m_record: ref<PlayerBuild_Record>;

  public let m_lhsValue: Int32;

  public let m_rhsValue: Int32;

  public let m_comparisonOperator: ECompareOp;
}

public class PaymentBluelinePart extends BluelinePart {

  public let m_playerMoney: Int32;

  public let m_paymentMoney: Int32;
}

public final native class BluelineDescription extends IScriptable {

  public native let parts: array<ref<BluelinePart>>;

  public let m_logicOperator: ELogicOperator;
}

public native class ResourceMetricsReportGenerator extends IScriptable {

  public final static native func WriteReportToFile(fileName: String) -> Void;
}

public final native class StopWeaponFireSoundEvent extends Event {
}

public final native class AudioNotifyItemEquippedEvent extends Event {

  public native let itemName: CName;
}

public final native class WeaponPreFireEvent extends Event {
}

public final native class PickUpBodyBreathingEvent extends Event {
}

public final native class DropBodyBreathingEvent extends Event {
}

public class CityLightSystemUpdateEvent extends Event {
}

public class UnregisterTimetableRequest extends ScriptableSystemRequest {

  public let requesterData: PSOwnerData;
}

public native struct RegisterNewAbilityCooldownRequest {

  public native let owner: wref<Entity>;

  public native let ownerItemId: ItemID;

  public native let ownerRecord: TweakDBID;

  public native let cooldownName: CName;

  public native let duration: Float;

  public native let type: gamedataStatType;

  public native let modifiable: Bool;

  public native let abilityType: gamedataStatType;
}

public native struct RegisterCooldownFromRecordRequest {

  public native let owner: wref<Entity>;

  public native let ownerItemId: ItemID;

  public native let ownerRecord: TweakDBID;

  public native let cooldownRecord: ref<Cooldown_Record>;
}

public class RemoveCooldownRequest extends ScriptableSystemRequest {

  public let cid: Int32;
}

public struct SCooldown {

  public let delayId: DelayID;

  public let removeId: DelayID;

  public let cid: Int32;

  public let cdName: CName;

  public let owner: wref<Entity>;

  public let ownerItemID: ItemID;

  public let ownerRecord: TweakDBID;

  public let duration: Float;

  public let type: gamedataStatType;

  public let durationMultiplier: Float;

  public let modifiable: Bool;

  public let affectedByTimeDilation: Bool;

  public let abilityType: gamedataStatType;

  public let statMod: ref<gameStatModifierData>;
}

public native class CoverDemandHolder extends IScriptable {

  public final native func GetCoverID() -> Uint64;
}

public abstract final native class DebugCheatsSystem extends IDebugCheatsSystem {

  public final native func EnableCheat(object: ref<GameObject>, cheatType: gamecheatsystemFlag, enable: Bool) -> Bool;

  public final native func ToggleCheat(object: ref<GameObject>, gmType: gamecheatsystemFlag) -> Bool;

  public final native func HasCheat(object: ref<GameObject>, gmType: gamecheatsystemFlag) -> Bool;

  public final native func IncreaseGlobalTimeDilation() -> Void;

  public final native func DecreaseGlobalTimeDilation() -> Void;

  public final native func IncreasePlayerTimeDilation() -> Void;

  public final native func DecreasePlayerTimeDilation() -> Void;
}

public abstract final native class DebugPlayerBreadcrumbs extends IDebugPlayerBreadcrumbs {
}

public class RegisterActiveClueOwnerkRequest extends ScriptableSystemRequest {

  public let ownerID: EntityID;
}

public static native func OperatorAdd(a: WorldPosition, b: Vector4) -> WorldPosition;

public class CombatQueriesRequest extends SignalUserData {
}

public final native class mpPlayerManager extends gameIPlayerManager {

  public final native func GetPlayerNicknameByGameObject(gameObject: ref<GameObject>) -> String;
}

public abstract native class gameIGameRulesSystem extends IGameSystem {

  public final native func SendChat(chat: String) -> Void;

  public final native func IsPlayerReady(PeerID: String) -> Bool;

  public final native func IsGameVictorious() -> Bool;

  public final native func IsGameUnsuccessful() -> Bool;

  public final native func GetHeistStatus() -> grsHeistStatus;
}

public native class GOGRewardsScriptListener extends IScriptable {
}

public native struct GOGRewardPack {

  public native const let id: String;

  public native const let title: String;

  public native const let reason: String;

  public native const let iconSlot: CName;

  public native const let rewards: array<Uint64>;
}

public native class GOGRewardsSystem extends IScriptable {

  public final native func GetStatus() -> GOGRewardsSystemStatus;

  public final native func GetError() -> GOGRewardsSystemErrors;

  public final native func RequestInitialStatus() -> Void;

  public final native func SetScriptListener(listener: ref<GOGRewardsScriptListener>) -> Void;

  public final native func FindRewardRecordByRewardToken(token: Uint64) -> wref<GOGReward_Record>;

  public final native func IsRewardUnlocked(rewardRecord: ref<GOGReward_Record>) -> Bool;

  public final native func GetUnlockedRewardPacks() -> array<GOGRewardPack>;

  public final native func GetRegistrationUrl() -> String;
}

public class NameplateChangedEvent extends ScriptableSystemRequest {

  public let entity: EntityID;
}

public class Crosshair extends ModuleInstance {
}

public class AimAssist extends ModuleInstance {
}

public class GAMEOBJECT_Actor extends HUDActor {
}

public class VEHICLE_Actor extends HUDActor {
}

public class DEVICE_Actor extends HUDActor {
}

public class PUPPET_ACtor extends HUDActor {
}

public class DEBUG_actorsClassNamesCount extends IScriptable {

  public let className: CName;

  public let count: Int32;
}

public class CloseQHmenu extends Event {
}

public abstract native class JournalQuestGuidanceMarker extends JournalEntry {
}

public abstract native class JournalQuestMapPin extends JournalQuestMapPinBase {
}

public abstract native class JournalQuestMapPinLink extends JournalEntry {
}

public abstract native class JournalImageEntry extends JournalEntry {

  public final native const func GetImageID() -> TweakDBID;

  public final native const func GetThumbnailImageID() -> TweakDBID;
}

public abstract native class JournalQuestSubObjective extends JournalQuestObjectiveBase {
}

public abstract native class JournalQuestPhase extends JournalContainerEntry {
}

public abstract native class JournalPhoneChoiceGroup extends JournalContainerEntry {
}

public abstract native class JournalPhoneConversation extends JournalContainerEntry {

  public final native const func GetTitle() -> String;
}

public abstract native class JournalBriefingMapSection extends JournalBriefingBaseSection {

  public final native const func GetMapLocation() -> Vector4;
}

public abstract native class JournalBriefingVideoSection extends JournalBriefingBaseSection {

  public final native const func GetVideoPath() -> ResRef;
}

public abstract native class JournalBriefingPaperDollSection extends JournalBriefingBaseSection {
}

public abstract native class JournalTarotGroup extends JournalFileEntry {
}

public abstract native class JournalTarot extends JournalEntry {

  public final native const func GetIndex() -> Int32;

  public final native const func GetImagePart() -> CName;

  public final native const func GetName() -> String;

  public final native const func GetDescription() -> String;
}

public abstract native class JournalCodexGroup extends JournalContainerEntry {

  public final native const func GetGroupName() -> String;
}

public abstract native class JournalCodexEntry extends JournalContainerEntry {

  public final native const func GetTitle() -> String;

  public final native const func GetImageID() -> TweakDBID;

  public final native const func GetLinkImageID() -> TweakDBID;
}

public abstract native class JournalCodexDescription extends JournalEntry {

  public final native const func GetSubTitle() -> String;

  public final native const func GetTextContent() -> String;
}

public native class JournalInternetText extends JournalInternetBase {

  public final native const func GetText() -> String;
}

public native class JournalInternetRectangle extends JournalInternetBase {
}

public native class JournalInternetImage extends JournalInternetBase {

  public final native const func GetAtlasPath() -> ResRef;

  public final native const func GetTexturePart() -> CName;
}

public native class JournalInternetVideo extends JournalInternetBase {

  public final native const func GetVideoPath() -> ResRef;
}

public native struct JournalFactNameValue {

  public native let factName: CName;

  public native let factValue: Int32;
}

public native class JournalInternetPage extends JournalEntry {

  public final native const func GetAddress() -> String;

  public final native const func GetFactsToSet() -> array<JournalFactNameValue>;

  public final native const func GetWidgetPath() -> ResRef;

  public final native const func GetScale() -> Float;

  public final native const func IsAdditionallyFilledFromScripts() -> Bool;

  public final native const func GetTexts() -> array<ref<JournalInternetText>>;

  public final native const func GetRectangles() -> array<ref<JournalInternetRectangle>>;

  public final native const func GetImages() -> array<ref<JournalInternetImage>>;

  public final native const func GetVideos() -> array<ref<JournalInternetVideo>>;
}

public native class JournalInternetSite extends JournalFileEntry {

  public final native const func GetShortName() -> String;

  public final native const func IsIgnoredAtDesktop() -> Bool;

  public final native const func GetAtlasPath() -> ResRef;

  public final native const func GetTexturePart() -> CName;
}

public native class JournalOnscreenGroup extends JournalFileEntry {
}

public native class JournalEmailGroup extends JournalFileEntry {
}

public native class JournalFileGroup extends JournalFileEntry {
}

public native class JournalMetaQuestObjective extends JournalEntry {

  public final native const func GetDescription() -> String;

  public final native const func GetProgressPercent() -> Uint32;

  public final native const func GetIconID() -> TweakDBID;
}

public native class JournalMetaQuest extends JournalFileEntry {

  public final native const func GetTitle() -> String;
}

public native struct JournalMetaQuestScriptedData {

  public native let hidden: Bool;

  public native let percent: Uint32;

  public native let text: String;
}

public final native class LocationManager extends ILocationManager {

  public final native const func GetLocationTags(entityID: EntityID, out tags: array<CName>) -> Void;
}

public native struct MappinEntry {

  public native let id: NewMappinID;

  public native let worldPosition: Vector4;
}

public native class EnteredPathWithDoors extends Event {
}

public native class FinishedPathWithDoors extends Event {
}

public native class NavigationObstacle extends IScriptable {
}

public class DeactivateAllNetworkLinksRequest extends ScriptableSystemRequest {
}

public native class PhotoModeEnableEvent extends Event {

  public final native func SetEnable(enable: Bool) -> Void;

  public final native func GetEnable() -> Bool;
}

public abstract final native class PrereqManager extends IPrereqManager {

  public final native func MeetsPrerequisite(prereqData: PrereqData, params: PrereqParams) -> Bool;

  public final native func MeetsPrerequisiteByID(prereqID: String, params: PrereqParams) -> Bool;
}

public class PreventionDelayed100SpawnPoliceRequest extends ScriptableSystemRequest {
}

public class PreventionForceSpawnPoliceRequest extends ScriptableSystemRequest {
}

public class NoReactionPerformedRequest extends ScriptableSystemRequest {
}

public abstract class PreventionConditionAbstract extends AIbehaviorconditionScript {
}

public struct PreventionSystemConfig {

  public let record: TweakDBID;
}

public native struct EntityReference {

  public native const let reference: NodeRef;
}

public final native class MappinVariantChangedEvent extends Event {

  public final native const func GetEntry() -> wref<JournalEntry>;

  public final native const func GetPhase() -> gamedataMappinPhase;

  public final native const func GetVariant() -> gamedataMappinVariant;
}

public native struct RestrictMovementArea {
}

public abstract native class ICombatRestrictMovementAreaCondition extends IScriptable {
}

public class ClearBraindanceStateRequest extends ScriptableSystemRequest {
}

public class ClearBraindancePauseRequest extends ScriptableSystemRequest {
}

public native struct StimuliMergeInfo {

  public native let position: Vector4;

  public native let instigator: wref<GameObject>;

  public native let radius: Float;

  public native let type: gamedataStimType;

  public native let propagationType: gamedataStimPropagation;
}

public final native class StimuliSystem extends IStimuliSystem {

  public final native func BroadcastStimuli(effect: ref<EffectInstance>) -> Void;

  public final native func BroadcastMergeableStimuli(stimuliInfo: StimuliMergeInfo, suppressedByType: array<gamedataStimType>) -> Void;

  public final native func GetStimRecord(stimType: gamedataStimType) -> ref<Stim_Record>;
}

public final native class StatsBundleHandler extends IScriptable {

  public final native func GetStatValue(statType: gamedataStatType) -> Float;

  public final native func GetStatBoolValue(statType: gamedataStatType) -> Bool;

  public final native func GetStatDetails() -> array<gameStatDetailedData>;

  public final native func AddModifier(modifierData: ref<gameStatModifierData>) -> Bool;

  public final native func RemoveModifier(modifierData: ref<gameStatModifierData>) -> Void;

  public final native func RemoveAllModifiers(statType: gamedataStatType) -> Void;
}

public class TCSInputCameraZoom extends Event {
}

public class QhackExecuted extends Event {
}

public final native class ObjectLookedAtEvent extends Event {

  public native let ownerID: EntityID;

  public native let state: Bool;
}

public native struct TargetFilterTicket {
}

public native struct TargetHitInfo {

  public native const let queryMask: Uint64;

  public native const let entityId: EntityID;

  public native const let entity: wref<Entity>;

  public native const let component: wref<IComponent>;

  public native let aimStartPosition: Vector4;

  public native let closestHitPosition: Vector4;

  public native let isTransparent: Bool;

  public final static native func IsValid(self: TargetHitInfo) -> Bool;
}

public abstract native class TargetFilter extends IScriptable {

  public final native func GetHitEntityID() -> EntityID;

  public final native func GetHitComponent() -> wref<IComponent>;
}

public native struct TelemetryQuickHack {

  public native let actionName: CName;

  public native let titleLocKey: String;

  public native let targetType: String;

  public native let quickHackRecordID: TweakDBID;

  public native let quality: Int32;
}

public native class TrafficSystem extends IScriptable {

  public final native const func IsPathIntersectingWithTraffic(path: array<Vector4>, distanceFromTraffic: Float, out intersection: Vector4) -> Bool;
}

public final native class questTutorialManager extends questITutorialManager {

  public final native func RequestToCloseOverlay(overlayId: Uint32) -> Void;
}

public abstract native class gameuiIUIObjectsLoaderSystem extends IGameSystem {

  public final native func IsItemPreviewable(const itemData: wref<gameItemData>, out isGarment: Bool) -> Bool;
}

public native struct GarageVehicleID {

  public native let name: CName;

  public native let recordID: TweakDBID;

  public final static native func Resolve(vehicleID: String) -> GarageVehicleID;
}

public abstract native class IWatchdogSystem extends IGameSystem {

  public final native func HasActiveFallback() -> Bool;

  public final native func IsFallbackHandled() -> Bool;

  public final native func IsFallbackForced() -> Bool;

  public final native func SetForcedFallback() -> Void;
}

public native class RainEvent extends Event {

  public native let rainIntensity: worldRainIntensity;
}

public native class ExtendedWorkspotInfo extends IScriptable {

  public native let isActive: Bool;

  public native let entering: Bool;

  public native let exiting: Bool;

  public native let playingSyncAnim: Bool;

  public native let inReaction: Bool;

  public native let inMotion: Bool;
}

public final native class ConnectedWorkspotNotificationEvent extends Event {

  public native let evtName: CName;
}

public final native class ReactionFinishedEvent extends Event {
}

public final native class SetupWorkspotActionEvent extends StimuliData {
}

public native struct WorkEntryId {

  public native let id: Uint32;
}

public native class inkAnimBuilder extends IScriptable {

  public final native func Interpolate(const interpolatorName: CName, const startValue: Variant, const endValue: Variant) -> ref<inkAnimBuilder>;

  public final native func InterpolateFrom(const interpolatorName: CName, const startValue: Variant) -> ref<inkAnimBuilder>;

  public final native func InterpolateTo(const interpolatorName: CName, const endValue: Variant) -> ref<inkAnimBuilder>;

  public final native func Mode(mode: inkanimInterpolationMode) -> ref<inkAnimBuilder>;

  public final native func Type(type: inkanimInterpolationType) -> ref<inkAnimBuilder>;

  public final native func Duration(duration: Float) -> ref<inkAnimBuilder>;

  public final native func Delay(delay: Float) -> ref<inkAnimBuilder>;

  public final native func Offset(offset: Float) -> ref<inkAnimBuilder>;

  public final native func Additive(isAdditive: Bool) -> ref<inkAnimBuilder>;

  public final native func Relative(useRelativeDuration: Bool) -> ref<inkAnimBuilder>;

  public final native func Play() -> Bool;

  public final native func PlayWithOptions(playbackOptions: inkAnimOptions) -> Bool;
}

public native class inkAnimController extends IScriptable {

  public final native func Select(widget: ref<inkWidget>, opt selectionRule: inkSelectionRule, opt param: String) -> ref<inkAnimController>;

  public final native func FromSet(other: ref<inkWidgetsSet>) -> ref<inkAnimController>;

  public final native func Caller(caller: ref<inkWidget>) -> ref<inkAnimController>;

  public final native func PlayOffset(offset: Float) -> ref<inkAnimController>;

  public final native func Interpolate(interpolatorName: CName, startValue: Variant, endValue: Variant) -> ref<inkAnimBuilder>;

  public final native func InterpolateFrom(interpolatorName: CName, startValue: Variant) -> ref<inkAnimBuilder>;

  public final native func InterpolateTo(interpolatorName: CName, endValue: Variant) -> ref<inkAnimBuilder>;

  public final native func Play() -> Bool;

  public final native func PlayWithOptions(playbackOptions: inkAnimOptions) -> Bool;

  public final native func GetProxy(const index: Uint32) -> ref<inkAnimProxy>;

  public final native func Stop() -> Void;

  public final native func Pause() -> Void;

  public final native func Resume() -> Void;

  public final native func RegisterToCallback(eventType: inkanimEventType, object: ref<IScriptable>, functionName: CName) -> Void;

  public final native func UnregisterFromCallback(eventType: inkanimEventType, object: ref<IScriptable>, functionName: CName) -> Void;
}

public native class inkAnimSequence extends IScriptable {
}

public native class inkAnimToggleVisibilityEvent extends inkAnimEvent {
}

public abstract native class inkAnimSetVisibilityEvent extends inkAnimEvent {

  public final native func SetVisibility(isVisible: Bool) -> Void;
}

public native class inkAnimMargin extends inkAnimInterpolator {

  public final native func GetStartMargin() -> inkMargin;

  public final native func GetEndMargin() -> inkMargin;

  public final native func SetStartMargin(startMargin: inkMargin) -> Void;

  public final native func SetEndMargin(endMargin: inkMargin) -> Void;
}

public native class inkAnimRotation extends inkAnimInterpolator {

  public final native func GetStartRotation() -> Float;

  public final native func GetEndRotation() -> Float;

  public final native func SetStartRotation(startRotation: Float) -> Void;

  public final native func SetEndRotation(endRotation: Float) -> Void;
}

public native class inkAnimScale extends inkAnimInterpolator {

  public final native func GetStartScale() -> Vector2;

  public final native func GetEndScale() -> Vector2;

  public final native func SetStartScale(startScale: Vector2) -> Void;

  public final native func SetEndScale(endScale: Vector2) -> Void;
}

public native class inkAnimTranslation extends inkAnimInterpolator {

  public final native func GetStartTranslation() -> Vector2;

  public final native func GetEndTranslation() -> Vector2;

  public final native func SetStartTranslation(startTranslation: Vector2) -> Void;

  public final native func SetEndTranslation(endTranslation: Vector2) -> Void;
}

public native class inkAnimShear extends inkAnimInterpolator {

  public final native func GetStartShear() -> Vector2;

  public final native func GetEndShear() -> Vector2;

  public final native func SetStartShear(startShear: Vector2) -> Void;

  public final native func SetEndShear(endShear: Vector2) -> Void;
}

public native class inkAnimPivot extends inkAnimInterpolator {

  public final native func GetStartPivot() -> Vector2;

  public final native func GetEndPivot() -> Vector2;

  public final native func SetStartPivot(startPivot: Vector2) -> Void;

  public final native func SetEndPivot(endPivot: Vector2) -> Void;
}

public native class inkAnimAnchor extends inkAnimInterpolator {

  public final native func GetStartAnchor() -> Vector2;

  public final native func GetEndAnchor() -> Vector2;

  public final native func SetStartAnchor(startAnchor: Vector2) -> Void;

  public final native func SetEndAnchor(endAnchor: Vector2) -> Void;
}

public native class inkAnimEffect extends inkAnimInterpolator {

  public final native func GetStartValue() -> Float;

  public final native func GetEndValue() -> Float;

  public final native func SetEffectType(effectType: inkEffectType) -> Void;

  public final native func SetEffectName(effectName: CName) -> Void;

  public final native func SetParamName(paramName: CName) -> Void;

  public final native func SetStartValue(startValue: Float) -> Void;

  public final native func SetEndValue(endValue: Float) -> Void;
}

public native class inkAnimTextReplace extends inkAnimTextInterpolator {
}

public native class inkAnimTextValueProgress extends inkAnimTextInterpolator {
}

public native struct inkEntityPreviewCameraSettings {

  public native let panSpeed: Float;

  public native let rotationSpeed: EulerAngles;

  public native let rotationMin: EulerAngles;

  public native let rotationMax: EulerAngles;

  public native let rotationDefault: EulerAngles;

  public native let zoomSpeed: Float;

  public native let zoomMin: Float;

  public native let zoomMax: Float;

  public native let zoomDefault: Float;
}

public native class inkEntityPreviewGameController extends gameuiMenuGameController {

  public final native func GetCameraSettings() -> inkEntityPreviewCameraSettings;

  public final native func EnableCamera() -> Void;

  public final native func DisableCamera() -> Void;

  public final native func ResetCamera() -> Void;

  public final native func ResetTargetPosition() -> Void;

  public final native func ZoomIn(strength: Float) -> Void;

  public final native func ZoomOut(strength: Float) -> Void;

  public final native func RotateYaw(strength: Float) -> Void;

  public final native func RotatePitch(strength: Float) -> Void;

  public final native func Move(direction: Vector4, strength: Float) -> Void;
}

public native class gameuiPuppetPreview_ReadyToBeDisplayed extends Event {

  public native let isMale: Bool;
}

public native class gameuiPuppetPreview_SetCameraSetupEvent extends Event {

  public native let setupIndex: Uint32;

  public native let slotName: CName;
}

public final native struct gameuiGenericNotificationData {

  public native let time: Float;

  public native let widgetLibraryItemName: CName;

  public native let introAnimation: CName;

  public native let widgetLibraryResource: ResRef;

  public native let notificationData: ref<GenericNotificationViewData>;
}

public native class gameuiScreenProjectionsData extends IScriptable {

  public native let data: array<ref<inkScreenProjection>>;
}

public native class inkMenuLogicController extends inkLogicController {
}

public native class inkSliderController extends inkLogicController {

  public final native func Setup(minimumValue: Float, maximumValue: Float, defaultValue: Float, opt step: Float) -> Void;

  public final native func GetProgress() -> Float;

  public final native func GetCurrentValue() -> Float;

  public final native func GetMaxValue() -> Float;

  public final native func GetMinValue() -> Float;

  public final native func GetStep() -> Float;

  public final native func GetPercentageHandleSize() -> Float;

  public final native func SetPercentageHandleSize(newSize: Float) -> Void;

  public final native func ChangeValue(newValue: Float) -> Void;

  public final native func ChangeProgress(newValue: Float) -> Void;

  public final native func Next() -> Void;

  public final native func Prior() -> Void;

  public final native func GetSlidingAreaRef() -> inkWidgetRef;

  public final native func GetHandleRef() -> inkWidgetRef;
}

public native struct inkStepperData {

  public native let label: String;

  public native let data: wref<IScriptable>;
}

public native class inkStepperController extends inkLogicController {

  public edit native let cycledNavigation: Bool;

  public edit native let indicatorUnitLibraryID: CName;

  private edit native let currentValueDisplay: inkTextRef;

  private edit native let indicatorContainer: inkCompoundRef;

  private edit native let leftButton: inkWidgetRef;

  private edit native let rightButton: inkWidgetRef;

  public final native func PushData(dataItem: inkStepperData, refreshImmediately: Bool) -> Void;

  public final native func PushDataList(dataList: array<inkStepperData>, refreshImmediately: Bool) -> Void;

  public final native func Clear(refreshImmediately: Bool) -> Void;

  public final native func Refresh() -> Void;

  public final native func SetSelectedIndex(index: Uint32) -> Void;

  public final native func GetSelectedIndex() -> Uint32;

  public final native func Prior() -> Void;

  public final native func Next() -> Void;

  public final native func Size() -> Uint32;
}

public native class inkVirtualCompoundBackgroundController extends inkLogicController {
}

public native class inkVirtualUniformListController extends inkVirtualCompoundController {
}

public native class inkVirtualUniformGridController extends inkVirtualUniformListController {
}

public native class inkGridController extends inkVirtualCompoundController {

  public final native func SetProvider(classifier: wref<inkItemPositionProvider>) -> Void;

  public final native func GetIndexFromCoords(x: Uint32, y: Uint32) -> Uint32;

  public final native func RemoveItemFromSlot(slotIdx: Uint32) -> wref<inkWidget>;

  public final native func PlaceItemInSlot(item: wref<inkWidget>, slotIdx: Uint32) -> Void;

  public final native func GetSlotIndex(position: Vector2) -> Uint32;

  public final native func GetItemIndexFromSlot(slotIndex: Uint32) -> Uint32;

  public final native func GetItemWidget(itemIndex: Uint32) -> wref<inkWidget>;

  public final native func GetItemData(itemIndex: Uint32) -> Variant;

  public final native func GetItemPosition(itemIndex: Uint32) -> Vector2;

  public final native func GetItemSize(itemIndex: Uint32) -> Vector2;
}

public native class inkAsyncSpawnRequest extends IScriptable {

  public final native func Cancel() -> Void;
}

public abstract native class inkBorder extends inkLeafWidget {
}

public abstract native class inkCacheWidget extends inkCompoundWidget {
}

public native class inkFlex extends inkCompoundWidget {
}

public native struct inkInputKeyData {

  public final static native func SetInputKey(self: inkInputKeyData, inputKey: EInputKey) -> Void;

  public final static native func SetInputCustomKey(self: inkInputKeyData, inputKey: EInputCustomKey) -> Void;

  public final static native func SetIsHoldInput(self: inkInputKeyData, isHoldInput: Bool) -> Void;
}

public abstract native class inkLinePattern extends inkImage {

  public final native func AddVertex(value: Vector2) -> Void;
}

public native class inkMask extends inkLeafWidget {

  public final native func IsTexturePartExist(texturePart: CName) -> Bool;

  public final native func SetTexturePart(texturePart: CName) -> Bool;

  public final native func GetTexturePart() -> CName;
}

public native class inkRichTextBox extends inkText {
}

public native class inkScrollArea extends inkCompoundWidget {

  public final native func ScrollVertical(value: Float) -> Void;

  public final native func ScrollHorizontal(value: Float) -> Void;

  public final native func GetVerticalScrollPosition() -> Float;

  public final native func GetHorizontalScrollPosition() -> Float;

  public final native func GetRealVerticalScrollPosition() -> Float;

  public final native func GetRealHorizontalScrollPosition() -> Float;

  public final native func GetContentSize() -> Vector2;

  public final native func GetViewportSize() -> Vector2;

  public final native func GetUseInternalMask() -> Bool;

  public final native func SetUseInternalMask(value: Bool) -> Void;
}

public native class inkCircle extends inkBaseShapeWidget {
}

public native class inkShape extends inkBaseShapeWidget {

  public final native func ChangeShape(shapeName: CName) -> Void;
}

public native class inkTextInput extends inkText {

  public final native func RequestFocus() -> Void;
}

public native class inkUniformGrid extends inkCompoundWidget {

  public final native func SetWrappingWidgetCount(count: Uint32) -> Void;

  public final native func GetWrappingWidgetCount() -> Uint32;

  public final native func SetOrientation(orientation: inkEOrientation) -> Void;

  public final native func GetOrientation() -> inkEOrientation;
}

public native struct VideoWidgetSummary {

  public native let width: Uint32;

  public native let height: Uint32;

  public native let currentTimeMs: Uint32;

  public native let totalTimeMs: Uint32;

  public native let currentFrame: Uint32;

  public native let totalFrames: Uint32;

  public native let frameRate: Uint32;
}

public abstract native class inkVirtualCompoundWidget extends inkCompoundWidget {
}

public native struct inkWidgetLayout {

  public edit native let padding: inkMargin;

  public edit native let margin: inkMargin;

  public edit native let HAlign: inkEHorizontalAlign;

  public edit native let VAlign: inkEVerticalAlign;

  public edit native let anchor: inkEAnchor;

  public edit native let anchorPoint: Vector2;
}

public native struct gameuiBraindanceClueDescriptor {

  public native let mode: gameuiEClueDescriptorMode;

  public native let startTime: Float;

  public native let endTime: Float;

  public native let layer: gameuiEBraindanceLayer;

  public native let clueName: CName;
}

public native class inkComboBoxObjectController extends inkLogicController {

  public final native func GetContentWidget() -> wref<inkWidget>;
}

public final native class inkLocalizationChangedEvent extends inkEvent {
}

public native class inkActionName extends IScriptable {

  public final native const func IsAction(actionName: CName) -> Bool;
}

public final native class inkCharacterEvent extends inkInputEvent {

  public final native const func GetCharacter() -> Uint8;
}

public native class inkArray extends IScriptable {

  public final native func PushBack(object: wref<IScriptable>) -> Void;

  public final native func PopBack() -> wref<IScriptable>;

  public final native func InsertAt(index: Uint32, object: wref<IScriptable>) -> Bool;

  public final native func Remove(object: wref<IScriptable>) -> Bool;

  public final native func Clear() -> Void;

  public final native func Size() -> Int32;

  public final native func Empty() -> Bool;

  public final native func Get() -> array<wref<IScriptable>>;
}

public native class inkFIFOQueue extends IScriptable {

  public final native func Init(objects: array<wref<IScriptable>>) -> Void;

  public final native func Dequeue() -> wref<IScriptable>;

  public final native func Enqueue() -> Void;
}

public native class inkHashMap extends IScriptable {

  public final native func Insert(key: Uint64, value: ref<IScriptable>) -> Void;

  public final native func Get(key: Uint64) -> wref<IScriptable>;

  public final native func Set(key: Uint64, value: ref<IScriptable>) -> Void;

  public final native func KeyExist(key: Uint64) -> Bool;

  public final native func Remove(key: Uint64) -> Bool;

  public final native func Clear() -> Void;

  public final native func GetValues(values: script_ref<array<wref<IScriptable>>>) -> Void;
}

public native class inkIntHashMap extends IScriptable {

  public final native func Insert(key: Uint64, value: Int32) -> Void;

  public final native func Get(key: Uint64) -> Int32;

  public final native func Set(key: Uint64, value: Int32) -> Void;

  public final native func KeyExist(key: Uint64) -> Bool;

  public final native func Remove(key: Uint64) -> Bool;

  public final native func Clear() -> Void;

  public final native func GetValues(values: script_ref<array<Int32>>) -> Void;
}

public native class inkStringMap extends IScriptable {

  public final native func Insert(key: String, value: Uint64) -> Void;

  public final native func Get(key: String) -> Uint64;

  public final native func Set(key: String, value: Uint64) -> Void;

  public final native func Size() -> Uint32;

  public final native func KeyExist(key: String) -> Bool;

  public final native func Clear() -> Void;
}

public abstract native class BaseItemDataSource extends AbstractDataSource {

  public final native func GetItem(index: Uint32) -> wref<gameItemData>;

  public final native func HasItem(data: wref<gameItemData>) -> Bool;
}

public native class ItemDataSource extends BaseItemDataSource {

  public final native func Initialize(owner: ref<GameObject>) -> Void;
}

public native class ItemDataView extends BaseItemDataSource {

  public final native func SetSource(source: wref<BaseItemDataSource>) -> Void;

  public final native func AddSkipTag(tag: CName) -> Void;

  public final native func RemoveSkipTag(tag: CName) -> Void;

  public final native func SetSkipTags(tags: array<CName>) -> Void;

  public final native func ResetSkipTags() -> Void;

  public final native func Filter() -> Void;

  public final native func SetItemTypesForSorting(types: array<gamedataItemType>) -> Void;

  public final native func ResetItemTypesForSorting() -> Void;

  public final native func EnableSorting() -> Void;

  public final native func DisableSorting() -> Void;

  public final native func IsSortingEnabled() -> Bool;

  public final native func Sort() -> Void;
}

public native class inkMenuInstance_SwitchToScenario extends Event {

  public final native func Init(eventName: CName, opt userData: ref<inkUserData>) -> Void;
}

public native class inkMenuLayer_SetMenuModeEvent extends Event {

  public final native func Init(mode: inkMenuMode, state: inkMenuState) -> Void;
}

public native class inkMenuLayer_SetGender extends Event {

  public final native func IsMale() -> Bool;
}

public native class inkMenuLayer_AbortHackingMinigame extends Event {
}

public native class gameuiPhoneWaveformData extends IScriptable {

  public native let points: array<Vector4>;
}

public native class inkMenusState extends IScriptable {

  public final native const func IsMenusVisible() -> Bool;

  public final native const func ShowMenus(vakue: Bool) -> Void;

  public final native func GetControllerMenuName() -> CName;

  public final native func OpenMenu(menuName: CName, opt userData: ref<IScriptable>) -> wref<inkWidget>;

  public final native func CloseMenu(menuName: CName) -> Void;

  public final native func CloseAllMenus() -> Void;

  public final native func IsMenuOpened(menuName: CName) -> Bool;

  public final native func GetMenu(menuName: CName) -> wref<inkWidget>;

  public final native func IsHubMenuBlocked() -> Bool;

  public final native func SetHubMenuBlocked(blocked: Bool) -> Void;

  public final native func DispatchEvent(menuName: CName, eventName: CName, opt userData: ref<IScriptable>) -> Bool;
}

public native class inkClippedMenuScenarioData extends IScriptable {

  public native let menus: array<CName>;
}

public native struct inkScreenProjectionData {

  public native let entity: wref<Entity>;

  public native let slotComponentName: CName;

  public native let slotName: CName;

  public native let slotFallbackName: CName;

  public native let staticWorldPosition: Vector4;

  public native let fixedWorldOffset: Vector4;

  public native let userData: wref<IScriptable>;
}

public native class inkScreenProjection extends IScriptable {

  public native const let distanceToCamera: Float;

  public native const let previousPosition: Vector2;

  public native const let currentPosition: Vector2;

  public native const let uvPosition: Vector2;

  public final native func RegisterListener(object: ref<IScriptable>, functionName: CName) -> Void;

  public final native func UnregisterListener(object: ref<IScriptable>, functionName: CName) -> Void;

  public final native func IsInScreen() -> Bool;

  public final native func GetEntity() -> ref<Entity>;

  public final native func SetEntity(entity: ref<Entity>) -> Void;

  public final native func ResetEntity() -> Void;

  public final native func GetSlotComponentName() -> CName;

  public final native func SetSlotComponentName(slotComponentName: CName) -> Void;

  public final native func GetSlotName() -> CName;

  public final native func SetSlotName(slotName: CName) -> Void;

  public final native func GetSlotFallbackName() -> CName;

  public final native func SetSlotFallbackName(slotName: CName) -> Void;

  public final native func GetStaticWorldPosition() -> Vector4;

  public final native func SetStaticWorldPosition(position: Vector4) -> Void;

  public final native func GetFixedWorldOffset() -> Vector4;

  public final native func SetFixedWorldOffset(offset: Vector4) -> Void;

  public final native func ResetFixedWorldOffset() -> Void;

  public final native func GetUserData() -> ref<IScriptable>;

  public final native func SetUserData(userData: ref<IScriptable>) -> Void;

  public final native func SetEnabled(enabled: Bool) -> Void;

  public final native func VoIsPerceptible(entityId: EntityID) -> Bool;
}

public abstract native class BaseWeakScriptableDataSource extends AbstractDataSource {

  public final native func GetItem(index: Uint32) -> wref<IScriptable>;

  public final native func HasItem(data: wref<IScriptable>) -> Bool;
}

public native class WeakScriptableDataSource extends BaseWeakScriptableDataSource {

  public final native func AppendItem(data: wref<IScriptable>) -> Void;

  public final native func InsertItemAt(index: Uint32, data: wref<IScriptable>) -> Void;

  public final native func RemoveItem(data: wref<IScriptable>) -> Void;

  public final native func RemoveItemAt(index: Uint32) -> Void;

  public final native func Clear() -> Void;

  public final native func GetArray() -> array<wref<IScriptable>>;

  public final native func Reset(scriptables: array<wref<IScriptable>>) -> Void;
}

public class HoverEvent extends Event {

  public let hooverOn: Bool;
}

public native class KeyBindingEvent extends Event {

  public native let keyName: CName;
}

public native class ConfigVarName extends ConfigVar {

  public final native func SetValue(value: CName) -> Void;

  public final native func GetValue() -> CName;

  public final native func GetDefaultValue() -> CName;
}

public native class ConfigVarInt extends ConfigVar {

  public final native func SetValue(value: Int32) -> Void;

  public final native func GetValue() -> Int32;

  public final native func GetDefaultValue() -> Int32;

  public final native func GetMinValue() -> Int32;

  public final native func GetMaxValue() -> Int32;

  public final native func GetStepValue() -> Int32;
}

public static native func OperatorNeg(a: Int32) -> Int32;

public static native func IsLanguageVoicePackInstalled(language: CName) -> Bool;

public static native func RequestInstallLanguagePackDialog(language: CName) -> Void;

public native class LatestSaveMetadataInfo extends IScriptable {

  public native let locationName: String;

  public native let trackedQuest: String;

  public native let lifePath: inkLifePath;

  public native let playTime: Double;

  public native let playthroughTime: Double;

  public native let initialLoadingScreenID: Uint64;
}

public native class inkTextOffsetController extends inkTextAnimationController {

  public final native func GetBaseText() -> String;

  public final native func SetBaseText(text: String) -> Void;

  public final native func GetTimeSkip() -> Float;

  public final native func SetTimeSkip(timeSkipValue: Float) -> Void;

  public final native func GetGlitchComplexity() -> Float;
}

public native class inkTextKiroshiAnimController extends inkTextAnimationController {

  public final native func GetNativeText() -> String;

  public final native func SetNativeText(text: String, language: scnDialogLineLanguage) -> Void;

  public final native func GetTargetText() -> String;

  public final native func SetTargetText(text: String) -> Void;

  public final native func GetPreTranslatedText() -> String;

  public final native func SetPreTranslatedText(text: String) -> Void;

  public final native func GetPostTranslatedText() -> String;

  public final native func SetPostTranslatedText(text: String) -> Void;

  public final native func GetTimeSkip() -> Float;

  public final native func SetTimeSkip(timeSkipValue: Float) -> Void;

  public final native func SetupFontSettings(fontSize: Int32) -> Void;
}

public native class inkTextValueProgressController extends inkTextAnimationController {

  public final native func GetBaseValue() -> Float;

  public final native func SetBaseValue(baseValue: Float) -> Void;

  public final native func GetTargetValue() -> Float;

  public final native func SetTargetValue(targetValue: Float) -> Void;

  public final native func GetNumbersAfterDot() -> Int32;

  public final native func SetNumbersAfterDot(numbersAfterDot: Int32) -> Void;

  public final native func GetStepValue() -> Float;

  public final native func SetStepValue(stepValue: Float) -> Void;
}

public native class inkTextMotherTongueController extends inkLogicController {

  public final native func ApplyTexts() -> Void;

  public final native func GetNativeText() -> String;

  public final native func SetNativeText(text: String, language: scnDialogLineLanguage) -> Void;

  public final native func GetTranslatedText() -> String;

  public final native func SetTranslatedText(text: String) -> Void;

  public final native func GetPreTranslatedText() -> String;

  public final native func SetPreTranslatedText(text: String) -> Void;

  public final native func GetPostTranslatedText() -> String;

  public final native func SetPostTranslatedText(text: String) -> Void;
}

public struct ScrollingText {

  public edit const let textArray: array<String>;
}

public native class UIAudioHandler extends IScriptable {

  public final native func PlaySound(widgetName: CName, eventName: CName, opt actionKey: CName) -> Void;

  public final native func SetParameter(parameterName: CName, parameterValue: Float) -> Void;

  public final native func SetSwitch(switchName: CName, switchValue: Float) -> Void;
}

public native struct PopupSettings {

  public native let closeAtInput: Bool;

  public native let pauseGame: Bool;

  public native let fullscreen: Bool;

  public native let position: PopupPosition;

  public native let hideInMenu: Bool;

  public native let margin: inkMargin;
}

public native struct PopupData {

  public native let title: String;

  public native let message: String;

  public native let iconID: TweakDBID;

  public native let isModal: Bool;

  public native let videoType: VideoType;

  public final static native func GetVideo(self: PopupData) -> ResRef;
}

public abstract native class BaseVariantDataSource extends AbstractDataSource {

  public final native func GetItem(index: Uint32) -> Variant;

  public final native func HasItem(data: Variant) -> Bool;
}

public native class VariantDataSource extends BaseVariantDataSource {

  public final native func AppendItem(data: Variant) -> Void;

  public final native func InsertItemAt(index: Uint32, data: Variant) -> Void;

  public final native func RemoveItem(data: Variant) -> Void;

  public final native func RemoveItemAt(index: Uint32) -> Void;

  public final native func Clear() -> Void;

  public final native func GetArray() -> array<Variant>;

  public final native func Reset(variants: array<Variant>) -> Void;
}

public native class inkVectorGraphicWidget extends inkLeafWidget {

  public final native func LoadSVG(svgPath: String) -> Void;
}

public static native func BuildWidgetPath(names: array<CName>) -> inkWidgetPath;

public native struct inkCanvasRef extends inkCompoundRef {
}

public native struct inkHorizontalPanelRef extends inkBasePanelRef {
}

public native struct inkVerticalPanelRef extends inkBasePanelRef {
}

public native struct inkFlexRef extends inkCompoundRef {
}

public native struct inkUniformGridRef extends inkCompoundRef {

  public final static native func SetWrappingWidgetCount(self: inkUniformGridRef, count: Uint32) -> Void;

  public final static native func GetWrappingWidgetCount(self: inkUniformGridRef) -> Uint32;

  public final static native func SetOrientation(self: inkUniformGridRef, orientation: inkEOrientation) -> Void;

  public final static native func GetOrientation(self: inkUniformGridRef) -> inkEOrientation;
}

public native struct inkGridRef extends inkCompoundRef {
}

public native struct inkVirtualCompoundRef extends inkCompoundRef {
}

public native struct inkScrollAreaRef extends inkCompoundRef {

  public final static native func ScrollVertical(self: inkScrollAreaRef, value: Float) -> Void;

  public final static native func ScrollHorizontal(self: inkScrollAreaRef, value: Float) -> Void;

  public final static native func GetVerticalScrollPosition(self: inkScrollAreaRef) -> Float;

  public final static native func GetHorizontalScrollPosition(self: inkScrollAreaRef) -> Float;

  public final static native func GetRealVerticalScrollPosition(self: inkScrollAreaRef) -> Float;

  public final static native func GetRealHorizontalScrollPosition(self: inkScrollAreaRef) -> Float;

  public final static native func GetContentSize(self: inkScrollAreaRef) -> Vector2;

  public final static native func GetViewportSize(self: inkScrollAreaRef) -> Vector2;

  public final static native func GetUseInternalMask(self: inkScrollAreaRef) -> Bool;

  public final static native func SetUseInternalMask(self: inkScrollAreaRef, value: Bool) -> Void;
}

public native struct inkCacheRef extends inkCompoundRef {
}

public native struct inkTextInputRef extends inkLeafRef {
}

public native struct inkBorderRef extends inkLeafRef {
}

public native struct inkRectangleRef extends inkLeafRef {
}

public native struct inkCircleRef extends inkLeafRef {
}

public native struct inkShapeRef extends inkLeafRef {

  public final static native func ChangeShape(self: inkShapeRef, shapeName: CName) -> Void;
}

public native struct inkMaskRef extends inkLeafRef {

  public final static native func SetTexturePart(self: inkMaskRef, texturePart: CName) -> Bool;

  public final static native func IsTexturePartExist(self: inkMaskRef, texturePart: CName) -> Bool;

  public final static native func GetTexturePart(self: inkMaskRef) -> CName;
}

public native struct inkRichTextBoxRef extends inkTextRef {
}

public native class inkCursorInfo extends inkUserData {

  public native let pos: Vector2;

  public native let isVisible: Bool;

  public final native func SetSize(size: Vector2) -> Void;
}

public class LabeledCursorData extends inkUserData {

  public let m_text: String;
}

public native class inkHoldControllerActionData extends inkUserData {

  public final native func SetActionName(actionName: CName) -> Void;

  public final native func GetActionName() -> CName;
}

public native class inkWorldAttachedEvt extends Event {
}

public native struct HandIKDescriptionResult {

  public native let grabPointStart: Vector4;

  public native let grabPointEnd: Vector4;
}

public class SmartBulletDeflectedEvent extends Event {

  public let localToWorld: Matrix;

  public let instigator: wref<GameObject>;

  public let weapon: wref<GameObject>;
}

public abstract class AICustomComponents extends AIRelatedComponents {
}

public class CentaurShieldStateChangeEvent extends Event {

  public let newState: ECentaurShieldState;
}

public class HitShieldEvent extends Event {
}

public struct GateSignalInstance {

  public let gateSignal: ref<GateSignal>;

  public let timeStamp: Float;

  public let consumeTags: array<CName>;
}

public class GateSignal extends TaggedSignalUserData {

  public let data: ref<AISignalSenderTask>;

  public let priority: Float;

  public let lifeTime: Float;
}

public class ConsumeGateSignal extends GateSignal {

  public let consumeCallName: CName;

  public let signalToConsume: ref<GateSignal>;
}

public class HitReactionStopMotionExtraction extends Event {
}

public class OnUnstoppableStateSignal extends TaggedSignalUserData {
}

public class BleedingEffectDamageUpdate extends Event {
}

public class BuffListVisibilityChangedEvent extends Event {

  public let m_hasBuffs: Bool;
}

public native struct PlayerBioMonitor {

  public native let currentHealth: Int32;

  public native let maximumHealth: Int32;

  public native let currentCyberwarePct: Int32;

  public native let currentArmor: Int32;

  public native let maximumArmor: Int32;
}

public static native func Cast(a: Uint16) -> Uint32;

public static native func OperatorAdd(a: Uint16, b: Uint16) -> Uint16;

public static native func StrMid(const str: script_ref<String>, first: Int32, opt length: Int32) -> String;

public static native func Cast(a: Uint16) -> Int32;

public static native func OperatorSubtract(a: Uint16, b: Uint16) -> Uint16;

public static native func OperatorAssignSubtract(out a: Uint16, b: Uint16) -> Uint16;

public class SceneScreenUIAnimationsData extends IScriptable {

  @attrib(category, "Animations")
  public inline let m_customAnimations: ref<WidgetAnimationManager>;

  @attrib(category, "Animations")
  public const let m_onSpawnAnimations: array<CName>;

  @attrib(category, "Library")
  public let m_defaultLibraryItemName: CName;

  @attrib(category, "Library")
  @default(SceneScreenUIAnimationsData, inkEAnchor.Fill)
  public let m_defaultLibraryItemAnchor: inkEAnchor;
}

public class GenericMessageNotificationData extends inkGameNotificationData {

  public let identifier: Int32;

  public let type: GenericMessageNotificationType;

  public let title: String;

  public let message: String;
}

public class GenericMessageNotificationCloseData extends inkGameNotificationData {

  public let identifier: Int32;

  public let result: GenericMessageNotificationResult;
}

public static native func IsNoInputIconsModeEnabled() -> Bool;

public native class gameuiDynamicIconLogicController extends inkLogicController {

  public final native func SetIcon(icon: TweakDBID) -> Void;
}

public class OnProgressBarAnimFinish extends Event {

  public let FullbarSize: Float;

  public let IsNegative: Bool;
}

public class LevelRewardDisplayData extends IDisplayData {

  public let level: Int32;

  public let rewardName: String;

  public let description: String;

  public let icon: CName;

  public let locPackage: ref<UILocalizationDataPackage>;

  public let descPackage: ref<UILocalizationDataPackage>;

  public let isLock: Bool;
}

public class AreaDisplayData extends IDisplayData {

  public let m_attributeId: TweakDBID;

  public let m_perks: array<ref<PerkDisplayData>>;

  public let m_locked: Bool;

  public let m_proficency: gamedataProficiencyType;

  public let m_area: gamedataPerkArea;
}

public class PlayerDevUpdateDataEvent extends Event {
}

public class AttributeUpdatedEvent extends Event {

  public let attributeId: TweakDBID;
}

public struct TutorialStep {

  public let description: String;

  public let showPointer: Bool;

  public let pointerRotation: Float;

  public let pointerXPos: Float;

  public let pointerYPos: Float;

  public let allowedActions: array<CName>;
}

public abstract class StreetSignSelector extends TweakDBIDSelector {
}

public class CursorSpawnData extends IScriptable {

  public let m_cursorType: CName;
}

public struct AccumulatedDamageDigitsNode {

  public let m_used: Bool;

  public let m_entityID: EntityID;

  public let m_controller: wref<AccumulatedDamageDigitLogicController>;

  public let m_isDamageOverTime: Bool;
}

public struct DamageEntry {

  public let m_damageInfo: DamageInfo;

  public let m_damageOverTimeInfo: DamageInfo;

  public let m_hasDamageInfo: Bool;

  public let m_hasDamageOverTimeInfo: Bool;

  public let m_oneInstance: Bool;

  public let m_oneDotInstance: Bool;

  public let m_hasDotAccumulator: Bool;
}

public class DamageDigitUserData extends IScriptable {

  public let m_controllerIndex: Int32;
}

public struct UIBuffInfo extends BuffInfo {

  public let isBuff: Bool;

  public let stackCount: Uint32;
}

public native struct ChatBoxText {

  public native let text: String;

  public native let id: Int32;

  public native let color: Color;
}

public native struct NarrationEvent {

  public native let text: String;

  public native let durationSec: Float;

  public native let color: Color;
}

public native struct NarrativePlateData {

  public native let text: String;

  public native let caption: String;

  public native let entity: wref<GameObject>;
}

public final native struct ActionDisplayData {

  public native let name: CName;

  public native let isHold: Bool;

  public native let inputDisplayPad: String;

  public native let inputDisplayKeyboard: String;
}

public final native struct ContextDisplayData {

  public native let name: CName;

  public native let actions: array<ActionDisplayData>;
}

public native struct PinInfo {

  public native let shouldShow: Bool;

  public native let showFloorAbove: Bool;

  public native let showFloorBelow: Bool;

  public native let iconType: Int32;

  public native let offset: Float;

  public native let displayText: String;
}

public native struct WeaponRosterInfo {

  public native let ammoCurrent: Int32;

  public native let ammoMagazine: Int32;

  public native let ammoAvailable: Int32;

  public native let fireModeCurrent: Int32;

  public native let fileModeList: array<CName>;

  public native let damageTypeList: array<gamedataDamageType>;

  public native let weaponId: Int32;
}

public native class HolocallStartEvent extends Event {

  public final native func GetVideoPath() -> String;

  public final native func ShouldForceFrameRate() -> Bool;
}

public class BackpackEquipSlotChooserData extends inkGameNotificationData {

  public let item: InventoryItemData;

  public let inventoryManager: ref<InventoryDataManagerV2>;
}

public class ItemPreferredAreaItems extends IScriptable {

  public let equipmentArea: gamedataEquipmentArea;

  public let items: array<InventoryItemData>;
}

public class ItemComparableTypesCache extends IScriptable {

  public let itemType: gamedataItemType;

  public let itemTypeRecord: wref<ItemType_Record>;

  public let comparableTypes: array<gamedataItemType>;

  public let comparableRecordTypes: array<wref<ItemType_Record>>;
}

public class TypeComparableItemsCache extends IScriptable {

  public let itemType: gamedataItemType;

  public let cache: ref<ItemComparableTypesCache>;

  public let items: array<InventoryItemData>;
}

public class BackpackEquipSlotChooserCloseData extends inkGameNotificationData {

  public let confirm: Bool;

  public let itemData: InventoryItemData;

  public let slotIndex: Int32;
}

public class BackpackCraftingMaterialItemCallbackData extends IScriptable {

  public let itemData: InventoryItemData;
}

public class BackpackFilterButtonSpawnedCallbackData extends IScriptable {

  public let category: ItemFilterCategory;

  public let savedFilter: Int32;
}

public class DropQueueUpdatedEvent extends Event {

  public let m_dropQueue: array<ItemModParams>;
}

public class VendorConfirmationPopupData extends inkGameNotificationData {

  public let itemData: InventoryItemData;

  public let quantity: Int32;

  public let type: VendorConfirmationPopupType;

  public let price: Int32;
}

public class VendorConfirmationPopupCloseData extends inkGameNotificationData {

  public let confirm: Bool;

  public let itemData: InventoryItemData;

  public let quantity: Int32;
}

public static native func StrSplitLast(const str: script_ref<String>, const divider: script_ref<String>, out left: String, out right: String) -> Bool;

public class CodexEntryData extends GenericCodexEntryData {

  public let m_category: Int32;

  public let m_imageType: CodexImageType;
}

public class CodexListSyncData extends IScriptable {

  public let m_entryHash: Int32;

  public let m_level: Int32;
}

public class ShardEntryData extends GenericCodexEntryData {

  public let m_isCrypted: Bool;
}

public static native func StringToHex(const str: script_ref<String>, lineLength: Uint32) -> String;

public class CodexFilterButtonClicked extends Event {

  public let category: CodexCategoryType;

  public let toggled: Bool;
}

public class CodexForceSelectionEvent extends Event {

  public let m_selectionIndex: Int32;

  public let m_hash: Int32;
}

public class CodexEntrySelectedEvent extends Event {

  public let m_hash: Uint32;
}

public class CodexSelectedEvent extends Event {

  public let m_group: Bool;

  public let m_entryHash: Int32;

  public let m_level: Int32;

  public let m_data: wref<CodexEntryData>;

  public let m_activeDataSync: wref<CodexListSyncData>;
}

public class CodexSyncBackEvent extends Event {
}

public class OnOpenCodexAtEntryEvent extends Event {

  public let entry: wref<JournalCodexEntry>;
}

public class OnVisitedJournalEntryEvent extends Event {

  public let entry: wref<JournalEntry>;
}

public class CodexBaseGameController extends gameuiMenuGameController {
}

public class ShardSelectedEvent extends Event {

  public let m_group: Bool;

  public let m_entryHash: Int32;

  public let m_level: Int32;

  public let m_data: wref<ShardEntryData>;
}

public class ShardEntrySelectedEvent extends Event {

  public let m_hash: Uint32;
}

public class ShardSyncBackEvent extends Event {
}

public class InventoryItemPreviewData extends inkGameNotificationData {

  public let itemID: ItemID;

  public let itemName: String;

  public let requiredLevel: Int32;

  public let itemQualityState: CName;
}

public class InventoryItemPreviewPopupEvent extends Event {

  public let m_data: ref<InventoryItemPreviewData>;
}

public class CraftingPopupData extends inkGameNotificationData {

  public let itemTooltipData: ref<InventoryTooltipData>;

  public let craftingCommand: CraftingCommands;
}

public final native struct BinkResource {

  public final static native func IsValid(self: BinkResource) -> Bool;

  public final static native func GetPath(self: BinkResource) -> ResRef;
}

public native class gameuiCreditsController extends inkGameController {

  public native let shouldShowRewardPrompt: Bool;

  public native let isInFinalBoardsMode: Bool;

  public native let exitNotificationDisplayTime: Float;
}

public class CreditsData extends inkUserData {

  public let isFinalBoards: Bool;

  public edit let showRewardPrompt: Bool;
}

public struct CyberwareAttributes_ContainersStruct {

  public edit let widgetBody: inkWidgetRef;

  public edit let widgetCool: inkWidgetRef;

  public edit let widgetInt: inkWidgetRef;

  public edit let widgetRef: inkWidgetRef;

  public edit let widgetTech: inkWidgetRef;

  public let logicBody: wref<CyberwareAttributes_Logic>;

  public let logicCool: wref<CyberwareAttributes_Logic>;

  public let logicInt: wref<CyberwareAttributes_Logic>;

  public let logicRef: wref<CyberwareAttributes_Logic>;

  public let logicTech: wref<CyberwareAttributes_Logic>;
}

public struct CyberwareAttributes_ResistancesStruct {

  public edit let widgetHealth: inkFlexRef;

  public edit let widgetPhysical: inkFlexRef;

  public edit let widgetThermal: inkFlexRef;

  public edit let widgetEMP: inkFlexRef;

  public edit let widgetChemical: inkFlexRef;

  public edit let resistanceTooltip: inkFlexRef;
}

public native class RequestStats extends Event {
}

public class DlcDescriptionData extends inkUserData {

  public let m_title: CName;

  public let m_description: CName;

  public let m_guide: CName;

  public let m_imagePart: CName;
}

public class MenuItemData extends IScriptable {

  public let m_menuData: MenuData;
}

public class PreviousMenuData extends IScriptable {

  public let openMenuRequest: ref<OpenMenuRequest>;
}

public class OpenMenuRequest extends Event {

  public let m_menuName: CName;

  public let m_userData: ref<IScriptable>;

  public let m_jumpBack: Bool;

  public let m_eventData: MenuData;

  public let m_submenuName: CName;

  public let m_isMainMenu: Bool;

  public let m_hubMenuInstanceID: Uint32;
}

public class SelectMenuRequest extends Event {

  public let m_eventData: wref<MenuItemController>;
}

public struct MenuData {

  @default(MenuData, -1)
  public let identifier: Int32;

  public let label: String;

  public let icon: CName;

  public let subMenus: array<MenuData>;

  public let eventName: CName;

  public let fullscreenName: CName;

  public let userData: ref<IScriptable>;

  public let disabled: Bool;

  public let parentIdentifier: Int32;

  public let attrFlag: Bool;

  public let attrText: Int32;

  public let perkFlag: Bool;

  public let perkText: Int32;

  public let m_overrideDefaultUserData: Bool;

  public let m_overrideSubMenuUserData: Bool;
}

public class MenuItemDelayedUpdate extends Event {
}

public class MenuItemDimRequest extends Event {

  public let m_dim: Bool;
}

public class CyberwareTabModsRequest extends Event {

  public let open: Bool;

  public let wrapper: ref<CyberwareDisplayWrapper>;
}

public struct MetaQuestStatus {

  public let MetaQuest1Hidden: Bool;

  public let MetaQuest1Value: Int32;

  public let MetaQuest1Description: String;

  public let MetaQuest2Hidden: Bool;

  public let MetaQuest2Description: String;

  public let MetaQuest2Value: Int32;

  public let MetaQuest3Hidden: Bool;

  public let MetaQuest3Description: String;

  public let MetaQuest3Value: Int32;
}

public class TimeSkipPopupData extends inkGameNotificationData {
}

public class TimeSkipPopupCloseData extends inkGameNotificationData {

  public let timeChanged: Bool;
}

public native class gameuiTimeDisplayLogicController extends inkLogicController {

  public final native func UpdateTime(glitchEnabled: Bool, gameTime: GameTime) -> Void;
}

public class HubMenuInstanceData extends IScriptable {

  public let m_ID: Uint32;
}

public class DeathMenuUserData extends IScriptable {

  public let m_playInitAnimation: Bool;
}

public native class gameuiFinalBoardsGoToMainMenu extends Event {
}

public class hubSelectorSingleSmallCarouselController extends hubSelectorSingleCarouselController {
}

public class DeathMenuDelayEvent extends Event {
}

public class DelayedRegisterToGlobalInputCallbackEvent extends Event {
}

public class ForceCloseHubMenuEvent extends Event {
}

public native class inkSetNextLoadingScreenEvent extends Event {

  public final native func SetNextLoadingScreenType(newType: inkLoadingScreenType) -> Void;

  public final native func GetNextLoadingScreenType() -> inkLoadingScreenType;
}

public abstract native class ILoadingLogicController extends inkLogicController {
}

public class MapMenuUserData extends IScriptable {

  public let m_moveTo: Vector3;
}

public class MapNavigationDelay extends Event {
}

public native class inkWorldMapPreviewGameController extends gameuiMenuGameController {

  public final native func GetCameraMode() -> gameuiEWorldMapCameraMode;

  public final native func SetCameraMode(cameraMode: gameuiEWorldMapCameraMode) -> Void;

  public final native func JumpToZoomLevel(zoomLevel: Int32) -> Void;

  public final native func ZoomIn(opt strength: Float) -> Void;

  public final native func ZoomOut(opt strength: Float) -> Void;

  public final native func RotateYaw(strength: Float) -> Void;

  public final native func RotatePitch(strength: Float) -> Void;

  public final native func Move(direction: Vector4, strength: Float) -> Void;

  public final native func MoveTo(direction: Vector3) -> Void;
}

public native class UpdateInputHintMultipleEvent extends Event {

  public edit native let targetHintContainer: CName;

  public final native func AddInputHint(data: InputHintData, show: Bool) -> Void;
}

public struct WorldMapTooltipData {

  public let controller: wref<BaseWorldMapMappinController>;

  public let mappin: wref<IMappin>;

  public let journalEntry: wref<JournalEntry>;

  @default(WorldMapTooltipData, false)
  public let fastTravelEnabled: Bool;

  @default(WorldMapTooltipData, false)
  public let readJournal: Bool;

  public let district: gamedataDistrict;

  public let isCollection: Bool;

  public let collectionCount: Int32;
}

public native class PointOfInterestMappin extends IMappin {

  public final native func GetJournalPathHash() -> Uint32;

  public final native func IsInsideSecurityAreaTrigger() -> Bool;

  public final native func GetJournalQuestPathHash() -> Uint32;
}

public class RequestChangeTrackedObjective extends Event {

  public let m_objective: wref<JournalQuestObjective>;

  public let m_quest: wref<JournalQuest>;
}

public class QuestListHeaderData extends IScriptable {

  public let m_type: Int32;

  public let m_nameLocKey: CName;
}

public class QuestListDistanceData extends IScriptable {

  public let m_objective: wref<JournalQuestObjective>;

  public let m_distance: Float;
}

public class QuestlListItemClicked extends Event {

  public let m_questData: wref<JournalQuest>;

  public let m_skipAnimation: Bool;
}

public class MessageMenuAttachmentData extends IScriptable {

  public let m_entryHash: Int32;
}

public class QuestListHeaderClicked extends Event {

  public let m_questType: Int32;
}

public class UpdateOpenedQuestEvent extends Event {

  public let m_openedQuest: wref<JournalQuest>;
}

public class UpdateTrackedObjectiveEvent extends Event {

  public let m_trackedObjective: wref<JournalQuestObjective>;

  public let m_trackedQuest: wref<JournalQuest>;
}

public class QuestObjectiveHoverOverEvent extends Event {
}

public class QuestObjectiveHoverOutEvent extends Event {
}

public class OpenCodexPopupEvent extends Event {

  public let m_entry: wref<JournalEntry>;
}

public class PhoneMessagePopupEvent extends Event {

  public let m_data: ref<JournalNotificationData>;
}

public class JournalNotificationData extends inkGameNotificationData {

  public let journalEntry: wref<JournalEntry>;

  public let journalEntryState: gameJournalEntryState;

  public let className: CName;

  public let menuMode: Bool;
}

public class QuestListItemHoverOverEvent extends Event {

  public let m_isQuestResolved: Bool;
}

public static native func Cast(a: Uint8) -> Int32;

public static native func FTLog(const value: script_ref<String>) -> Void;

public native class FastTravelMappin extends RuntimeMappin {

  public final native func GetPointData() -> ref<FastTravelPointData>;
}

public native class MinimapQuestAreaInitData extends MappinControllerCustomData {
}

public native class TrackedMappinControllerCustomData extends MappinControllerCustomData {
}

public native class WorldMapFloorPlanController extends MinimapContainerController {
}

public native class VehicleMappin extends RuntimeMappin {

  public final native const func GetVehicle() -> wref<VehicleObject>;

  public final native func SetActive(active: Bool) -> Void;
}

public static native func StrSplitFirst(const str: script_ref<String>, const divider: script_ref<String>, out left: String, out right: String) -> Bool;

public native class AuthorisationNotificationViewData extends GenericNotificationViewData {

  public native let authType: gameuiAuthorisationNotificationType;
}

public class CodexPopupData extends inkGameNotificationData {

  public let m_entry: wref<JournalEntry>;
}

public class CraftingNotificationEvent extends Event {

  public let notificationType: CraftingNotificationType;

  public let perkName: String;
}

public native class TarotCardAddedNotificationViewData extends GenericNotificationViewData {

  public native let imagePart: CName;

  public native let cardName: String;

  public native let animation: CName;
}

public class TarotCardAdded extends Event {

  public let imagePart: CName;

  public let cardName: String;
}

public class ItemLogUserData extends inkGameNotificationData {

  public let itemID: ItemID;

  @default(ItemLogUserData, false)
  public let itemLogQueueEmpty: Bool;
}

public native struct CustomQuestNotificationData {

  public native let header: String;

  public native let desc: String;

  public native let icon: CName;

  public native let fluffHeader: String;
}

public class CustomNotificationEvent extends Event {

  public let header: String;

  public let description: String;

  public let icon: CName;

  public let fluff_header: String;
}

public class QuestMappinHighlightEvent extends Event {

  public let m_hash: Uint32;
}

public class MessageThreadReadEvent extends Event {

  public let m_parentHash: Int32;
}

public class DelayedJournalUpdate extends Event {

  public let m_newMessageSpawned: Bool;
}

public class LevelUpUserData extends inkGameNotificationData {

  public let data: LevelUpData;
}

public class NewAreaDiscoveredUserData extends inkGameNotificationData {

  public let data: String;
}

public class QuestUpdateUserData extends inkGameNotificationData {

  public let data: wref<JournalQuest>;
}

public class NewCodexEntryUserData extends inkGameNotificationData {

  public let data: String;
}

public class CustomQuestNotificationUserData extends inkGameNotificationData {

  public let data: CustomQuestNotificationData;
}

public class TutorialPopupData extends inkGameNotificationData {

  public let closeAtInput: Bool;

  public let pauseGame: Bool;

  public let isModal: Bool;

  public let position: PopupPosition;

  public let margin: inkMargin;

  public let imageId: TweakDBID;

  public let title: String;

  public let message: String;

  public let videoType: VideoType;

  public let video: ResRef;
}

public class ShardReadPopupData extends inkGameNotificationData {

  public let title: String;

  public let text: String;

  public let isCrypted: Bool;

  public let itemID: ItemID;
}

public class VendorRequirementsNotMetNotificationData extends IScriptable {

  public let m_data: SItemStackRequirementData;
}

public class ZoneAlertNotificationRemoveRequestData extends IScriptable {

  public let m_areaType: ESecurityAreaType;
}

public class PreventionBountyViewData extends GenericNotificationViewData {

  public let m_canBeMerged: Bool;

  public let bountyTitle: String;

  public let bountyPrice: Int32;
}

public class UnlimitedUnlocked extends Event {
}

public class PerkHoverOverEvent extends Event {

  public let widget: wref<inkWidget>;

  public let perkIndex: Int32;

  public let perkData: ref<BasePerkDisplayData>;
}

public class PerkHoverOutEvent extends Event {

  public let widget: wref<inkWidget>;

  public let perkData: ref<BasePerkDisplayData>;
}

public class PerksItemHoldStart extends Event {

  public let widget: wref<inkWidget>;

  public let actionName: ref<inkActionName>;

  public let perkData: ref<BasePerkDisplayData>;
}

public class PerkDisplayContainerCreatedEvent extends Event {

  public let index: Int32;

  public let isTrait: Bool;

  public let container: wref<PerkDisplayContainerController>;
}

public class PerksMenuAttributeItemCreated extends Event {

  public let perksMenuAttributeItem: wref<PerksMenuAttributeItemController>;
}

public class PerksMenuAttributeItemHoverOver extends Event {

  public let widget: wref<inkWidget>;

  public let attributeType: PerkMenuAttribute;

  public let attributeData: ref<AttributeData>;
}

public class PerksMenuAttributeItemHoverOut extends Event {

  public let widget: wref<inkWidget>;

  public let attributeType: PerkMenuAttribute;

  public let attributeData: ref<AttributeData>;
}

public class PerksMenuProficiencyItemClicked extends PerksMenuAttributeItemClicked {

  public let index: Int32;
}

public class PerksMenuAttributeItemHoldStart extends Event {

  public let widget: wref<inkWidget>;

  public let attributeType: PerkMenuAttribute;

  public let attributeData: ref<AttributeData>;

  public let actionName: ref<inkActionName>;
}

public class AttributeUpgradePurchased extends Event {

  public let attributeType: PerkMenuAttribute;

  public let attributeData: ref<AttributeData>;
}

public class ActiveSkillScreenChangedEvent extends Event {
}

public static native func StrReplaceAll(const str: script_ref<String>, const match: script_ref<String>, const with: script_ref<String>) -> String;

public class MessengerContactSyncData extends IScriptable {

  public let m_type: MessengerContactType;

  public let m_entryHash: Int32;

  public let m_level: Int32;
}

public class MessengerThreadSelectedEvent extends Event {

  public let m_hash: Uint32;
}

public class MessengerContactSelectedEvent extends Event {

  public let m_type: MessengerContactType;

  public let m_entryHash: Int32;

  public let m_level: Int32;
}

public class MessengerContactSyncBackEvent extends Event {
}

public class MessengerForceSelectionEvent extends Event {

  public let m_selectionIndex: Int32;

  public let m_hash: Int32;
}

public class PhotoModeMenuListItemData extends ListItemData {

  public let attributeKey: Uint32;
}

public native struct PhotoModeOptionGridButtonData {

  public native let imagePart: CName;

  public native let atlasResource: ResRef;

  public native let optionData: Int32;
}

public native struct PhotoModeOptionSelectorData {

  public native let optionText: String;

  public native let optionData: Int32;
}

public static native func OperatorModulo(a: Float, b: Float) -> Float;

public native class gameuiMorphInfo extends gameuiCharacterCustomizationInfo {

  public native const let morphNames: array<gameuiIndexedMorphName>;
}

public native struct gameuiIndexedMorphName {

  public native const let morphName: CName;

  public native const let localizedName: String;
}

public native class gameuiAppearanceInfo extends gameuiCharacterCustomizationInfo {

  public native const let useThumbnails: Bool;

  public native const let definitions: array<gameuiIndexedAppearanceDefinition>;
}

public native class gameuiSwitcherInfo extends gameuiCharacterCustomizationInfo {

  public native const let options: array<gameuiSwitcherOption>;
}

public native struct gameuiIndexedAppearanceDefinition {

  public native const let name: CName;

  public native const let localizedName: String;

  public native const let color: Color;

  public native const let icon: TweakDBID;
}

public native struct gameuiSwitcherOption {

  public native const let name: CName;

  public native const let localizedName: String;
}

public abstract native class CharacterCustomizationOption extends IScriptable {

  public native const let info: ref<gameuiCharacterCustomizationInfo>;

  public native const let bodyPart: gameuiCharacterCustomizationPart;

  public native const let prevIndex: Uint32;

  public native const let currIndex: Uint32;

  public native const let isActive: Bool;

  public native const let isCensored: Bool;
}

public class MorphMenuUserData extends IScriptable {

  public let m_optionsListInitialized: Bool;
}

public native class gameuiCharacterCustomizationSystem_OnAppearanceSwitchedEvent extends Event {

  public native let pairs: array<gameuiSwitchPair>;
}

public native struct gameuiSwitchPair {

  public native let prevOption: wref<CharacterCustomizationOption>;

  public native let currOption: wref<CharacterCustomizationOption>;
}

public native class gameuiCharacterCustomizationSystem_OnOptionUpdatedEvent extends Event {

  public native let option: wref<CharacterCustomizationOption>;
}

public class NextFrameEvent extends Event {
}

public native class gameuiCharacterCustomizationSystem_OnInitializeOptionsListEvent extends Event {
}

public native class gameuiCharacterCustomizationSystem_OnPresetAppliedEvent extends Event {
}

public native class gameuiCharacterCustomizationSystem_OnRandomizeCompleteEvent extends Event {
}

public class CharacterCreationTooltipData extends MessageTooltipData {

  public let attribiuteLevel: String;

  public let maxedOrMinimumLabelText: String;
}

public class CharacterCreationSummaryListItemData extends IScriptable {

  public let label: String;

  public let desc: String;
}

public native class ServerInfo extends IScriptable {

  public native let number: Int32;

  public native let kind: String;

  public native let hostname: String;

  public native let address: String;

  public native let worldDescription: String;
}

public native class RefreshGOGState extends Event {

  public native let status: GOGRewardsSystemStatus;

  public native let error: GOGRewardsSystemErrors;

  public native let registerURL: String;

  public native let qrCodePNGBlob: array<Uint8>;
}

public static native func GetGOGRewardsSystem() -> ref<GOGRewardsSystem>;

public static native func GOGRewardSystemErrorToDisplayString(error: GOGRewardsSystemErrors) -> String;

public class LinkClickedEvent extends Event {
}

public native class SaveMetadataInfo extends IScriptable {

  public native let saveIndex: Int32;

  public native let saveID: Uint32;

  public native let internalName: String;

  public native let locationName: String;

  public native let trackedQuest: String;

  public native let gameVersion: String;

  public native let lifePath: inkLifePath;

  public native let saveType: inkSaveType;

  public native let timestamp: Uint64;

  public native let playTime: Double;

  public native let playthroughTime: Double;

  public native let initialLoadingScreenID: Uint64;

  public native let level: Double;

  public native let isValid: Bool;
}

public static native func Cast(a: Double) -> Float;

public native class ShowEngagementScreen extends IScriptable {

  public native let show: Bool;
}

public native class ShowInitializeUserScreen extends IScriptable {

  public native let show: Bool;
}

public class QuestListItemHoverOutEvent extends Event {
}

public class QuestTrackingEvent extends Event {

  public let m_journalEntry: wref<JournalQuestObjectiveBase>;

  public let m_objective: wref<QuestItemController>;
}

public class SlotUserData extends IScriptable {

  public let itemData: InventoryItemData;

  public let index: Int32;

  public let area: gamedataEquipmentArea;
}

public class GridUserData extends IScriptable {

  public let equipArea: gamedataEquipmentArea;

  public let align: inkEHorizontalAlign;
}

public class CyberwareDataWrapper extends IScriptable {

  public let InventoryItem: InventoryItemData;

  public let IsVendor: Bool;

  public let PlayerMoney: Int32;
}

public class VendorHubMenuChanged extends Event {

  public let item: HubVendorMenuItems;
}

public class CyberwareDisplayWrapper extends IScriptable {

  public let displayData: InventoryItemDisplayData;
}

public class SettingsCategoryItemData extends ListItemData {
}

public struct SettingsCategory {

  public let label: CName;

  public let subcategories: array<SettingsCategory>;

  public let options: array<ref<ConfigVar>>;

  @default(SettingsCategory, true)
  public let isEmpty: Bool;

  public let groupPath: CName;
}

public class SettingsMenuUserData extends gameuiMenuGameController {

  public let m_isDlcSettings: Bool;
}

public struct SocialPanelContactInfo {

  public let Hash: Int32;

  public let Contact: wref<JournalContact>;
}

public class CategoryClickedEvent extends Event {

  public let statsData: StatViewData;
}

public class CyberwareSlotTooltipData extends ATooltipData {

  public let Empty: Bool;

  public let Name: String;

  public let Description: String;

  public let IconPath: String;
}

public class TarotCardPreviewData extends inkGameNotificationData {

  public let cardData: TarotCardData;
}

public struct TarotCardData {

  public let empty: Bool;

  public let index: Int32;

  public let imagePath: CName;

  public let label: String;

  public let desc: String;
}

public class TarotCardPreviewPopupEvent extends Event {

  public let m_data: ref<TarotCardPreviewData>;
}

public class VendorInventoryItemData extends WrappedInventoryItemData {

  public let IsVendorItem: Bool;

  public let IsEnoughMoney: Bool;

  public let IsBuybackStack: Bool;
}

public class SoldItem extends IScriptable {

  public let itemID: ItemID;

  public let quantity: Int32;

  public let piecePrice: Int32;
}

public class VenodrRequestQueueEntry extends IScriptable {

  public let requestID: Int32;

  public let itemID: ItemID;
}

public class VendorJunkSellItem extends IScriptable {

  public let item: wref<gameItemData>;

  public let quantity: Int32;
}

public class VendorSellJunkPopupData extends inkGameNotificationData {

  public let items: array<wref<gameItemData>>;

  public let limitedItems: array<ref<VendorJunkSellItem>>;

  public let itemsQuantity: Int32;

  public let limitedItemsQuantity: Int32;

  public let totalPrice: Float;

  public let limitedTotalPrice: Int32;
}

public class VendorSellJunkPopupCloseData extends inkGameNotificationData {

  public let confirm: Bool;

  public let items: array<wref<gameItemData>>;

  public let limitedItems: array<ref<VendorJunkSellItem>>;
}

public class RefreshSellQueueEvent extends Event {
}

public class RefreshBuyQueueEvent extends Event {
}

public class DelayedHUDInitializeEvent extends Event {
}

public struct TargetIndicatorEntry {

  public let targetID: EntityID;

  public let indicator: wref<inkWidget>;
}

public native struct smartGunUITargetParameters {

  public native let pos: Vector2;

  public native let state: gamesmartGunTargetState;

  public native let distance: Float;

  public native let accuracy: Float;

  public native let isLocked: Bool;

  public native let timeLocking: Float;

  public native let timeUnlocking: Float;

  public native let timeOccluded: Float;

  public native let entityID: EntityID;
}

public native class smartGunUIParameters extends IScriptable {

  public native let targets: array<smartGunUITargetParameters>;

  public native let sight: smartGunUISightParameters;

  public native let crosshairPos: Vector2;

  public native let hasRequiredCyberware: Bool;

  public native let timeToRemoveOccludedTarget: Float;

  public native let timeToLock: Float;

  public native let timeToUnlock: Float;
}

public class PhoneTimeoutRequest extends ScriptableSystemRequest {
}

public native class ShowPointOfNoReturnPromptEvent extends Event {
}

public struct scannerQuestEntry {

  public let categoryName: CName;

  public let entryName: CName;

  public let recordID: TweakDBID;
}

public class VulnerabilityUserData extends IScriptable {

  public let vulnerabilityName: CName;

  public let icon: CName;

  public let isActive: Bool;

  public let asyncSpawnRequest: wref<inkAsyncSpawnRequest>;
}

public class AbilityUserData extends IScriptable {

  public let abilityID: TweakDBID;

  public let locKeyName: CName;

  public let asyncSpawnRequest: wref<inkAsyncSpawnRequest>;
}

public static native func Abs(a: Int32) -> Int32;

public class RequirementUserData extends IScriptable {

  public let skillName: String;

  public let requiredSkill: Int32;

  public let skillCheck: EDeviceChallengeSkill;

  public let isPassed: Bool;

  public let asyncSpawnRequest: wref<inkAsyncSpawnRequest>;
}

public class QuestEntryUserData extends IScriptable {

  public let categoryName: CName;

  public let entryName: CName;

  public let recordID: TweakDBID;

  public let asyncSpawnRequest: wref<inkAsyncSpawnRequest>;
}

public struct NPCAbility {

  public let abilityName: String;
}

public class FitToContetDelay extends Event {
}

public class QuickHackDataEvent extends Event {

  public let selectedData: ref<QuickhackData>;
}

public class RadioListItemData extends IScriptable {

  public let m_record: wref<RadioStation_Record>;
}

public class VehicleListItemData extends IScriptable {

  public let m_displayName: CName;

  public let m_data: PlayerVehicle;

  public let m_icon: wref<UIIcon_Record>;
}

public native struct ListChoiceData {

  public native let localizedName: String;

  public native let type: ChoiceTypeWrapper;

  public native let inputActionName: CName;

  public native let captionParts: InteractionChoiceCaption;

  public native let timeProvider: wref<IVisualizerTimeProvider>;
}

public native struct ListChoiceHubData {

  public native let id: Int32;

  public native let activityState: EVisualizerActivityState;

  public native let flags: EVisualizerDefinitionFlags;

  public native let isPhoneLockActive: Bool;

  public native let title: String;

  public native let choices: array<ListChoiceData>;

  public native let timeProvider: wref<IVisualizerTimeProvider>;
}

public class DialogHubPostInitializeEvent extends Event {
}

public struct DialogHubData {

  public let m_isSelected: Bool;

  public let m_selectedInd: Int32;

  public let m_hasAboveElements: Bool;

  public let m_hasBelowElements: Bool;

  public let m_currentNum: Int32;

  public let m_argTotalCountAcrossHubs: Int32;
}

public abstract native class IVisualizerTimeProvider extends IScriptable {

  public final native const func GetCurrentProgress() -> Float;

  public final native const func GetDuration() -> Float;
}

public native struct InteractionChoiceData {

  public native let inputAction: CName;

  public native let rawInputKey: EInputKey;

  public native let isHoldAction: Bool;

  public native let localizedName: String;

  public native let type: ChoiceTypeWrapper;

  public native let data: array<Variant>;

  public native let captionParts: InteractionChoiceCaption;
}

public native struct VisualizersInfo {

  public native let activeVisId: Int32;

  public native let visIds: array<Int32>;
}

public class RefreshTooltipEvent extends Event {

  public let widget: wref<inkWidget>;
}

public class InvalidateTooltipHiddenStateEvent extends Event {

  public let widget: wref<inkWidget>;
}

public class WidgetsPoolItemSpawnData extends IScriptable {

  public let index: Int32;

  public let requestVersion: Int32;
}

public class ItemsPoolItemSpawnData extends IScriptable {

  public let index: Int32;

  public let requestVersion: Int32;
}

public class ItemsPoolCachedData extends IScriptable {

  public let tooltipData: ref<ATooltipData>;
}

public class InvalidateTooltipOwnerEvent extends Event {
}

public class MinimalLootingListItemData extends IScriptable {

  public let gameItemData: wref<gameItemData>;

  public let itemName: String;

  public let itemType: gamedataItemType;

  public let equipmentArea: gamedataEquipmentArea;

  public let quality: gamedataQuality;

  public let isIconic: Bool;

  public let quantity: Int32;

  public let lootItemType: LootItemType;

  public let dpsDiff: Float;

  public let armorDiff: Float;
}

public class TooltipLootingCachedData extends IScriptable {

  public let externalItemData: wref<gameItemData>;

  public let itemRecord: wref<Item_Record>;

  public let comparisonItemData: wref<gameItemData>;

  public let comparisonItemId: ItemID;

  public let lootingData: ref<MinimalLootingListItemData>;
}

public class LootingScrollBlockController extends IScriptable {

  private edit let m_rectangle: inkWidgetRef;
}

public class InventoryComboBoxContentController extends inkLogicController {
}

public struct InventoryComboBoxData {

  public let Message: String;

  public let ItemsToDisplay: array<InventoryItemData>;

  @default(InventoryComboBoxData, false)
  public let ShowUnequipButton: Bool;

  public let ShowcaseItem: InventoryItemData;

  @default(InventoryComboBoxData, false)
  public let DisplayShowcase: Bool;

  @default(InventoryComboBoxData, false)
  public let ForceDouble: Bool;
}

public class InventoryComboBoxItemsList extends inkLogicController {
}

public class InventoryCyberwareDetails extends inkLogicController {
}

public class EventEquipSlotSelectDelayedInventoryEvent extends Event {

  public let controller: wref<InventoryItemDisplayController>;
}

public class EventInventorySlotSelectDelayedInventoryEvent extends Event {

  public let controller: InventoryItemData;

  public let target: wref<inkWidget>;
}

public static native func AT_AddATID(widget: wref<inkWidget>, const atid: script_ref<String>) -> Void;

public class ItemModeItemChanged extends Event {

  public let equipmentArea: gamedataEquipmentArea;

  public let slotIndex: Int32;

  public let hotkey: EHotkey;
}

public class EquipmentAreaDisplays extends IScriptable {

  public let equipmentAreas: array<gamedataEquipmentArea>;

  public let displaysRoot: wref<inkWidget>;

  public let displayControllers: array<wref<InventoryItemDisplayController>>;
}

public class InstallModConfirmationData extends IScriptable {

  public let itemId: ItemID;

  public let partId: ItemID;

  public let slotID: TweakDBID;

  public let telemetryItemData: TelemetryInventoryItem;

  public let telemetryPartData: TelemetryInventoryItem;
}

public class OpenInventoryQuantityPickerRequest extends Event {

  public let itemData: InventoryItemData;

  public let actionType: QuantityPickerActionType;
}

public class EquipmentAreaCategoryCreated extends Event {

  public let categoryController: wref<InventoryItemDisplayCategoryArea>;

  public let equipmentAreasControllers: array<wref<InventoryItemDisplayEquipmentArea>>;
}

public struct EquipmentWidgets {

  public edit const let widgetArray: array<inkWidgetRef>;
}

public class InventoryQuickSlotsDisplay extends inkLogicController {
}

public native class InteractionMappin extends RuntimeMappin {

  public final native const func GetIconRecordID() -> TweakDBID;
}

public abstract native class IArea extends IVisualObject {

  public final native func GetEntityID() -> EntityID;

  public final native func GetType() -> CName;
}

public native class GrenadeMappin extends RuntimeMappin {
}

public native class StealthMappin extends RuntimeMappin {

  public final native func GetGameObject() -> wref<GameObject>;

  public final native func GetDetectionProgress() -> Float;

  public final native func DetectionProgressIncreases() -> Bool;

  public final native func DetectionProgressDecreases() -> Bool;

  public final native func GetThreatAccuracy() -> Float;

  public final native func ThreatAccuracyIncreases() -> Bool;

  public final native func ThreatAccuracyDecreases() -> Bool;

  public final native func WasDetectionAboveZero() -> Bool;

  public final native func GetAttitudeTowardsPlayer() -> EAIAttitude;

  public final native func GetSenseCone() -> gamemappinsSenseCone;

  public final native func IsAlive() -> Bool;

  public final native func IsAggressive() -> Bool;

  public final native func IsScanned() -> Bool;

  public final native func IsTarget() -> Bool;

  public final native func IsTagged() -> Bool;

  public final native func IsPrevention() -> Bool;

  public final native func IsCrowdNPC() -> Bool;

  public final native func IsUsingSenseCone() -> Bool;

  public final native func HasItems() -> Bool;

  public final native func UpdateSenseCone() -> Void;

  public final native func GetHighLevelState() -> gamedataNPCHighLevelState;

  public final native func SetVisibleOnMinimap(isVisible: Bool) -> Void;

  public final native func SetVisibleIn3D(isVisible: Bool) -> Void;

  public final native func UnregisterMappin() -> Void;

  public final native func UpdateCombatantState(isCombatant: Bool) -> Void;

  public final native func GetNumberOfShotAttempts() -> Uint32;

  public final native func GetIsDetectionGrowing() -> Bool;

  public final native func HasBeenSeen() -> Bool;

  public final native func SetIsPulsing(isPulsing: Bool) -> Void;

  public final native func CanSeePlayer() -> Bool;

  public final native func IsHighlighted() -> Bool;

  public final native func SetStealthAwarenessState(state: gameEnemyStealthAwarenessState) -> Void;

  public final native func GetStealthAwarenessState() -> gameEnemyStealthAwarenessState;

  public final native func IsSquadInCombat() -> Bool;

  public final native func GetNumberOfCombatants() -> Uint32;

  public final native func GetHighestLootQuality() -> Uint32;

  public final native func IsNetrunner() -> Bool;

  public final native func IsPlayerInHostileZone() -> Bool;

  public final native func WillReprimand() -> Bool;

  public final native func IsHiddenByQuestOnMinimap() -> Bool;

  public final native func IsHiddenByQuestIn3D() -> Bool;

  public final native func GetReprimandAnimationState() -> gameReprimandMappinAnimationState;

  public final native func GetNPCLevel() -> Uint32;

  public final native func GetArchetype() -> gamedataArchetypeType;

  public final native func GetRarity() -> gamedataNPCRarity;

  public final native func GetStatusEffectCurrentPriority() -> Float;

  public final native func GetStatusEffectTimeRemaining() -> Float;

  public final native func GetStatusEffectIconPath() -> String;

  public final native func UpdateObjectMarkerVisibility(canHaveObjectMarker: Bool, isVisible: Bool) -> Void;

  public final native func IsFriendlyFromHack() -> Bool;

  public final native func HasHackingStatusEffect() -> Bool;

  public final native func GetObjectMarkersEnabled() -> Bool;

  public final native func UpdateObjectMarkerThreshold(threshold: Float) -> Void;

  public final native func UpdateCombatToAwareThreshold(threshold: Float) -> Void;

  public final native func UpdateSenseConeAvailable(available: Bool) -> Void;
}

public native class RemotePlayerMappin extends RuntimeMappin {

  public native let hasMissionData: Bool;

  public native let vitals: Int32;
}

public native class PingSystemMappin extends RuntimeMappin {

  public native let pingType: gamedataPingType;

  public final native func ResolveIconState() -> String;
}

public native struct gamemappinsSenseCone {

  public native const let length: Float;

  public native const let width: Float;

  public native const let angleDegrees: Float;

  public native const let position1: Vector4;

  public native const let position2: Vector4;
}

public native class MinimapSecurityAreaInitData extends MappinControllerCustomData {
}

public class NPCStartingDetectionEvent extends Event {
}

public class NPCStoppingDetectionEvent extends Event {
}

public native class MiniGameStateUpdateEventAdvanced extends Event {

  public native let gameState: ref<MinigameStateAdvanced>;
}

public native class GameFinishEventAdvanced extends Event {

  public native let gameState: ref<MinigameStateAdvanced>;
}

public abstract native class MinigameStateAdvanced extends IScriptable {

  public final native func GetScore() -> Uint32;

  public final native func SetMaxScore(score: Uint32) -> Void;
}

public class SendScoreRequestAdvanced extends ScriptableSystemRequest {

  public let m_gameState: ref<MinigameStateAdvanced>;

  public let m_gameName: String;
}

public native class GridNoiseGenRule extends MinigameGenerationRule {
}

public native class MainProgramGenRule extends MinigameGenerationRule {
}

public native class ProgramFromDataGenRule extends MinigameGenerationRule {
}

public native class ProgramsGridGenRule extends MinigameGenerationRule {
}

public native class TrapsGenRule extends MinigameGenerationRule {
}

public native struct GridCell {

  public native let rarityValue: Int32;

  public native let currentTrap: ref<MiniGame_Trap_Record>;
}

public native struct MinigameData {

  public native let timeLimit: Float;

  public native let gridSize: Uint32;

  public native let bufferSize: Uint32;

  public native let timerWaitsForInteraction: Bool;

  public native let rules: array<ref<MinigameGenerationRule>>;

  public native let acceptableTraps: array<ref<MiniGame_Trap_Record>>;

  public native let symbolsToUse: ref<MiniGame_AllSymbols_Record>;
}

public native struct CharactersChain {

  public native let rarities: array<Uint32>;

  public native let matchedValues: Uint32;

  public native let ownerId: Int32;

  public native let isFulfilled: Bool;

  public native let isPossible: Bool;
}

public native struct UnlockableProgram {

  public native let name: CName;

  public native let note: CName;

  public native let isFulfilled: Bool;

  public native let programTweakID: TweakDBID;

  public native let iconTweakID: TweakDBID;

  public native let hidden: Bool;
}

public struct Overlap {

  public let instructionNumber: Int32;

  public let otherInstruction: Int32;

  public let atStart: Bool;

  public let rarity: Int32;
}

public class MinigameTooltipShowRequest extends Event {

  public let data: ref<MessageTooltipData>;
}

public class MinigameTooltipHideRequest extends Event {
}

public native struct TutorialOverlayData {

  public native let itemName: CName;

  public native let widgetLibraryResource: ResRef;
}

public native class PanzerMiniGameController extends MinigameControllerAdvanced {
}

public struct ScoreboardPlayer {

  public edit let m_playerName: String;

  public edit let m_playerScore: Int32;
}

public class SendScoreRequest extends ScriptableSystemRequest {

  public let m_score: Int32;

  public let m_gameName: String;
}

public native class QuadRacerGameState extends MinigameState {

  public native let timeLeft: Float;

  public native let boostTime: Float;

  public native let pointsBonusTime: Float;

  public native let speed: Float;

  public native let maxSpeed: Float;

  public native let shouldPushBackPlayer: Bool;

  public native let hasPassedCheckpoint: Bool;

  public native let lapsPassed: Int32;
}

public native class MiniGameStateUpdateEvent extends Event {

  public native let gameState: ref<MinigameState>;

  public native let gameName: CName;
}

public native class MinigameCollisionLogic extends inkLogicController {

  protected final native func UpdateGameState(state: ref<MinigameState>) -> Void;
}

public native class HitPlayerEvent extends Event {

  public native let gameState: ref<MinigameState>;
}

public native class RoachRaceGameState extends MinigameState {

  public native let invincibleTime: Float;

  public native let pointsBonusTime: Float;

  public native let speedMultiplicator: Float;
}

public native class MinigamePlayerController extends inkLogicController {
}

public native class MinigameDynObject extends inkLogicController {
}

public native struct TutorialBracketData {

  public native let bracketID: CName;

  public native let bracketType: gameTutorialBracketType;

  public native let anchor: inkEAnchor;

  public native let offset: Vector2;

  public native let size: Vector2;
}

public native class TutorialArea extends inkLogicController {
}

public native class TutorialOverlayUserData extends inkUserData {

  public native let hideOnInput: Bool;

  public native let overlayId: Uint32;
}

public struct SCodexRecord {

  public let RecordID: TweakDBID;

  public let RecordContent: array<SCodexRecordPart>;

  public let Tags: array<CName>;

  public let Unlocked: Bool;
}

public struct SCodexRecordPart {

  public let PartName: CName;

  public let PartContent: String;

  public let Unlocked: Bool;
}

public class CodexUnlockRecordRequest extends ScriptableSystemRequest {

  public let codexRecordID: TweakDBID;
}

public class CodexLockRecordRequest extends ScriptableSystemRequest {

  public let codexRecordID: TweakDBID;
}

public class CodexAddRecordRequest extends ScriptableSystemRequest {

  public let codexRecordID: TweakDBID;
}

public class UnlockCodexPartRequest extends ScriptableSystemRequest {

  public let codexRecordID: TweakDBID;

  public let partName: CName;
}

public class CodexPrintRecordsRequest extends ScriptableSystemRequest {
}

public native struct gameJournalEntryStateChangeData {

  public native let entryPath: ref<gameJournalPath>;

  public native let entryName: String;

  public native let entryType: CName;

  public native let isEntryTracked: Bool;

  public native let isQuestEntryTracked: Bool;

  public native let oldState: gameJournalEntryState;

  public native let newState: gameJournalEntryState;

  public native let notifyOption: JournalNotifyOption;

  public native let changeType: JournalChangeType;
}

public native struct gameJournalQuestTrackedData {

  public native let entryPath: ref<gameJournalPath>;

  public native let entryType: CName;

  public native let state: gameJournalEntryState;
}

public struct UIObjectiveEntryData {

  public let m_name: String;

  public let m_counter: String;

  public let m_type: UIObjectiveEntryType;

  public let m_state: gameJournalEntryState;

  public let m_isTracked: Bool;

  public let m_isOptional: Bool;
}

public class TrackedQuestPhaseUpdateRequest extends Event {
}

public class LateInit extends Event {
}

public class RadialWheelUserData extends IScriptable {

  public let m_Slot: ref<RadialSlot>;
}

public static native func AngleDistance(target: Float, current: Float) -> Float;

public struct ChatterKeyValuePair {

  public let Key: CRUID;

  public let Value: wref<ChatterLineLogicController>;

  public let Owner: wref<GameObject>;
}

public struct CyberdeckDeviceQuickhackData {

  public let UIIcon: wref<UIIcon_Record>;

  public let ObjectActionRecord: wref<ObjectAction_Record>;
}

public class ItemTooltipModuleSpawnedCallbackData extends IScriptable {

  public let moduleName: CName;
}

public class ItemTooltipEquippedModule extends ItemTooltipModuleController {
}

public class HideIconModuleEvent extends Event {
}

public native class gameuiTooltipAttachmentSlot extends inkLogicController {
}

public class VehicleUIactivateEvent extends Event {

  public let m_activate: Bool;
}

public static native func OperatorLessEqual(a: GameTime, b: GameTime) -> Bool;

public static native func OperatorGreaterEqual(a: GameTime, b: GameTime) -> Bool;

public native struct smartGunUISightParameters {

  public native let center: Vector2;

  public native let targetableRegionSize: Vector2;

  public native let reticleSize: Vector2;
}

public native struct gameuiWeaponShootParams {

  public native let fromWorldPosition: Vector4;

  public native let forward: Vector4;
}

public class IronsightTargetHealthUpdateEvent extends Event {
}

public class CrosshairGameController_Jailbreak_Power extends gameuiCrosshairBaseGameController {
}

public class CrosshairGameController_Jailbreak_Smart extends gameuiCrosshairBaseGameController {
}

public class CrosshairGameController_Jailbreak_Tech extends gameuiCrosshairBaseGameController {
}

public struct BraindanceClueData {

  public let id: CName;

  public let startTime: Float;

  public let duration: Float;

  public let state: ClueState;

  public let layer: gameuiEBraindanceLayer;
}

public class StealthZonesGameController extends inkHUDGameController {
}

public class QuickSlotButtonHoldEndEvent extends Event {

  public let dPadItemDirection: EDPadSlot;

  @default(QuickSlotButtonHoldEndEvent, -1)
  public let rightStickAngle: Float;

  @default(QuickSlotButtonHoldEndEvent, true)
  public let tryExecuteCommand: Bool;
}

public class RadialMenuItem extends inkHUDGameController {
}

public struct PlayerListEntryData {

  public let playerObject: wref<GameObject>;

  public let playerListEntry: wref<inkWidget>;
}

public static native func TanF(a: Float) -> Float;

public native struct gameuiDetectionParams {

  public native let detectionProgress: Float;
}

public class UndelectAllItemsDelayedEvent extends Event {
}

public struct NpcNameplateVisualData {

  public let npcNextToCrosshair: NPCNextToTheCrosshair;

  public let buffList: array<BuffInfo>;

  public let debuffList: array<BuffInfo>;
}

public class HUDButtonHints extends inkGameController {
}

public native struct InputHintGroupData {

  public edit native let iconReference: TweakDBID;

  public edit native let localizedTitle: String;

  public edit native let localizedDescription: String;

  public edit native let sortingPriority: Int32;
}

public native class InputHintInitializedEvent extends Event {

  public edit native let targetHintContainer: CName;
}

public native class LogTutorialHintActionEvent extends Event {

  public edit native let actionName: CName;
}

public native class AddInputGroupEvent extends Event {

  public edit native let data: InputHintGroupData;

  public edit native let groupId: CName;

  public edit native let targetHintContainer: CName;
}

public native class DeleteInputGroupEvent extends Event {

  public edit native let groupId: CName;

  public edit native let targetHintContainer: CName;
}

public native class InputHintManagerGameController extends inkGameController {

  public edit native let hintContainerId: CName;
}

public class PhoneMessageHidePopupEvent extends Event {
}

public class QuickhackDescriptionUpdate extends Event {
}

public class DelayedDescriptionIntro extends Event {
}

public abstract class AIDeathConditions extends AIbehaviorconditionScript {
}

public class DelayPassiveConditionEvaluationEvent extends Event {
}

public abstract class HitConditions extends AIbehaviorconditionScript {
}

public abstract class CheckStimID extends AIbehaviorconditionScript {
}

public abstract class AINPCStateCheck extends AIbehaviorconditionScript {
}

public abstract class CompareArguments extends AIbehaviorconditionScript {

  public edit let m_var1: CName;

  public edit let m_var2: CName;
}

public abstract class AIDebugConditions extends AIbehaviorconditionScript {
}

public abstract class AIItemHandlingCondition extends AIbehaviorconditionScript {
}

public struct AIStackSignalConditionData {

  public let m_callbackId: Uint32;

  public let m_lastValue: Bool;
}

public static native func OperatorLess(a: EngineTime, b: Float) -> Bool;

public abstract class AITimeCondition extends AIbehaviorconditionScript {
}

public native class AIPatrolPathParameters extends IScriptable {

  public native let path: NodeRef;

  public native let movementType: moveMovementType;

  public native let enterClosest: Bool;

  public native let patrolWithWeapon: Bool;

  @attrib(customEditor, "TweakDBGroupInheritance;PatrolActions.AIPatrolActionComposite")
  @default(AIPatrolPathParameters, PatrolActions.DefaultPatrolAction)
  public edit let patrolAction: TweakDBID;

  public native let isBackAndForth: Bool;

  public native let isInfinite: Bool;

  public native let numberOfLoops: Uint32;
}

public class NormalDeathTask extends AIDeathReactionsTask {
}

public class DisassembleEvent extends Event {
}

public class SpiderbotOrderCompletedEvent extends Event {
}

public abstract class ChangeNPCState extends AIbehaviortaskScript {
}

public abstract class AICoreTasks extends AIbehaviortaskScript {
}

public class FollowVehicleTask extends AIbehaviortaskScript {
}

public static native func GetLookAtLimitDegreesValue(limitType: animLookAtLimitDegreesType) -> Float;

public abstract class RagdollTask extends AIbehaviortaskScript {
}

public abstract class SquadTask extends AIbehaviortaskScript {
}

public abstract class StatusEffectActions extends AIbehaviortaskScript {
}

public class WeaponJammedAction extends StatusEffectActions {

  @default(WeaponJammedAction, 5)
  public let m_jammedWeaponDuration: Float;

  public let m_jammedWeaponStartTimeStamp: Float;
}

public abstract class StatusEffectTasks extends AIbehaviortaskScript {
}

public static native func OperatorLessEqual(a: EngineTime, b: EngineTime) -> Bool;

public static native func OperatorAdd(a: EngineTime, b: Float) -> EngineTime;

public abstract class WorkSpotTask extends AIbehaviortaskScript {
}

public class AIBackgroundCombatCommand extends AICommand {

  public let m_steps: array<AIBackgroundCombatStep>;
}

public struct AIBackgroundCombatStep {

  public edit let m_timeMin: Float;

  public edit let m_timeMax: Float;

  public edit let m_type: EAIBackgroundCombatStep;

  public edit let m_argument: EntityReference;

  @default(AIBackgroundCombatStep, AICoverExposureMethod.Stand_Up)
  public edit let m_exposureMethod: AICoverExposureMethod;
}

public abstract native class AIBaseMountCommand extends AICommand {

  public native let mountData: ref<MountEventData>;
}

public native class AIMountCommand extends AIBaseMountCommand {
}

public native class AIUnmountCommand extends AIBaseMountCommand {
}

public native class WorkspotList extends IScriptable {

  public native let spots: array<NodeRef>;
}

public class ShardCaseContainerPS extends gameLootContainerBasePS {
}

public class ShardCaseAnimationEnded extends Event {

  public let activator: wref<GameObject>;

  public let item: ItemID;

  public let read: Bool;
}

public native class Damage extends IScriptable {

  public final native func IsValid() -> Bool;

  public final native func GetType() -> gamedataDamageType;

  public final native func SetType(dmgType: gamedataDamageType) -> Void;

  public final native func GetValue() -> Float;

  public final native func SetValue(value: Float) -> Void;
}

public struct SStatPoolValue {

  public let type: gamedataStatPoolType;

  public let value: Float;
}

public struct SCachedStat {

  public let stat: gamedataStatType;

  public let value: Float;
}

public class EffectPreAction_PreAttack_WithFriendlyFire extends EffectPreAction_PreAttack {
}

public struct SDebugChoice {

  public let choiceName: CName;

  public let factValue: Int32;

  public let factmode: EVarDBMode;
}

public struct SFakeFeatureChoice {

  public let choiceID: String;

  public let isEnabled: Bool;

  public let disableOnUse: Bool;

  public let factToEnableName: CName;

  public let factOnUse: SFactOperationData;

  public const let factsOnUse: array<SFactOperationData>;

  public const let affectedComponents: array<SComponentOperationData>;

  public let callbackID: Uint32;
}

public class DEBUG_RebalanceItemEvent extends Event {

  public let reqLevel: Float;
}

public abstract class StrikeDuration_Debug extends EffectDurationModifier_Scripted {
}

public abstract class StrikeExecutor_Debug extends EffectExecutor_Scripted {
}

public struct CellData {

  public let position: Vector2;

  public let element: ElementData;

  public let properties: SpecialProperties;

  public let assignedCell: wref<NetworkMinigameGridCellController>;

  public let consumed: Bool;
}

public struct EndScreenData {

  public let unlockedPrograms: array<ProgramData>;

  public let outcome: OutcomeMessage;
}

public struct NetworkMinigameData {

  public let gridData: array<CellData>;

  public let playerBufferSize: Int32;

  public let basicAccess: ProgramData;

  public let playerPrograms: array<ProgramData>;

  public let enemyBufferSize: Int32;

  public let enemyLockNetwork: ProgramData;

  public let enemyPrograms: array<ProgramData>;
}

public struct NewTurnMinigameData {

  public let position: Vector2;

  public let doConsume: Bool;

  public let nextHighlightMode: HighlightMode;

  public let newPlayerBufferContent: array<ElementData>;

  public let newEnemyBufferContent: array<ElementData>;

  public let doRegenerateGrid: Bool;

  public let regeneratedGridData: array<CellData>;

  public let basicAccessCompletionState: ProgramProgressData;

  public let playerProgramsCompletionState: array<ProgramProgressData>;

  public let enemyProgramsCompletionState: array<ProgramProgressData>;

  public let playerProgramsChange: Bool;

  public let playerProgramsAdded: array<ProgramData>;

  public let playerProgramsRemoved: array<ProgramData>;

  public let enemyProgramsChange: Bool;

  public let enemyprogramsAdded: array<ProgramData>;

  public let enemyprogramsRemoved: array<ProgramData>;
}

public struct SpecialProperties {

  public let enemyMarker: Bool;

  public let traps: array<ETrap>;
}

public class DayPassedEvent extends Event {
}

public class RequestBannerWidgetUpdateEvent extends RequestWidgetUpdateEvent {
}

public class SetDocumentStateEvent extends Event {

  public let documentType: EDocumentType;

  public let documentAdress: SDocumentAdress;

  public let isOpened: Bool;
}

public class RequestComputerMenuWidgetsUpdateEvent extends RequestWidgetUpdateEvent {
}

public struct SInternetData {

  public let startingPage: String;
}

public class RequestComputerMainMenuWidgetsUpdateEvent extends RequestWidgetUpdateEvent {
}

public struct SBreadCrumbUpdateData {

  public let elementName: String;

  public let elementID: Int32;

  public let context: CName;
}

public native struct QuestInfo {

  public native let factName: CName;

  public native let isHighlighted: Bool;
}

public class DocumentCustomData extends IScriptable {

  public let id: Int32;

  public let type: EDocumentType;
}

public class ConfessionCompletedEvent extends Event {
}

public class ImageButtonCustomData extends WidgetCustomData {

  public let imageAtlasImageID: CName;

  public let additionalText: String;
}

public class InteractiveSignDeviceWidgetController extends DeviceWidgetControllerBase {

  public edit let m_messageWidgetPath: CName;

  public edit let m_backgroundWidgetPath: CName;

  public let m_messageWidget: wref<inkText>;

  public let m_backgroundWidget: wref<inkWidget>;
}

public class SWidgetPackageWrapper extends IScriptable {

  public let WidgetPackage: SWidgetPackage;
}

public struct RadioSetup {

  public let m_startingStation: ERadioStationList;

  public let m_isInteractive: Bool;

  @attrib(customEditor, "AudioEvent")
  public let m_glitchSFX: CName;
}

public class ToggleGlassTintHack extends ToggleGlassTint {
}

public struct SequenceVideo {

  public let videoPath: ResRef;

  @attrib(customEditor, "AudioEvent")
  public let audioEvent: CName;

  @default(SequenceVideo, false)
  public let looped: Bool;
}

public class IndustrialArmDamageEvent extends Event {
}

public struct ActivatedDeviceNPCSetup {

  public let npcSpawnerNodeRef: NodeRef;

  public let m_npcSpawned: wref<NPCPuppet>;
}

public class TrapPhysicsActivationEvent extends Event {
}

public struct AOEAreaSetup {

  @attrib(customEditor, "TweakDBGroupInheritance;DeviceAreaAttack")
  public let m_areaEffect: TweakDBID;

  @attrib(customEditor, "TweakDBGroupInheritance;InteractionBase")
  public let m_actionName: TweakDBID;

  @attrib(tooltip, "determines whether NPCs can see through the area while the effect is active. Don't forget to apply a proper visual effect which communicates this on the effector. Set to false by default.")
  @default(AOEAreaSetup, false)
  public let m_blocksVisibility: Bool;

  @attrib(tooltip, "determines whether NPCs will try to avoid the area when it's active, so as not to walk directly into an obvious trap. Set to false by default.")
  @default(AOEAreaSetup, false)
  public let m_isDangerous: Bool;

  @attrib(tooltip, "determines whether the device should automatically activate as soon as it's spawned. Set to false by default.")
  @default(AOEAreaSetup, false)
  public let m_activateOnStartup: Bool;

  @attrib(tooltip, " if checked, effects will be local. This means that if the device gets deactivated, or an entity leaves the area, the status effects applied by the device will be removed. An example usage of this is an area with loud music playing. An AOE_ImpairedHearing effect with this option set to true will mute all the audio stims sent in the area. Set to false by default. NOTE: Please be careful while using this. There's no smart logic implemented here to prevent you from doing nonsensical things. You can remove effects that probably shouldn't be removed, eg. burning.")
  @default(AOEAreaSetup, false)
  public let m_effectsOnlyActiveInArea: Bool;

  @attrib(tooltip, "determines how long the effects are active. It does not impact how long status effect (e.g. blindness) is applied on npc. This is determined by RPG for balance reasons Negative values are interpreted as infinity. Set to -1.0f by default.")
  @default(AOEAreaSetup, -1.f)
  public let m_duration: Float;

  @attrib(category, "UI")
  @attrib(customEditor, "TweakDBGroupInheritance;ActionWidgetDefinition")
  public edit let m_actionWidgetRecord: TweakDBID;

  @attrib(category, "UI")
  @attrib(customEditor, "TweakDBGroupInheritance;DeviceWidgetDefinition")
  public edit let m_deviceWidgetRecord: TweakDBID;

  @attrib(category, "UI")
  @attrib(customEditor, "TweakDBGroupInheritance;ThumbnailWidgetDefinition")
  public edit let m_thumbnailWidgetRecord: TweakDBID;
}

public abstract native class worldITriggerAreaNotiferInstance extends IScriptable {
}

public native class TriggerNotifier_ScriptInstance extends worldITriggerAreaNotiferInstance {

  public final native func GetNotifier() -> ref<TriggerNotifier_Script>;
}

public class BarbedWireControllerPS extends ActivatedDeviceControllerPS {
}

public class AlarmEvent extends Event {

  public let isValid: Bool;

  public let ID: DelayID;
}

public struct SurveillanceCameraResaveData {

  public let m_shouldRotate: Bool;

  public let m_maxRotationAngle: Float;

  public let m_pitchAngle: Float;

  public let m_rotationSpeed: Float;

  public let m_canStreamVideo: Bool;

  public let m_canDetectIntruders: Bool;

  public let m_canBeControled: Bool;

  public let m_factOnFeedReceived: CName;

  public let m_questFactOnDetection: CName;
}

public struct SHighlightTarget {

  public let targetID: EntityID;

  public let highlightType: EFocusForcedHighlightType;
}

public native class TrafficLightListenerComponent extends IComponent {
}

public final native class gameConveyorControlEvent extends Event {

  public native let enable: Bool;
}

public native struct ActionPrereqs {

  public native let actionName: CName;

  public native let prereqs: array<ref<IPrereq>>;
}

public struct ActionInteractivityInfo {

  public let isExternal: Bool;

  public let isRemote: Bool;

  public let isDirect: Bool;
}

public class TargetAcquiredEvent extends Event {

  public let target: wref<ScriptedPuppet>;
}

public class TargetLostEvent extends Event {

  public let target: wref<ScriptedPuppet>;
}

public native class gameDevicePSChanged extends Event {
}

public struct SBaseStateOperationData {

  @attrib(category, "Trigger Data")
  public let state: EDeviceStatus;

  public let operation: SBaseDeviceOperationData;
}

public struct SDoorStateOperationData {

  @attrib(category, "Trigger Data")
  public let state: EDoorStatus;

  public let operation: SBaseDeviceOperationData;
}

public struct SBaseActionOperationData {

  @attrib(category, "Trigger Data")
  public inline let action: ref<ScriptableDeviceAction>;

  public let operation: SBaseDeviceOperationData;
}

public struct SCustomActionOperationData {

  @attrib(category, "Trigger Data")
  public let actionID: CName;

  public let operation: SBaseDeviceOperationData;
}

public struct STriggerVolumeOperationData {

  @attrib(category, "Trigger Data")
  public let isActivatorPlayer: Bool;

  @attrib(category, "Trigger Data")
  public let isActivatorNPC: Bool;

  @attrib(category, "Trigger Data")
  public let componentName: CName;

  @attrib(category, "Trigger Data")
  public let operationType: ETriggerOperationType;

  public let operation: SBaseDeviceOperationData;
}

public struct SInteractionAreaOperationData {

  @attrib(category, "Trigger Data")
  public let isActivatorPlayer: Bool;

  @attrib(category, "Trigger Data")
  public let isActivatorNPC: Bool;

  @attrib(category, "Trigger Data")
  public let areaTag: CName;

  @attrib(category, "Trigger Data")
  public let operationType: gameinteractionsEInteractionEventType;

  public let operation: SBaseDeviceOperationData;
}

public struct SHitOperationData {

  @attrib(category, "Trigger Data")
  @default(SHitOperationData, true)
  public let isAttackerPlayer: Bool;

  @attrib(category, "Trigger Data")
  public let isAttackerNPC: Bool;

  @attrib(category, "Trigger Data")
  @default(SHitOperationData, true)
  public let bullets: Bool;

  @attrib(category, "Trigger Data")
  public let explosions: Bool;

  @attrib(category, "Trigger Data")
  public let melee: Bool;

  @attrib(rangeMax, "100.f")
  @attrib(category, "Trigger Data")
  @attrib(rangeMin, "0.f")
  @default(SHitOperationData, 100.0f)
  public let healthPercentage: Float;

  public let operation: SBaseDeviceOperationData;
}

public struct SSensesOperationData {

  @attrib(category, "Trigger Data")
  public let isActivatorPlayer: Bool;

  @attrib(category, "Trigger Data")
  public let isActivatorNPC: Bool;

  @attrib(category, "Trigger Data")
  public let attitudeGroup: CName;

  @attrib(category, "Trigger Data")
  public let operationType: ETriggerOperationType;

  public let operation: SBaseDeviceOperationData;
}

public struct SFocusModeOperationData {

  @attrib(category, "Trigger Data")
  public let operationType: ETriggerOperationType;

  @attrib(category, "Trigger Data")
  @default(SFocusModeOperationData, true)
  public let isLookedAt: Bool;

  public let operation: SBaseDeviceOperationData;
}

public class ActivatorOperationTriggerData extends DeviceOperationTriggerData {
}

public final native struct DeviceRef {

  public native const let nodeRef: NodeRef;

  public native const let deviceClassName: CName;
}

public final native class DeviceDynamicConnectionChange extends Event {
}

public class DebugRemoteConnectionEvent extends Event {
}

public class SensorJammed extends Event {

  public let sensor: wref<SensorDevice>;
}

public class BackDoorObjectiveData extends GemplayObjectiveData {
}

public class ControlPanelObjectiveData extends GemplayObjectiveData {
}

public native class MasterDeviceComponent extends GameComponent {

  public edit native let clearance: ref<Clearance>;

  public final native func GetActionsOfConnectedDevices(out outActions: array<ref<DeviceAction>>, context: GetActionsContext) -> Void;

  public final native func GetConnectedDevices(out outDevices: array<ref<DeviceComponentPS>>) -> Void;
}

public class KillTaggedTargetEvent extends Event {

  public let taggedObject: wref<GameObject>;
}

public class ReevaluateTargetsEvent extends Event {
}

public native struct LightPreset {

  public native let lightSourcesName: CName;

  public native let preset: TweakDBID;
}

public class panelApperanceSwitchEvent extends Event {

  public let newApperance: CName;
}

public struct DoorResaveData {

  public let m_doorType: EDoorType;

  public let m_canPlayerToggleLockState: Bool;

  public let m_canPlayerToggleSealState: Bool;

  public let m_initialStatus: EDoorStatus;

  public let m_keycardName: TweakDBID;

  public let m_passcode: CName;
}

public class DoorColliderEnableEvent extends Event {
}

public class DropPointModule extends Device {
}

public class ExplosiveTriggerDeviceProximityEvent extends Event {

  public let instigator: EntityID;
}

public struct ForkliftSetup {

  @default(ForkliftSetup, Activate)
  public let m_actionActivateName: CName;

  @default(ForkliftSetup, 2.0f)
  public let m_liftingAnimationTime: Float;

  @default(ForkliftSetup, true)
  public let m_hasDistractionQuickhack: Bool;
}

public class ForkliftCompleteActivateEvent extends Event {
}

public struct SGenericDevicePersistentData {

  public let genericActions: SGenericDeviceActionsData;

  public let customActions: SCustomDeviceActionsData;
}

public class InteractiveSignControllerPS extends ScriptableDeviceComponentPS {
}

public struct JukeboxSetup {

  public let m_startingStation: ERadioStationList;

  @attrib(customEditor, "AudioEvent")
  public let m_glitchSFX: CName;

  @attrib(customEditor, "TweakDBGroupInheritance;ActionPayment")
  public let m_paymentRecordID: TweakDBID;
}

public struct RadioResaveData {

  public let m_mediaResaveData: MediaResaveData;

  public let m_stations: array<RadioStationsMap>;
}

public class SecretOpenAnimationEvent extends Event {
}

public struct SChannelEnumData {

  @default(SChannelEnumData, ETVChannel.CH1)
  public let channel: ETVChannel;
}

public class WindowBlindersReplicatedState extends DeviceReplicatedState {

  public let m_isOpen: Bool;

  public let m_isTilted: Bool;
}

public struct WindowBlindersData {

  @default(WindowBlindersData, EWindowBlindersStates.Closed)
  public persistent let m_windowBlindersState: EWindowBlindersStates;

  @default(WindowBlindersData, true)
  public persistent let m_hasOpenInteraction: Bool;

  @default(WindowBlindersData, false)
  public persistent let m_hasTiltInteraction: Bool;

  @default(WindowBlindersData, true)
  public persistent let m_hasQuickHack: Bool;
}

public class DepleteCharges extends Event {
}

public class BreachAccessPointEvent extends Event {
}

public struct VentilationAreaSetup {

  @default(VentilationAreaSetup, ETrapEffects.Explosion)
  public let m_areaEffect: ETrapEffects;

  @default(VentilationAreaSetup, Activate)
  public let m_actionName: CName;
}

public struct ComputerPersistentData {

  public let mails: array<GenericDataContent>;

  public let files: array<GenericDataContent>;

  public let newsFeedElements: array<SNewsFeedElementData>;

  public let internetData: SInternetData;

  public let initialUIPosition: String;

  public let m_openedFileIDX: Int32;

  public let m_openedFolderIDX: Int32;
}

public native struct UIScreenDefinition {

  public native let screenType: TweakDBID;
}

public struct SNewsFeedData {

  @default(SNewsFeedData, 5.0)
  public let interval: Float;

  public const let elements: array<SNewsFeedElementData>;
}

public class BlinkingEvent extends Event {

  public let requestNumber: Int32;
}

public struct SPresetTimetableEntry {

  public let time: SSimpleGameTime;

  public let useTime: Bool;

  public let arrayPosition: Int32;

  public let entryID: Uint32;
}

public class PresetTimetableEvent extends Event {

  public let arrayPosition: Int32;
}

public struct SmartHouseConfiguration {

  public let enableInteraction: Bool;

  public let factName: CName;
}

public struct SoundSystemSettings {

  @attrib(customEditor, "TweakDBGroupInheritance;Interactions.InteractionChoice;Interactions.MountChoice")
  public let m_interactionName: TweakDBID;

  public inline let m_musicSettings: ref<MusicSettings>;

  public let m_canBeUsedAsQuickHack: Bool;
}

public struct SpeakerSetup {

  public let m_defaultMusic: ERadioStationList;

  public let m_distractionMusic: ERadioStationList;

  @default(SpeakerSetup, 10.0f)
  public let m_range: Float;

  @attrib(customEditor, "AudioEvent")
  @default(SpeakerSetup, dev_radio_ditraction_glitching)
  public let m_glitchSFX: CName;

  public let m_useOnlyGlitchSFX: Bool;
}

public class RefreshSlavesState extends Event {
}

public class TriggerPlayerAreaCheck extends Event {
}

public class State extends MorphData {

  public let state: ESecuritySystemState;
}

public class Blacklist extends MorphData {
}

public class Reprimand extends MorphData {

  public let reprimandData: ReprimandData;
}

public class ProtectedEntities extends MorphData {

  public let protectedEntities: array<EntityID>;
}

public class EntitiesAtGate extends MorphData {

  public let entitiesAtGate: array<EntityID>;
}

public struct SecuritySystemMorphData {

  public let state: ref<State>;

  public let reprimandData: ref<Reprimand>;

  public let blacklist: ref<Blacklist>;

  public let protectedEntities: ref<ProtectedEntities>;

  public let entitiesAtGate: ref<EntitiesAtGate>;
}

public class NewCycleEvent extends Event {

  public let cyclesCount: Uint16;
}

public struct Time {

  @default(Time, 0)
  public let days: Int32;

  @attrib(rangeMax, "23")
  @attrib(rangeMin, "0")
  @default(Time, 0)
  public let hours: Int32;

  @attrib(rangeMax, "59")
  @attrib(rangeMin, "0")
  @default(Time, 0)
  public let minutes: Int32;
}

public class PhysicalHackingEvent extends Event {

  public let deviceName: String;
}

public struct MovableDeviceSetup {

  @default(MovableDeviceSetup, 1)
  public persistent let m_numberOfUses: Int32;
}

public struct WeakFenceSetup {

  @default(WeakFenceSetup, false)
  public let m_hasGenericInteraction: Bool;
}

public class UpdateGatePosition extends Event {
}

public class Disarm extends Event {

  public let requester: wref<GameObject>;
}

public struct SecurityLockerProperties {

  @attrib(tooltip, "What access should be given to the palyer if deposits weapons and deactivates cyberwere. Note this works only if Security Locker is connected to Security System")
  @default(SecurityLockerProperties, ESecurityAccessLevel.ESL_4)
  public let securityLevelAccessGranted: ESecurityAccessLevel;

  @attrib(tooltip, "Should disable player's combat cyberware on top of taking weapons away? Will trigger personal link animation")
  public let disableCyberware: Bool;

  @attrib(customEditor, "AudioEvent")
  @default(SecurityLockerProperties, ui_loot_gun)
  public edit let storeWeaponSFX: CName;

  @attrib(customEditor, "AudioEvent")
  @default(SecurityLockerProperties, ui_loot_take_all)
  public edit let pickUpWeaponSFX: CName;
}

public class Arm extends Event {

  public let requester: wref<GameObject>;
}

public struct SecurityLockerUserEntry {
}

public struct CrossingLightSetup {

  @attrib(customEditor, "AudioEvent")
  public let m_greenLightSFX: CName;

  @attrib(customEditor, "AudioEvent")
  public let m_redLightSFX: CName;
}

public class NcartTimeTableCounterUpdateEvent extends Event {
}

public struct NcartTimetableSetup {

  @attrib(rangeMax, "60")
  @attrib(rangeMin, "0")
  @default(NcartTimetableSetup, 5)
  public let departFrequency: Int32;

  @attrib(rangeMax, "30")
  @attrib(rangeMin, "0")
  @default(NcartTimetableSetup, 1)
  public let uiUpdateFrequency: Int32;
}

public class LightSwitchRequest extends Event {

  public let requestNumber: Int32;
}

public struct TrafficPersistentData {

  public let m_invertTrafficEvents: Bool;
}

public struct TrafficLightResaveData {

  public let m_transitionDuration: Float;

  public let m_playNotificationSounds: Bool;

  public let m_invertTrafficEvents: Bool;
}

public class AnimFeature_ChestPress extends AnimFeature {

  public edit let lifting: Bool;

  public edit let kill: Bool;
}

public struct FanResaveData {

  public let m_animationType: EAnimationType;

  public let m_rotateClockwise: Bool;

  public let m_randomizeBladesSpeed: Bool;

  public let m_maxRotationSpeed: Float;

  public let m_timeToMaxRotation: Float;
}

public struct FanSetup {

  public let m_animationType: EAnimationType;

  @default(FanSetup, true)
  public let m_rotateClockwise: Bool;

  @default(FanSetup, false)
  public let m_randomizeBladesSpeed: Bool;

  @attrib(rangeMax, "300")
  @attrib(rangeMin, "1")
  @default(FanSetup, 150.f)
  public persistent let m_maxRotationSpeed: Float;

  @attrib(rangeMax, "5.0f")
  @attrib(rangeMin, "0.0f")
  @default(FanSetup, 3.f)
  public let m_timeToMaxRotation: Float;
}

public struct IceMachineSFX extends VendingMachineSFX {

  @attrib(customEditor, "AudioEvent")
  @default(IceMachineSFX, dev_ice_machine_ice_cube_falls)
  public let m_iceFalls: CName;

  @attrib(customEditor, "AudioEvent")
  @default(IceMachineSFX, dev_vending_machine_processing)
  public let m_processing: CName;
}

public class DelaySpawning extends Event {
}

public class InteractiveAdFinishedEvent extends Event {
}

public struct WeaponVendingMachineSetup {

  @attrib(customEditor, "TweakDBGroupInheritance;Vendors.WeaponVendingMachine")
  public let m_vendorTweakID: TweakDBID;

  @attrib(customEditor, "TweakDBGroupInheritance;Items.BaseDestroyedJunk")
  public let m_junkItemID: TweakDBID;

  @default(WeaponVendingMachineSetup, 3.f)
  public let m_timeToCompletePurchase: Float;
}

public struct WeaponVendingMachineSFX extends VendingMachineSFX {

  @attrib(customEditor, "AudioEvent")
  @default(WeaponVendingMachineSFX, dev_vending_machine_processing)
  public let m_processing: CName;

  @attrib(customEditor, "AudioEvent")
  public let m_gunFalls: CName;
}

public class VirtualMasterDevice extends Device {
}

public native struct AttackDebugData {

  public native let pointOfViewTransform: WorldTransform;

  public native let projectileHitplaneSpread: Vector4;

  public native let bulletStartPosition: Vector4;
}

public native class Attack_Projectile extends IAttack {

  public final native func PrepareAttack(instigator: wref<GameObject>) -> ref<gameprojectileSpawnerLaunchEvent>;
}

public struct BeamData {

  public let startDirection: Vector4;

  public let endDirection: Vector4;

  public let effect: ref<EffectInstance>;

  public let target: wref<GameObject>;
}

public class GrenadeProximitySensorTargetAcquiredEvent extends Event {
}

public class CuttingGrenadeDespawnEffectsEvent extends Event {
}

public class grenadeSpawner extends WeaponObject {

  public let m_isCombatGadgetActive: Bool;
}

public class MineArmEvent extends Event {
}

public class MineDespawnEvent extends Event {
}

public class PlaceMineEvent extends Event {

  public let m_position: Vector4;

  public let m_normal: Vector4;
}

public class MineDispenser extends WeaponObject {
}

public class drillMachineEvent extends Event {

  public let newTargetDevice: wref<GameObject>;

  public let newIsActive: Bool;
}

public class RewireEvent extends Event {

  public let ownerID: EntityID;

  public let activatorID: EntityID;

  public let executor: wref<GameObject>;

  public let state: EDrillMachineRewireState;

  public let sucess: Bool;
}

public class DrillerScanEvent extends Event {

  public let newIsScanning: Bool;
}

public class DrillScanPostProcessEvent extends Event {

  public let IsEnabled: Bool;
}

public class DrillScanEvent extends Event {

  public let IsScanning: Bool;
}

public class DrillerUIEvent extends Event {

  public let actionChosen: InteractionChoice;

  public let activator: wref<GameObject>;
}

public class RespawnHealthConsumable extends Event {
}

public struct SInspectableClue {

  public edit let clueName: CName;

  public let isScanned: Bool;
}

public class ToggleBulletBendingEvent extends Event {

  public let m_enabled: Bool;
}

public class MagFieldHitEvent extends Event {
}

public native class WeaponCycleTriggerModeEvent extends Event {
}

public native class ForwardEventToProjectileEvent extends Event {

  public native let eventToForward: ref<Event>;
}

public native class SetActiveWeaponEvent extends Event {
}

public native class RemoveActiveWeaponEvent extends Event {
}

public class UpdateWeaponStatsEvent extends Event {
}

public class PlayerWeaponSetupEvent extends Event {
}

public struct SWeakPoints {

  public let weakPointName: CName;

  public let loc_name_key: String;

  public let loc_desc_key: String;
}

public struct SCyberware {

  public let cyberwareName: String;

  public let cyberWareTier: Int32;

  public let loc_name_key: String;

  public let loc_desc_key: String;
}

public struct QuickWheelEndUIStructure {

  public let ChosenItem: QuickSlotCommand;

  public let WasUsed: Bool;

  public let WasAssignedToSlot: Bool;

  public let WheelDirection: EDPadSlot;
}

public struct DPSPackage {

  public let value: Float;

  public let type: gamedataDamageType;
}

public native class CommunityProxyPSPresentEvent extends Event {
}

public class BaseNetworkSystemControllerPS extends MasterControllerPS {
}

public class ClearAllWeaponSlotsRequest extends PlayerScriptableSystemRequest {
}

public struct KeyBindings {

  public persistent let DPAD_UP: TweakDBID;

  public persistent let RB: TweakDBID;
}

public class DelayedComDeviceClose extends Event {
}

public native class PlayerClimbInfo extends IScriptable {

  public native let descResult: ref<GeometryDescriptionResult>;

  public native let obstacleEnd: Vector4;

  public native let climbValid: Bool;

  public native let vaultValid: Bool;
}

public native class AverageNormalResult extends IScriptable {

  public final native func GetAverageNormal() -> Vector4;

  public final native func GetAverageSlope() -> Vector4;

  public final native func GetCentreNormal() -> Vector4;

  public final native func GetCentreSlope() -> Vector4;

  public final native func GetAveragePredictedNormal() -> Vector4;

  public final native func GetAveragePredictedSlope() -> Vector4;

  public final native func GetCentreMaterialName() -> CName;
}

public native class AverageNormalQuery extends IScriptable {

  public final native func SetOwnerPosition(ownerPosition: Vector4) -> Void;

  public final native func SetOwnerDirection(ownerDirection: Vector4) -> Void;

  public final native func SetQueryDirection(queryDirection: Vector4) -> Void;

  public final native func SetQueryDistanceOffset(distanceOffset: Float) -> Void;

  public final native func SetRadius(radius: Float) -> Void;

  public final native func SetFilter(filter: QueryFilter) -> Void;

  public final native func SetQueryLength(queryLength: Float) -> Void;
}

public native class PlayerObstacleSystem extends IScriptable {

  public final native func GetCurrentClimbInfo(instigator: ref<GameObject>) -> ref<PlayerClimbInfo>;

  public final native func GetSlopeInfo(instigator: ref<GameObject>) -> ref<AverageNormalResult>;

  public final native func OnEnterCrouch(instigator: ref<GameObject>) -> Void;

  public final native func OnCoverDeactivation(instigator: ref<GameObject>) -> Void;

  public final native func OnAutoCoverActivation(instigator: ref<GameObject>) -> Void;

  public final native func ManualLeanLeft(instigator: ref<GameObject>) -> Void;

  public final native func ManualLeanRight(instigator: ref<GameObject>) -> Void;

  public final native func GetCoverDirection(instigator: ref<GameObject>) -> gamePlayerCoverDirection;

  public final native func EnableQueriesForOwner(instigator: ref<GameObject>, queryToEnable_1: gamePlayerObstacleSystemQueryType, opt queryToEnable_2: gamePlayerObstacleSystemQueryType, opt queryToEnable_3: gamePlayerObstacleSystemQueryType) -> Void;

  public final native func DisableQueriesForOwner(instigator: ref<GameObject>, queryToDisable_1: gamePlayerObstacleSystemQueryType, opt queryToDisable_2: gamePlayerObstacleSystemQueryType, opt queryToDisable_3: gamePlayerObstacleSystemQueryType) -> Void;
}

public struct PlayerVisionModeControllerInputListeners {

  public let m_buttonHold: Uint32;

  public let m_buttonToggle: Uint32;
}

public static native func OperatorLess(a: Int64, b: Int64) -> Bool;

public abstract class CarriedObject extends OldUpperBodyTransition {
}

public abstract class ComDeviceTransition extends DefaultTransition {
}

public class ConsumableCleanupDecisions extends ConsumableTransitions {
}

public class lookAtPresetGunBaseDecisions extends LookAtPresetBaseDecisions {
}

public class LookAtPresetMeleeBaseDecisions extends LookAtPresetBaseDecisions {
}

public class LookAtPresetMeleeBaseEvents extends LookAtPresetBaseEvents {
}

public class lookAtPresetItemBaseDecisions extends LookAtPresetBaseDecisions {
}

public class lookAtPresetItemBaseEvents extends LookAtPresetBaseEvents {
}

public class UnarmedLookAtEvents extends LookAtPresetBaseEvents {
}

public class AssualtRifleLookAtDecisions extends lookAtPresetGunBaseDecisions {
}

public class AssualtRifleLookAtEvents extends lookAtPresetGunBaseEvents {
}

public class FistsLookAtDecisions extends LookAtPresetMeleeBaseDecisions {
}

public class FistsLookAtEvents extends LookAtPresetMeleeBaseEvents {
}

public class HammerLookAtDecisions extends LookAtPresetMeleeBaseDecisions {
}

public class HammerLookAtEvents extends LookAtPresetMeleeBaseEvents {
}

public class HandgunLookAtDecisions extends lookAtPresetGunBaseDecisions {
}

public class HandgunLookAtEvents extends lookAtPresetGunBaseEvents {
}

public class HmgLookAtDecisions extends lookAtPresetGunBaseDecisions {
}

public class HmgLookAtEvents extends lookAtPresetGunBaseEvents {
}

public class KatanaLookAtDecisions extends LookAtPresetMeleeBaseDecisions {
}

public class KatanaLookAtEvents extends LookAtPresetMeleeBaseEvents {
}

public class KnifeLookAtDecisions extends LookAtPresetMeleeBaseDecisions {
}

public class KnifeLookAtEvents extends LookAtPresetMeleeBaseEvents {
}

public class LmgLookAtDecisions extends lookAtPresetGunBaseDecisions {
}

public class LmgLookAtEvents extends lookAtPresetGunBaseEvents {
}

public class LongBladeLookAtDecisions extends LookAtPresetMeleeBaseDecisions {
}

public class LongBladeLookAtEvents extends LookAtPresetMeleeBaseEvents {
}

public class MeleeLookAtDecisions extends LookAtPresetMeleeBaseDecisions {
}

public class MeleeLookAtEvents extends LookAtPresetMeleeBaseEvents {
}

public class OneHandedClubLookAtDecisions extends LookAtPresetMeleeBaseDecisions {
}

public class OneHandedClubLookAtEvents extends LookAtPresetMeleeBaseEvents {
}

public class PrecisionRifleLookAtDecisions extends lookAtPresetGunBaseDecisions {
}

public class PrecisionRifleLookAtEvents extends lookAtPresetGunBaseEvents {
}

public class RevolverLookAtDecisions extends lookAtPresetGunBaseDecisions {
}

public class RevolverLookAtEvents extends lookAtPresetGunBaseEvents {
}

public class RifleLookAtDecisions extends lookAtPresetGunBaseDecisions {
}

public class RifleLookAtEvents extends lookAtPresetGunBaseEvents {
}

public class ShortBladeLookAtDecisions extends LookAtPresetMeleeBaseDecisions {
}

public class ShortBladeLookAtEvents extends LookAtPresetMeleeBaseEvents {
}

public class ShotgunLookAtDecisions extends lookAtPresetGunBaseDecisions {
}

public class ShotgunLookAtEvents extends lookAtPresetGunBaseEvents {
}

public class ShotgunDualLookAtDecisions extends lookAtPresetGunBaseDecisions {
}

public class ShotgunDualLookAtEvents extends lookAtPresetGunBaseEvents {
}

public class SniperRifleLookAtDecisions extends lookAtPresetGunBaseDecisions {
}

public class SniperRifleLookAtEvents extends lookAtPresetGunBaseEvents {
}

public class SmgLookAtDecisions extends lookAtPresetGunBaseDecisions {
}

public class SmgLookAtEvents extends lookAtPresetGunBaseEvents {
}

public class TwoHandedClubLookAtDecisions extends LookAtPresetMeleeBaseDecisions {
}

public class TwoHandedClubLookAtEvents extends LookAtPresetMeleeBaseEvents {
}

public class GrenadeLookAtDecisions extends lookAtPresetItemBaseDecisions {
}

public class GrenadeLookAtEvents extends lookAtPresetItemBaseEvents {
}

public class SafeCrosshairStateEvents extends BaseCrosshairStateEvents {
}

public class QuickHackCrosshairStateEvents extends BaseCrosshairStateEvents {
}

public struct InstanceDataMappedToReferenceName {

  public let itemHandlingFeatureName: CName;

  public let attachmentSlot: String;
}

public struct EFirstEquipData {

  public persistent let weaponID: TweakDBID;

  public persistent let hasPlayedFirstEquip: Bool;
}

public class CompletionOfFirstEquipRequest extends ScriptableSystemRequest {

  public let weaponID: TweakDBID;
}

public abstract class EquipmentBaseDecisions extends EquipmentBaseTransition {
}

public abstract class EquipmentBaseEvents extends EquipmentBaseTransition {
}

public class UnequippedWaitingForExternalFactorsEvents extends EquipmentBaseEvents {
}

public class SelfRemovalDecisions extends StateFunctor {
}

public class SceneTierInitialEvents extends SceneTierAbstract {
}

public class LadderEnterContextEvents extends InputContextTransitionEvents {
}

public class LocomotionSceneInitData extends IScriptable {

  public let previousLocomotionState: Int32;
}

public class PlayerStateMachineTestFiveInput extends IScriptable {

  public let counter: Int32;
}

public class PlayerStateMachineTestFourInput extends IScriptable {

  public let counter: Int32;
}

public class PlayerStateMachineTestFourOutput extends IScriptable {

  public let counter: Int32;
}

public class PlayerStateMachineTestThreeOutput extends IScriptable {

  public let counter: Int32;
}

public class LeftHandCyberwareEquippedEvent extends Event {
}

public class ChargeStartedEvent extends Event {
}

public class ChargeEndedEvent extends Event {
}

public class LoopStartedEvent extends Event {
}

public class LoopEndedEvent extends Event {
}

public class QuickActionEvent extends Event {
}

public class LeftHandCyberwareCatchActionDecisions extends LeftHandCyberwareActionAbstractDecisions {
}

public class LeftHandCyberwareUnequippedEvent extends Event {
}

public class SwimmingForceFreezeEvents extends LocomotionSwimmingEvents {
}

public class TakedownExecuteTakedownDecisions extends LocomotionTakedownDecisions {
}

public static native func OperatorAdd(a: Vector4, b: Float) -> Vector4;

public class SuperheroFallDecisions extends LocomotionAirDecisions {
}

public class RegularLandDecisions extends AbstractLandDecisions {
}

public class HardLandDecisions extends FailedLandingAbstractDecisions {
}

public class VeryHardLandDecisions extends FailedLandingAbstractDecisions {
}

public class DeathLandDecisions extends FailedLandingAbstractDecisions {
}

public class StandLowGravityDecisions extends LocomotionGroundDecisions {
}

public class LocomotionAirLowGravityEvents extends LocomotionAirEvents {
}

public class RegularLandLowGravityDecisions extends AbstractLandDecisions {
}

public class IdleTier4Decisions extends LocomotionGroundDecisions {
}

public class IdleTier5Decisions extends LocomotionGroundDecisions {
}

public class OnlyVehicleEvents extends QuickSlotsReadyEvents {
}

public abstract class StaminaEventsTransition extends StaminaTransition {
}

public class TurretRipOffDecisions extends TurretTransition {
}

public class TurretEndDecisions extends TurretTransition {
}

public class DeathExitingEvents extends ImmediateExitWithForceEvents {
}

public class WaitingForSceneEvents extends VehicleTransition {
}

public struct QuickMeleeAttackData {

  public let attackGameEffectDelay: Float;

  public let attackGameEffectDuration: Float;

  public let attackRange: Float;

  public let forcePlayerToStand: Bool;

  public let shouldAdjust: Bool;

  public let adjustmentRange: Float;

  public let adjustmentDuration: Float;

  public let adjustmentRadius: Float;

  public let adjustmentCurve: CName;

  public let cooldown: Float;

  public let duration: Float;
}

public class ProjectileLauncherRoundDelayEvent extends Event {
}

public class ProjectileLauncherRoundDetonationDelayEvent extends Event {
}

public class ProjectileLauncherRoundBreachEvent extends Event {
}

public class ProjectileLauncherRoundTickEvent extends TickableEvent {
}

public native class NetrunnerPrototypeSpawnRequestEvent extends Event {

  public final native func Create(whatToSpawn: CName, whereToSpawn: Vector4, scale: Vector4, colorIndex: Uint8) -> Void;
}

public native class NetrunnerPrototypeSpawnCompletedEvent extends Event {

  public native let spawnedObject: wref<GameObject>;
}

public native class NetrunnerPrototypeDespawnEvent extends Event {
}

public native class NetrunnerPrototypeNetworkNode extends GameObject {

  public final native func ChangeHighlightColorIndex(colorIndex: Uint8, opt componentName: CName) -> Void;
}

public class JamWeaponE3HackEvent extends Event {
}

public native class entRagdollPutToSleepEvent extends Event {
}

public class QuickHackEvent extends Event {
}

public struct PuppetActionContext {

  public let requesterID: EntityID;

  public let requestType: gamedeviceRequestType;
}

public class DrawBetweenEntitiesEvent extends Event {

  public let shouldDraw: Bool;

  public let fxResource: FxResource;

  public let revealMaster: Bool;

  public let revealSlave: Bool;

  public let masterEntity: EntityID;

  public let slaveEntity: EntityID;
}

public class SecurityBreachPuppetNotificationEvent extends SecuritySystemInput {
}

public native struct AICommandNodeFunction {

  public native let order: Uint32;

  public native let nodeType: CName;

  public native let commandCategory: CName;

  public native let friendlyName: String;

  public native let paramsType: CName;

  public native let nodeColor: Color;
}

public native struct questPaymentConditionData {

  public native let isInverted: Bool;

  public native let paymentItemId: ItemID;

  public native let paymentAmount: Uint32;
}

public native struct RandomizationDataEntry {

  public native let id: String;

  public native let templateName: CName;

  public native let probability: Float;

  public native let transform: Transform;
}

public abstract native class IRandomizationSupervisor extends IScriptable {
}

public native class ScriptedRandomizationSupervisor extends IRandomizationSupervisor {
}

public native class VoicesetComponent extends GameComponent {

  public final native const func IsGenericTalkInteractionEnabled() -> Bool;
}

public struct EffectExecutor_SlashEffect_Entry {

  public edit let m_attackNumber: Int32;

  public edit const let m_effectNames: array<CName>;
}

public native class BluelineSelectedRequest extends PlayerScriptableSystemRequest {
}

public class UnlockAllAchievementsRequest extends ScriptableSystemRequest {
}

public class ResetLightHitsReceivedRequest extends ScriptableSystemRequest {
}

public class ResetStrongHitsReceivedRequest extends ScriptableSystemRequest {
}

public class ResetFinalComboHitsReceivedRequest extends ScriptableSystemRequest {
}

public class ResetBlockAttackHitsReceivedRequest extends ScriptableSystemRequest {
}

public class ResetBlockedHitsRequest extends ScriptableSystemRequest {
}

public class ResetDeflectedHitsRequest extends ScriptableSystemRequest {
}

public class ResetGuardBreakRequest extends ScriptableSystemRequest {
}

public struct GrenadeQuickhackKillEntry {

  public let source: wref<GameObject>;

  public let targets: array<wref<GameObject>>;

  public let timestamps: array<Float>;
}

public class InstallCyberwareRequest extends EquipRequest {
}

public class UninstallCyberwareRequest extends UnequipRequest {
}

public class EquipmentUIBBRequest extends PlayerScriptableSystemRequest {
}

public class ProcessVisualTags extends PlayerScriptableSystemRequest {

  public let itemTDBID: TweakDBID;
}

public class LevelUpdateEvent extends Event {

  public let lvl: Int32;

  public let type: gamedataProficiencyType;

  public let devPoints: array<SDevelopmentPoints>;
}

public class ActivePerkChangedEvent extends Event {

  public let perkArea: gamedataPerkArea;

  public let perkType: gamedataPerkType;
}

public class ClearSubCharacterRequest extends ScriptableSystemRequest {
}

public class SpawnSubCharacterRequest extends SpawnUniqueSubCharacterRequest {
}

public class DespawnSubCharacterRequest extends DespawnUniqueSubCharacterRequest {
}

public class customGameNotificationDataSet extends inkGameNotificationData {

  public let customText: CName;

  public let testBool: Bool;
}

public static native func StrFindLast(const str: script_ref<String>, const match: script_ref<String>) -> Int32;

public class SampleDeviceClass extends GameObject {
}

public class SampleBumpEvent extends Event {

  @default(SampleBumpEvent, 1)
  public let m_amount: Int32;
}

public class PSD_Master extends DeviceComponent {
}

public class PSD_MasterPS extends DeviceComponentPS {
}

public static native func Cast(a: GlobalNodeRef) -> PersistentID;

public struct at_uiWidgetData {

  public let widgetATID: String;

  public let layerType: inkELayerType;

  public let parentGameController: CName;
}

public native class at_uiUserData extends inkUserData {

  public native let atid: String;
}

public struct FUNC_TEST_Container {

  public edit let BasePanel: inkBasePanelRef;

  public edit let Compound: inkCompoundRef;

  public edit let Leaf: inkLeafRef;

  public edit let Widget: inkWidgetRef;
}

public struct FUNC_TEST_Container_2 {

  public edit let FloatBox: Float;

  public edit let IntBox: Int32;

  public edit let BoolBox: Bool;

  public edit let NameBox: CName;

  public edit let StringBox: String;

  public edit let CNameBox: CName;

  public edit let TweakBox: TweakDBID;
}

public class FUNC_TEST_inkGameController extends inkGameController {

  public edit let Canvas: inkCanvasRef;

  public edit let HorizontalPanel: inkHorizontalPanelRef;

  public edit let VerticalPanel: inkVerticalPanelRef;

  public edit let Flex: inkFlexRef;

  public edit let UniformGrid: inkUniformGridRef;

  public edit let Text: inkTextRef;

  public edit let TextInput: inkTextInputRef;

  public edit let Image: inkImageRef;

  public edit let Video: inkVideoRef;

  public edit let Border: inkBorderRef;

  public edit let Rectangle: inkRectangleRef;

  public edit let Circle: inkCircleRef;

  public edit let Shape: inkShapeRef;

  public edit let BasicInputFields: FUNC_TEST_Container_2;

  public edit let AdditionalFields: FUNC_TEST_Container;
}

public class FunctionalTestsTimeChangeEvent extends Event {

  public let listenerId: Uint32;
}

public static native func AreDebugContextsEnabled() -> Bool;

public static native func EnsureFailure(const message: script_ref<String>) -> Bool;

public static native func Cast(id: BlackboardID_Bool) -> BlackboardID;

public static native func Cast(id: BlackboardID_Int) -> BlackboardID;

public static native func Cast(id: BlackboardID_Uint) -> BlackboardID;

public static native func Cast(id: BlackboardID_Float) -> BlackboardID;

public static native func Cast(id: BlackboardID_Name) -> BlackboardID;

public static native func Cast(id: BlackboardID_Vector2) -> BlackboardID;

public static native func Cast(id: BlackboardID_Vector4) -> BlackboardID;

public static native func Cast(id: BlackboardID_Quat) -> BlackboardID;

public static native func Cast(id: BlackboardID_Entity) -> BlackboardID;

public static native func Cast(id: BlackboardID_String) -> BlackboardID;

public static native func Cast(id: BlackboardID_EulerAngles) -> BlackboardID;

public static native func Cast(id: BlackboardID_EntityID) -> BlackboardID;

public static native func Cast(id: BlackboardID_Variant) -> BlackboardID;

public static native func OperatorAdd(a: EngineTime, b: EngineTime) -> EngineTime;

public static native func OperatorAssignAdd(out a: EngineTime, b: EngineTime) -> EngineTime;

public static native func OperatorAssignAdd(out a: EngineTime, b: Float) -> EngineTime;

public static native func OperatorSubtract(a: EngineTime, b: Float) -> EngineTime;

public static native func OperatorAssignSubtract(out a: EngineTime, b: EngineTime) -> EngineTime;

public static native func OperatorAssignSubtract(out a: EngineTime, b: Float) -> EngineTime;

public static native func OperatorMultiply(a: EngineTime, b: Float) -> EngineTime;

public static native func OperatorAssignMultiply(out a: EngineTime, b: Float) -> EngineTime;

public static native func OperatorDivide(a: EngineTime, b: Float) -> EngineTime;

public static native func OperatorAssignDivide(out a: EngineTime, b: Float) -> EngineTime;

public static native func OperatorEqual(a: EngineTime, b: EngineTime) -> Bool;

public static native func OperatorNotEqual(a: EngineTime, b: EngineTime) -> Bool;

public static native func OperatorGreaterEqual(a: EngineTime, b: EngineTime) -> Bool;

public static native func OperatorLess(a: EngineTime, b: EngineTime) -> Bool;

public static native func OperatorGreaterEqual(a: EngineTime, b: Float) -> Bool;

public static native func OperatorLessEqual(a: EngineTime, b: Float) -> Bool;

public static native func OperatorAdd(a: GameTime, b: Int32) -> GameTime;

public static native func OperatorSubtract(a: GameTime, b: Int32) -> GameTime;

public static native func OperatorMultiply(a: GameTime, b: Float) -> GameTime;

public static native func OperatorDivide(a: GameTime, b: Float) -> GameTime;

public static native func OperatorNeg(a: GameTime) -> GameTime;

public static native func OperatorAssignSubtract(out a: GameTime, b: GameTime) -> GameTime;

public static native func OperatorAssignAdd(out a: GameTime, b: Int32) -> GameTime;

public static native func OperatorAssignSubtract(out a: GameTime, b: Int32) -> GameTime;

public static native func OperatorAssignMultiply(out a: GameTime, b: Float) -> GameTime;

public static native func OperatorAssignDivide(out a: GameTime, b: Float) -> GameTime;

public static native func StrCmp(const str: script_ref<String>, const with: script_ref<String>, opt length: Int32, opt noCase: Bool) -> Int32;

public static native func StrSplit(const str: script_ref<String>, const divider: script_ref<String>, opt includeEmpty: Bool) -> array<String>;

public static native func StrBeforeLast(const str: script_ref<String>, const match: script_ref<String>) -> String;

public static native func StrAfterFirst(const str: script_ref<String>, const match: script_ref<String>) -> String;

public static native func StringToUint64(const value: script_ref<String>, opt defValue: Uint64) -> Uint64;

public static native func OperatorAssignAdd(out a: TweakDBID, b: TweakDBID) -> TweakDBID;

public static native func OperatorLess(a: EntityID, b: EntityID) -> Bool;

public static native func Cast(a: GlobalNodeID) -> PersistentID;

public static native func GetLookAtTransitionSpeed(style: animLookAtStyle) -> Float;

public static native func GetLookAtLimits(softLimitDegreesType: animLookAtLimitDegreesType, hardLimitDegreesType: animLookAtLimitDegreesType, hardLimitDistanceType: animLookAtLimitDistanceType, backLimitDegreesType: animLookAtLimitDegreesType) -> LookAtLimits;

public static native func OperatorAnd(a: TSFMV, b: TSFMV) -> TSFMV;

public static native func TSF_Or(tsf1: TargetSearchFilter, tsf2: TargetSearchFilter, opt tsf3: TargetSearchFilter, opt tsf4: TargetSearchFilter) -> TargetSearchFilter;

public static native func AngleApproach(target: Float, cur: Float, step: Float) -> Float;

public static native func Cast(a: Int8) -> Int16;

public static native func Cast(a: Int8) -> Int32;

public static native func Cast(a: Int8) -> Int64;

public static native func Cast(a: Int8) -> Uint8;

public static native func Cast(a: Int8) -> Uint16;

public static native func Cast(a: Int8) -> Uint32;

public static native func Cast(a: Int8) -> Uint64;

public static native func Cast(a: Int8) -> Float;

public static native func Cast(a: Int8) -> Double;

public static native func Cast(a: Int8) -> Bool;

public static native func Cast(a: Int16) -> Int8;

public static native func Cast(a: Int16) -> Int32;

public static native func Cast(a: Int16) -> Int64;

public static native func Cast(a: Int16) -> Uint8;

public static native func Cast(a: Int16) -> Uint16;

public static native func Cast(a: Int16) -> Uint32;

public static native func Cast(a: Int16) -> Uint64;

public static native func Cast(a: Int16) -> Float;

public static native func Cast(a: Int16) -> Double;

public static native func Cast(a: Int16) -> Bool;

public static native func Cast(a: Int32) -> Int8;

public static native func Cast(a: Int32) -> Int16;

public static native func Cast(a: Int32) -> Double;

public static native func Cast(a: Int64) -> Int8;

public static native func Cast(a: Int64) -> Int16;

public static native func Cast(a: Int64) -> Uint8;

public static native func Cast(a: Int64) -> Uint16;

public static native func Cast(a: Int64) -> Uint32;

public static native func Cast(a: Int64) -> Uint64;

public static native func Cast(a: Int64) -> Float;

public static native func Cast(a: Int64) -> Double;

public static native func Cast(a: Uint8) -> Int8;

public static native func Cast(a: Uint8) -> Int16;

public static native func Cast(a: Uint8) -> Int64;

public static native func Cast(a: Uint8) -> Uint16;

public static native func Cast(a: Uint8) -> Uint32;

public static native func Cast(a: Uint8) -> Uint64;

public static native func Cast(a: Uint8) -> Double;

public static native func Cast(a: Uint8) -> Bool;

public static native func Cast(a: Uint16) -> Int8;

public static native func Cast(a: Uint16) -> Int16;

public static native func Cast(a: Uint16) -> Int64;

public static native func Cast(a: Uint16) -> Uint8;

public static native func Cast(a: Uint16) -> Uint64;

public static native func Cast(a: Uint16) -> Float;

public static native func Cast(a: Uint16) -> Double;

public static native func Cast(a: Uint16) -> Bool;

public static native func Cast(a: Uint32) -> Int8;

public static native func Cast(a: Uint32) -> Int16;

public static native func Cast(a: Uint32) -> Int64;

public static native func Cast(a: Uint32) -> Uint8;

public static native func Cast(a: Uint32) -> Uint16;

public static native func Cast(a: Uint32) -> Double;

public static native func Cast(a: Uint64) -> Int8;

public static native func Cast(a: Uint64) -> Int16;

public static native func Cast(a: Uint64) -> Int64;

public static native func Cast(a: Uint64) -> Uint8;

public static native func Cast(a: Uint64) -> Uint16;

public static native func Cast(a: Uint64) -> Float;

public static native func Cast(a: Uint64) -> Double;

public static native func Cast(a: Float) -> Int8;

public static native func Cast(a: Float) -> Int16;

public static native func Cast(a: Float) -> Int64;

public static native func Cast(a: Float) -> Uint8;

public static native func Cast(a: Float) -> Uint16;

public static native func Cast(a: Float) -> Double;

public static native func Cast(a: Double) -> Int8;

public static native func Cast(a: Double) -> Int16;

public static native func Cast(a: Double) -> Int32;

public static native func Cast(a: Double) -> Int64;

public static native func Cast(a: Double) -> Uint8;

public static native func Cast(a: Double) -> Uint16;

public static native func Cast(a: Double) -> Uint32;

public static native func Cast(a: Double) -> Uint64;

public static native func Cast(a: Double) -> Bool;

public static native func ReinterpretIntAsFloat(a: Int32) -> Float;

public static native func OperatorMultiply(a: Matrix, b: Matrix) -> Matrix;

public static native func OperatorAdd(a: Int8, b: Int8) -> Int8;

public static native func OperatorSubtract(a: Int8, b: Int8) -> Int8;

public static native func OperatorMultiply(a: Int8, b: Int8) -> Int8;

public static native func OperatorDivide(a: Int8, b: Int8) -> Int8;

public static native func OperatorModulo(a: Int8, b: Int8) -> Int8;

public static native func OperatorNeg(a: Int8) -> Int8;

public static native func OperatorAnd(a: Int8, b: Int8) -> Int8;

public static native func OperatorOr(a: Int8, b: Int8) -> Int8;

public static native func OperatorXor(a: Int8, b: Int8) -> Int8;

public static native func OperatorBitNot(a: Int8) -> Int8;

public static native func OperatorEqual(a: Int8, b: Int8) -> Bool;

public static native func OperatorNotEqual(a: Int8, b: Int8) -> Bool;

public static native func OperatorLess(a: Int8, b: Int8) -> Bool;

public static native func OperatorLessEqual(a: Int8, b: Int8) -> Bool;

public static native func OperatorGreater(a: Int8, b: Int8) -> Bool;

public static native func OperatorGreaterEqual(a: Int8, b: Int8) -> Bool;

public static native func OperatorAssignAdd(out a: Int8, b: Int8) -> Int8;

public static native func OperatorAssignSubtract(out a: Int8, b: Int8) -> Int8;

public static native func OperatorAssignMultiply(out a: Int8, b: Int8) -> Int8;

public static native func OperatorAssignDivide(out a: Int8, b: Int8) -> Int8;

public static native func OperatorAssignOr(out a: Int8, b: Int8) -> Int8;

public static native func OperatorAssignAnd(out a: Int8, b: Int8) -> Int8;

public static native func OperatorAdd(a: Uint8, b: Uint8) -> Uint8;

public static native func OperatorSubtract(a: Uint8, b: Uint8) -> Uint8;

public static native func OperatorMultiply(a: Uint8, b: Uint8) -> Uint8;

public static native func OperatorDivide(a: Uint8, b: Uint8) -> Uint8;

public static native func OperatorModulo(a: Uint8, b: Uint8) -> Uint8;

public static native func OperatorAnd(a: Uint8, b: Uint8) -> Uint8;

public static native func OperatorOr(a: Uint8, b: Uint8) -> Uint8;

public static native func OperatorXor(a: Uint8, b: Uint8) -> Uint8;

public static native func OperatorBitNot(a: Uint8) -> Uint8;

public static native func OperatorNotEqual(a: Uint8, b: Uint8) -> Bool;

public static native func OperatorLess(a: Uint8, b: Uint8) -> Bool;

public static native func OperatorLessEqual(a: Uint8, b: Uint8) -> Bool;

public static native func OperatorGreaterEqual(a: Uint8, b: Uint8) -> Bool;

public static native func OperatorAssignMultiply(out a: Uint8, b: Uint8) -> Uint8;

public static native func OperatorAssignDivide(out a: Uint8, b: Uint8) -> Uint8;

public static native func OperatorAssignOr(out a: Uint8, b: Uint8) -> Uint8;

public static native func OperatorAssignAnd(out a: Uint8, b: Uint8) -> Uint8;

public static native func OperatorAdd(a: Int16, b: Int16) -> Int16;

public static native func OperatorSubtract(a: Int16, b: Int16) -> Int16;

public static native func OperatorMultiply(a: Int16, b: Int16) -> Int16;

public static native func OperatorDivide(a: Int16, b: Int16) -> Int16;

public static native func OperatorModulo(a: Int16, b: Int16) -> Int16;

public static native func OperatorNeg(a: Int16) -> Int16;

public static native func OperatorAnd(a: Int16, b: Int16) -> Int16;

public static native func OperatorOr(a: Int16, b: Int16) -> Int16;

public static native func OperatorXor(a: Int16, b: Int16) -> Int16;

public static native func OperatorBitNot(a: Int16) -> Int16;

public static native func OperatorEqual(a: Int16, b: Int16) -> Bool;

public static native func OperatorNotEqual(a: Int16, b: Int16) -> Bool;

public static native func OperatorLess(a: Int16, b: Int16) -> Bool;

public static native func OperatorLessEqual(a: Int16, b: Int16) -> Bool;

public static native func OperatorGreater(a: Int16, b: Int16) -> Bool;

public static native func OperatorGreaterEqual(a: Int16, b: Int16) -> Bool;

public static native func OperatorAssignAdd(out a: Int16, b: Int16) -> Int16;

public static native func OperatorAssignSubtract(out a: Int16, b: Int16) -> Int16;

public static native func OperatorAssignMultiply(out a: Int16, b: Int16) -> Int16;

public static native func OperatorAssignDivide(out a: Int16, b: Int16) -> Int16;

public static native func OperatorAssignOr(out a: Int16, b: Int16) -> Int16;

public static native func OperatorAssignAnd(out a: Int16, b: Int16) -> Int16;

public static native func OperatorMultiply(a: Uint16, b: Uint16) -> Uint16;

public static native func OperatorDivide(a: Uint16, b: Uint16) -> Uint16;

public static native func OperatorModulo(a: Uint16, b: Uint16) -> Uint16;

public static native func OperatorAnd(a: Uint16, b: Uint16) -> Uint16;

public static native func OperatorOr(a: Uint16, b: Uint16) -> Uint16;

public static native func OperatorXor(a: Uint16, b: Uint16) -> Uint16;

public static native func OperatorBitNot(a: Uint16) -> Uint16;

public static native func OperatorEqual(a: Uint16, b: Uint16) -> Bool;

public static native func OperatorNotEqual(a: Uint16, b: Uint16) -> Bool;

public static native func OperatorLess(a: Uint16, b: Uint16) -> Bool;

public static native func OperatorLessEqual(a: Uint16, b: Uint16) -> Bool;

public static native func OperatorGreater(a: Uint16, b: Uint16) -> Bool;

public static native func OperatorGreaterEqual(a: Uint16, b: Uint16) -> Bool;

public static native func OperatorAssignAdd(out a: Uint16, b: Uint16) -> Uint16;

public static native func OperatorAssignMultiply(out a: Uint16, b: Uint16) -> Uint16;

public static native func OperatorAssignDivide(out a: Uint16, b: Uint16) -> Uint16;

public static native func OperatorAssignOr(out a: Uint16, b: Uint16) -> Uint16;

public static native func OperatorAssignAnd(out a: Uint16, b: Uint16) -> Uint16;

public static native func OperatorAnd(a: Int32, b: Int32) -> Int32;

public static native func OperatorOr(a: Int32, b: Int32) -> Int32;

public static native func OperatorXor(a: Int32, b: Int32) -> Int32;

public static native func OperatorBitNot(a: Int32) -> Int32;

public static native func OperatorAssignDivide(out a: Int32, b: Int32) -> Int32;

public static native func OperatorAssignOr(out a: Int32, b: Int32) -> Int32;

public static native func OperatorAssignAnd(out a: Int32, b: Int32) -> Int32;

public static native func OperatorSubtract(a: Uint32, b: Uint32) -> Uint32;

public static native func OperatorMultiply(a: Uint32, b: Uint32) -> Uint32;

public static native func OperatorDivide(a: Uint32, b: Uint32) -> Uint32;

public static native func OperatorAssignMultiply(out a: Uint32, b: Uint32) -> Uint32;

public static native func OperatorAssignDivide(out a: Uint32, b: Uint32) -> Uint32;

public static native func OperatorAssignOr(out a: Uint32, b: Uint32) -> Uint32;

public static native func OperatorAssignAnd(out a: Uint32, b: Uint32) -> Uint32;

public static native func OperatorAdd(a: Int64, b: Int64) -> Int64;

public static native func OperatorDivide(a: Int64, b: Int64) -> Int64;

public static native func OperatorModulo(a: Int64, b: Int64) -> Int64;

public static native func OperatorNeg(a: Int64) -> Int64;

public static native func OperatorOr(a: Int64, b: Int64) -> Int64;

public static native func OperatorXor(a: Int64, b: Int64) -> Int64;

public static native func OperatorBitNot(a: Int64) -> Int64;

public static native func OperatorEqual(a: Int64, b: Int64) -> Bool;

public static native func OperatorNotEqual(a: Int64, b: Int64) -> Bool;

public static native func OperatorLessEqual(a: Int64, b: Int64) -> Bool;

public static native func OperatorGreaterEqual(a: Int64, b: Int64) -> Bool;

public static native func OperatorAssignAdd(out a: Int64, b: Int64) -> Int64;

public static native func OperatorAssignSubtract(out a: Int64, b: Int64) -> Int64;

public static native func OperatorAssignMultiply(out a: Int64, b: Int64) -> Int64;

public static native func OperatorAssignDivide(out a: Int64, b: Int64) -> Int64;

public static native func OperatorAssignOr(out a: Int64, b: Int64) -> Int64;

public static native func OperatorAssignAnd(out a: Int64, b: Int64) -> Int64;

public static native func OperatorAdd(a: Uint64, b: Uint64) -> Uint64;

public static native func OperatorMultiply(a: Uint64, b: Uint64) -> Uint64;

public static native func OperatorDivide(a: Uint64, b: Uint64) -> Uint64;

public static native func OperatorModulo(a: Uint64, b: Uint64) -> Uint64;

public static native func OperatorXor(a: Uint64, b: Uint64) -> Uint64;

public static native func OperatorLessEqual(a: Uint64, b: Uint64) -> Bool;

public static native func OperatorGreaterEqual(a: Uint64, b: Uint64) -> Bool;

public static native func OperatorAssignAdd(out a: Uint64, b: Uint64) -> Uint64;

public static native func OperatorAssignSubtract(out a: Uint64, b: Uint64) -> Uint64;

public static native func OperatorAssignMultiply(out a: Uint64, b: Uint64) -> Uint64;

public static native func OperatorAssignDivide(out a: Uint64, b: Uint64) -> Uint64;

public static native func OperatorAssignOr(out a: Uint64, b: Uint64) -> Uint64;

public static native func OperatorAssignAnd(out a: Uint64, b: Uint64) -> Uint64;

public static native func OperatorAdd(a: Double, b: Double) -> Double;

public static native func OperatorSubtract(a: Double, b: Double) -> Double;

public static native func OperatorMultiply(a: Double, b: Double) -> Double;

public static native func OperatorDivide(a: Double, b: Double) -> Double;

public static native func OperatorModulo(a: Double, b: Double) -> Double;

public static native func OperatorNeg(a: Double) -> Double;

public static native func OperatorEqual(a: Double, b: Double) -> Bool;

public static native func OperatorNotEqual(a: Double, b: Double) -> Bool;

public static native func OperatorLess(a: Double, b: Double) -> Bool;

public static native func OperatorLessEqual(a: Double, b: Double) -> Bool;

public static native func OperatorGreater(a: Double, b: Double) -> Bool;

public static native func OperatorGreaterEqual(a: Double, b: Double) -> Bool;

public static native func OperatorAssignAdd(out a: Double, b: Double) -> Double;

public static native func OperatorAssignSubtract(out a: Double, b: Double) -> Double;

public static native func OperatorAssignMultiply(out a: Double, b: Double) -> Double;

public static native func OperatorAssignDivide(out a: Double, b: Double) -> Double;

public static native func OperatorNeg(a: Quaternion) -> Quaternion;

public static native func OperatorAdd(a: Quaternion, b: Quaternion) -> Quaternion;

public static native func OperatorSubtract(a: Quaternion, b: Quaternion) -> Quaternion;

public static native func OperatorMultiply(a: Quaternion, b: Float) -> Quaternion;

public static native func OperatorDivide(a: Quaternion, b: Float) -> Quaternion;

public static native func OperatorAssignAdd(out a: Quaternion, b: Quaternion) -> Quaternion;

public static native func OperatorAssignSubtract(out a: Quaternion, b: Quaternion) -> Quaternion;

public static native func OperatorAssignMultiply(out a: Quaternion, b: Float) -> Quaternion;

public static native func OperatorAssignDivide(out a: Quaternion, b: Float) -> Quaternion;

public static native func AsinF(a: Float) -> Float;

public static native func ExpF(a: Float) -> Float;

public static native func CalcSeed(object: ref<IScriptable>) -> Int32;

public static native func OperatorDivide(a: Vector4, b: Vector4) -> Vector4;

public static native func OperatorAssignMultiply(out a: Vector4, b: Vector4) -> Vector4;

public static native func OperatorAssignDivide(out a: Vector4, b: Vector4) -> Vector4;

public static native func OperatorSubtract(a: Vector4, b: Float) -> Vector4;

public static native func OperatorAssignAdd(out a: Vector4, b: Float) -> Vector4;

public static native func OperatorAssignSubtract(out a: Vector4, b: Float) -> Vector4;

public static native func OperatorAssignDivide(out a: Vector4, b: Float) -> Vector4;

public static native func OperatorSubtract(a: WorldPosition, b: Vector4) -> WorldPosition;

public static native func OperatorAdd(a: WorldPosition, b: WorldPosition) -> WorldPosition;

public static native func OperatorSubtract(a: WorldPosition, b: WorldPosition) -> Vector4;

public static native func OperatorAssignAdd(out a: WorldPosition, b: Vector4) -> WorldPosition;

public static native func OperatorAssignSubtract(out a: WorldPosition, b: Vector4) -> WorldPosition;

public static native func OperatorAssignAdd(out a: WorldPosition, b: WorldPosition) -> WorldPosition;

public static native func OperatorAssignSubtract(out a: WorldPosition, b: WorldPosition) -> WorldPosition;

public static native func OperatorNeg(b: WorldPosition) -> WorldPosition;

public static native func OperatorMultiply(xform: Transform, v: Vector4) -> Vector4;

public static native func OperatorMultiply(xform1: Transform, xform2: Transform) -> Transform;

public static native func StatsEffectsEnumToTDBID(statsEffectsEnum: Int32) -> TweakDBID;

public static native func DebugBreak() -> Void;

public static native func EnumGetMin(type: CName) -> Int64;

public static native func CompareArrayNameContents(arr1: array<CName>, arr2: array<CName>) -> Bool;

public static native func PvdClientConnect(const server: script_ref<String>) -> Void;

public static native func PvdFileDumpConnect(const filePath: script_ref<String>) -> Void;

public static native func GetGameObjectsFromSpawnerEntityID(entityID: EntityID, communityEntryNames: array<CName>, gameInstance: GameInstance, out outGameObjects: array<ref<GameObject>>) -> Void;

public static native func GetScreenPosition(widget: wref<inkWidget>) -> RectF;

public static native func GetLocalizedTextGanderDepened(const textKey: script_ref<String>, variantIsFemale: Bool) -> String;

public static native func GetLocalizedTextGanderDepenedByKey(hashKey: CName, variantIsFemale: Bool) -> String;

public static native func UnicodeStringEqual(const str: script_ref<String>, const str2: script_ref<String>) -> Bool;

public static native func OperatorOr(a: DMGPipelineType, b: DMGPipelineType) -> DMGPipelineType;

public static native func OperatorAssignMultiply(out a: ref<Damage>, b: ref<Damage>) -> ref<Damage>;

public static native func OperatorAssignAdd(out a: ref<Damage>, b: Float) -> ref<Damage>;

public static native func OperatorAssignMultiply(out a: ref<Damage>, b: Float) -> ref<Damage>;

public static native func FTLogWarning(const value: script_ref<String>) -> Void;

public static native func FTLogError(const value: script_ref<String>) -> Void;
